From a2f6560581cc86a3ac3f4af61b6f879fde75935a Mon Sep 17 00:00:00 2001
From: Mao Han <maohan.mh@alibaba-inc.com>
Date: Wed, 6 Jan 2021 16:19:15 +0800
Subject: [PATCH] Add riscv64 support for bionic

This patch include build infrastructure, syscall, string functions,
float, linker and someother support for riscv64. Tested with
bionic-unit-tests and got 99% case passed.

Signed-off-by: Mao Han <han_mao@linux.alibaba.com>
Signed-off-by: Lifang Xia <lifang_xia@linux.alibaba.com>
Change-Id: Ic10cf382f35b14f6e1f64ab8780d62a11db4b5ba
---
 libc/Android.bp                               |  85 ++++++++
 libc/SECCOMP_BLACKLIST_APP.TXT                |  12 +-
 libc/SECCOMP_WHITELIST_COMMON.TXT             |  13 +-
 libc/SYSCALLS.TXT                             |  77 +++----
 libc/arch-common/bionic/crtbegin.c            |   2 +
 libc/arch-riscv64/bionic/__bionic_clone.S     |  64 ++++++
 libc/arch-riscv64/bionic/__set_tls.c          |  33 +++
 .../bionic/_exit_with_stack_teardown.S        |  41 ++++
 libc/arch-riscv64/bionic/setjmp.S             | 204 ++++++++++++++++++
 libc/arch-riscv64/bionic/syscall.S            |  47 ++++
 libc/arch-riscv64/bionic/vfork.S              |  48 +++++
 libc/arch-riscv64/generic/bionic/memcmp.c     |   7 +
 libc/arch-riscv64/generic/bionic/memcpy.c     |  25 +++
 libc/arch-riscv64/generic/bionic/memset.c     |  19 ++
 libc/arch-riscv64/generic/bionic/strchr.c     |   9 +
 libc/arch-riscv64/generic/bionic/strcmp.c     |   8 +
 libc/arch-riscv64/generic/bionic/strlen.c     |   7 +
 libc/arch-riscv64/generic/bionic/strnlen.c    |   7 +
 .../syscalls/___clock_nanosleep.S             |  17 ++
 libc/arch-riscv64/syscalls/___close.S         |  17 ++
 libc/arch-riscv64/syscalls/___faccessat.S     |  17 ++
 libc/arch-riscv64/syscalls/___fchmod.S        |  17 ++
 libc/arch-riscv64/syscalls/___fchmodat.S      |  17 ++
 libc/arch-riscv64/syscalls/___fgetxattr.S     |  17 ++
 libc/arch-riscv64/syscalls/___flistxattr.S    |  17 ++
 libc/arch-riscv64/syscalls/___fsetxattr.S     |  17 ++
 libc/arch-riscv64/syscalls/___mremap.S        |  17 ++
 .../syscalls/___rt_sigqueueinfo.S             |  17 ++
 libc/arch-riscv64/syscalls/__accept4.S        |  17 ++
 libc/arch-riscv64/syscalls/__brk.S            |  17 ++
 libc/arch-riscv64/syscalls/__clock_getres.S   |  17 ++
 libc/arch-riscv64/syscalls/__clock_gettime.S  |  17 ++
 libc/arch-riscv64/syscalls/__connect.S        |  17 ++
 libc/arch-riscv64/syscalls/__epoll_pwait.S    |  17 ++
 libc/arch-riscv64/syscalls/__exit.S           |  17 ++
 libc/arch-riscv64/syscalls/__fadvise64.S      |  17 ++
 libc/arch-riscv64/syscalls/__fstatfs.S        |  17 ++
 libc/arch-riscv64/syscalls/__getcpu.S         |  17 ++
 libc/arch-riscv64/syscalls/__getcwd.S         |  17 ++
 libc/arch-riscv64/syscalls/__getdents64.S     |  17 ++
 libc/arch-riscv64/syscalls/__getpid.S         |  17 ++
 libc/arch-riscv64/syscalls/__getpriority.S    |  17 ++
 libc/arch-riscv64/syscalls/__gettimeofday.S   |  17 ++
 libc/arch-riscv64/syscalls/__ioctl.S          |  17 ++
 libc/arch-riscv64/syscalls/__openat.S         |  17 ++
 libc/arch-riscv64/syscalls/__ppoll.S          |  17 ++
 libc/arch-riscv64/syscalls/__pselect6.S       |  17 ++
 libc/arch-riscv64/syscalls/__ptrace.S         |  17 ++
 libc/arch-riscv64/syscalls/__reboot.S         |  17 ++
 libc/arch-riscv64/syscalls/__rt_sigaction.S   |  17 ++
 libc/arch-riscv64/syscalls/__rt_sigpending.S  |  17 ++
 libc/arch-riscv64/syscalls/__rt_sigprocmask.S |  17 ++
 libc/arch-riscv64/syscalls/__rt_sigsuspend.S  |  17 ++
 .../arch-riscv64/syscalls/__rt_sigtimedwait.S |  17 ++
 .../syscalls/__sched_getaffinity.S            |  17 ++
 .../arch-riscv64/syscalls/__set_tid_address.S |  17 ++
 libc/arch-riscv64/syscalls/__signalfd4.S      |  17 ++
 libc/arch-riscv64/syscalls/__socket.S         |  17 ++
 libc/arch-riscv64/syscalls/__statfs.S         |  17 ++
 .../arch-riscv64/syscalls/__sync_file_range.S |  17 ++
 libc/arch-riscv64/syscalls/__timer_create.S   |  17 ++
 libc/arch-riscv64/syscalls/__timer_delete.S   |  17 ++
 .../syscalls/__timer_getoverrun.S             |  17 ++
 libc/arch-riscv64/syscalls/__timer_gettime.S  |  17 ++
 libc/arch-riscv64/syscalls/__timer_settime.S  |  17 ++
 libc/arch-riscv64/syscalls/__waitid.S         |  17 ++
 libc/arch-riscv64/syscalls/_exit.S            |  18 ++
 libc/arch-riscv64/syscalls/_flush_icache.S    |  16 ++
 libc/arch-riscv64/syscalls/acct.S             |  16 ++
 libc/arch-riscv64/syscalls/adjtimex.S         |  16 ++
 libc/arch-riscv64/syscalls/bind.S             |  16 ++
 libc/arch-riscv64/syscalls/capget.S           |  16 ++
 libc/arch-riscv64/syscalls/capset.S           |  16 ++
 libc/arch-riscv64/syscalls/chdir.S            |  16 ++
 libc/arch-riscv64/syscalls/chroot.S           |  16 ++
 libc/arch-riscv64/syscalls/clock_adjtime.S    |  16 ++
 libc/arch-riscv64/syscalls/clock_settime.S    |  16 ++
 libc/arch-riscv64/syscalls/delete_module.S    |  16 ++
 libc/arch-riscv64/syscalls/dup.S              |  16 ++
 libc/arch-riscv64/syscalls/dup3.S             |  16 ++
 libc/arch-riscv64/syscalls/epoll_create1.S    |  16 ++
 libc/arch-riscv64/syscalls/epoll_ctl.S        |  16 ++
 libc/arch-riscv64/syscalls/eventfd.S          |  16 ++
 libc/arch-riscv64/syscalls/execve.S           |  16 ++
 libc/arch-riscv64/syscalls/fallocate.S        |  18 ++
 libc/arch-riscv64/syscalls/fchdir.S           |  16 ++
 libc/arch-riscv64/syscalls/fchown.S           |  16 ++
 libc/arch-riscv64/syscalls/fchownat.S         |  16 ++
 libc/arch-riscv64/syscalls/fcntl.S            |  16 ++
 libc/arch-riscv64/syscalls/fdatasync.S        |  16 ++
 libc/arch-riscv64/syscalls/flock.S            |  16 ++
 libc/arch-riscv64/syscalls/fremovexattr.S     |  16 ++
 libc/arch-riscv64/syscalls/fstat64.S          |  18 ++
 libc/arch-riscv64/syscalls/fstatat64.S        |  18 ++
 libc/arch-riscv64/syscalls/fsync.S            |  16 ++
 libc/arch-riscv64/syscalls/ftruncate.S        |  18 ++
 libc/arch-riscv64/syscalls/getegid.S          |  16 ++
 libc/arch-riscv64/syscalls/geteuid.S          |  16 ++
 libc/arch-riscv64/syscalls/getgid.S           |  16 ++
 libc/arch-riscv64/syscalls/getgroups.S        |  16 ++
 libc/arch-riscv64/syscalls/getitimer.S        |  16 ++
 libc/arch-riscv64/syscalls/getpeername.S      |  16 ++
 libc/arch-riscv64/syscalls/getpgid.S          |  16 ++
 libc/arch-riscv64/syscalls/getppid.S          |  16 ++
 libc/arch-riscv64/syscalls/getrandom.S        |  16 ++
 libc/arch-riscv64/syscalls/getresgid.S        |  16 ++
 libc/arch-riscv64/syscalls/getresuid.S        |  16 ++
 libc/arch-riscv64/syscalls/getrlimit.S        |  18 ++
 libc/arch-riscv64/syscalls/getrusage.S        |  16 ++
 libc/arch-riscv64/syscalls/getsid.S           |  16 ++
 libc/arch-riscv64/syscalls/getsockname.S      |  16 ++
 libc/arch-riscv64/syscalls/getsockopt.S       |  16 ++
 libc/arch-riscv64/syscalls/getuid.S           |  16 ++
 libc/arch-riscv64/syscalls/getxattr.S         |  16 ++
 libc/arch-riscv64/syscalls/init_module.S      |  16 ++
 .../arch-riscv64/syscalls/inotify_add_watch.S |  16 ++
 libc/arch-riscv64/syscalls/inotify_init1.S    |  16 ++
 libc/arch-riscv64/syscalls/inotify_rm_watch.S |  16 ++
 libc/arch-riscv64/syscalls/kill.S             |  16 ++
 libc/arch-riscv64/syscalls/klogctl.S          |  16 ++
 libc/arch-riscv64/syscalls/lgetxattr.S        |  16 ++
 libc/arch-riscv64/syscalls/linkat.S           |  16 ++
 libc/arch-riscv64/syscalls/listen.S           |  16 ++
 libc/arch-riscv64/syscalls/listxattr.S        |  16 ++
 libc/arch-riscv64/syscalls/llistxattr.S       |  16 ++
 libc/arch-riscv64/syscalls/lremovexattr.S     |  16 ++
 libc/arch-riscv64/syscalls/lseek.S            |  18 ++
 libc/arch-riscv64/syscalls/lsetxattr.S        |  16 ++
 libc/arch-riscv64/syscalls/madvise.S          |  16 ++
 libc/arch-riscv64/syscalls/mincore.S          |  16 ++
 libc/arch-riscv64/syscalls/mkdirat.S          |  16 ++
 libc/arch-riscv64/syscalls/mknodat.S          |  16 ++
 libc/arch-riscv64/syscalls/mlock.S            |  16 ++
 libc/arch-riscv64/syscalls/mlockall.S         |  16 ++
 libc/arch-riscv64/syscalls/mmap.S             |  18 ++
 libc/arch-riscv64/syscalls/mount.S            |  16 ++
 libc/arch-riscv64/syscalls/mprotect.S         |  16 ++
 libc/arch-riscv64/syscalls/msync.S            |  16 ++
 libc/arch-riscv64/syscalls/munlock.S          |  16 ++
 libc/arch-riscv64/syscalls/munlockall.S       |  16 ++
 libc/arch-riscv64/syscalls/munmap.S           |  16 ++
 libc/arch-riscv64/syscalls/nanosleep.S        |  16 ++
 libc/arch-riscv64/syscalls/personality.S      |  16 ++
 libc/arch-riscv64/syscalls/pipe2.S            |  16 ++
 libc/arch-riscv64/syscalls/prctl.S            |  16 ++
 libc/arch-riscv64/syscalls/pread64.S          |  18 ++
 libc/arch-riscv64/syscalls/preadv.S           |  18 ++
 libc/arch-riscv64/syscalls/prlimit64.S        |  18 ++
 libc/arch-riscv64/syscalls/process_vm_readv.S |  16 ++
 .../arch-riscv64/syscalls/process_vm_writev.S |  16 ++
 libc/arch-riscv64/syscalls/pwrite64.S         |  18 ++
 libc/arch-riscv64/syscalls/pwritev.S          |  18 ++
 libc/arch-riscv64/syscalls/quotactl.S         |  16 ++
 libc/arch-riscv64/syscalls/read.S             |  16 ++
 libc/arch-riscv64/syscalls/readahead.S        |  16 ++
 libc/arch-riscv64/syscalls/readlinkat.S       |  16 ++
 libc/arch-riscv64/syscalls/readv.S            |  16 ++
 libc/arch-riscv64/syscalls/recvfrom.S         |  16 ++
 libc/arch-riscv64/syscalls/recvmmsg.S         |  16 ++
 libc/arch-riscv64/syscalls/recvmsg.S          |  16 ++
 libc/arch-riscv64/syscalls/removexattr.S      |  16 ++
 libc/arch-riscv64/syscalls/renameat.S         |  16 ++
 .../syscalls/sched_get_priority_max.S         |  16 ++
 .../syscalls/sched_get_priority_min.S         |  16 ++
 libc/arch-riscv64/syscalls/sched_getparam.S   |  16 ++
 .../syscalls/sched_getscheduler.S             |  16 ++
 .../syscalls/sched_rr_get_interval.S          |  16 ++
 .../arch-riscv64/syscalls/sched_setaffinity.S |  16 ++
 libc/arch-riscv64/syscalls/sched_setparam.S   |  16 ++
 .../syscalls/sched_setscheduler.S             |  16 ++
 libc/arch-riscv64/syscalls/sched_yield.S      |  16 ++
 libc/arch-riscv64/syscalls/sendfile.S         |  18 ++
 libc/arch-riscv64/syscalls/sendmmsg.S         |  16 ++
 libc/arch-riscv64/syscalls/sendmsg.S          |  16 ++
 libc/arch-riscv64/syscalls/sendto.S           |  16 ++
 libc/arch-riscv64/syscalls/setdomainname.S    |  16 ++
 libc/arch-riscv64/syscalls/setfsgid.S         |  16 ++
 libc/arch-riscv64/syscalls/setfsuid.S         |  16 ++
 libc/arch-riscv64/syscalls/setgid.S           |  16 ++
 libc/arch-riscv64/syscalls/setgroups.S        |  16 ++
 libc/arch-riscv64/syscalls/sethostname.S      |  16 ++
 libc/arch-riscv64/syscalls/setitimer.S        |  16 ++
 libc/arch-riscv64/syscalls/setns.S            |  16 ++
 libc/arch-riscv64/syscalls/setpgid.S          |  16 ++
 libc/arch-riscv64/syscalls/setpriority.S      |  16 ++
 libc/arch-riscv64/syscalls/setregid.S         |  16 ++
 libc/arch-riscv64/syscalls/setresgid.S        |  16 ++
 libc/arch-riscv64/syscalls/setresuid.S        |  16 ++
 libc/arch-riscv64/syscalls/setreuid.S         |  16 ++
 libc/arch-riscv64/syscalls/setrlimit.S        |  18 ++
 libc/arch-riscv64/syscalls/setsid.S           |  16 ++
 libc/arch-riscv64/syscalls/setsockopt.S       |  16 ++
 libc/arch-riscv64/syscalls/settimeofday.S     |  16 ++
 libc/arch-riscv64/syscalls/setuid.S           |  16 ++
 libc/arch-riscv64/syscalls/setxattr.S         |  16 ++
 libc/arch-riscv64/syscalls/shutdown.S         |  16 ++
 libc/arch-riscv64/syscalls/sigaltstack.S      |  16 ++
 libc/arch-riscv64/syscalls/socketpair.S       |  16 ++
 libc/arch-riscv64/syscalls/splice.S           |  16 ++
 libc/arch-riscv64/syscalls/swapoff.S          |  16 ++
 libc/arch-riscv64/syscalls/swapon.S           |  16 ++
 libc/arch-riscv64/syscalls/symlinkat.S        |  16 ++
 libc/arch-riscv64/syscalls/sync.S             |  16 ++
 libc/arch-riscv64/syscalls/syncfs.S           |  16 ++
 libc/arch-riscv64/syscalls/sysinfo.S          |  16 ++
 libc/arch-riscv64/syscalls/tee.S              |  16 ++
 libc/arch-riscv64/syscalls/tgkill.S           |  16 ++
 libc/arch-riscv64/syscalls/timerfd_create.S   |  16 ++
 libc/arch-riscv64/syscalls/timerfd_gettime.S  |  16 ++
 libc/arch-riscv64/syscalls/timerfd_settime.S  |  16 ++
 libc/arch-riscv64/syscalls/times.S            |  16 ++
 libc/arch-riscv64/syscalls/truncate.S         |  18 ++
 libc/arch-riscv64/syscalls/umask.S            |  16 ++
 libc/arch-riscv64/syscalls/umount2.S          |  16 ++
 libc/arch-riscv64/syscalls/uname.S            |  16 ++
 libc/arch-riscv64/syscalls/unlinkat.S         |  16 ++
 libc/arch-riscv64/syscalls/unshare.S          |  16 ++
 libc/arch-riscv64/syscalls/utimensat.S        |  16 ++
 libc/arch-riscv64/syscalls/vmsplice.S         |  16 ++
 libc/arch-riscv64/syscalls/wait4.S            |  16 ++
 libc/arch-riscv64/syscalls/write.S            |  16 ++
 libc/arch-riscv64/syscalls/writev.S           |  16 ++
 libc/bionic/bionic_elf_tls.cpp                |   6 +
 libc/bionic/scudo/Android.bp                  |   3 +
 libc/include/bits/elf_riscv64.h               |  90 ++++++++
 libc/include/bits/fenv_riscv64.h              |  52 +++++
 libc/include/bits/glibc-syscalls.h            |   3 +
 libc/include/elf.h                            |   1 +
 libc/include/fenv.h                           |   2 +
 libc/include/setjmp.h                         |   2 +
 libc/include/sys/stat.h                       |   2 +-
 libc/include/sys/ucontext.h                   |  57 +++++
 libc/include/sys/user.h                       |  12 ++
 libc/include/sys/vfs.h                        |   2 +-
 libc/kernel/tools/defaults.py                 |   4 +-
 libc/kernel/tools/generate_uapi_headers.sh    |   2 +-
 libc/kernel/uapi/asm-riscv/asm/auxvec.h       |  22 ++
 libc/kernel/uapi/asm-riscv/asm/bitsperlong.h  |  23 ++
 .../uapi/asm-riscv/asm/bpf_perf_event.h       |  19 ++
 libc/kernel/uapi/asm-riscv/asm/byteorder.h    |  22 ++
 libc/kernel/uapi/asm-riscv/asm/elf.h          |  89 ++++++++
 libc/kernel/uapi/asm-riscv/asm/errno.h        |  19 ++
 libc/kernel/uapi/asm-riscv/asm/fcntl.h        |  19 ++
 libc/kernel/uapi/asm-riscv/asm/hwcap.h        |  27 +++
 libc/kernel/uapi/asm-riscv/asm/ioctl.h        |  19 ++
 libc/kernel/uapi/asm-riscv/asm/ioctls.h       |  19 ++
 libc/kernel/uapi/asm-riscv/asm/ipcbuf.h       |  19 ++
 libc/kernel/uapi/asm-riscv/asm/mman.h         |  19 ++
 libc/kernel/uapi/asm-riscv/asm/msgbuf.h       |  19 ++
 libc/kernel/uapi/asm-riscv/asm/param.h        |  19 ++
 libc/kernel/uapi/asm-riscv/asm/perf_regs.h    |  56 +++++
 libc/kernel/uapi/asm-riscv/asm/poll.h         |  19 ++
 libc/kernel/uapi/asm-riscv/asm/posix_types.h  |  19 ++
 libc/kernel/uapi/asm-riscv/asm/ptrace.h       | 118 ++++++++++
 libc/kernel/uapi/asm-riscv/asm/resource.h     |  19 ++
 libc/kernel/uapi/asm-riscv/asm/sembuf.h       |  19 ++
 libc/kernel/uapi/asm-riscv/asm/setup.h        |  19 ++
 libc/kernel/uapi/asm-riscv/asm/shmbuf.h       |  19 ++
 libc/kernel/uapi/asm-riscv/asm/sigcontext.h   |  26 +++
 libc/kernel/uapi/asm-riscv/asm/siginfo.h      |  19 ++
 libc/kernel/uapi/asm-riscv/asm/signal.h       |  19 ++
 libc/kernel/uapi/asm-riscv/asm/socket.h       |  19 ++
 libc/kernel/uapi/asm-riscv/asm/sockios.h      |  19 ++
 libc/kernel/uapi/asm-riscv/asm/stat.h         |  19 ++
 libc/kernel/uapi/asm-riscv/asm/statfs.h       |  19 ++
 libc/kernel/uapi/asm-riscv/asm/swab.h         |  19 ++
 libc/kernel/uapi/asm-riscv/asm/termbits.h     |  19 ++
 libc/kernel/uapi/asm-riscv/asm/termios.h      |  19 ++
 libc/kernel/uapi/asm-riscv/asm/types.h        |  19 ++
 libc/kernel/uapi/asm-riscv/asm/ucontext.h     |  30 +++
 libc/kernel/uapi/asm-riscv/asm/unistd.h       |  29 +++
 libc/libc.map.txt                             |  48 ++---
 libc/malloc_debug/backtrace.cpp               |   9 +
 libc/private/__get_tls.h                      |   2 +
 libc/private/bionic_asm.h                     |   2 +
 libc/private/bionic_asm_riscv64.h             |  35 +++
 libc/private/bionic_asm_tls.h                 |  16 ++
 libc/private/bionic_macros.h                  |   2 +
 libc/seccomp/seccomp_bpfs.h                   |   9 +
 libc/seccomp/seccomp_policy.cpp               |  25 +++
 libc/tools/genfunctosyscallnrs.py             |   2 +-
 libc/tools/genseccomp.py                      |   2 +-
 libc/tools/gensyscalls.py                     |  25 ++-
 libc/tools/test_genseccomp.py                 |  14 +-
 .../riscv64/kernel_uapi_asm-riscv64           |   1 +
 libdl/Android.bp                              |  13 ++
 libm/Android.bp                               |  15 ++
 libm/riscv64/fenv.c                           | 133 ++++++++++++
 linker/Android.bp                             |  15 ++
 linker/arch/riscv64/begin.S                   |  40 ++++
 linker/linker_common_types.h                  |   2 +-
 linker/linker_phdr.cpp                        |   2 +
 linker/linker_relocs.h                        |  11 +
 tests/Android.build.prebuilt.mk               |   1 +
 tests/dlfcn_test.cpp                          |   2 +
 .../riscv64/libtest_empty.so                  | Bin 0 -> 3904 bytes
 .../libtest_invalid-empty_shdr_table.so       | Bin 0 -> 6376 bytes
 .../libtest_invalid-rw_load_segment.so        | Bin 0 -> 6376 bytes
 .../riscv64/libtest_invalid-textrels.so       | Bin 0 -> 6376 bytes
 .../riscv64/libtest_invalid-textrels2.so      | Bin 0 -> 6376 bytes
 .../libtest_invalid-unaligned_shdr_offset.so  | Bin 0 -> 6376 bytes
 ...libtest_invalid-zero_shdr_table_content.so | Bin 0 -> 6376 bytes
 .../libtest_invalid-zero_shdr_table_offset.so | Bin 0 -> 6376 bytes
 .../riscv64/libtest_invalid-zero_shentsize.so | Bin 0 -> 6376 bytes
 .../riscv64/libtest_invalid-zero_shstrndx.so  | Bin 0 -> 6376 bytes
 tests/setjmp_test.cpp                         |   2 +
 tests/signal_test.cpp                         |   2 +-
 tools/bionicbb/presubmit.py                   |   2 +
 tools/generate-version-script.py              |   2 +-
 tools/versioner/src/Arch.cpp                  |   4 +
 tools/versioner/src/Arch.h                    |   5 +
 tools/versioner/src/DeclarationDatabase.cpp   |   2 +
 tools/versioner/src/Preprocessor.cpp          |   3 +-
 tools/versioner/src/versioner.h               |   2 +-
 314 files changed, 5565 insertions(+), 92 deletions(-)
 create mode 100644 libc/arch-riscv64/bionic/__bionic_clone.S
 create mode 100644 libc/arch-riscv64/bionic/__set_tls.c
 create mode 100644 libc/arch-riscv64/bionic/_exit_with_stack_teardown.S
 create mode 100644 libc/arch-riscv64/bionic/setjmp.S
 create mode 100644 libc/arch-riscv64/bionic/syscall.S
 create mode 100644 libc/arch-riscv64/bionic/vfork.S
 create mode 100644 libc/arch-riscv64/generic/bionic/memcmp.c
 create mode 100644 libc/arch-riscv64/generic/bionic/memcpy.c
 create mode 100644 libc/arch-riscv64/generic/bionic/memset.c
 create mode 100644 libc/arch-riscv64/generic/bionic/strchr.c
 create mode 100644 libc/arch-riscv64/generic/bionic/strcmp.c
 create mode 100644 libc/arch-riscv64/generic/bionic/strlen.c
 create mode 100644 libc/arch-riscv64/generic/bionic/strnlen.c
 create mode 100644 libc/arch-riscv64/syscalls/___clock_nanosleep.S
 create mode 100644 libc/arch-riscv64/syscalls/___close.S
 create mode 100644 libc/arch-riscv64/syscalls/___faccessat.S
 create mode 100644 libc/arch-riscv64/syscalls/___fchmod.S
 create mode 100644 libc/arch-riscv64/syscalls/___fchmodat.S
 create mode 100644 libc/arch-riscv64/syscalls/___fgetxattr.S
 create mode 100644 libc/arch-riscv64/syscalls/___flistxattr.S
 create mode 100644 libc/arch-riscv64/syscalls/___fsetxattr.S
 create mode 100644 libc/arch-riscv64/syscalls/___mremap.S
 create mode 100644 libc/arch-riscv64/syscalls/___rt_sigqueueinfo.S
 create mode 100644 libc/arch-riscv64/syscalls/__accept4.S
 create mode 100644 libc/arch-riscv64/syscalls/__brk.S
 create mode 100644 libc/arch-riscv64/syscalls/__clock_getres.S
 create mode 100644 libc/arch-riscv64/syscalls/__clock_gettime.S
 create mode 100644 libc/arch-riscv64/syscalls/__connect.S
 create mode 100644 libc/arch-riscv64/syscalls/__epoll_pwait.S
 create mode 100644 libc/arch-riscv64/syscalls/__exit.S
 create mode 100644 libc/arch-riscv64/syscalls/__fadvise64.S
 create mode 100644 libc/arch-riscv64/syscalls/__fstatfs.S
 create mode 100644 libc/arch-riscv64/syscalls/__getcpu.S
 create mode 100644 libc/arch-riscv64/syscalls/__getcwd.S
 create mode 100644 libc/arch-riscv64/syscalls/__getdents64.S
 create mode 100644 libc/arch-riscv64/syscalls/__getpid.S
 create mode 100644 libc/arch-riscv64/syscalls/__getpriority.S
 create mode 100644 libc/arch-riscv64/syscalls/__gettimeofday.S
 create mode 100644 libc/arch-riscv64/syscalls/__ioctl.S
 create mode 100644 libc/arch-riscv64/syscalls/__openat.S
 create mode 100644 libc/arch-riscv64/syscalls/__ppoll.S
 create mode 100644 libc/arch-riscv64/syscalls/__pselect6.S
 create mode 100644 libc/arch-riscv64/syscalls/__ptrace.S
 create mode 100644 libc/arch-riscv64/syscalls/__reboot.S
 create mode 100644 libc/arch-riscv64/syscalls/__rt_sigaction.S
 create mode 100644 libc/arch-riscv64/syscalls/__rt_sigpending.S
 create mode 100644 libc/arch-riscv64/syscalls/__rt_sigprocmask.S
 create mode 100644 libc/arch-riscv64/syscalls/__rt_sigsuspend.S
 create mode 100644 libc/arch-riscv64/syscalls/__rt_sigtimedwait.S
 create mode 100644 libc/arch-riscv64/syscalls/__sched_getaffinity.S
 create mode 100644 libc/arch-riscv64/syscalls/__set_tid_address.S
 create mode 100644 libc/arch-riscv64/syscalls/__signalfd4.S
 create mode 100644 libc/arch-riscv64/syscalls/__socket.S
 create mode 100644 libc/arch-riscv64/syscalls/__statfs.S
 create mode 100644 libc/arch-riscv64/syscalls/__sync_file_range.S
 create mode 100644 libc/arch-riscv64/syscalls/__timer_create.S
 create mode 100644 libc/arch-riscv64/syscalls/__timer_delete.S
 create mode 100644 libc/arch-riscv64/syscalls/__timer_getoverrun.S
 create mode 100644 libc/arch-riscv64/syscalls/__timer_gettime.S
 create mode 100644 libc/arch-riscv64/syscalls/__timer_settime.S
 create mode 100644 libc/arch-riscv64/syscalls/__waitid.S
 create mode 100644 libc/arch-riscv64/syscalls/_exit.S
 create mode 100644 libc/arch-riscv64/syscalls/_flush_icache.S
 create mode 100644 libc/arch-riscv64/syscalls/acct.S
 create mode 100644 libc/arch-riscv64/syscalls/adjtimex.S
 create mode 100644 libc/arch-riscv64/syscalls/bind.S
 create mode 100644 libc/arch-riscv64/syscalls/capget.S
 create mode 100644 libc/arch-riscv64/syscalls/capset.S
 create mode 100644 libc/arch-riscv64/syscalls/chdir.S
 create mode 100644 libc/arch-riscv64/syscalls/chroot.S
 create mode 100644 libc/arch-riscv64/syscalls/clock_adjtime.S
 create mode 100644 libc/arch-riscv64/syscalls/clock_settime.S
 create mode 100644 libc/arch-riscv64/syscalls/delete_module.S
 create mode 100644 libc/arch-riscv64/syscalls/dup.S
 create mode 100644 libc/arch-riscv64/syscalls/dup3.S
 create mode 100644 libc/arch-riscv64/syscalls/epoll_create1.S
 create mode 100644 libc/arch-riscv64/syscalls/epoll_ctl.S
 create mode 100644 libc/arch-riscv64/syscalls/eventfd.S
 create mode 100644 libc/arch-riscv64/syscalls/execve.S
 create mode 100644 libc/arch-riscv64/syscalls/fallocate.S
 create mode 100644 libc/arch-riscv64/syscalls/fchdir.S
 create mode 100644 libc/arch-riscv64/syscalls/fchown.S
 create mode 100644 libc/arch-riscv64/syscalls/fchownat.S
 create mode 100644 libc/arch-riscv64/syscalls/fcntl.S
 create mode 100644 libc/arch-riscv64/syscalls/fdatasync.S
 create mode 100644 libc/arch-riscv64/syscalls/flock.S
 create mode 100644 libc/arch-riscv64/syscalls/fremovexattr.S
 create mode 100644 libc/arch-riscv64/syscalls/fstat64.S
 create mode 100644 libc/arch-riscv64/syscalls/fstatat64.S
 create mode 100644 libc/arch-riscv64/syscalls/fsync.S
 create mode 100644 libc/arch-riscv64/syscalls/ftruncate.S
 create mode 100644 libc/arch-riscv64/syscalls/getegid.S
 create mode 100644 libc/arch-riscv64/syscalls/geteuid.S
 create mode 100644 libc/arch-riscv64/syscalls/getgid.S
 create mode 100644 libc/arch-riscv64/syscalls/getgroups.S
 create mode 100644 libc/arch-riscv64/syscalls/getitimer.S
 create mode 100644 libc/arch-riscv64/syscalls/getpeername.S
 create mode 100644 libc/arch-riscv64/syscalls/getpgid.S
 create mode 100644 libc/arch-riscv64/syscalls/getppid.S
 create mode 100644 libc/arch-riscv64/syscalls/getrandom.S
 create mode 100644 libc/arch-riscv64/syscalls/getresgid.S
 create mode 100644 libc/arch-riscv64/syscalls/getresuid.S
 create mode 100644 libc/arch-riscv64/syscalls/getrlimit.S
 create mode 100644 libc/arch-riscv64/syscalls/getrusage.S
 create mode 100644 libc/arch-riscv64/syscalls/getsid.S
 create mode 100644 libc/arch-riscv64/syscalls/getsockname.S
 create mode 100644 libc/arch-riscv64/syscalls/getsockopt.S
 create mode 100644 libc/arch-riscv64/syscalls/getuid.S
 create mode 100644 libc/arch-riscv64/syscalls/getxattr.S
 create mode 100644 libc/arch-riscv64/syscalls/init_module.S
 create mode 100644 libc/arch-riscv64/syscalls/inotify_add_watch.S
 create mode 100644 libc/arch-riscv64/syscalls/inotify_init1.S
 create mode 100644 libc/arch-riscv64/syscalls/inotify_rm_watch.S
 create mode 100644 libc/arch-riscv64/syscalls/kill.S
 create mode 100644 libc/arch-riscv64/syscalls/klogctl.S
 create mode 100644 libc/arch-riscv64/syscalls/lgetxattr.S
 create mode 100644 libc/arch-riscv64/syscalls/linkat.S
 create mode 100644 libc/arch-riscv64/syscalls/listen.S
 create mode 100644 libc/arch-riscv64/syscalls/listxattr.S
 create mode 100644 libc/arch-riscv64/syscalls/llistxattr.S
 create mode 100644 libc/arch-riscv64/syscalls/lremovexattr.S
 create mode 100644 libc/arch-riscv64/syscalls/lseek.S
 create mode 100644 libc/arch-riscv64/syscalls/lsetxattr.S
 create mode 100644 libc/arch-riscv64/syscalls/madvise.S
 create mode 100644 libc/arch-riscv64/syscalls/mincore.S
 create mode 100644 libc/arch-riscv64/syscalls/mkdirat.S
 create mode 100644 libc/arch-riscv64/syscalls/mknodat.S
 create mode 100644 libc/arch-riscv64/syscalls/mlock.S
 create mode 100644 libc/arch-riscv64/syscalls/mlockall.S
 create mode 100644 libc/arch-riscv64/syscalls/mmap.S
 create mode 100644 libc/arch-riscv64/syscalls/mount.S
 create mode 100644 libc/arch-riscv64/syscalls/mprotect.S
 create mode 100644 libc/arch-riscv64/syscalls/msync.S
 create mode 100644 libc/arch-riscv64/syscalls/munlock.S
 create mode 100644 libc/arch-riscv64/syscalls/munlockall.S
 create mode 100644 libc/arch-riscv64/syscalls/munmap.S
 create mode 100644 libc/arch-riscv64/syscalls/nanosleep.S
 create mode 100644 libc/arch-riscv64/syscalls/personality.S
 create mode 100644 libc/arch-riscv64/syscalls/pipe2.S
 create mode 100644 libc/arch-riscv64/syscalls/prctl.S
 create mode 100644 libc/arch-riscv64/syscalls/pread64.S
 create mode 100644 libc/arch-riscv64/syscalls/preadv.S
 create mode 100644 libc/arch-riscv64/syscalls/prlimit64.S
 create mode 100644 libc/arch-riscv64/syscalls/process_vm_readv.S
 create mode 100644 libc/arch-riscv64/syscalls/process_vm_writev.S
 create mode 100644 libc/arch-riscv64/syscalls/pwrite64.S
 create mode 100644 libc/arch-riscv64/syscalls/pwritev.S
 create mode 100644 libc/arch-riscv64/syscalls/quotactl.S
 create mode 100644 libc/arch-riscv64/syscalls/read.S
 create mode 100644 libc/arch-riscv64/syscalls/readahead.S
 create mode 100644 libc/arch-riscv64/syscalls/readlinkat.S
 create mode 100644 libc/arch-riscv64/syscalls/readv.S
 create mode 100644 libc/arch-riscv64/syscalls/recvfrom.S
 create mode 100644 libc/arch-riscv64/syscalls/recvmmsg.S
 create mode 100644 libc/arch-riscv64/syscalls/recvmsg.S
 create mode 100644 libc/arch-riscv64/syscalls/removexattr.S
 create mode 100644 libc/arch-riscv64/syscalls/renameat.S
 create mode 100644 libc/arch-riscv64/syscalls/sched_get_priority_max.S
 create mode 100644 libc/arch-riscv64/syscalls/sched_get_priority_min.S
 create mode 100644 libc/arch-riscv64/syscalls/sched_getparam.S
 create mode 100644 libc/arch-riscv64/syscalls/sched_getscheduler.S
 create mode 100644 libc/arch-riscv64/syscalls/sched_rr_get_interval.S
 create mode 100644 libc/arch-riscv64/syscalls/sched_setaffinity.S
 create mode 100644 libc/arch-riscv64/syscalls/sched_setparam.S
 create mode 100644 libc/arch-riscv64/syscalls/sched_setscheduler.S
 create mode 100644 libc/arch-riscv64/syscalls/sched_yield.S
 create mode 100644 libc/arch-riscv64/syscalls/sendfile.S
 create mode 100644 libc/arch-riscv64/syscalls/sendmmsg.S
 create mode 100644 libc/arch-riscv64/syscalls/sendmsg.S
 create mode 100644 libc/arch-riscv64/syscalls/sendto.S
 create mode 100644 libc/arch-riscv64/syscalls/setdomainname.S
 create mode 100644 libc/arch-riscv64/syscalls/setfsgid.S
 create mode 100644 libc/arch-riscv64/syscalls/setfsuid.S
 create mode 100644 libc/arch-riscv64/syscalls/setgid.S
 create mode 100644 libc/arch-riscv64/syscalls/setgroups.S
 create mode 100644 libc/arch-riscv64/syscalls/sethostname.S
 create mode 100644 libc/arch-riscv64/syscalls/setitimer.S
 create mode 100644 libc/arch-riscv64/syscalls/setns.S
 create mode 100644 libc/arch-riscv64/syscalls/setpgid.S
 create mode 100644 libc/arch-riscv64/syscalls/setpriority.S
 create mode 100644 libc/arch-riscv64/syscalls/setregid.S
 create mode 100644 libc/arch-riscv64/syscalls/setresgid.S
 create mode 100644 libc/arch-riscv64/syscalls/setresuid.S
 create mode 100644 libc/arch-riscv64/syscalls/setreuid.S
 create mode 100644 libc/arch-riscv64/syscalls/setrlimit.S
 create mode 100644 libc/arch-riscv64/syscalls/setsid.S
 create mode 100644 libc/arch-riscv64/syscalls/setsockopt.S
 create mode 100644 libc/arch-riscv64/syscalls/settimeofday.S
 create mode 100644 libc/arch-riscv64/syscalls/setuid.S
 create mode 100644 libc/arch-riscv64/syscalls/setxattr.S
 create mode 100644 libc/arch-riscv64/syscalls/shutdown.S
 create mode 100644 libc/arch-riscv64/syscalls/sigaltstack.S
 create mode 100644 libc/arch-riscv64/syscalls/socketpair.S
 create mode 100644 libc/arch-riscv64/syscalls/splice.S
 create mode 100644 libc/arch-riscv64/syscalls/swapoff.S
 create mode 100644 libc/arch-riscv64/syscalls/swapon.S
 create mode 100644 libc/arch-riscv64/syscalls/symlinkat.S
 create mode 100644 libc/arch-riscv64/syscalls/sync.S
 create mode 100644 libc/arch-riscv64/syscalls/syncfs.S
 create mode 100644 libc/arch-riscv64/syscalls/sysinfo.S
 create mode 100644 libc/arch-riscv64/syscalls/tee.S
 create mode 100644 libc/arch-riscv64/syscalls/tgkill.S
 create mode 100644 libc/arch-riscv64/syscalls/timerfd_create.S
 create mode 100644 libc/arch-riscv64/syscalls/timerfd_gettime.S
 create mode 100644 libc/arch-riscv64/syscalls/timerfd_settime.S
 create mode 100644 libc/arch-riscv64/syscalls/times.S
 create mode 100644 libc/arch-riscv64/syscalls/truncate.S
 create mode 100644 libc/arch-riscv64/syscalls/umask.S
 create mode 100644 libc/arch-riscv64/syscalls/umount2.S
 create mode 100644 libc/arch-riscv64/syscalls/uname.S
 create mode 100644 libc/arch-riscv64/syscalls/unlinkat.S
 create mode 100644 libc/arch-riscv64/syscalls/unshare.S
 create mode 100644 libc/arch-riscv64/syscalls/utimensat.S
 create mode 100644 libc/arch-riscv64/syscalls/vmsplice.S
 create mode 100644 libc/arch-riscv64/syscalls/wait4.S
 create mode 100644 libc/arch-riscv64/syscalls/write.S
 create mode 100644 libc/arch-riscv64/syscalls/writev.S
 create mode 100644 libc/include/bits/elf_riscv64.h
 create mode 100644 libc/include/bits/fenv_riscv64.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/auxvec.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/bitsperlong.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/bpf_perf_event.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/byteorder.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/elf.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/errno.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/fcntl.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/hwcap.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/ioctl.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/ioctls.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/ipcbuf.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/mman.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/msgbuf.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/param.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/perf_regs.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/poll.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/posix_types.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/ptrace.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/resource.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/sembuf.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/setup.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/shmbuf.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/sigcontext.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/siginfo.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/signal.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/socket.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/sockios.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/stat.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/statfs.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/swab.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/termbits.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/termios.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/types.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/ucontext.h
 create mode 100644 libc/kernel/uapi/asm-riscv/asm/unistd.h
 create mode 100644 libc/private/bionic_asm_riscv64.h
 create mode 120000 libc/versioner-dependencies/riscv64/kernel_uapi_asm-riscv64
 create mode 100644 libm/riscv64/fenv.c
 create mode 100644 linker/arch/riscv64/begin.S
 create mode 100755 tests/prebuilt-elf-files/riscv64/libtest_empty.so
 create mode 100755 tests/prebuilt-elf-files/riscv64/libtest_invalid-empty_shdr_table.so
 create mode 100755 tests/prebuilt-elf-files/riscv64/libtest_invalid-rw_load_segment.so
 create mode 100755 tests/prebuilt-elf-files/riscv64/libtest_invalid-textrels.so
 create mode 100755 tests/prebuilt-elf-files/riscv64/libtest_invalid-textrels2.so
 create mode 100755 tests/prebuilt-elf-files/riscv64/libtest_invalid-unaligned_shdr_offset.so
 create mode 100755 tests/prebuilt-elf-files/riscv64/libtest_invalid-zero_shdr_table_content.so
 create mode 100755 tests/prebuilt-elf-files/riscv64/libtest_invalid-zero_shdr_table_offset.so
 create mode 100755 tests/prebuilt-elf-files/riscv64/libtest_invalid-zero_shentsize.so
 create mode 100755 tests/prebuilt-elf-files/riscv64/libtest_invalid-zero_shstrndx.so

diff --git a/libc/Android.bp b/libc/Android.bp
index a5990288d..be1eb7e7c 100644
--- a/libc/Android.bp
+++ b/libc/Android.bp
@@ -101,6 +101,9 @@ cc_library_static {
         arm64: {
             srcs: ["arch-arm64/bionic/__set_tls.c"],
         },
+        riscv64: {
+            srcs: ["arch-riscv64/bionic/__set_tls.c"],
+        },
         x86: {
             srcs: [
                 "arch-x86/bionic/__libc_init_sysinfo.cpp",
@@ -887,6 +890,23 @@ cc_library_static {
             ],
         },
 
+        riscv64: {
+            srcs: [
+                "arch-riscv64/generic/bionic/memcmp.c",
+                "arch-riscv64/generic/bionic/strnlen.c",
+                "arch-riscv64/generic/bionic/strchr.c",
+                "arch-riscv64/generic/bionic/strcmp.c",
+                "arch-riscv64/generic/bionic/strlen.c",
+                "arch-riscv64/generic/bionic/memset.c",
+                "arch-riscv64/generic/bionic/memcpy.c",
+                "arch-riscv64/bionic/__bionic_clone.S",
+                "arch-riscv64/bionic/_exit_with_stack_teardown.S",
+                "arch-riscv64/bionic/setjmp.S",
+                "arch-riscv64/bionic/syscall.S",
+                "arch-riscv64/bionic/vfork.S",
+            ],
+        },
+
         x86: {
             srcs: [
                 "arch-x86/generic/string/memcmp.S",
@@ -1258,6 +1278,9 @@ cc_library_static {
         mips64: {
             srcs: ["arch-mips64/syscalls/**/*.S"],
         },
+        riscv64: {
+            srcs: ["arch-riscv64/syscalls/**/*.S"],
+        },
         x86: {
             srcs: ["arch-x86/syscalls/**/*.S"],
         },
@@ -1603,6 +1626,9 @@ cc_library {
         arm64: {
             version_script: ":libc.arm64.map",
         },
+        riscv64: {
+            version_script: ":libc.riscv64.map",
+        },
         x86: {
             // TODO: This is to work around b/24465209. Remove after root cause is fixed.
             pack_relocations: false,
@@ -1639,6 +1665,14 @@ genrule {
     cmd: "$(location :bionic-generate-version-script) arm64 $(in) $(out)",
 }
 
+genrule {
+    name: "libc.riscv64.map",
+    out: ["libc.riscv64.map"],
+    srcs: ["libc.map.txt"],
+    tool_files: [":bionic-generate-version-script"],
+    cmd: "$(location :bionic-generate-version-script) riscv64 $(in) $(out)",
+}
+
 genrule {
     name: "libc.x86.map",
     out: ["libc.x86.map"],
@@ -1695,6 +1729,11 @@ cc_library_headers {
                 "kernel/uapi/asm-mips",
             ],
         },
+        riscv64: {
+            export_include_dirs: [
+                "kernel/uapi/asm-riscv",
+            ],
+        },
         x86: {
             export_include_dirs: [
                 "kernel/uapi/asm-x86",
@@ -1742,6 +1781,9 @@ cc_library {
         arm64: {
             version_script: ":libstdc++.arm64.map",
         },
+        riscv64: {
+            version_script: ":libstdc++.riscv64.map",
+        },
         x86: {
             pack_relocations: false,
             ldflags: ["-Wl,--hash-style=both"],
@@ -1769,6 +1811,14 @@ genrule {
     cmd: "$(location :bionic-generate-version-script) arm64 $(in) $(out)",
 }
 
+genrule {
+    name: "libstdc++.riscv64.map",
+    out: ["libstdc++.riscv64.map"],
+    srcs: ["libstdc++.map.txt"],
+    tool_files: [":bionic-generate-version-script"],
+    cmd: "$(location :bionic-generate-version-script) riscv64 $(in) $(out)",
+}
+
 genrule {
     name: "libstdc++.x86.map",
     out: ["libstdc++.x86.map"],
@@ -2034,6 +2084,14 @@ ndk_headers {
     license: "NOTICE",
 }
 
+ndk_headers {
+    name: "libc_asm_riscv64",
+    from: "kernel/uapi/asm-riscv",
+    to: "riscv64-linux-android",
+    srcs: ["kernel/uapi/asm-riscv/**/*.h"],
+    license: "NOTICE",
+}
+
 ndk_headers {
     name: "libc_asm_x86",
     from: "kernel/uapi/asm-x86",
@@ -2086,6 +2144,11 @@ llndk_library {
                 "kernel/uapi/asm-mips",
             ],
         },
+        riscv64: {
+            export_include_dirs: [
+                "kernel/uapi/asm-riscv",
+            ],
+        },
         x86: {
             export_include_dirs: [
                 "kernel/uapi/asm-x86",
@@ -2148,6 +2211,16 @@ cc_object {
     ],
 }
 
+cc_object {
+    name: "libseccomp_gen_syscall_nrs_riscv64",
+    defaults: ["libseccomp_gen_syscall_nrs_defaults"],
+    local_include_dirs: [
+        "kernel/uapi/asm-riscv",
+        "kernel/uapi",
+    ],
+    cflags: ["-D__SIZEOF_POINTER__=8", "-D__LP64__"]
+}
+
 cc_object {
     name: "libseccomp_gen_syscall_nrs_x86",
     defaults: ["libseccomp_gen_syscall_nrs_defaults"],
@@ -2256,6 +2329,7 @@ cc_genrule {
         ":libseccomp_gen_syscall_nrs_arm64",
         ":libseccomp_gen_syscall_nrs_mips",
         ":libseccomp_gen_syscall_nrs_mips64",
+        ":libseccomp_gen_syscall_nrs_riscv64",
         ":libseccomp_gen_syscall_nrs_x86",
         ":libseccomp_gen_syscall_nrs_x86_64",
     ],
@@ -2290,6 +2364,7 @@ cc_genrule {
         ":libseccomp_gen_syscall_nrs_arm64",
         ":libseccomp_gen_syscall_nrs_mips",
         ":libseccomp_gen_syscall_nrs_mips64",
+        ":libseccomp_gen_syscall_nrs_riscv64",
         ":libseccomp_gen_syscall_nrs_x86",
         ":libseccomp_gen_syscall_nrs_x86_64",
     ],
@@ -2299,6 +2374,7 @@ cc_genrule {
         "arm_app_zygote_policy.cpp",
         "mips64_app_zygote_policy.cpp",
         "mips_app_zygote_policy.cpp",
+        "riscv64_app_zygote_policy.cpp",
         "x86_64_app_zygote_policy.cpp",
         "x86_app_zygote_policy.cpp",
     ],
@@ -2321,6 +2397,7 @@ cc_genrule {
         ":libseccomp_gen_syscall_nrs_arm64",
         ":libseccomp_gen_syscall_nrs_mips",
         ":libseccomp_gen_syscall_nrs_mips64",
+        ":libseccomp_gen_syscall_nrs_riscv64",
         ":libseccomp_gen_syscall_nrs_x86",
         ":libseccomp_gen_syscall_nrs_x86_64",
     ],
@@ -2330,6 +2407,7 @@ cc_genrule {
         "arm_app_policy.cpp",
         "mips64_app_policy.cpp",
         "mips_app_policy.cpp",
+        "riscv64_app_policy.cpp",
         "x86_64_app_policy.cpp",
         "x86_app_policy.cpp",
     ],
@@ -2351,6 +2429,7 @@ cc_genrule {
         ":libseccomp_gen_syscall_nrs_arm64",
         ":libseccomp_gen_syscall_nrs_mips",
         ":libseccomp_gen_syscall_nrs_mips64",
+        ":libseccomp_gen_syscall_nrs_riscv64",
         ":libseccomp_gen_syscall_nrs_x86",
         ":libseccomp_gen_syscall_nrs_x86_64",
     ],
@@ -2360,6 +2439,7 @@ cc_genrule {
         "arm_system_policy.cpp",
         "mips64_system_policy.cpp",
         "mips_system_policy.cpp",
+        "riscv64_system_policy.cpp",
         "x86_64_system_policy.cpp",
         "x86_system_policy.cpp",
     ],
@@ -2383,6 +2463,7 @@ cc_genrule {
         ":libseccomp_gen_syscall_nrs_arm64",
         ":libseccomp_gen_syscall_nrs_mips",
         ":libseccomp_gen_syscall_nrs_mips64",
+        ":libseccomp_gen_syscall_nrs_riscv64",
         ":libseccomp_gen_syscall_nrs_x86",
         ":libseccomp_gen_syscall_nrs_x86_64",
     ],
@@ -2392,6 +2473,7 @@ cc_genrule {
         "arm_global_policy.cpp",
         "mips64_global_policy.cpp",
         "mips_global_policy.cpp",
+        "riscv64_global_policy.cpp",
         "x86_64_global_policy.cpp",
         "x86_global_policy.cpp",
     ],
@@ -2456,6 +2538,9 @@ cc_library_shared {
         arm64: {
             srcs: ["arch-arm64/syscalls/__rt_sigprocmask.S"],
         },
+        riscv64: {
+            srcs: ["arch-riscv64/syscalls/__rt_sigprocmask.S"],
+        },
         x86: {
             srcs: [
                 "arch-x86/bionic/__libc_init_sysinfo.cpp",
diff --git a/libc/SECCOMP_BLACKLIST_APP.TXT b/libc/SECCOMP_BLACKLIST_APP.TXT
index b7a05c471..a041c395e 100644
--- a/libc/SECCOMP_BLACKLIST_APP.TXT
+++ b/libc/SECCOMP_BLACKLIST_APP.TXT
@@ -34,20 +34,20 @@
 
 # syscalls to modify IDs
 int     setgid:setgid32(gid_t)     arm,x86
-int     setgid:setgid(gid_t)       arm64,mips,mips64,x86_64
+int     setgid:setgid(gid_t)       arm64,mips,mips64,riscv64,x86_64
 int     setuid:setuid32(uid_t)    arm,x86
-int     setuid:setuid(uid_t)      arm64,mips,mips64,x86_64
+int     setuid:setuid(uid_t)      arm64,mips,mips64,riscv64,x86_64
 int     setregid:setregid32(gid_t, gid_t)  arm,x86
-int     setregid:setregid(gid_t, gid_t)    arm64,mips,mips64,x86_64
+int     setregid:setregid(gid_t, gid_t)    arm64,mips,mips64,riscv64,x86_64
 int     setreuid:setreuid32(uid_t, uid_t)   arm,x86
-int     setreuid:setreuid(uid_t, uid_t)     arm64,mips,mips64,x86_64
+int     setreuid:setreuid(uid_t, uid_t)     arm64,mips,mips64,riscv64,x86_64
 int     setresgid:setresgid32(gid_t, gid_t, gid_t)   arm,x86
-int     setresgid:setresgid(gid_t, gid_t, gid_t)     arm64,mips,mips64,x86_64
+int     setresgid:setresgid(gid_t, gid_t, gid_t)     arm64,mips,mips64,riscv64,x86_64
 # setresuid is explicitly allowed, see above.
 int     setfsgid(gid_t)  all
 int     setfsuid(uid_t)  all
 int     setgroups:setgroups32(int, const gid_t*)   arm,x86
-int     setgroups:setgroups(int, const gid_t*)     arm64,mips,mips64,x86_64
+int     setgroups:setgroups(int, const gid_t*)     arm64,mips,mips64,riscv64,x86_64
 
 # syscalls to modify times
 int     adjtimex(struct timex*)   all
diff --git a/libc/SECCOMP_WHITELIST_COMMON.TXT b/libc/SECCOMP_WHITELIST_COMMON.TXT
index 2faa559a2..c3403b773 100644
--- a/libc/SECCOMP_WHITELIST_COMMON.TXT
+++ b/libc/SECCOMP_WHITELIST_COMMON.TXT
@@ -7,7 +7,7 @@
 #
 # where:
 #       arch_list ::= "all" | arch+
-#       arch      ::= "arm" | "arm64" | "mips" | "mips64" | "x86" | "x86_64"
+#       arch      ::= "arm" | "arm64" | "mips" | "mips64" | "riscv64" | "x86" | "x86_64"
 #
 # Note:
 #      - syscall_name corresponds to the name of the syscall, which may differ from
@@ -26,18 +26,19 @@
 # This file is processed by a python script named genseccomp.py.
 
 # syscalls needed to boot android
-int	pivot_root:pivot_root(const char *new_root, const char *put_old)	arm64,x86_64,mips64
-int	ioprio_get:ioprio_get(int which, int who)	arm64,x86_64,mips64
-int	ioprio_set:ioprio_set(int which, int who, int ioprio)	arm64,x86_64,mips64
+int	pivot_root:pivot_root(const char *new_root, const char *put_old)	arm64,x86_64,mips64,riscv64
+int	ioprio_get:ioprio_get(int which, int who)	arm64,x86_64,mips64,riscv64
+int	ioprio_set:ioprio_set(int which, int who, int ioprio)	arm64,x86_64,mips64,riscv64
 pid_t	gettid:gettid()	all
 int	futex:futex(int *uaddr, int futex_op, int val, const struct timespec *timeout, int *uaddr2, int val3)	all
 int	clone:clone(int (*fn)(void *), void *child_stack, int flags, void *arg, ..) all
 int	rt_sigreturn:rt_sigreturn(unsigned long __unused)	all
 int	rt_tgsigqueueinfo:int rt_tgsigqueueinfo(pid_t tgid, pid_t tid, int sig, siginfo_t *uinfo)	all
 int	restart_syscall:int restart_syscall()	all
-int	fstatat64|fstatat:newfstatat(int, const char*, struct stat*, int)	mips64
-int	fstat64|fstat:fstat(int, struct stat*)	mips64
+int	fstatat64|fstatat:newfstatat(int, const char*, struct stat*, int)	mips64,riscv64
+int	fstat64|fstat:fstat(int, struct stat*)	mips64,riscv64
 int	_flush_cache:cacheflush(char* addr, const int nbytes, const int op)	mips64
+int     _flush_icache:riscv_flush_icache(void *start, void *end, unsigned long int flags) riscv64
 
 # vfork is used by java.lang.ProcessBuilder
 pid_t	vfork:vfork()	arm,x86,x86_64
diff --git a/libc/SYSCALLS.TXT b/libc/SYSCALLS.TXT
index 772f0e7c5..72816ff68 100644
--- a/libc/SYSCALLS.TXT
+++ b/libc/SYSCALLS.TXT
@@ -27,34 +27,34 @@
 int     execve(const char*, char* const*, char* const*)  all
 
 uid_t   getuid:getuid32()         arm,x86
-uid_t   getuid:getuid()           arm64,mips,mips64,x86_64
+uid_t   getuid:getuid()           arm64,mips,mips64,riscv64,x86_64
 gid_t   getgid:getgid32()         arm,x86
-gid_t   getgid:getgid()           arm64,mips,mips64,x86_64
+gid_t   getgid:getgid()           arm64,mips,mips64,riscv64,x86_64
 uid_t   geteuid:geteuid32()       arm,x86
-uid_t   geteuid:geteuid()         arm64,mips,mips64,x86_64
+uid_t   geteuid:geteuid()         arm64,mips,mips64,riscv64,x86_64
 gid_t   getegid:getegid32()       arm,x86
-gid_t   getegid:getegid()         arm64,mips,mips64,x86_64
+gid_t   getegid:getegid()         arm64,mips,mips64,riscv64,x86_64
 uid_t   getresuid:getresuid32(uid_t* ruid, uid_t* euid, uid_t* suid)   arm,x86
-uid_t   getresuid:getresuid(uid_t* ruid, uid_t* euid, uid_t* suid)     arm64,mips,mips64,x86_64
+uid_t   getresuid:getresuid(uid_t* ruid, uid_t* euid, uid_t* suid)     arm64,mips,mips64,riscv64,x86_64
 gid_t   getresgid:getresgid32(gid_t* rgid, gid_t* egid, gid_t* sgid)   arm,x86
-gid_t   getresgid:getresgid(gid_t* rgid, gid_t* egid, gid_t* sgid)     arm64,mips,mips64,x86_64
+gid_t   getresgid:getresgid(gid_t* rgid, gid_t* egid, gid_t* sgid)     arm64,mips,mips64,riscv64,x86_64
 ssize_t readahead(int, off64_t, size_t)     all
 int     getgroups:getgroups32(int, gid_t*)    arm,x86
-int     getgroups:getgroups(int, gid_t*)      arm64,mips,mips64,x86_64
+int     getgroups:getgroups(int, gid_t*)      arm64,mips,mips64,riscv64,x86_64
 pid_t   getpgid(pid_t)             all
 pid_t   getppid()                  all
 pid_t   getsid(pid_t)              all
 pid_t   setsid()                   all
 int     setgid:setgid32(gid_t)     arm,x86
-int     setgid:setgid(gid_t)       arm64,mips,mips64,x86_64
+int     setgid:setgid(gid_t)       arm64,mips,mips64,riscv64,x86_64
 int     setuid:setuid32(uid_t)    arm,x86
-int     setuid:setuid(uid_t)      arm64,mips,mips64,x86_64
+int     setuid:setuid(uid_t)      arm64,mips,mips64,riscv64,x86_64
 int     setreuid:setreuid32(uid_t, uid_t)   arm,x86
-int     setreuid:setreuid(uid_t, uid_t)     arm64,mips,mips64,x86_64
+int     setreuid:setreuid(uid_t, uid_t)     arm64,mips,mips64,riscv64,x86_64
 int     setresuid:setresuid32(uid_t, uid_t, uid_t)   arm,x86
-int     setresuid:setresuid(uid_t, uid_t, uid_t)     arm64,mips,mips64,x86_64
+int     setresuid:setresuid(uid_t, uid_t, uid_t)     arm64,mips,mips64,riscv64,x86_64
 int     setresgid:setresgid32(gid_t, gid_t, gid_t)   arm,x86
-int     setresgid:setresgid(gid_t, gid_t, gid_t)     arm64,mips,mips64,x86_64
+int     setresgid:setresgid(gid_t, gid_t, gid_t)     arm64,mips,mips64,riscv64,x86_64
 void*   __brk:brk(void*)           all
 int     kill(pid_t, int)           all
 int     tgkill(pid_t tgid, pid_t tid, int sig)  all
@@ -75,10 +75,10 @@ int prlimit64|prlimit(pid_t, int, struct rlimit64*, const struct rlimit64*)  lp6
 int prlimit64(pid_t, int, struct rlimit64*, const struct rlimit64*)  lp32
 
 int     setgroups:setgroups32(int, const gid_t*)   arm,x86
-int     setgroups:setgroups(int, const gid_t*)     arm64,mips,mips64,x86_64
+int     setgroups:setgroups(int, const gid_t*)     arm64,mips,mips64,riscv64,x86_64
 int     setpgid(pid_t, pid_t)  all
 int     setregid:setregid32(gid_t, gid_t)  arm,x86
-int     setregid:setregid(gid_t, gid_t)    arm64,mips,mips64,x86_64
+int     setregid:setregid(gid_t, gid_t)    arm64,mips,mips64,riscv64,x86_64
 int     chroot(const char*)  all
 int     prctl(int, unsigned long, unsigned long, unsigned long, unsigned long) all
 long    __arch_prctl:arch_prctl(int, unsigned long) x86_64
@@ -129,7 +129,7 @@ int         dup3(int, int, int)   all
 int         fsync(int)  all
 int         fdatasync(int) all
 int         fchown:fchown32(int, uid_t, gid_t)  arm,x86
-int         fchown:fchown(int, uid_t, gid_t)    arm64,mips,mips64,x86_64
+int         fchown:fchown(int, uid_t, gid_t)    arm64,mips,mips64,riscv64,x86_64
 void        sync(void)  all
 int         syncfs(int)  all
 int         ___fsetxattr:fsetxattr(int, const char*, const void*, size_t, int) all
@@ -137,14 +137,14 @@ ssize_t     ___fgetxattr:fgetxattr(int, const char*, void*, size_t) all
 ssize_t     ___flistxattr:flistxattr(int, char*, size_t) all
 int         fremovexattr(int, const char*) all
 
-int __getdents64:getdents64(unsigned int, struct dirent*, unsigned int)   arm,arm64,mips,mips64,x86,x86_64
+int __getdents64:getdents64(unsigned int, struct dirent*, unsigned int)   arm,arm64,mips,mips64,riscv64,x86,x86_64
 
 int __openat:openat(int, const char*, int, mode_t) all
 int ___faccessat:faccessat(int, const char*, int)  all
 int ___fchmodat:fchmodat(int, const char*, mode_t)  all
 int fchownat(int, const char*, uid_t, gid_t, int)  all
 int fstatat64|fstatat:fstatat64(int, const char*, struct stat*, int)   lp32
-int fstatat64|fstatat:newfstatat(int, const char*, struct stat*, int)  arm64,x86_64
+int fstatat64|fstatat:newfstatat(int, const char*, struct stat*, int)  arm64,x86_64,riscv64
 int linkat(int, const char*, int, const char*, int)  all
 int mkdirat(int, const char*, mode_t)  all
 int mknodat(int, const char*, mode_t, dev_t)  all
@@ -180,7 +180,7 @@ int fallocate|fallocate64(int, int, off_t, off_t) lp64
 # the POSIX functions don't set errno, and no architecture has posix_fadvise.
 int __arm_fadvise64_64:arm_fadvise64_64(int, int, off64_t, off64_t) arm
 int __fadvise64:fadvise64_64(int, off64_t, off64_t, int) x86
-int __fadvise64:fadvise64(int, off64_t, off64_t, int) arm64,mips,mips64,x86_64
+int __fadvise64:fadvise64(int, off64_t, off64_t, int) arm64,mips,mips64,riscv64,x86_64
 
 int __fstatfs64:fstatfs64(int, size_t, struct statfs*)  lp32
 int __fstatfs:fstatfs(int, struct statfs*)  lp64
@@ -188,7 +188,7 @@ int __statfs64:statfs64(const char*, size_t, struct statfs*)  lp32
 int __statfs:statfs(const char*, struct statfs*)  lp64
 
 int     fstat64|fstat:fstat64(int, struct stat*)    lp32
-int     fstat64|fstat:fstat(int, struct stat*)    arm64,x86_64
+int     fstat64|fstat:fstat(int, struct stat*)    arm64,x86_64,riscv64
 
 # file system
 int     chdir(const char*)              all
@@ -237,23 +237,23 @@ int     ___rt_sigqueueinfo:rt_sigqueueinfo(pid_t, int, siginfo_t*)  all
 int     __signalfd4:signalfd4(int, const sigset64_t*, size_t, int)  all
 
 # sockets
-int           __socket:socket(int, int, int)              arm,arm64,mips,mips64,x86_64
-int           socketpair(int, int, int, int*)    arm,arm64,mips,mips64,x86_64
-int           bind(int, struct sockaddr*, socklen_t)  arm,arm64,mips,mips64,x86_64
-int           __connect:connect(int, struct sockaddr*, socklen_t)   arm,arm64,mips,mips64,x86_64
-int           listen(int, int)                   arm,arm64,mips,mips64,x86_64
-int           __accept4:accept4(int, struct sockaddr*, socklen_t*, int)  arm,arm64,mips,mips64,x86_64
-int           getsockname(int, struct sockaddr*, socklen_t*)  arm,arm64,mips,mips64,x86_64
-int           getpeername(int, struct sockaddr*, socklen_t*)  arm,arm64,mips,mips64,x86_64
-int           sendto(int, const void*, size_t, int, const struct sockaddr*, socklen_t)  arm,arm64,mips,mips64,x86_64
-int           recvfrom(int, void*, size_t, unsigned int, struct sockaddr*, socklen_t*)  arm,arm64,mips,mips64,x86_64
-int           shutdown(int, int)  arm,arm64,mips,mips64,x86_64
-int           setsockopt(int, int, int, const void*, socklen_t)  arm,arm64,mips,mips64,x86_64
-int           getsockopt(int, int, int, void*, socklen_t*)    arm,arm64,mips,mips64,x86_64
-ssize_t       recvmsg(int, struct msghdr*, unsigned int)   arm,arm64,mips,mips64,x86_64
-ssize_t       sendmsg(int, const struct msghdr*, unsigned int)  arm,arm64,mips,mips64,x86_64
-int           recvmmsg(int, struct mmsghdr*, unsigned int, int, const struct timespec*)   arm,arm64,mips,mips64,x86_64
-int           sendmmsg(int, struct mmsghdr*, unsigned int, int)   arm,arm64,mips,mips64,x86_64
+int           __socket:socket(int, int, int)              arm,arm64,mips,mips64,riscv64,x86_64
+int           socketpair(int, int, int, int*)    arm,arm64,mips,mips64,riscv64,x86_64
+int           bind(int, struct sockaddr*, socklen_t)  arm,arm64,mips,mips64,riscv64,x86_64
+int           __connect:connect(int, struct sockaddr*, socklen_t)   arm,arm64,mips,mips64,riscv64,x86_64
+int           listen(int, int)                   arm,arm64,mips,mips64,riscv64,x86_64
+int           __accept4:accept4(int, struct sockaddr*, socklen_t*, int)  arm,arm64,mips,mips64,riscv64,x86_64
+int           getsockname(int, struct sockaddr*, socklen_t*)  arm,arm64,mips,mips64,riscv64,x86_64
+int           getpeername(int, struct sockaddr*, socklen_t*)  arm,arm64,mips,mips64,riscv64,x86_64
+int           sendto(int, const void*, size_t, int, const struct sockaddr*, socklen_t)  arm,arm64,mips,mips64,riscv64,x86_64
+int           recvfrom(int, void*, size_t, unsigned int, struct sockaddr*, socklen_t*)  arm,arm64,mips,mips64,riscv64,x86_64
+int           shutdown(int, int)  arm,arm64,mips,mips64,riscv64,x86_64
+int           setsockopt(int, int, int, const void*, socklen_t)  arm,arm64,mips,mips64,riscv64,x86_64
+int           getsockopt(int, int, int, void*, socklen_t*)    arm,arm64,mips,mips64,riscv64,x86_64
+ssize_t       recvmsg(int, struct msghdr*, unsigned int)   arm,arm64,mips,mips64,riscv64,x86_64
+ssize_t       sendmsg(int, const struct msghdr*, unsigned int)  arm,arm64,mips,mips64,riscv64,x86_64
+int           recvmmsg(int, struct mmsghdr*, unsigned int, int, const struct timespec*)   arm,arm64,mips,mips64,riscv64,x86_64
+int           sendmmsg(int, struct mmsghdr*, unsigned int, int)   arm,arm64,mips,mips64,riscv64,x86_64
 
 # sockets for x86. These are done as an "indexed" call to socketcall syscall.
 int           __socket:socketcall:1(int, int, int) x86
@@ -332,7 +332,7 @@ int setfsuid(uid_t)  all
 int setdomainname(const char*, size_t)  all
 int sethostname(const char*, size_t)  all
 
-int __sync_file_range:sync_file_range(int, off64_t, off64_t, unsigned int) arm64,mips,mips64,x86,x86_64
+int __sync_file_range:sync_file_range(int, off64_t, off64_t, unsigned int) arm64,mips,mips64,riscv64,x86,x86_64
 int __sync_file_range2:sync_file_range2(int, unsigned int, off64_t, off64_t) arm
 
 pid_t wait4(pid_t, int*, int, struct rusage*)  all
@@ -346,6 +346,9 @@ int     cacheflush:__ARM_NR_cacheflush(long start, long end, long flags)  arm
 int     _flush_cache:cacheflush(char* addr, const int nbytes, const int op) mips
 int     __set_tls:set_thread_area(void*) mips,mips64
 
+# RISC-V64-specific
+int	_flush_icache:riscv_flush_icache(void *start, void *end, unsigned long int flags) riscv64
+
 # x86-specific
 int     __set_thread_area:set_thread_area(void*) x86
 
diff --git a/libc/arch-common/bionic/crtbegin.c b/libc/arch-common/bionic/crtbegin.c
index c4d2a5a35..69ff70d30 100644
--- a/libc/arch-common/bionic/crtbegin.c
+++ b/libc/arch-common/bionic/crtbegin.c
@@ -52,6 +52,8 @@ __used static void _start_main(void* raw_args) {
 __asm__(PRE "mov x0,sp; b _start_main" POST);
 #elif defined(__arm__)
 __asm__(PRE "mov r0,sp; b _start_main" POST);
+#elif __riscv_xlen == 64
+__asm__(PRE "mv a0,sp; jal _start_main" POST);
 #elif defined(__i386__)
 __asm__(PRE "movl %esp,%eax; andl $~0xf,%esp; subl $12,%esp; pushl %eax; calll _start_main" POST);
 #elif defined(__x86_64__)
diff --git a/libc/arch-riscv64/bionic/__bionic_clone.S b/libc/arch-riscv64/bionic/__bionic_clone.S
new file mode 100644
index 000000000..67f85f361
--- /dev/null
+++ b/libc/arch-riscv64/bionic/__bionic_clone.S
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <private/bionic_asm.h>
+
+// pid_t __bionic_clone(int flags, void* child_stack, pid_t* parent_tid, void* tls, pid_t* child_tid, int (*fn)(void*), void* arg);
+
+ENTRY_PRIVATE(__bionic_clone)
+
+/* int clone(int (*fn)(void *arg), void *child_stack, int flags, void *arg,
+	     void *parent_tidptr, void *tls, void *child_tidptr) */
+
+	addi		a1, a1, -16	/* Reserve argument save space.  */
+	sd		a5, 0(a1)	/* Save function pointer.  */
+	sd		a6, 8(a1)	/* Save argument pointer.  */
+
+	/* Do the system call.  */
+	li		a7, __NR_clone
+	scall
+
+	bltz		a0, .error
+	beqz		a0, .thread_start
+
+	/* Successful return from the parent.  */
+	ret
+.error:
+	neg		a0, a0
+	j		__set_errno_internal
+.thread_start:
+	li		fp, 0
+	li		ra, 0
+
+	/* Restore the arg for user's function.  */
+	ld		a0, 0(a1)	/* Function pointer.  */
+	ld		a1, 8(a1)	/* Argument pointer.  */
+
+	/* Call the user's function.  */
+	j               __start_thread
+END(__bionic_clone)
diff --git a/libc/arch-riscv64/bionic/__set_tls.c b/libc/arch-riscv64/bionic/__set_tls.c
new file mode 100644
index 000000000..acff3f2ed
--- /dev/null
+++ b/libc/arch-riscv64/bionic/__set_tls.c
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <sys/cdefs.h>
+
+__LIBC_HIDDEN__ void __set_tls(void* tls) {
+  asm("mv tp, %0" : : "r" (tls));
+}
diff --git a/libc/arch-riscv64/bionic/_exit_with_stack_teardown.S b/libc/arch-riscv64/bionic/_exit_with_stack_teardown.S
new file mode 100644
index 000000000..d8141c8cd
--- /dev/null
+++ b/libc/arch-riscv64/bionic/_exit_with_stack_teardown.S
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <private/bionic_asm.h>
+
+// void _exit_with_stack_teardown(void* stackBase, size_t stackSize)
+ENTRY_PRIVATE(_exit_with_stack_teardown)
+  li a7, __NR_munmap
+  scall
+  // If munmap failed, we ignore the failure and exit anyway.
+
+  li a0, 0
+  li a7, __NR_exit
+  scall
+  // The exit syscall does not return.
+END(_exit_with_stack_teardown)
diff --git a/libc/arch-riscv64/bionic/setjmp.S b/libc/arch-riscv64/bionic/setjmp.S
new file mode 100644
index 000000000..4c72041e2
--- /dev/null
+++ b/libc/arch-riscv64/bionic/setjmp.S
@@ -0,0 +1,204 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <private/bionic_asm.h>
+#include <private/bionic_constants.h>
+
+ENTRY(setjmp)
+__BIONIC_WEAK_ASM_FOR_NATIVE_BRIDGE(setjmp)
+	li	a1, 1
+#ifdef __PIC__
+	auipc	a2, 0
+	/* FIXME:riscv */
+	jalr    x0, 42(a2)
+#else
+	j	sigsetjmp
+#endif
+
+END(setjmp)
+
+ENTRY(_setjmp)
+__BIONIC_WEAK_ASM_FOR_NATIVE_BRIDGE(_setjmp)
+	li	a1, 0
+#ifdef __PIC__
+	auipc	a2, 0
+	jalr    x0, 18(a2)
+#else
+	j	sigsetjmp
+#endif
+END(_setjmp)
+
+// int sigsetjmp(sigjmp_buf env, int save_signal_mask);
+ENTRY(sigsetjmp)
+__BIONIC_WEAK_ASM_FOR_NATIVE_BRIDGE(sigsetjmp)
+	addi	sp, sp, -24
+	sd	a0, 8(sp)
+	sd	ra, 16(sp)
+
+	mv	a0, a1
+#ifdef __PIC__
+	call	__bionic_setjmp_cookie_get@plt
+#else
+	j	__bionic_setjmp_cookie_get
+#endif
+	mv	a1, a0
+	ld      a0, 8(sp)
+	sd	a1, 0(a0)
+
+	beqz	a1, 1f
+	sd	a1, 0(sp)
+
+	li	a1, 0
+	addi	a2, a0, 8
+#ifdef __PIC__
+	call	sigprocmask@plt
+#else
+	j	sigprocmask
+#endif
+	ld	a1, 0(sp)
+1:
+	ld	a0, 8(sp)
+	ld	ra, 16(sp)
+	addi	sp, sp, 24
+
+        sd	ra, 16(a0)
+        sd	s0, 24(a0)
+        sd	s1, 32(a0)
+        sd	s2, 40(a0)
+        sd	s3, 48(a0)
+        sd	s4, 56(a0)
+        sd	s5, 64(a0)
+        sd	s6, 72(a0)
+        sd	s7, 80(a0)
+        sd	s8, 88(a0)
+        sd	s9, 96(a0)
+        sd	s10, 104(a0)
+        sd	s11, 112(a0)
+        sd	sp, 120(a0)
+
+        fsd	fs0, 128(a0)
+        fsd	fs1, 136(a0)
+        fsd	fs2, 144(a0)
+        fsd	fs3, 152(a0)
+        fsd	fs4, 160(a0)
+        fsd	fs5, 168(a0)
+        fsd	fs6, 176(a0)
+        fsd	fs7, 184(a0)
+        fsd	fs8, 192(a0)
+        fsd	fs9, 200(a0)
+        fsd	fs10, 208(a0)
+        fsd	fs11, 216(a0)
+
+	li	a0, 0
+	ret
+END(sigsetjmp)
+
+// void siglongjmp(sigjmp_buf env, int value);
+ENTRY(siglongjmp)
+__BIONIC_WEAK_ASM_FOR_NATIVE_BRIDGE(siglongjmp)
+	ld	a2, 0(a0)
+	beqz	a1, 1f
+
+	addi	sp, sp, -16
+	sd	a0, 0(sp)
+	sd	ra, 8(sp)
+
+	mv	t0, a1
+
+	mv	a2, a0
+	li	a0, 2
+	addi	a1, a2, 8
+	li	a2, 0
+#ifdef __PIC__
+	call	sigprocmask@plt
+#else
+	j	sigprocmask
+#endif
+	mv	a1, t0
+
+	ld	a0, 0(sp)
+	ld	ra, 8(sp)
+	addi	sp, sp, 16
+
+	ld      a2, 0(a0)
+1:
+        ld	ra, 16(a0)
+        ld	s0, 24(a0)
+        ld	s1, 32(a0)
+        ld	s2, 40(a0)
+        ld	s3, 48(a0)
+        ld	s4, 56(a0)
+        ld	s5, 64(a0)
+        ld	s6, 72(a0)
+        ld	s7, 80(a0)
+        ld	s8, 88(a0)
+        ld	s9, 96(a0)
+        ld	s10, 104(a0)
+        ld	s11, 112(a0)
+        ld	sp, 120(a0)
+
+	addi	sp, sp, -24
+	sd	ra, 0(sp)
+	sd	a0, 8(sp)
+	sd	a1, 16(sp)
+	ld	a0, 0(a0)
+#ifdef __PIC__
+	call	__bionic_setjmp_cookie_check@plt
+#else
+	jal	__bionic_setjmp_cookie_check
+#endif
+	ld	ra, 0(sp)
+	ld	a0, 8(sp)
+	ld	a1, 16(sp)
+	addi	sp, sp, 24
+
+        fld	fs0, 128(a0)
+        fld	fs1, 136(a0)
+        fld	fs2, 144(a0)
+        fld	fs3, 152(a0)
+        fld	fs4, 160(a0)
+        fld	fs5, 168(a0)
+        fld	fs6, 176(a0)
+        fld	fs7, 184(a0)
+        fld	fs8, 192(a0)
+        fld	fs9, 200(a0)
+        fld	fs10, 208(a0)
+        fld	fs11, 216(a0)
+
+	// Set return value.
+	beqz	a1, 2f
+	li	a0, 1
+2:
+	mv	a0, a1
+	ret
+END(siglongjmp)
+
+ALIAS_SYMBOL(longjmp, siglongjmp)
+__BIONIC_WEAK_ASM_FOR_NATIVE_BRIDGE(longjmp)
+ALIAS_SYMBOL(_longjmp, siglongjmp)
+__BIONIC_WEAK_ASM_FOR_NATIVE_BRIDGE(_longjmp)
diff --git a/libc/arch-riscv64/bionic/syscall.S b/libc/arch-riscv64/bionic/syscall.S
new file mode 100644
index 000000000..6e696fd21
--- /dev/null
+++ b/libc/arch-riscv64/bionic/syscall.S
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <private/bionic_asm.h>
+
+ENTRY(syscall)
+	mv      a7, a0
+	mv      a0, a1
+	mv      a1, a2
+	mv      a2, a3
+	mv      a3, a4
+	mv      a4, a5
+	mv      a5, a6
+	scall
+
+        bltz    a0, .error
+        ret
+.error:
+	neg	a0, a0
+        j       __set_errno_internal
+
+END(syscall)
diff --git a/libc/arch-riscv64/bionic/vfork.S b/libc/arch-riscv64/bionic/vfork.S
new file mode 100644
index 000000000..a94ca3958
--- /dev/null
+++ b/libc/arch-riscv64/bionic/vfork.S
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <private/bionic_asm.h>
+#include <private/bionic_asm_tls.h>
+#include <asm/signal.h>
+#include <linux/sched.h>
+
+ENTRY(vfork)
+__BIONIC_WEAK_ASM_FOR_NATIVE_BRIDGE(vfork)
+        li      a0, (CLONE_VM | CLONE_VFORK | SIGCHLD)
+        mv      a1, sp
+
+        li      a7, __NR_clone
+        scall
+
+        bltz    a0, .error
+        ret
+.error:
+	neg	a0, a0
+	j       __set_errno_internal
+
+END(vfork)
diff --git a/libc/arch-riscv64/generic/bionic/memcmp.c b/libc/arch-riscv64/generic/bionic/memcmp.c
new file mode 100644
index 000000000..1f0825dc2
--- /dev/null
+++ b/libc/arch-riscv64/generic/bionic/memcmp.c
@@ -0,0 +1,7 @@
+int memcmp (const char *s1, const char *s2, int n)
+{
+  int ret = 0;
+
+  while (n-- && (ret = *(unsigned char *) s1++ - *(unsigned char *) s2++) == 0);
+  return ret;
+}
diff --git a/libc/arch-riscv64/generic/bionic/memcpy.c b/libc/arch-riscv64/generic/bionic/memcpy.c
new file mode 100644
index 000000000..463c9e0fd
--- /dev/null
+++ b/libc/arch-riscv64/generic/bionic/memcpy.c
@@ -0,0 +1,25 @@
+char *
+memcpy (char *dst, const char *src, unsigned long n)
+{
+  char *ret = dst;
+  while (n--)
+    *dst++ = *src++;
+  return ret;
+}
+
+char *
+memmove (char *dst, const char *src, unsigned long n)
+{
+  char *ret = dst;
+  if (src < dst)
+    {
+      dst += n;
+      src += n;
+      while (n--)
+        *--dst = *--src;
+    }
+  else
+    while (n--)
+      *dst++ = *src++;
+  return ret;
+}
diff --git a/libc/arch-riscv64/generic/bionic/memset.c b/libc/arch-riscv64/generic/bionic/memset.c
new file mode 100644
index 000000000..56a2ad9a8
--- /dev/null
+++ b/libc/arch-riscv64/generic/bionic/memset.c
@@ -0,0 +1,19 @@
+#include <unistd.h>
+
+void *memset(void * s, int c, unsigned long n)
+{
+  char *r = s, *end = s + n;
+  while (r < end)
+    *r++ = c;
+  return s;
+}
+
+extern void* __memset_chk_fail();
+void *
+__memset_chk (void *dstpp, int c, unsigned long len, unsigned long dstlen)
+{
+  if (dstlen < len)
+    __memset_chk_fail ();
+
+  return memset (dstpp, c, len);
+}
diff --git a/libc/arch-riscv64/generic/bionic/strchr.c b/libc/arch-riscv64/generic/bionic/strchr.c
new file mode 100644
index 000000000..c311406d7
--- /dev/null
+++ b/libc/arch-riscv64/generic/bionic/strchr.c
@@ -0,0 +1,9 @@
+#include "stdint.h"
+
+char *strchr (const char *s, int c)
+{
+  for (; *s != (char) c; ++s)
+    if (*s == '\0')
+      return NULL;
+  return (char *) s;
+}
diff --git a/libc/arch-riscv64/generic/bionic/strcmp.c b/libc/arch-riscv64/generic/bionic/strcmp.c
new file mode 100644
index 000000000..db38ce915
--- /dev/null
+++ b/libc/arch-riscv64/generic/bionic/strcmp.c
@@ -0,0 +1,8 @@
+int
+strcmp (const char *s1, const char *s2)
+{
+  int ret;
+
+  while ((ret = *(unsigned char *) s1 - *(unsigned char*) s2++) == 0 && *s1++);
+  return ret;
+}
diff --git a/libc/arch-riscv64/generic/bionic/strlen.c b/libc/arch-riscv64/generic/bionic/strlen.c
new file mode 100644
index 000000000..660e0b55f
--- /dev/null
+++ b/libc/arch-riscv64/generic/bionic/strlen.c
@@ -0,0 +1,7 @@
+long strlen(char *s)
+{
+  char *p;
+
+  for (p = s; *p; ++p);
+  return p - s;
+}
diff --git a/libc/arch-riscv64/generic/bionic/strnlen.c b/libc/arch-riscv64/generic/bionic/strnlen.c
new file mode 100644
index 000000000..65b9c2a30
--- /dev/null
+++ b/libc/arch-riscv64/generic/bionic/strnlen.c
@@ -0,0 +1,7 @@
+int strnlen (const char *s, int maxlen)
+{
+  int i;
+
+  for (i = 0; i < maxlen && s[i]; ++i);
+  return i;
+}
diff --git a/libc/arch-riscv64/syscalls/___clock_nanosleep.S b/libc/arch-riscv64/syscalls/___clock_nanosleep.S
new file mode 100644
index 000000000..dee10c701
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/___clock_nanosleep.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(___clock_nanosleep)
+    li      a7, __NR_clock_nanosleep
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(___clock_nanosleep)
+.hidden ___clock_nanosleep
diff --git a/libc/arch-riscv64/syscalls/___close.S b/libc/arch-riscv64/syscalls/___close.S
new file mode 100644
index 000000000..cb02eb13e
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/___close.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(___close)
+    li      a7, __NR_close
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(___close)
+.hidden ___close
diff --git a/libc/arch-riscv64/syscalls/___faccessat.S b/libc/arch-riscv64/syscalls/___faccessat.S
new file mode 100644
index 000000000..f03fa53e7
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/___faccessat.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(___faccessat)
+    li      a7, __NR_faccessat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(___faccessat)
+.hidden ___faccessat
diff --git a/libc/arch-riscv64/syscalls/___fchmod.S b/libc/arch-riscv64/syscalls/___fchmod.S
new file mode 100644
index 000000000..18da6b2cf
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/___fchmod.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(___fchmod)
+    li      a7, __NR_fchmod
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(___fchmod)
+.hidden ___fchmod
diff --git a/libc/arch-riscv64/syscalls/___fchmodat.S b/libc/arch-riscv64/syscalls/___fchmodat.S
new file mode 100644
index 000000000..d0fd475aa
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/___fchmodat.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(___fchmodat)
+    li      a7, __NR_fchmodat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(___fchmodat)
+.hidden ___fchmodat
diff --git a/libc/arch-riscv64/syscalls/___fgetxattr.S b/libc/arch-riscv64/syscalls/___fgetxattr.S
new file mode 100644
index 000000000..d05aa54e2
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/___fgetxattr.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(___fgetxattr)
+    li      a7, __NR_fgetxattr
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(___fgetxattr)
+.hidden ___fgetxattr
diff --git a/libc/arch-riscv64/syscalls/___flistxattr.S b/libc/arch-riscv64/syscalls/___flistxattr.S
new file mode 100644
index 000000000..b9bec8e77
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/___flistxattr.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(___flistxattr)
+    li      a7, __NR_flistxattr
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(___flistxattr)
+.hidden ___flistxattr
diff --git a/libc/arch-riscv64/syscalls/___fsetxattr.S b/libc/arch-riscv64/syscalls/___fsetxattr.S
new file mode 100644
index 000000000..3d6c4e703
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/___fsetxattr.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(___fsetxattr)
+    li      a7, __NR_fsetxattr
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(___fsetxattr)
+.hidden ___fsetxattr
diff --git a/libc/arch-riscv64/syscalls/___mremap.S b/libc/arch-riscv64/syscalls/___mremap.S
new file mode 100644
index 000000000..4d0daac3b
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/___mremap.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(___mremap)
+    li      a7, __NR_mremap
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(___mremap)
+.hidden ___mremap
diff --git a/libc/arch-riscv64/syscalls/___rt_sigqueueinfo.S b/libc/arch-riscv64/syscalls/___rt_sigqueueinfo.S
new file mode 100644
index 000000000..55ce155de
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/___rt_sigqueueinfo.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(___rt_sigqueueinfo)
+    li      a7, __NR_rt_sigqueueinfo
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(___rt_sigqueueinfo)
+.hidden ___rt_sigqueueinfo
diff --git a/libc/arch-riscv64/syscalls/__accept4.S b/libc/arch-riscv64/syscalls/__accept4.S
new file mode 100644
index 000000000..51fe03469
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__accept4.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__accept4)
+    li      a7, __NR_accept4
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__accept4)
+.hidden __accept4
diff --git a/libc/arch-riscv64/syscalls/__brk.S b/libc/arch-riscv64/syscalls/__brk.S
new file mode 100644
index 000000000..4d4358b98
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__brk.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__brk)
+    li      a7, __NR_brk
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__brk)
+.hidden __brk
diff --git a/libc/arch-riscv64/syscalls/__clock_getres.S b/libc/arch-riscv64/syscalls/__clock_getres.S
new file mode 100644
index 000000000..c7e585278
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__clock_getres.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__clock_getres)
+    li      a7, __NR_clock_getres
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__clock_getres)
+.hidden __clock_getres
diff --git a/libc/arch-riscv64/syscalls/__clock_gettime.S b/libc/arch-riscv64/syscalls/__clock_gettime.S
new file mode 100644
index 000000000..6350f48d3
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__clock_gettime.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__clock_gettime)
+    li      a7, __NR_clock_gettime
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__clock_gettime)
+.hidden __clock_gettime
diff --git a/libc/arch-riscv64/syscalls/__connect.S b/libc/arch-riscv64/syscalls/__connect.S
new file mode 100644
index 000000000..8c8484fae
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__connect.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__connect)
+    li      a7, __NR_connect
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__connect)
+.hidden __connect
diff --git a/libc/arch-riscv64/syscalls/__epoll_pwait.S b/libc/arch-riscv64/syscalls/__epoll_pwait.S
new file mode 100644
index 000000000..ee34fee46
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__epoll_pwait.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__epoll_pwait)
+    li      a7, __NR_epoll_pwait
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__epoll_pwait)
+.hidden __epoll_pwait
diff --git a/libc/arch-riscv64/syscalls/__exit.S b/libc/arch-riscv64/syscalls/__exit.S
new file mode 100644
index 000000000..abaf15d67
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__exit.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__exit)
+    li      a7, __NR_exit
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__exit)
+.hidden __exit
diff --git a/libc/arch-riscv64/syscalls/__fadvise64.S b/libc/arch-riscv64/syscalls/__fadvise64.S
new file mode 100644
index 000000000..af2588358
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__fadvise64.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__fadvise64)
+    li      a7, __NR_fadvise64
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__fadvise64)
+.hidden __fadvise64
diff --git a/libc/arch-riscv64/syscalls/__fstatfs.S b/libc/arch-riscv64/syscalls/__fstatfs.S
new file mode 100644
index 000000000..f80114972
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__fstatfs.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__fstatfs)
+    li      a7, __NR_fstatfs
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__fstatfs)
+.hidden __fstatfs
diff --git a/libc/arch-riscv64/syscalls/__getcpu.S b/libc/arch-riscv64/syscalls/__getcpu.S
new file mode 100644
index 000000000..8c56a4f58
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__getcpu.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__getcpu)
+    li      a7, __NR_getcpu
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__getcpu)
+.hidden __getcpu
diff --git a/libc/arch-riscv64/syscalls/__getcwd.S b/libc/arch-riscv64/syscalls/__getcwd.S
new file mode 100644
index 000000000..989540617
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__getcwd.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__getcwd)
+    li      a7, __NR_getcwd
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__getcwd)
+.hidden __getcwd
diff --git a/libc/arch-riscv64/syscalls/__getdents64.S b/libc/arch-riscv64/syscalls/__getdents64.S
new file mode 100644
index 000000000..c2e76f28e
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__getdents64.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__getdents64)
+    li      a7, __NR_getdents64
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__getdents64)
+.hidden __getdents64
diff --git a/libc/arch-riscv64/syscalls/__getpid.S b/libc/arch-riscv64/syscalls/__getpid.S
new file mode 100644
index 000000000..5d0eda42d
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__getpid.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__getpid)
+    li      a7, __NR_getpid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__getpid)
+.hidden __getpid
diff --git a/libc/arch-riscv64/syscalls/__getpriority.S b/libc/arch-riscv64/syscalls/__getpriority.S
new file mode 100644
index 000000000..5a9b18e22
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__getpriority.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__getpriority)
+    li      a7, __NR_getpriority
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__getpriority)
+.hidden __getpriority
diff --git a/libc/arch-riscv64/syscalls/__gettimeofday.S b/libc/arch-riscv64/syscalls/__gettimeofday.S
new file mode 100644
index 000000000..6139fed9d
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__gettimeofday.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__gettimeofday)
+    li      a7, __NR_gettimeofday
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__gettimeofday)
+.hidden __gettimeofday
diff --git a/libc/arch-riscv64/syscalls/__ioctl.S b/libc/arch-riscv64/syscalls/__ioctl.S
new file mode 100644
index 000000000..6538d23b6
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__ioctl.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__ioctl)
+    li      a7, __NR_ioctl
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__ioctl)
+.hidden __ioctl
diff --git a/libc/arch-riscv64/syscalls/__openat.S b/libc/arch-riscv64/syscalls/__openat.S
new file mode 100644
index 000000000..788bbb8f4
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__openat.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__openat)
+    li      a7, __NR_openat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__openat)
+.hidden __openat
diff --git a/libc/arch-riscv64/syscalls/__ppoll.S b/libc/arch-riscv64/syscalls/__ppoll.S
new file mode 100644
index 000000000..8b9f5e773
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__ppoll.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__ppoll)
+    li      a7, __NR_ppoll
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__ppoll)
+.hidden __ppoll
diff --git a/libc/arch-riscv64/syscalls/__pselect6.S b/libc/arch-riscv64/syscalls/__pselect6.S
new file mode 100644
index 000000000..7eac5fa6a
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__pselect6.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__pselect6)
+    li      a7, __NR_pselect6
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__pselect6)
+.hidden __pselect6
diff --git a/libc/arch-riscv64/syscalls/__ptrace.S b/libc/arch-riscv64/syscalls/__ptrace.S
new file mode 100644
index 000000000..7b62c2be8
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__ptrace.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__ptrace)
+    li      a7, __NR_ptrace
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__ptrace)
+.hidden __ptrace
diff --git a/libc/arch-riscv64/syscalls/__reboot.S b/libc/arch-riscv64/syscalls/__reboot.S
new file mode 100644
index 000000000..fa9d24041
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__reboot.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__reboot)
+    li      a7, __NR_reboot
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__reboot)
+.hidden __reboot
diff --git a/libc/arch-riscv64/syscalls/__rt_sigaction.S b/libc/arch-riscv64/syscalls/__rt_sigaction.S
new file mode 100644
index 000000000..74f40aa23
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__rt_sigaction.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__rt_sigaction)
+    li      a7, __NR_rt_sigaction
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__rt_sigaction)
+.hidden __rt_sigaction
diff --git a/libc/arch-riscv64/syscalls/__rt_sigpending.S b/libc/arch-riscv64/syscalls/__rt_sigpending.S
new file mode 100644
index 000000000..be00d6cba
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__rt_sigpending.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__rt_sigpending)
+    li      a7, __NR_rt_sigpending
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__rt_sigpending)
+.hidden __rt_sigpending
diff --git a/libc/arch-riscv64/syscalls/__rt_sigprocmask.S b/libc/arch-riscv64/syscalls/__rt_sigprocmask.S
new file mode 100644
index 000000000..ae2b05601
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__rt_sigprocmask.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__rt_sigprocmask)
+    li      a7, __NR_rt_sigprocmask
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__rt_sigprocmask)
+.hidden __rt_sigprocmask
diff --git a/libc/arch-riscv64/syscalls/__rt_sigsuspend.S b/libc/arch-riscv64/syscalls/__rt_sigsuspend.S
new file mode 100644
index 000000000..856580e2d
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__rt_sigsuspend.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__rt_sigsuspend)
+    li      a7, __NR_rt_sigsuspend
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__rt_sigsuspend)
+.hidden __rt_sigsuspend
diff --git a/libc/arch-riscv64/syscalls/__rt_sigtimedwait.S b/libc/arch-riscv64/syscalls/__rt_sigtimedwait.S
new file mode 100644
index 000000000..e01fcd416
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__rt_sigtimedwait.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__rt_sigtimedwait)
+    li      a7, __NR_rt_sigtimedwait
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__rt_sigtimedwait)
+.hidden __rt_sigtimedwait
diff --git a/libc/arch-riscv64/syscalls/__sched_getaffinity.S b/libc/arch-riscv64/syscalls/__sched_getaffinity.S
new file mode 100644
index 000000000..dd84276ed
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__sched_getaffinity.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__sched_getaffinity)
+    li      a7, __NR_sched_getaffinity
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__sched_getaffinity)
+.hidden __sched_getaffinity
diff --git a/libc/arch-riscv64/syscalls/__set_tid_address.S b/libc/arch-riscv64/syscalls/__set_tid_address.S
new file mode 100644
index 000000000..38694c4bc
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__set_tid_address.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__set_tid_address)
+    li      a7, __NR_set_tid_address
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__set_tid_address)
+.hidden __set_tid_address
diff --git a/libc/arch-riscv64/syscalls/__signalfd4.S b/libc/arch-riscv64/syscalls/__signalfd4.S
new file mode 100644
index 000000000..593206c6d
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__signalfd4.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__signalfd4)
+    li      a7, __NR_signalfd4
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__signalfd4)
+.hidden __signalfd4
diff --git a/libc/arch-riscv64/syscalls/__socket.S b/libc/arch-riscv64/syscalls/__socket.S
new file mode 100644
index 000000000..ad03c2847
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__socket.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__socket)
+    li      a7, __NR_socket
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__socket)
+.hidden __socket
diff --git a/libc/arch-riscv64/syscalls/__statfs.S b/libc/arch-riscv64/syscalls/__statfs.S
new file mode 100644
index 000000000..9fc8b0bb3
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__statfs.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__statfs)
+    li      a7, __NR_statfs
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__statfs)
+.hidden __statfs
diff --git a/libc/arch-riscv64/syscalls/__sync_file_range.S b/libc/arch-riscv64/syscalls/__sync_file_range.S
new file mode 100644
index 000000000..a4e392848
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__sync_file_range.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__sync_file_range)
+    li      a7, __NR_sync_file_range
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__sync_file_range)
+.hidden __sync_file_range
diff --git a/libc/arch-riscv64/syscalls/__timer_create.S b/libc/arch-riscv64/syscalls/__timer_create.S
new file mode 100644
index 000000000..0a0475d5c
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__timer_create.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__timer_create)
+    li      a7, __NR_timer_create
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__timer_create)
+.hidden __timer_create
diff --git a/libc/arch-riscv64/syscalls/__timer_delete.S b/libc/arch-riscv64/syscalls/__timer_delete.S
new file mode 100644
index 000000000..503bff0e9
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__timer_delete.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__timer_delete)
+    li      a7, __NR_timer_delete
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__timer_delete)
+.hidden __timer_delete
diff --git a/libc/arch-riscv64/syscalls/__timer_getoverrun.S b/libc/arch-riscv64/syscalls/__timer_getoverrun.S
new file mode 100644
index 000000000..7038666bb
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__timer_getoverrun.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__timer_getoverrun)
+    li      a7, __NR_timer_getoverrun
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__timer_getoverrun)
+.hidden __timer_getoverrun
diff --git a/libc/arch-riscv64/syscalls/__timer_gettime.S b/libc/arch-riscv64/syscalls/__timer_gettime.S
new file mode 100644
index 000000000..b1fb96f33
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__timer_gettime.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__timer_gettime)
+    li      a7, __NR_timer_gettime
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__timer_gettime)
+.hidden __timer_gettime
diff --git a/libc/arch-riscv64/syscalls/__timer_settime.S b/libc/arch-riscv64/syscalls/__timer_settime.S
new file mode 100644
index 000000000..fc093f614
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__timer_settime.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__timer_settime)
+    li      a7, __NR_timer_settime
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__timer_settime)
+.hidden __timer_settime
diff --git a/libc/arch-riscv64/syscalls/__waitid.S b/libc/arch-riscv64/syscalls/__waitid.S
new file mode 100644
index 000000000..a3d13c11b
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/__waitid.S
@@ -0,0 +1,17 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(__waitid)
+    li      a7, __NR_waitid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(__waitid)
+.hidden __waitid
diff --git a/libc/arch-riscv64/syscalls/_exit.S b/libc/arch-riscv64/syscalls/_exit.S
new file mode 100644
index 000000000..131d003ab
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/_exit.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(_exit)
+    li      a7, __NR_exit_group
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(_exit)
+
+ALIAS_SYMBOL(_Exit, _exit)
diff --git a/libc/arch-riscv64/syscalls/_flush_icache.S b/libc/arch-riscv64/syscalls/_flush_icache.S
new file mode 100644
index 000000000..e8897e989
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/_flush_icache.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(_flush_icache)
+    li      a7, __NR_riscv_flush_icache
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(_flush_icache)
diff --git a/libc/arch-riscv64/syscalls/acct.S b/libc/arch-riscv64/syscalls/acct.S
new file mode 100644
index 000000000..308cd6606
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/acct.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(acct)
+    li      a7, __NR_acct
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(acct)
diff --git a/libc/arch-riscv64/syscalls/adjtimex.S b/libc/arch-riscv64/syscalls/adjtimex.S
new file mode 100644
index 000000000..493739940
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/adjtimex.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(adjtimex)
+    li      a7, __NR_adjtimex
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(adjtimex)
diff --git a/libc/arch-riscv64/syscalls/bind.S b/libc/arch-riscv64/syscalls/bind.S
new file mode 100644
index 000000000..fb727578e
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/bind.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(bind)
+    li      a7, __NR_bind
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(bind)
diff --git a/libc/arch-riscv64/syscalls/capget.S b/libc/arch-riscv64/syscalls/capget.S
new file mode 100644
index 000000000..ee5dc49e9
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/capget.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(capget)
+    li      a7, __NR_capget
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(capget)
diff --git a/libc/arch-riscv64/syscalls/capset.S b/libc/arch-riscv64/syscalls/capset.S
new file mode 100644
index 000000000..493e70b89
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/capset.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(capset)
+    li      a7, __NR_capset
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(capset)
diff --git a/libc/arch-riscv64/syscalls/chdir.S b/libc/arch-riscv64/syscalls/chdir.S
new file mode 100644
index 000000000..2183064e1
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/chdir.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(chdir)
+    li      a7, __NR_chdir
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(chdir)
diff --git a/libc/arch-riscv64/syscalls/chroot.S b/libc/arch-riscv64/syscalls/chroot.S
new file mode 100644
index 000000000..6cbcc9678
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/chroot.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(chroot)
+    li      a7, __NR_chroot
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(chroot)
diff --git a/libc/arch-riscv64/syscalls/clock_adjtime.S b/libc/arch-riscv64/syscalls/clock_adjtime.S
new file mode 100644
index 000000000..cf411fdec
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/clock_adjtime.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(clock_adjtime)
+    li      a7, __NR_clock_adjtime
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(clock_adjtime)
diff --git a/libc/arch-riscv64/syscalls/clock_settime.S b/libc/arch-riscv64/syscalls/clock_settime.S
new file mode 100644
index 000000000..048a0b20b
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/clock_settime.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(clock_settime)
+    li      a7, __NR_clock_settime
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(clock_settime)
diff --git a/libc/arch-riscv64/syscalls/delete_module.S b/libc/arch-riscv64/syscalls/delete_module.S
new file mode 100644
index 000000000..4134da85e
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/delete_module.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(delete_module)
+    li      a7, __NR_delete_module
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(delete_module)
diff --git a/libc/arch-riscv64/syscalls/dup.S b/libc/arch-riscv64/syscalls/dup.S
new file mode 100644
index 000000000..6ba678818
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/dup.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(dup)
+    li      a7, __NR_dup
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(dup)
diff --git a/libc/arch-riscv64/syscalls/dup3.S b/libc/arch-riscv64/syscalls/dup3.S
new file mode 100644
index 000000000..d20926fe7
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/dup3.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(dup3)
+    li      a7, __NR_dup3
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(dup3)
diff --git a/libc/arch-riscv64/syscalls/epoll_create1.S b/libc/arch-riscv64/syscalls/epoll_create1.S
new file mode 100644
index 000000000..4e556a752
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/epoll_create1.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(epoll_create1)
+    li      a7, __NR_epoll_create1
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(epoll_create1)
diff --git a/libc/arch-riscv64/syscalls/epoll_ctl.S b/libc/arch-riscv64/syscalls/epoll_ctl.S
new file mode 100644
index 000000000..27fbc78ca
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/epoll_ctl.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(epoll_ctl)
+    li      a7, __NR_epoll_ctl
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(epoll_ctl)
diff --git a/libc/arch-riscv64/syscalls/eventfd.S b/libc/arch-riscv64/syscalls/eventfd.S
new file mode 100644
index 000000000..49ee775ad
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/eventfd.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(eventfd)
+    li      a7, __NR_eventfd2
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(eventfd)
diff --git a/libc/arch-riscv64/syscalls/execve.S b/libc/arch-riscv64/syscalls/execve.S
new file mode 100644
index 000000000..1bfb9397c
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/execve.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(execve)
+    li      a7, __NR_execve
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(execve)
diff --git a/libc/arch-riscv64/syscalls/fallocate.S b/libc/arch-riscv64/syscalls/fallocate.S
new file mode 100644
index 000000000..371949795
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/fallocate.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(fallocate)
+    li      a7, __NR_fallocate
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(fallocate)
+
+ALIAS_SYMBOL(fallocate64, fallocate)
diff --git a/libc/arch-riscv64/syscalls/fchdir.S b/libc/arch-riscv64/syscalls/fchdir.S
new file mode 100644
index 000000000..b7f3c3ce5
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/fchdir.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(fchdir)
+    li      a7, __NR_fchdir
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(fchdir)
diff --git a/libc/arch-riscv64/syscalls/fchown.S b/libc/arch-riscv64/syscalls/fchown.S
new file mode 100644
index 000000000..7dd25afcb
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/fchown.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(fchown)
+    li      a7, __NR_fchown
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(fchown)
diff --git a/libc/arch-riscv64/syscalls/fchownat.S b/libc/arch-riscv64/syscalls/fchownat.S
new file mode 100644
index 000000000..94d68f3ed
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/fchownat.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(fchownat)
+    li      a7, __NR_fchownat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(fchownat)
diff --git a/libc/arch-riscv64/syscalls/fcntl.S b/libc/arch-riscv64/syscalls/fcntl.S
new file mode 100644
index 000000000..df8d9d610
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/fcntl.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(fcntl)
+    li      a7, __NR_fcntl
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(fcntl)
diff --git a/libc/arch-riscv64/syscalls/fdatasync.S b/libc/arch-riscv64/syscalls/fdatasync.S
new file mode 100644
index 000000000..e8027ca7d
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/fdatasync.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(fdatasync)
+    li      a7, __NR_fdatasync
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(fdatasync)
diff --git a/libc/arch-riscv64/syscalls/flock.S b/libc/arch-riscv64/syscalls/flock.S
new file mode 100644
index 000000000..fcc2b1e3b
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/flock.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(flock)
+    li      a7, __NR_flock
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(flock)
diff --git a/libc/arch-riscv64/syscalls/fremovexattr.S b/libc/arch-riscv64/syscalls/fremovexattr.S
new file mode 100644
index 000000000..458e44824
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/fremovexattr.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(fremovexattr)
+    li      a7, __NR_fremovexattr
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(fremovexattr)
diff --git a/libc/arch-riscv64/syscalls/fstat64.S b/libc/arch-riscv64/syscalls/fstat64.S
new file mode 100644
index 000000000..d6e16c404
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/fstat64.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(fstat64)
+    li      a7, __NR_fstat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(fstat64)
+
+ALIAS_SYMBOL(fstat, fstat64)
diff --git a/libc/arch-riscv64/syscalls/fstatat64.S b/libc/arch-riscv64/syscalls/fstatat64.S
new file mode 100644
index 000000000..bc46e7d7f
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/fstatat64.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(fstatat64)
+    li      a7, __NR_newfstatat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(fstatat64)
+
+ALIAS_SYMBOL(fstatat, fstatat64)
diff --git a/libc/arch-riscv64/syscalls/fsync.S b/libc/arch-riscv64/syscalls/fsync.S
new file mode 100644
index 000000000..24b0e9dc9
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/fsync.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(fsync)
+    li      a7, __NR_fsync
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(fsync)
diff --git a/libc/arch-riscv64/syscalls/ftruncate.S b/libc/arch-riscv64/syscalls/ftruncate.S
new file mode 100644
index 000000000..c2ea5ed64
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/ftruncate.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(ftruncate)
+    li      a7, __NR_ftruncate
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(ftruncate)
+
+ALIAS_SYMBOL(ftruncate64, ftruncate)
diff --git a/libc/arch-riscv64/syscalls/getegid.S b/libc/arch-riscv64/syscalls/getegid.S
new file mode 100644
index 000000000..89c588f97
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getegid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getegid)
+    li      a7, __NR_getegid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getegid)
diff --git a/libc/arch-riscv64/syscalls/geteuid.S b/libc/arch-riscv64/syscalls/geteuid.S
new file mode 100644
index 000000000..4195562cd
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/geteuid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(geteuid)
+    li      a7, __NR_geteuid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(geteuid)
diff --git a/libc/arch-riscv64/syscalls/getgid.S b/libc/arch-riscv64/syscalls/getgid.S
new file mode 100644
index 000000000..ac02ed8a2
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getgid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getgid)
+    li      a7, __NR_getgid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getgid)
diff --git a/libc/arch-riscv64/syscalls/getgroups.S b/libc/arch-riscv64/syscalls/getgroups.S
new file mode 100644
index 000000000..9029e172e
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getgroups.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getgroups)
+    li      a7, __NR_getgroups
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getgroups)
diff --git a/libc/arch-riscv64/syscalls/getitimer.S b/libc/arch-riscv64/syscalls/getitimer.S
new file mode 100644
index 000000000..5535e7991
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getitimer.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getitimer)
+    li      a7, __NR_getitimer
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getitimer)
diff --git a/libc/arch-riscv64/syscalls/getpeername.S b/libc/arch-riscv64/syscalls/getpeername.S
new file mode 100644
index 000000000..61fb327e2
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getpeername.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getpeername)
+    li      a7, __NR_getpeername
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getpeername)
diff --git a/libc/arch-riscv64/syscalls/getpgid.S b/libc/arch-riscv64/syscalls/getpgid.S
new file mode 100644
index 000000000..bcf4d4227
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getpgid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getpgid)
+    li      a7, __NR_getpgid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getpgid)
diff --git a/libc/arch-riscv64/syscalls/getppid.S b/libc/arch-riscv64/syscalls/getppid.S
new file mode 100644
index 000000000..8f50fdd6c
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getppid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getppid)
+    li      a7, __NR_getppid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getppid)
diff --git a/libc/arch-riscv64/syscalls/getrandom.S b/libc/arch-riscv64/syscalls/getrandom.S
new file mode 100644
index 000000000..11247e602
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getrandom.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getrandom)
+    li      a7, __NR_getrandom
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getrandom)
diff --git a/libc/arch-riscv64/syscalls/getresgid.S b/libc/arch-riscv64/syscalls/getresgid.S
new file mode 100644
index 000000000..3d5548933
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getresgid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getresgid)
+    li      a7, __NR_getresgid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getresgid)
diff --git a/libc/arch-riscv64/syscalls/getresuid.S b/libc/arch-riscv64/syscalls/getresuid.S
new file mode 100644
index 000000000..268a27e17
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getresuid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getresuid)
+    li      a7, __NR_getresuid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getresuid)
diff --git a/libc/arch-riscv64/syscalls/getrlimit.S b/libc/arch-riscv64/syscalls/getrlimit.S
new file mode 100644
index 000000000..d5f657626
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getrlimit.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getrlimit)
+    li      a7, __NR_getrlimit
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getrlimit)
+
+ALIAS_SYMBOL(getrlimit64, getrlimit)
diff --git a/libc/arch-riscv64/syscalls/getrusage.S b/libc/arch-riscv64/syscalls/getrusage.S
new file mode 100644
index 000000000..e897ea5b3
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getrusage.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getrusage)
+    li      a7, __NR_getrusage
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getrusage)
diff --git a/libc/arch-riscv64/syscalls/getsid.S b/libc/arch-riscv64/syscalls/getsid.S
new file mode 100644
index 000000000..36863c2de
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getsid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getsid)
+    li      a7, __NR_getsid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getsid)
diff --git a/libc/arch-riscv64/syscalls/getsockname.S b/libc/arch-riscv64/syscalls/getsockname.S
new file mode 100644
index 000000000..854708c6a
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getsockname.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getsockname)
+    li      a7, __NR_getsockname
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getsockname)
diff --git a/libc/arch-riscv64/syscalls/getsockopt.S b/libc/arch-riscv64/syscalls/getsockopt.S
new file mode 100644
index 000000000..280cabf93
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getsockopt.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getsockopt)
+    li      a7, __NR_getsockopt
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getsockopt)
diff --git a/libc/arch-riscv64/syscalls/getuid.S b/libc/arch-riscv64/syscalls/getuid.S
new file mode 100644
index 000000000..c2d63e1ed
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getuid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getuid)
+    li      a7, __NR_getuid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getuid)
diff --git a/libc/arch-riscv64/syscalls/getxattr.S b/libc/arch-riscv64/syscalls/getxattr.S
new file mode 100644
index 000000000..ad1bbd062
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/getxattr.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(getxattr)
+    li      a7, __NR_getxattr
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(getxattr)
diff --git a/libc/arch-riscv64/syscalls/init_module.S b/libc/arch-riscv64/syscalls/init_module.S
new file mode 100644
index 000000000..abe7db388
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/init_module.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(init_module)
+    li      a7, __NR_init_module
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(init_module)
diff --git a/libc/arch-riscv64/syscalls/inotify_add_watch.S b/libc/arch-riscv64/syscalls/inotify_add_watch.S
new file mode 100644
index 000000000..9636cbaf4
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/inotify_add_watch.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(inotify_add_watch)
+    li      a7, __NR_inotify_add_watch
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(inotify_add_watch)
diff --git a/libc/arch-riscv64/syscalls/inotify_init1.S b/libc/arch-riscv64/syscalls/inotify_init1.S
new file mode 100644
index 000000000..900c62904
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/inotify_init1.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(inotify_init1)
+    li      a7, __NR_inotify_init1
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(inotify_init1)
diff --git a/libc/arch-riscv64/syscalls/inotify_rm_watch.S b/libc/arch-riscv64/syscalls/inotify_rm_watch.S
new file mode 100644
index 000000000..1c6651a3a
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/inotify_rm_watch.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(inotify_rm_watch)
+    li      a7, __NR_inotify_rm_watch
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(inotify_rm_watch)
diff --git a/libc/arch-riscv64/syscalls/kill.S b/libc/arch-riscv64/syscalls/kill.S
new file mode 100644
index 000000000..b3393661e
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/kill.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(kill)
+    li      a7, __NR_kill
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(kill)
diff --git a/libc/arch-riscv64/syscalls/klogctl.S b/libc/arch-riscv64/syscalls/klogctl.S
new file mode 100644
index 000000000..4eea8166e
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/klogctl.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(klogctl)
+    li      a7, __NR_syslog
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(klogctl)
diff --git a/libc/arch-riscv64/syscalls/lgetxattr.S b/libc/arch-riscv64/syscalls/lgetxattr.S
new file mode 100644
index 000000000..4b73f51ef
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/lgetxattr.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(lgetxattr)
+    li      a7, __NR_lgetxattr
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(lgetxattr)
diff --git a/libc/arch-riscv64/syscalls/linkat.S b/libc/arch-riscv64/syscalls/linkat.S
new file mode 100644
index 000000000..11fe7d55c
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/linkat.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(linkat)
+    li      a7, __NR_linkat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(linkat)
diff --git a/libc/arch-riscv64/syscalls/listen.S b/libc/arch-riscv64/syscalls/listen.S
new file mode 100644
index 000000000..7a9d595b6
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/listen.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(listen)
+    li      a7, __NR_listen
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(listen)
diff --git a/libc/arch-riscv64/syscalls/listxattr.S b/libc/arch-riscv64/syscalls/listxattr.S
new file mode 100644
index 000000000..b1a7cf69d
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/listxattr.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(listxattr)
+    li      a7, __NR_listxattr
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(listxattr)
diff --git a/libc/arch-riscv64/syscalls/llistxattr.S b/libc/arch-riscv64/syscalls/llistxattr.S
new file mode 100644
index 000000000..27839bb0c
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/llistxattr.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(llistxattr)
+    li      a7, __NR_llistxattr
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(llistxattr)
diff --git a/libc/arch-riscv64/syscalls/lremovexattr.S b/libc/arch-riscv64/syscalls/lremovexattr.S
new file mode 100644
index 000000000..824fe82e9
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/lremovexattr.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(lremovexattr)
+    li      a7, __NR_lremovexattr
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(lremovexattr)
diff --git a/libc/arch-riscv64/syscalls/lseek.S b/libc/arch-riscv64/syscalls/lseek.S
new file mode 100644
index 000000000..7981584ab
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/lseek.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(lseek)
+    li      a7, __NR_lseek
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(lseek)
+
+ALIAS_SYMBOL(lseek64, lseek)
diff --git a/libc/arch-riscv64/syscalls/lsetxattr.S b/libc/arch-riscv64/syscalls/lsetxattr.S
new file mode 100644
index 000000000..3d2ad96e8
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/lsetxattr.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(lsetxattr)
+    li      a7, __NR_lsetxattr
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(lsetxattr)
diff --git a/libc/arch-riscv64/syscalls/madvise.S b/libc/arch-riscv64/syscalls/madvise.S
new file mode 100644
index 000000000..709cd730e
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/madvise.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(madvise)
+    li      a7, __NR_madvise
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(madvise)
diff --git a/libc/arch-riscv64/syscalls/mincore.S b/libc/arch-riscv64/syscalls/mincore.S
new file mode 100644
index 000000000..b54f3eec8
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/mincore.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(mincore)
+    li      a7, __NR_mincore
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(mincore)
diff --git a/libc/arch-riscv64/syscalls/mkdirat.S b/libc/arch-riscv64/syscalls/mkdirat.S
new file mode 100644
index 000000000..42b941287
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/mkdirat.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(mkdirat)
+    li      a7, __NR_mkdirat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(mkdirat)
diff --git a/libc/arch-riscv64/syscalls/mknodat.S b/libc/arch-riscv64/syscalls/mknodat.S
new file mode 100644
index 000000000..41794901e
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/mknodat.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(mknodat)
+    li      a7, __NR_mknodat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(mknodat)
diff --git a/libc/arch-riscv64/syscalls/mlock.S b/libc/arch-riscv64/syscalls/mlock.S
new file mode 100644
index 000000000..d769a482e
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/mlock.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(mlock)
+    li      a7, __NR_mlock
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(mlock)
diff --git a/libc/arch-riscv64/syscalls/mlockall.S b/libc/arch-riscv64/syscalls/mlockall.S
new file mode 100644
index 000000000..7549253cb
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/mlockall.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(mlockall)
+    li      a7, __NR_mlockall
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(mlockall)
diff --git a/libc/arch-riscv64/syscalls/mmap.S b/libc/arch-riscv64/syscalls/mmap.S
new file mode 100644
index 000000000..b9d445189
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/mmap.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(mmap)
+    li      a7, __NR_mmap
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(mmap)
+
+ALIAS_SYMBOL(mmap64, mmap)
diff --git a/libc/arch-riscv64/syscalls/mount.S b/libc/arch-riscv64/syscalls/mount.S
new file mode 100644
index 000000000..1a178ab02
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/mount.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(mount)
+    li      a7, __NR_mount
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(mount)
diff --git a/libc/arch-riscv64/syscalls/mprotect.S b/libc/arch-riscv64/syscalls/mprotect.S
new file mode 100644
index 000000000..d23929793
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/mprotect.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(mprotect)
+    li      a7, __NR_mprotect
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(mprotect)
diff --git a/libc/arch-riscv64/syscalls/msync.S b/libc/arch-riscv64/syscalls/msync.S
new file mode 100644
index 000000000..0b4319e06
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/msync.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(msync)
+    li      a7, __NR_msync
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(msync)
diff --git a/libc/arch-riscv64/syscalls/munlock.S b/libc/arch-riscv64/syscalls/munlock.S
new file mode 100644
index 000000000..aa1f7de5d
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/munlock.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(munlock)
+    li      a7, __NR_munlock
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(munlock)
diff --git a/libc/arch-riscv64/syscalls/munlockall.S b/libc/arch-riscv64/syscalls/munlockall.S
new file mode 100644
index 000000000..591c222cb
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/munlockall.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(munlockall)
+    li      a7, __NR_munlockall
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(munlockall)
diff --git a/libc/arch-riscv64/syscalls/munmap.S b/libc/arch-riscv64/syscalls/munmap.S
new file mode 100644
index 000000000..f869ba117
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/munmap.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(munmap)
+    li      a7, __NR_munmap
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(munmap)
diff --git a/libc/arch-riscv64/syscalls/nanosleep.S b/libc/arch-riscv64/syscalls/nanosleep.S
new file mode 100644
index 000000000..25c1b2906
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/nanosleep.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(nanosleep)
+    li      a7, __NR_nanosleep
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(nanosleep)
diff --git a/libc/arch-riscv64/syscalls/personality.S b/libc/arch-riscv64/syscalls/personality.S
new file mode 100644
index 000000000..c6f2df525
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/personality.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(personality)
+    li      a7, __NR_personality
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(personality)
diff --git a/libc/arch-riscv64/syscalls/pipe2.S b/libc/arch-riscv64/syscalls/pipe2.S
new file mode 100644
index 000000000..42bfd62be
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/pipe2.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(pipe2)
+    li      a7, __NR_pipe2
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(pipe2)
diff --git a/libc/arch-riscv64/syscalls/prctl.S b/libc/arch-riscv64/syscalls/prctl.S
new file mode 100644
index 000000000..34f069209
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/prctl.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(prctl)
+    li      a7, __NR_prctl
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(prctl)
diff --git a/libc/arch-riscv64/syscalls/pread64.S b/libc/arch-riscv64/syscalls/pread64.S
new file mode 100644
index 000000000..90c57beb6
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/pread64.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(pread64)
+    li      a7, __NR_pread64
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(pread64)
+
+ALIAS_SYMBOL(pread, pread64)
diff --git a/libc/arch-riscv64/syscalls/preadv.S b/libc/arch-riscv64/syscalls/preadv.S
new file mode 100644
index 000000000..fe8fb5fa3
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/preadv.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(preadv)
+    li      a7, __NR_preadv
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(preadv)
+
+ALIAS_SYMBOL(preadv64, preadv)
diff --git a/libc/arch-riscv64/syscalls/prlimit64.S b/libc/arch-riscv64/syscalls/prlimit64.S
new file mode 100644
index 000000000..6b7089245
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/prlimit64.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(prlimit64)
+    li      a7, __NR_prlimit64
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(prlimit64)
+
+ALIAS_SYMBOL(prlimit, prlimit64)
diff --git a/libc/arch-riscv64/syscalls/process_vm_readv.S b/libc/arch-riscv64/syscalls/process_vm_readv.S
new file mode 100644
index 000000000..8a6e44ce9
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/process_vm_readv.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(process_vm_readv)
+    li      a7, __NR_process_vm_readv
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(process_vm_readv)
diff --git a/libc/arch-riscv64/syscalls/process_vm_writev.S b/libc/arch-riscv64/syscalls/process_vm_writev.S
new file mode 100644
index 000000000..3d38cdf8a
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/process_vm_writev.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(process_vm_writev)
+    li      a7, __NR_process_vm_writev
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(process_vm_writev)
diff --git a/libc/arch-riscv64/syscalls/pwrite64.S b/libc/arch-riscv64/syscalls/pwrite64.S
new file mode 100644
index 000000000..f2b2c3760
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/pwrite64.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(pwrite64)
+    li      a7, __NR_pwrite64
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(pwrite64)
+
+ALIAS_SYMBOL(pwrite, pwrite64)
diff --git a/libc/arch-riscv64/syscalls/pwritev.S b/libc/arch-riscv64/syscalls/pwritev.S
new file mode 100644
index 000000000..6246ea0bf
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/pwritev.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(pwritev)
+    li      a7, __NR_pwritev
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(pwritev)
+
+ALIAS_SYMBOL(pwritev64, pwritev)
diff --git a/libc/arch-riscv64/syscalls/quotactl.S b/libc/arch-riscv64/syscalls/quotactl.S
new file mode 100644
index 000000000..d8cf108a1
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/quotactl.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(quotactl)
+    li      a7, __NR_quotactl
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(quotactl)
diff --git a/libc/arch-riscv64/syscalls/read.S b/libc/arch-riscv64/syscalls/read.S
new file mode 100644
index 000000000..f88fd1cc7
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/read.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(read)
+    li      a7, __NR_read
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(read)
diff --git a/libc/arch-riscv64/syscalls/readahead.S b/libc/arch-riscv64/syscalls/readahead.S
new file mode 100644
index 000000000..7cfbe43b2
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/readahead.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(readahead)
+    li      a7, __NR_readahead
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(readahead)
diff --git a/libc/arch-riscv64/syscalls/readlinkat.S b/libc/arch-riscv64/syscalls/readlinkat.S
new file mode 100644
index 000000000..9c3a15b4b
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/readlinkat.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(readlinkat)
+    li      a7, __NR_readlinkat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(readlinkat)
diff --git a/libc/arch-riscv64/syscalls/readv.S b/libc/arch-riscv64/syscalls/readv.S
new file mode 100644
index 000000000..2b62a754b
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/readv.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(readv)
+    li      a7, __NR_readv
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(readv)
diff --git a/libc/arch-riscv64/syscalls/recvfrom.S b/libc/arch-riscv64/syscalls/recvfrom.S
new file mode 100644
index 000000000..2b98e10cc
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/recvfrom.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(recvfrom)
+    li      a7, __NR_recvfrom
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(recvfrom)
diff --git a/libc/arch-riscv64/syscalls/recvmmsg.S b/libc/arch-riscv64/syscalls/recvmmsg.S
new file mode 100644
index 000000000..ab074cd23
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/recvmmsg.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(recvmmsg)
+    li      a7, __NR_recvmmsg
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(recvmmsg)
diff --git a/libc/arch-riscv64/syscalls/recvmsg.S b/libc/arch-riscv64/syscalls/recvmsg.S
new file mode 100644
index 000000000..728367c8a
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/recvmsg.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(recvmsg)
+    li      a7, __NR_recvmsg
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(recvmsg)
diff --git a/libc/arch-riscv64/syscalls/removexattr.S b/libc/arch-riscv64/syscalls/removexattr.S
new file mode 100644
index 000000000..41351cb97
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/removexattr.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(removexattr)
+    li      a7, __NR_removexattr
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(removexattr)
diff --git a/libc/arch-riscv64/syscalls/renameat.S b/libc/arch-riscv64/syscalls/renameat.S
new file mode 100644
index 000000000..4b915c4b0
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/renameat.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(renameat)
+    li      a7, __NR_renameat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(renameat)
diff --git a/libc/arch-riscv64/syscalls/sched_get_priority_max.S b/libc/arch-riscv64/syscalls/sched_get_priority_max.S
new file mode 100644
index 000000000..e0795c3ac
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sched_get_priority_max.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sched_get_priority_max)
+    li      a7, __NR_sched_get_priority_max
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sched_get_priority_max)
diff --git a/libc/arch-riscv64/syscalls/sched_get_priority_min.S b/libc/arch-riscv64/syscalls/sched_get_priority_min.S
new file mode 100644
index 000000000..f2288c15a
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sched_get_priority_min.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sched_get_priority_min)
+    li      a7, __NR_sched_get_priority_min
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sched_get_priority_min)
diff --git a/libc/arch-riscv64/syscalls/sched_getparam.S b/libc/arch-riscv64/syscalls/sched_getparam.S
new file mode 100644
index 000000000..aaa2f7449
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sched_getparam.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sched_getparam)
+    li      a7, __NR_sched_getparam
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sched_getparam)
diff --git a/libc/arch-riscv64/syscalls/sched_getscheduler.S b/libc/arch-riscv64/syscalls/sched_getscheduler.S
new file mode 100644
index 000000000..f6b22a0d6
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sched_getscheduler.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sched_getscheduler)
+    li      a7, __NR_sched_getscheduler
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sched_getscheduler)
diff --git a/libc/arch-riscv64/syscalls/sched_rr_get_interval.S b/libc/arch-riscv64/syscalls/sched_rr_get_interval.S
new file mode 100644
index 000000000..b3e389cb9
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sched_rr_get_interval.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sched_rr_get_interval)
+    li      a7, __NR_sched_rr_get_interval
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sched_rr_get_interval)
diff --git a/libc/arch-riscv64/syscalls/sched_setaffinity.S b/libc/arch-riscv64/syscalls/sched_setaffinity.S
new file mode 100644
index 000000000..e72cae456
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sched_setaffinity.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sched_setaffinity)
+    li      a7, __NR_sched_setaffinity
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sched_setaffinity)
diff --git a/libc/arch-riscv64/syscalls/sched_setparam.S b/libc/arch-riscv64/syscalls/sched_setparam.S
new file mode 100644
index 000000000..bbc4e9ed9
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sched_setparam.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sched_setparam)
+    li      a7, __NR_sched_setparam
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sched_setparam)
diff --git a/libc/arch-riscv64/syscalls/sched_setscheduler.S b/libc/arch-riscv64/syscalls/sched_setscheduler.S
new file mode 100644
index 000000000..c7650c3f7
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sched_setscheduler.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sched_setscheduler)
+    li      a7, __NR_sched_setscheduler
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sched_setscheduler)
diff --git a/libc/arch-riscv64/syscalls/sched_yield.S b/libc/arch-riscv64/syscalls/sched_yield.S
new file mode 100644
index 000000000..b04fdd194
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sched_yield.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sched_yield)
+    li      a7, __NR_sched_yield
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sched_yield)
diff --git a/libc/arch-riscv64/syscalls/sendfile.S b/libc/arch-riscv64/syscalls/sendfile.S
new file mode 100644
index 000000000..3ba3a12b7
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sendfile.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sendfile)
+    li      a7, __NR_sendfile
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sendfile)
+
+ALIAS_SYMBOL(sendfile64, sendfile)
diff --git a/libc/arch-riscv64/syscalls/sendmmsg.S b/libc/arch-riscv64/syscalls/sendmmsg.S
new file mode 100644
index 000000000..15d8ff4f8
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sendmmsg.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sendmmsg)
+    li      a7, __NR_sendmmsg
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sendmmsg)
diff --git a/libc/arch-riscv64/syscalls/sendmsg.S b/libc/arch-riscv64/syscalls/sendmsg.S
new file mode 100644
index 000000000..bc84cc176
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sendmsg.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sendmsg)
+    li      a7, __NR_sendmsg
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sendmsg)
diff --git a/libc/arch-riscv64/syscalls/sendto.S b/libc/arch-riscv64/syscalls/sendto.S
new file mode 100644
index 000000000..fc4b7b8d1
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sendto.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sendto)
+    li      a7, __NR_sendto
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sendto)
diff --git a/libc/arch-riscv64/syscalls/setdomainname.S b/libc/arch-riscv64/syscalls/setdomainname.S
new file mode 100644
index 000000000..d6091f80c
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setdomainname.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setdomainname)
+    li      a7, __NR_setdomainname
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setdomainname)
diff --git a/libc/arch-riscv64/syscalls/setfsgid.S b/libc/arch-riscv64/syscalls/setfsgid.S
new file mode 100644
index 000000000..8bfa7c022
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setfsgid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setfsgid)
+    li      a7, __NR_setfsgid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setfsgid)
diff --git a/libc/arch-riscv64/syscalls/setfsuid.S b/libc/arch-riscv64/syscalls/setfsuid.S
new file mode 100644
index 000000000..30b132771
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setfsuid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setfsuid)
+    li      a7, __NR_setfsuid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setfsuid)
diff --git a/libc/arch-riscv64/syscalls/setgid.S b/libc/arch-riscv64/syscalls/setgid.S
new file mode 100644
index 000000000..725d423e3
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setgid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setgid)
+    li      a7, __NR_setgid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setgid)
diff --git a/libc/arch-riscv64/syscalls/setgroups.S b/libc/arch-riscv64/syscalls/setgroups.S
new file mode 100644
index 000000000..44adb6262
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setgroups.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setgroups)
+    li      a7, __NR_setgroups
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setgroups)
diff --git a/libc/arch-riscv64/syscalls/sethostname.S b/libc/arch-riscv64/syscalls/sethostname.S
new file mode 100644
index 000000000..1964f43fd
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sethostname.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sethostname)
+    li      a7, __NR_sethostname
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sethostname)
diff --git a/libc/arch-riscv64/syscalls/setitimer.S b/libc/arch-riscv64/syscalls/setitimer.S
new file mode 100644
index 000000000..77c214e4c
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setitimer.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setitimer)
+    li      a7, __NR_setitimer
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setitimer)
diff --git a/libc/arch-riscv64/syscalls/setns.S b/libc/arch-riscv64/syscalls/setns.S
new file mode 100644
index 000000000..f4ea6073a
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setns.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setns)
+    li      a7, __NR_setns
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setns)
diff --git a/libc/arch-riscv64/syscalls/setpgid.S b/libc/arch-riscv64/syscalls/setpgid.S
new file mode 100644
index 000000000..648f7590f
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setpgid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setpgid)
+    li      a7, __NR_setpgid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setpgid)
diff --git a/libc/arch-riscv64/syscalls/setpriority.S b/libc/arch-riscv64/syscalls/setpriority.S
new file mode 100644
index 000000000..f48f1b868
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setpriority.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setpriority)
+    li      a7, __NR_setpriority
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setpriority)
diff --git a/libc/arch-riscv64/syscalls/setregid.S b/libc/arch-riscv64/syscalls/setregid.S
new file mode 100644
index 000000000..132ae3bd8
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setregid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setregid)
+    li      a7, __NR_setregid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setregid)
diff --git a/libc/arch-riscv64/syscalls/setresgid.S b/libc/arch-riscv64/syscalls/setresgid.S
new file mode 100644
index 000000000..7befe75c5
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setresgid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setresgid)
+    li      a7, __NR_setresgid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setresgid)
diff --git a/libc/arch-riscv64/syscalls/setresuid.S b/libc/arch-riscv64/syscalls/setresuid.S
new file mode 100644
index 000000000..fa64cc93c
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setresuid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setresuid)
+    li      a7, __NR_setresuid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setresuid)
diff --git a/libc/arch-riscv64/syscalls/setreuid.S b/libc/arch-riscv64/syscalls/setreuid.S
new file mode 100644
index 000000000..e377a2f9a
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setreuid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setreuid)
+    li      a7, __NR_setreuid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setreuid)
diff --git a/libc/arch-riscv64/syscalls/setrlimit.S b/libc/arch-riscv64/syscalls/setrlimit.S
new file mode 100644
index 000000000..5ec375b9a
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setrlimit.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setrlimit)
+    li      a7, __NR_setrlimit
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setrlimit)
+
+ALIAS_SYMBOL(setrlimit64, setrlimit)
diff --git a/libc/arch-riscv64/syscalls/setsid.S b/libc/arch-riscv64/syscalls/setsid.S
new file mode 100644
index 000000000..6ef8a0635
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setsid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setsid)
+    li      a7, __NR_setsid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setsid)
diff --git a/libc/arch-riscv64/syscalls/setsockopt.S b/libc/arch-riscv64/syscalls/setsockopt.S
new file mode 100644
index 000000000..b40d279e9
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setsockopt.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setsockopt)
+    li      a7, __NR_setsockopt
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setsockopt)
diff --git a/libc/arch-riscv64/syscalls/settimeofday.S b/libc/arch-riscv64/syscalls/settimeofday.S
new file mode 100644
index 000000000..f720242bc
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/settimeofday.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(settimeofday)
+    li      a7, __NR_settimeofday
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(settimeofday)
diff --git a/libc/arch-riscv64/syscalls/setuid.S b/libc/arch-riscv64/syscalls/setuid.S
new file mode 100644
index 000000000..dc37c6dcd
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setuid.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setuid)
+    li      a7, __NR_setuid
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setuid)
diff --git a/libc/arch-riscv64/syscalls/setxattr.S b/libc/arch-riscv64/syscalls/setxattr.S
new file mode 100644
index 000000000..70542bcee
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/setxattr.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(setxattr)
+    li      a7, __NR_setxattr
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(setxattr)
diff --git a/libc/arch-riscv64/syscalls/shutdown.S b/libc/arch-riscv64/syscalls/shutdown.S
new file mode 100644
index 000000000..17cae8641
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/shutdown.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(shutdown)
+    li      a7, __NR_shutdown
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(shutdown)
diff --git a/libc/arch-riscv64/syscalls/sigaltstack.S b/libc/arch-riscv64/syscalls/sigaltstack.S
new file mode 100644
index 000000000..618a5d354
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sigaltstack.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sigaltstack)
+    li      a7, __NR_sigaltstack
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sigaltstack)
diff --git a/libc/arch-riscv64/syscalls/socketpair.S b/libc/arch-riscv64/syscalls/socketpair.S
new file mode 100644
index 000000000..8c34ab6b2
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/socketpair.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(socketpair)
+    li      a7, __NR_socketpair
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(socketpair)
diff --git a/libc/arch-riscv64/syscalls/splice.S b/libc/arch-riscv64/syscalls/splice.S
new file mode 100644
index 000000000..f934ae2b1
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/splice.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(splice)
+    li      a7, __NR_splice
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(splice)
diff --git a/libc/arch-riscv64/syscalls/swapoff.S b/libc/arch-riscv64/syscalls/swapoff.S
new file mode 100644
index 000000000..c025e2659
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/swapoff.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(swapoff)
+    li      a7, __NR_swapoff
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(swapoff)
diff --git a/libc/arch-riscv64/syscalls/swapon.S b/libc/arch-riscv64/syscalls/swapon.S
new file mode 100644
index 000000000..fd5dbe7d3
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/swapon.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(swapon)
+    li      a7, __NR_swapon
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(swapon)
diff --git a/libc/arch-riscv64/syscalls/symlinkat.S b/libc/arch-riscv64/syscalls/symlinkat.S
new file mode 100644
index 000000000..44dddc584
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/symlinkat.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(symlinkat)
+    li      a7, __NR_symlinkat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(symlinkat)
diff --git a/libc/arch-riscv64/syscalls/sync.S b/libc/arch-riscv64/syscalls/sync.S
new file mode 100644
index 000000000..7c26320d8
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sync.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sync)
+    li      a7, __NR_sync
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sync)
diff --git a/libc/arch-riscv64/syscalls/syncfs.S b/libc/arch-riscv64/syscalls/syncfs.S
new file mode 100644
index 000000000..6b6766e39
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/syncfs.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(syncfs)
+    li      a7, __NR_syncfs
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(syncfs)
diff --git a/libc/arch-riscv64/syscalls/sysinfo.S b/libc/arch-riscv64/syscalls/sysinfo.S
new file mode 100644
index 000000000..e798591f6
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/sysinfo.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(sysinfo)
+    li      a7, __NR_sysinfo
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(sysinfo)
diff --git a/libc/arch-riscv64/syscalls/tee.S b/libc/arch-riscv64/syscalls/tee.S
new file mode 100644
index 000000000..5d4511627
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/tee.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(tee)
+    li      a7, __NR_tee
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(tee)
diff --git a/libc/arch-riscv64/syscalls/tgkill.S b/libc/arch-riscv64/syscalls/tgkill.S
new file mode 100644
index 000000000..da74c6466
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/tgkill.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(tgkill)
+    li      a7, __NR_tgkill
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(tgkill)
diff --git a/libc/arch-riscv64/syscalls/timerfd_create.S b/libc/arch-riscv64/syscalls/timerfd_create.S
new file mode 100644
index 000000000..0d5afb610
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/timerfd_create.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(timerfd_create)
+    li      a7, __NR_timerfd_create
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(timerfd_create)
diff --git a/libc/arch-riscv64/syscalls/timerfd_gettime.S b/libc/arch-riscv64/syscalls/timerfd_gettime.S
new file mode 100644
index 000000000..b352e7762
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/timerfd_gettime.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(timerfd_gettime)
+    li      a7, __NR_timerfd_gettime
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(timerfd_gettime)
diff --git a/libc/arch-riscv64/syscalls/timerfd_settime.S b/libc/arch-riscv64/syscalls/timerfd_settime.S
new file mode 100644
index 000000000..7c73374a1
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/timerfd_settime.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(timerfd_settime)
+    li      a7, __NR_timerfd_settime
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(timerfd_settime)
diff --git a/libc/arch-riscv64/syscalls/times.S b/libc/arch-riscv64/syscalls/times.S
new file mode 100644
index 000000000..4cd5b1839
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/times.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(times)
+    li      a7, __NR_times
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(times)
diff --git a/libc/arch-riscv64/syscalls/truncate.S b/libc/arch-riscv64/syscalls/truncate.S
new file mode 100644
index 000000000..3c8465262
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/truncate.S
@@ -0,0 +1,18 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(truncate)
+    li      a7, __NR_truncate
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(truncate)
+
+ALIAS_SYMBOL(truncate64, truncate)
diff --git a/libc/arch-riscv64/syscalls/umask.S b/libc/arch-riscv64/syscalls/umask.S
new file mode 100644
index 000000000..30c35ae54
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/umask.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(umask)
+    li      a7, __NR_umask
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(umask)
diff --git a/libc/arch-riscv64/syscalls/umount2.S b/libc/arch-riscv64/syscalls/umount2.S
new file mode 100644
index 000000000..7bc6b7e8b
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/umount2.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(umount2)
+    li      a7, __NR_umount2
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(umount2)
diff --git a/libc/arch-riscv64/syscalls/uname.S b/libc/arch-riscv64/syscalls/uname.S
new file mode 100644
index 000000000..74d234aab
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/uname.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(uname)
+    li      a7, __NR_uname
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(uname)
diff --git a/libc/arch-riscv64/syscalls/unlinkat.S b/libc/arch-riscv64/syscalls/unlinkat.S
new file mode 100644
index 000000000..02750c9c9
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/unlinkat.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(unlinkat)
+    li      a7, __NR_unlinkat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(unlinkat)
diff --git a/libc/arch-riscv64/syscalls/unshare.S b/libc/arch-riscv64/syscalls/unshare.S
new file mode 100644
index 000000000..d9c781582
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/unshare.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(unshare)
+    li      a7, __NR_unshare
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(unshare)
diff --git a/libc/arch-riscv64/syscalls/utimensat.S b/libc/arch-riscv64/syscalls/utimensat.S
new file mode 100644
index 000000000..9469f0758
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/utimensat.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(utimensat)
+    li      a7, __NR_utimensat
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(utimensat)
diff --git a/libc/arch-riscv64/syscalls/vmsplice.S b/libc/arch-riscv64/syscalls/vmsplice.S
new file mode 100644
index 000000000..c6b216615
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/vmsplice.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(vmsplice)
+    li      a7, __NR_vmsplice
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(vmsplice)
diff --git a/libc/arch-riscv64/syscalls/wait4.S b/libc/arch-riscv64/syscalls/wait4.S
new file mode 100644
index 000000000..5301ba409
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/wait4.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(wait4)
+    li      a7, __NR_wait4
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(wait4)
diff --git a/libc/arch-riscv64/syscalls/write.S b/libc/arch-riscv64/syscalls/write.S
new file mode 100644
index 000000000..8f85ec7e6
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/write.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(write)
+    li      a7, __NR_write
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(write)
diff --git a/libc/arch-riscv64/syscalls/writev.S b/libc/arch-riscv64/syscalls/writev.S
new file mode 100644
index 000000000..46393cfea
--- /dev/null
+++ b/libc/arch-riscv64/syscalls/writev.S
@@ -0,0 +1,16 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <private/bionic_asm.h>
+
+ENTRY(writev)
+    li      a7, __NR_writev
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(writev)
diff --git a/libc/bionic/bionic_elf_tls.cpp b/libc/bionic/bionic_elf_tls.cpp
index 3fa5182a9..c8148616f 100644
--- a/libc/bionic/bionic_elf_tls.cpp
+++ b/libc/bionic/bionic_elf_tls.cpp
@@ -135,7 +135,13 @@ size_t StaticTlsLayout::reserve_exe_segment_and_tcb(const TlsSegment* exe_segmen
   const size_t max_align = MAX(alignof(bionic_tcb), exe_segment->alignment);
   offset_bionic_tcb_ = reserve(sizeof(bionic_tcb), max_align);
   return offset_bionic_tcb_ - exe_size;
+#elif __riscv_xlen == 64
 
+  const size_t exe_size = round_up_with_overflow_check(exe_segment->size, exe_segment->alignment);
+  reserve(exe_size, 1);
+  const size_t max_align = MAX(alignof(bionic_tcb), exe_segment->alignment);
+  offset_bionic_tcb_ = reserve(sizeof(bionic_tcb), max_align);
+  return offset_bionic_tcb_ - exe_size;
 #else
 #error "Unrecognized architecture"
 #endif
diff --git a/libc/bionic/scudo/Android.bp b/libc/bionic/scudo/Android.bp
index 8b518bb62..3dd4ee919 100644
--- a/libc/bionic/scudo/Android.bp
+++ b/libc/bionic/scudo/Android.bp
@@ -38,6 +38,9 @@ cc_library_shared {
         arm64: {
             whole_static_libs: ["libclang_rt.scudo_minimal-aarch64-android.static"],
         },
+        riscv64: {
+            whole_static_libs: ["libclang_rt.scudo_minimal-riscv64-android.static"],
+        },
         x86: {
             whole_static_libs: ["libclang_rt.scudo_minimal-i686-android.static"],
         },
diff --git a/libc/include/bits/elf_riscv64.h b/libc/include/bits/elf_riscv64.h
new file mode 100644
index 000000000..53c29f1be
--- /dev/null
+++ b/libc/include/bits/elf_riscv64.h
@@ -0,0 +1,90 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _RISCV64_ELF_MACHDEP_H_
+#define _RISCV64_ELF_MACHDEP_H_
+
+#define R_RISCV_NONE             0
+#define R_RISCV_32               1
+#define R_RISCV_64               2
+#define R_RISCV_RELATIVE         3
+#define R_RISCV_COPY             4
+#define R_RISCV_JUMP_SLOT        5
+#define R_RISCV_TLS_DTPMOD32     6
+#define R_RISCV_TLS_DTPMOD64     7
+#define R_RISCV_TLS_DTPREL32     8
+#define R_RISCV_TLS_DTPREL64     9
+#define R_RISCV_TLS_TPREL32     10
+#define R_RISCV_TLS_TPREL64     11
+#define R_RISCV_BRANCH          16
+#define R_RISCV_JAL             17
+#define R_RISCV_CALL            18
+#define R_RISCV_CALL_PLT        19
+#define R_RISCV_GOT_HI20        20
+#define R_RISCV_TLS_GOT_HI20    21
+#define R_RISCV_TLS_GD_HI20     22
+#define R_RISCV_PCREL_HI20      23
+#define R_RISCV_PCREL_LO12_I    24
+#define R_RISCV_PCREL_LO12_S    25
+#define R_RISCV_HI20            26
+#define R_RISCV_LO12_I          27
+#define R_RISCV_LO12_S          28
+#define R_RISCV_TPREL_HI20      29
+#define R_RISCV_TPREL_LO12_I    30
+#define R_RISCV_TPREL_LO12_S    31
+#define R_RISCV_TPREL_ADD       32
+#define R_RISCV_ADD8            33
+#define R_RISCV_ADD16           34
+#define R_RISCV_ADD32           35
+#define R_RISCV_ADD64           36
+#define R_RISCV_SUB8            37
+#define R_RISCV_SUB16           38
+#define R_RISCV_SUB32           39
+#define R_RISCV_SUB64           40
+#define R_RISCV_GNU_VTINHERIT   41
+#define R_RISCV_GNU_VTENTRY     42
+#define R_RISCV_ALIGN           43
+#define R_RISCV_RVC_BRANCH      44
+#define R_RISCV_RVC_JUMP        45
+#define R_RISCV_RVC_LUI         46
+#define R_RISCV_GPREL_I         47
+#define R_RISCV_GPREL_S         48
+#define R_RISCV_TPREL_I         49
+#define R_RISCV_TPREL_S         50
+#define R_RISCV_RELAX           51
+#define R_RISCV_SUB6            52
+#define R_RISCV_SET6            53
+#define R_RISCV_SET8            54
+#define R_RISCV_SET16           55
+#define R_RISCV_SET32           56
+#define R_RISCV_32_PCREL        57
+#define R_RISCV_IRELATIVE       58
+
+#define R_RISCV_NUM             59
+
+#endif /* _RISCV64_ELF_MACHDEP_H_ */
diff --git a/libc/include/bits/fenv_riscv64.h b/libc/include/bits/fenv_riscv64.h
new file mode 100644
index 000000000..2149f6083
--- /dev/null
+++ b/libc/include/bits/fenv_riscv64.h
@@ -0,0 +1,52 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#pragma once
+
+#include <sys/types.h>
+
+__BEGIN_DECLS
+
+typedef unsigned int fexcept_t;
+typedef unsigned int fenv_t;
+
+/* Exception flags. */
+#define FE_INEXACT    0x01
+#define FE_UNDERFLOW  0x02
+#define FE_OVERFLOW   0x04
+#define FE_DIVBYZERO  0x08
+#define FE_INVALID    0x10
+#define FE_ALL_EXCEPT (FE_DIVBYZERO | FE_INEXACT | FE_INVALID | FE_OVERFLOW | FE_UNDERFLOW)
+
+/* Rounding modes. */
+#define FE_TONEAREST  0x0
+#define FE_TOWARDZERO 0x1
+#define FE_DOWNWARD   0x2
+#define FE_UPWARD     0x3
+
+__END_DECLS
diff --git a/libc/include/bits/glibc-syscalls.h b/libc/include/bits/glibc-syscalls.h
index 52eff56e3..122d30fa7 100644
--- a/libc/include/bits/glibc-syscalls.h
+++ b/libc/include/bits/glibc-syscalls.h
@@ -799,6 +799,9 @@
 #if defined(__NR_restart_syscall)
   #define SYS_restart_syscall __NR_restart_syscall
 #endif
+#if defined(__NR_riscv_flush_icache)
+  #define SYS_riscv_flush_icache __NR_riscv_flush_icache
+#endif
 #if defined(__NR_rmdir)
   #define SYS_rmdir __NR_rmdir
 #endif
diff --git a/libc/include/elf.h b/libc/include/elf.h
index f5b209193..628f68ad7 100644
--- a/libc/include/elf.h
+++ b/libc/include/elf.h
@@ -36,6 +36,7 @@
 #include <bits/elf_arm64.h>
 #include <bits/elf_mips.h>
 #include <bits/elf_x86.h>
+#include <bits/elf_riscv64.h>
 #include <bits/elf_x86_64.h>
 #include <linux/elf.h>
 #include <linux/elf-em.h>
diff --git a/libc/include/fenv.h b/libc/include/fenv.h
index 886612eb5..02bae3aee 100644
--- a/libc/include/fenv.h
+++ b/libc/include/fenv.h
@@ -37,6 +37,8 @@
 #include <bits/fenv_x86.h>
 #elif defined(__mips__)
 #include <bits/fenv_mips.h>
+#elif __riscv_xlen == 64
+#include <bits/fenv_riscv64.h>
 #elif defined(__x86_64__)
 #include <bits/fenv_x86_64.h>
 #endif
diff --git a/libc/include/setjmp.h b/libc/include/setjmp.h
index 195f2515a..414c929ba 100644
--- a/libc/include/setjmp.h
+++ b/libc/include/setjmp.h
@@ -56,6 +56,8 @@
   #endif
 #elif defined(__x86_64__)
 #define _JBLEN 11
+#elif __riscv_xlen == 64
+#define _JBLEN 28
 #endif
 
 typedef long sigjmp_buf[_JBLEN + 1];
diff --git a/libc/include/sys/stat.h b/libc/include/sys/stat.h
index 84a50152a..791d23228 100644
--- a/libc/include/sys/stat.h
+++ b/libc/include/sys/stat.h
@@ -36,7 +36,7 @@
 
 __BEGIN_DECLS
 
-#if defined(__aarch64__) || (defined(__mips__) && defined(__LP64__))
+#if defined(__aarch64__) || __riscv_xlen == 64 || (defined(__mips__) && defined(__LP64__))
 #define __STAT64_BODY \
   dev_t st_dev; \
   ino_t st_ino; \
diff --git a/libc/include/sys/ucontext.h b/libc/include/sys/ucontext.h
index 730ac6903..76f76e15d 100644
--- a/libc/include/sys/ucontext.h
+++ b/libc/include/sys/ucontext.h
@@ -385,6 +385,63 @@ typedef struct ucontext {
   struct _libc_fpstate __fpregs_mem;
 } ucontext_t;
 
+#elif __riscv_xlen == 64
+
+#define NGREG 32
+
+typedef unsigned long long greg_t;
+typedef greg_t gregset_t[NGREG];
+
+typedef unsigned long int __riscv_mc_gp_state[32];
+
+struct __riscv_mc_f_ext_state
+  {
+    unsigned int __f[32];
+    unsigned int __fcsr;
+  };
+
+struct __riscv_mc_d_ext_state
+  {
+    unsigned long long int __f[32];
+    unsigned int __fcsr;
+  };
+
+struct __riscv_mc_q_ext_state
+  {
+    unsigned long long int __f[64] __attribute__ ((__aligned__ (16)));
+    unsigned int __fcsr;
+    /* Reserved for expansion of sigcontext structure.  Currently zeroed
+       upon signal, and must be zero upon sigreturn.  */
+    unsigned int __glibc_reserved[3];
+  };
+
+union __riscv_mc_fp_state
+  {
+    struct __riscv_mc_f_ext_state __f;
+    struct __riscv_mc_d_ext_state __d;
+    struct __riscv_mc_q_ext_state __q;
+  };
+
+typedef union __riscv_mc_fp_state* fpregset_t;
+
+typedef struct mcontext_t
+  {
+    __riscv_mc_gp_state __gregs;
+    union  __riscv_mc_fp_state __fpregs;
+  } mcontext_t;
+
+/* Userlevel context.  */
+typedef struct ucontext_t
+  {
+    unsigned long int	__uc_flags;
+    struct ucontext_t	*uc_link;
+    stack_t		uc_stack;
+    sigset_t		uc_sigmask;
+    sigset64_t          uc_sigmask64;
+    unsigned char	__reserved[1024 / 8 - sizeof (sigset_t)];
+    mcontext_t		uc_mcontext;
+  } ucontext_t;
+
 #endif
 
 __END_DECLS
diff --git a/libc/include/sys/user.h b/libc/include/sys/user.h
index ed3e10a1f..f53080d4d 100644
--- a/libc/include/sys/user.h
+++ b/libc/include/sys/user.h
@@ -249,6 +249,18 @@ struct user_fpsimd_struct {
   uint32_t fpcr;
 };
 
+#elif __riscv_xlen == 64
+struct user_gregs_struct {
+  uint64_t regs[32];
+  uint64_t pc;
+  uint64_t psr;
+};
+
+struct user_fpregs_struct {
+  __uint128_t vregs[32];
+  uint32_t fpsr;
+};
+
 #else
 
 #error "Unsupported architecture."
diff --git a/libc/include/sys/vfs.h b/libc/include/sys/vfs.h
index 9237ee6d6..3980c3877 100644
--- a/libc/include/sys/vfs.h
+++ b/libc/include/sys/vfs.h
@@ -39,7 +39,7 @@ __BEGIN_DECLS
 typedef struct { int __val[2]; } __fsid_t;
 typedef __fsid_t fsid_t;
 
-#if defined(__aarch64__) || defined(__x86_64__)
+#if defined(__aarch64__) || __riscv_xlen == 64 || defined(__x86_64__)
 #define __STATFS64_BODY \
   uint64_t f_type; \
   uint64_t f_bsize; \
diff --git a/libc/kernel/tools/defaults.py b/libc/kernel/tools/defaults.py
index 967d0c799..1c9bb1f2a 100644
--- a/libc/kernel/tools/defaults.py
+++ b/libc/kernel/tools/defaults.py
@@ -6,7 +6,7 @@ import time, os, sys
 from utils import *
 
 # the list of supported architectures
-kernel_archs = [ 'arm', 'arm64', 'mips', 'x86' ]
+kernel_archs = [ 'arm', 'arm64', 'mips', 'riscv', 'x86' ]
 
 # the list of include directories that belong to the kernel
 # tree. used when looking for sources...
@@ -46,6 +46,7 @@ kernel_default_arch_macros = {
              "CONFIG_32BIT": "_ABIO32",
              "CONFIG_CPU_LITTLE_ENDIAN": "1",
              "__SANE_USERSPACE_TYPES__": "1",},
+    "riscv": {},
     "x86": {},
     }
 
@@ -53,6 +54,7 @@ kernel_arch_token_replacements = {
     "arm": {},
     "arm64": {},
     "mips": {"off_t":"__kernel_off_t"},
+    "riscv": {},
     "x86": {},
     }
 
diff --git a/libc/kernel/tools/generate_uapi_headers.sh b/libc/kernel/tools/generate_uapi_headers.sh
index 5bf1cf326..923887f3d 100755
--- a/libc/kernel/tools/generate_uapi_headers.sh
+++ b/libc/kernel/tools/generate_uapi_headers.sh
@@ -43,7 +43,7 @@ KERNEL_VERSION=""
 KERNEL_REPO="git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git"
 KERNEL_DIR=""
 KERNEL_DOWNLOAD=0
-ARCH_LIST=("arm" "arm64" "mips" "x86")
+ARCH_LIST=("arm" "arm64" "mips" "riscv" "x86")
 ANDROID_KERNEL_DIR="external/kernel-headers/original"
 SKIP_GENERATION=0
 VERIFY_HEADERS_ONLY=0
diff --git a/libc/kernel/uapi/asm-riscv/asm/auxvec.h b/libc/kernel/uapi/asm-riscv/asm/auxvec.h
new file mode 100644
index 000000000..40ed24a6a
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/auxvec.h
@@ -0,0 +1,22 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#ifndef _UAPI_ASM_RISCV_AUXVEC_H
+#define _UAPI_ASM_RISCV_AUXVEC_H
+#define AT_SYSINFO_EHDR 33
+#endif
diff --git a/libc/kernel/uapi/asm-riscv/asm/bitsperlong.h b/libc/kernel/uapi/asm-riscv/asm/bitsperlong.h
new file mode 100644
index 000000000..098b610a7
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/bitsperlong.h
@@ -0,0 +1,23 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#ifndef _UAPI_ASM_RISCV_BITSPERLONG_H
+#define _UAPI_ASM_RISCV_BITSPERLONG_H
+#define __BITS_PER_LONG (__SIZEOF_POINTER__ * 8)
+#include <asm-generic/bitsperlong.h>
+#endif
diff --git a/libc/kernel/uapi/asm-riscv/asm/bpf_perf_event.h b/libc/kernel/uapi/asm-riscv/asm/bpf_perf_event.h
new file mode 100644
index 000000000..fa7bc4855
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/bpf_perf_event.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/bpf_perf_event.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/byteorder.h b/libc/kernel/uapi/asm-riscv/asm/byteorder.h
new file mode 100644
index 000000000..42afc14fa
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/byteorder.h
@@ -0,0 +1,22 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#ifndef _UAPI_ASM_RISCV_BYTEORDER_H
+#define _UAPI_ASM_RISCV_BYTEORDER_H
+#include <linux/byteorder/little_endian.h>
+#endif
diff --git a/libc/kernel/uapi/asm-riscv/asm/elf.h b/libc/kernel/uapi/asm-riscv/asm/elf.h
new file mode 100644
index 000000000..500e7b25b
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/elf.h
@@ -0,0 +1,89 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#ifndef _UAPI_ASM_ELF_H
+#define _UAPI_ASM_ELF_H
+#include <asm/ptrace.h>
+typedef unsigned long elf_greg_t;
+typedef struct user_regs_struct elf_gregset_t;
+#define ELF_NGREG (sizeof(elf_gregset_t) / sizeof(elf_greg_t))
+typedef __u64 elf_fpreg_t;
+typedef union __riscv_fp_state elf_fpregset_t;
+#define ELF_NFPREG (sizeof(struct __riscv_d_ext_state) / sizeof(elf_fpreg_t))
+#if __riscv_xlen == 64
+#define ELF_RISCV_R_SYM(r_info) ELF64_R_SYM(r_info)
+#define ELF_RISCV_R_TYPE(r_info) ELF64_R_TYPE(r_info)
+#else
+#define ELF_RISCV_R_SYM(r_info) ELF32_R_SYM(r_info)
+#define ELF_RISCV_R_TYPE(r_info) ELF32_R_TYPE(r_info)
+#endif
+#define R_RISCV_NONE 0
+#define R_RISCV_32 1
+#define R_RISCV_64 2
+#define R_RISCV_RELATIVE 3
+#define R_RISCV_COPY 4
+#define R_RISCV_JUMP_SLOT 5
+#define R_RISCV_TLS_DTPMOD32 6
+#define R_RISCV_TLS_DTPMOD64 7
+#define R_RISCV_TLS_DTPREL32 8
+#define R_RISCV_TLS_DTPREL64 9
+#define R_RISCV_TLS_TPREL32 10
+#define R_RISCV_TLS_TPREL64 11
+#define R_RISCV_BRANCH 16
+#define R_RISCV_JAL 17
+#define R_RISCV_CALL 18
+#define R_RISCV_CALL_PLT 19
+#define R_RISCV_GOT_HI20 20
+#define R_RISCV_TLS_GOT_HI20 21
+#define R_RISCV_TLS_GD_HI20 22
+#define R_RISCV_PCREL_HI20 23
+#define R_RISCV_PCREL_LO12_I 24
+#define R_RISCV_PCREL_LO12_S 25
+#define R_RISCV_HI20 26
+#define R_RISCV_LO12_I 27
+#define R_RISCV_LO12_S 28
+#define R_RISCV_TPREL_HI20 29
+#define R_RISCV_TPREL_LO12_I 30
+#define R_RISCV_TPREL_LO12_S 31
+#define R_RISCV_TPREL_ADD 32
+#define R_RISCV_ADD8 33
+#define R_RISCV_ADD16 34
+#define R_RISCV_ADD32 35
+#define R_RISCV_ADD64 36
+#define R_RISCV_SUB8 37
+#define R_RISCV_SUB16 38
+#define R_RISCV_SUB32 39
+#define R_RISCV_SUB64 40
+#define R_RISCV_GNU_VTINHERIT 41
+#define R_RISCV_GNU_VTENTRY 42
+#define R_RISCV_ALIGN 43
+#define R_RISCV_RVC_BRANCH 44
+#define R_RISCV_RVC_JUMP 45
+#define R_RISCV_LUI 46
+#define R_RISCV_GPREL_I 47
+#define R_RISCV_GPREL_S 48
+#define R_RISCV_TPREL_I 49
+#define R_RISCV_TPREL_S 50
+#define R_RISCV_RELAX 51
+#define R_RISCV_SUB6 52
+#define R_RISCV_SET6 53
+#define R_RISCV_SET8 54
+#define R_RISCV_SET16 55
+#define R_RISCV_SET32 56
+#define R_RISCV_32_PCREL 57
+#endif
diff --git a/libc/kernel/uapi/asm-riscv/asm/errno.h b/libc/kernel/uapi/asm-riscv/asm/errno.h
new file mode 100644
index 000000000..392cd94bf
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/errno.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/errno.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/fcntl.h b/libc/kernel/uapi/asm-riscv/asm/fcntl.h
new file mode 100644
index 000000000..518d3a775
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/fcntl.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/fcntl.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/hwcap.h b/libc/kernel/uapi/asm-riscv/asm/hwcap.h
new file mode 100644
index 000000000..68de74591
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/hwcap.h
@@ -0,0 +1,27 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#ifndef __UAPI_ASM_HWCAP_H
+#define __UAPI_ASM_HWCAP_H
+#define COMPAT_HWCAP_ISA_I (1 << ('I' - 'A'))
+#define COMPAT_HWCAP_ISA_M (1 << ('M' - 'A'))
+#define COMPAT_HWCAP_ISA_A (1 << ('A' - 'A'))
+#define COMPAT_HWCAP_ISA_F (1 << ('F' - 'A'))
+#define COMPAT_HWCAP_ISA_D (1 << ('D' - 'A'))
+#define COMPAT_HWCAP_ISA_C (1 << ('C' - 'A'))
+#endif
diff --git a/libc/kernel/uapi/asm-riscv/asm/ioctl.h b/libc/kernel/uapi/asm-riscv/asm/ioctl.h
new file mode 100644
index 000000000..7b7bd3779
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/ioctl.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/ioctl.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/ioctls.h b/libc/kernel/uapi/asm-riscv/asm/ioctls.h
new file mode 100644
index 000000000..0c66935ad
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/ioctls.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/ioctls.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/ipcbuf.h b/libc/kernel/uapi/asm-riscv/asm/ipcbuf.h
new file mode 100644
index 000000000..0021f1438
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/ipcbuf.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/ipcbuf.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/mman.h b/libc/kernel/uapi/asm-riscv/asm/mman.h
new file mode 100644
index 000000000..6c23fb647
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/mman.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/mman.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/msgbuf.h b/libc/kernel/uapi/asm-riscv/asm/msgbuf.h
new file mode 100644
index 000000000..7809e3cea
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/msgbuf.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/msgbuf.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/param.h b/libc/kernel/uapi/asm-riscv/asm/param.h
new file mode 100644
index 000000000..5ccf935cc
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/param.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/param.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/perf_regs.h b/libc/kernel/uapi/asm-riscv/asm/perf_regs.h
new file mode 100644
index 000000000..ceb0bbee8
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/perf_regs.h
@@ -0,0 +1,56 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#ifndef _ASM_RISCV_PERF_REGS_H
+#define _ASM_RISCV_PERF_REGS_H
+enum perf_event_riscv_regs {
+  PERF_REG_RISCV_PC,
+  PERF_REG_RISCV_RA,
+  PERF_REG_RISCV_SP,
+  PERF_REG_RISCV_GP,
+  PERF_REG_RISCV_TP,
+  PERF_REG_RISCV_T0,
+  PERF_REG_RISCV_T1,
+  PERF_REG_RISCV_T2,
+  PERF_REG_RISCV_S0,
+  PERF_REG_RISCV_S1,
+  PERF_REG_RISCV_A0,
+  PERF_REG_RISCV_A1,
+  PERF_REG_RISCV_A2,
+  PERF_REG_RISCV_A3,
+  PERF_REG_RISCV_A4,
+  PERF_REG_RISCV_A5,
+  PERF_REG_RISCV_A6,
+  PERF_REG_RISCV_A7,
+  PERF_REG_RISCV_S2,
+  PERF_REG_RISCV_S3,
+  PERF_REG_RISCV_S4,
+  PERF_REG_RISCV_S5,
+  PERF_REG_RISCV_S6,
+  PERF_REG_RISCV_S7,
+  PERF_REG_RISCV_S8,
+  PERF_REG_RISCV_S9,
+  PERF_REG_RISCV_S10,
+  PERF_REG_RISCV_S11,
+  PERF_REG_RISCV_T3,
+  PERF_REG_RISCV_T4,
+  PERF_REG_RISCV_T5,
+  PERF_REG_RISCV_T6,
+  PERF_REG_RISCV_MAX,
+};
+#endif
diff --git a/libc/kernel/uapi/asm-riscv/asm/poll.h b/libc/kernel/uapi/asm-riscv/asm/poll.h
new file mode 100644
index 000000000..d7e8adca9
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/poll.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/poll.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/posix_types.h b/libc/kernel/uapi/asm-riscv/asm/posix_types.h
new file mode 100644
index 000000000..1b8925316
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/posix_types.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/posix_types.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/ptrace.h b/libc/kernel/uapi/asm-riscv/asm/ptrace.h
new file mode 100644
index 000000000..89cc911bf
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/ptrace.h
@@ -0,0 +1,118 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#ifndef _UAPI_ASM_RISCV_PTRACE_H
+#define _UAPI_ASM_RISCV_PTRACE_H
+#ifndef __ASSEMBLY__
+#include <linux/types.h>
+struct user_regs_struct {
+  unsigned long pc;
+  unsigned long ra;
+  unsigned long sp;
+  unsigned long gp;
+  unsigned long tp;
+  unsigned long t0;
+  unsigned long t1;
+  unsigned long t2;
+  unsigned long s0;
+  unsigned long s1;
+  unsigned long a0;
+  unsigned long a1;
+  unsigned long a2;
+  unsigned long a3;
+  unsigned long a4;
+  unsigned long a5;
+  unsigned long a6;
+  unsigned long a7;
+  unsigned long s2;
+  unsigned long s3;
+  unsigned long s4;
+  unsigned long s5;
+  unsigned long s6;
+  unsigned long s7;
+  unsigned long s8;
+  unsigned long s9;
+  unsigned long s10;
+  unsigned long s11;
+  unsigned long t3;
+  unsigned long t4;
+  unsigned long t5;
+  unsigned long t6;
+};
+struct __riscv_f_ext_state {
+  __u32 f[32];
+  __u32 fcsr;
+};
+struct __riscv_d_ext_state {
+  __u64 f[32];
+  __u32 fcsr;
+};
+struct __riscv_q_ext_state {
+  __u64 f[64] __attribute__((aligned(16)));
+  __u32 fcsr;
+  __u32 reserved[3];
+};
+union __riscv_fp_state {
+  struct __riscv_f_ext_state f;
+  struct __riscv_d_ext_state d;
+  struct __riscv_q_ext_state q;
+};
+
+struct pt_regs {
+  unsigned long epc;
+  unsigned long ra;
+  unsigned long sp;
+  unsigned long gp;
+  unsigned long tp;
+  unsigned long t0;
+  unsigned long t1;
+  unsigned long t2;
+  unsigned long s0;
+  unsigned long s1;
+  unsigned long a0;
+  unsigned long a1;
+  unsigned long a2;
+  unsigned long a3;
+  unsigned long a4;
+  unsigned long a5;
+  unsigned long a6;
+  unsigned long a7;
+  unsigned long s2;
+  unsigned long s3;
+  unsigned long s4;
+  unsigned long s5;
+  unsigned long s6;
+  unsigned long s7;
+  unsigned long s8;
+  unsigned long s9;
+  unsigned long s10;
+  unsigned long s11;
+  unsigned long t3;
+  unsigned long t4;
+  unsigned long t5;
+  unsigned long t6;
+  /* Supervisor/Machine CSRs */
+  unsigned long status;
+  unsigned long badaddr;
+  unsigned long cause;
+  /* a0 value before the syscall */
+  unsigned long orig_a0;
+};
+
+#endif
+#endif
diff --git a/libc/kernel/uapi/asm-riscv/asm/resource.h b/libc/kernel/uapi/asm-riscv/asm/resource.h
new file mode 100644
index 000000000..371adb52f
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/resource.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/resource.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/sembuf.h b/libc/kernel/uapi/asm-riscv/asm/sembuf.h
new file mode 100644
index 000000000..6ce6549b0
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/sembuf.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/sembuf.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/setup.h b/libc/kernel/uapi/asm-riscv/asm/setup.h
new file mode 100644
index 000000000..940c4db86
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/setup.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/setup.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/shmbuf.h b/libc/kernel/uapi/asm-riscv/asm/shmbuf.h
new file mode 100644
index 000000000..fe8b1bea0
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/shmbuf.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/shmbuf.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/sigcontext.h b/libc/kernel/uapi/asm-riscv/asm/sigcontext.h
new file mode 100644
index 000000000..0553b949c
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/sigcontext.h
@@ -0,0 +1,26 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#ifndef _UAPI_ASM_RISCV_SIGCONTEXT_H
+#define _UAPI_ASM_RISCV_SIGCONTEXT_H
+#include <asm/ptrace.h>
+struct sigcontext {
+  struct user_regs_struct sc_regs;
+  union __riscv_fp_state sc_fpregs;
+};
+#endif
diff --git a/libc/kernel/uapi/asm-riscv/asm/siginfo.h b/libc/kernel/uapi/asm-riscv/asm/siginfo.h
new file mode 100644
index 000000000..a31ebb2d6
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/siginfo.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/siginfo.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/signal.h b/libc/kernel/uapi/asm-riscv/asm/signal.h
new file mode 100644
index 000000000..64373feb2
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/signal.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/signal.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/socket.h b/libc/kernel/uapi/asm-riscv/asm/socket.h
new file mode 100644
index 000000000..50a9874cc
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/socket.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/socket.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/sockios.h b/libc/kernel/uapi/asm-riscv/asm/sockios.h
new file mode 100644
index 000000000..710db92bb
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/sockios.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/sockios.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/stat.h b/libc/kernel/uapi/asm-riscv/asm/stat.h
new file mode 100644
index 000000000..af7ebfcbf
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/stat.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/stat.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/statfs.h b/libc/kernel/uapi/asm-riscv/asm/statfs.h
new file mode 100644
index 000000000..93de275d1
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/statfs.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/statfs.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/swab.h b/libc/kernel/uapi/asm-riscv/asm/swab.h
new file mode 100644
index 000000000..0049f5340
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/swab.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/swab.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/termbits.h b/libc/kernel/uapi/asm-riscv/asm/termbits.h
new file mode 100644
index 000000000..42af6fe24
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/termbits.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/termbits.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/termios.h b/libc/kernel/uapi/asm-riscv/asm/termios.h
new file mode 100644
index 000000000..feca4c60e
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/termios.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/termios.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/types.h b/libc/kernel/uapi/asm-riscv/asm/types.h
new file mode 100644
index 000000000..8250f4345
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/types.h
@@ -0,0 +1,19 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#include <asm-generic/types.h>
diff --git a/libc/kernel/uapi/asm-riscv/asm/ucontext.h b/libc/kernel/uapi/asm-riscv/asm/ucontext.h
new file mode 100644
index 000000000..24dc60a6b
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/ucontext.h
@@ -0,0 +1,30 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#ifndef _UAPI__ASM_UCONTEXT_H
+#define _UAPI__ASM_UCONTEXT_H
+#include <linux/types.h>
+struct ucontext {
+  unsigned long uc_flags;
+  struct ucontext * uc_link;
+  stack_t uc_stack;
+  sigset_t uc_sigmask;
+  __u8 __linux_unused[1024 / 8 - sizeof(sigset_t)];
+  struct sigcontext uc_mcontext;
+};
+#endif
diff --git a/libc/kernel/uapi/asm-riscv/asm/unistd.h b/libc/kernel/uapi/asm-riscv/asm/unistd.h
new file mode 100644
index 000000000..a35371218
--- /dev/null
+++ b/libc/kernel/uapi/asm-riscv/asm/unistd.h
@@ -0,0 +1,29 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ***   To edit the content of this header, modify the corresponding
+ ***   source file (e.g. under external/kernel-headers/original/) then
+ ***   run bionic/libc/kernel/tools/update_all.py
+ ***
+ ***   Any manual change here will be lost the next time this script will
+ ***   be run. You've been warned!
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+#ifdef __LP64__
+#define __ARCH_WANT_RENAMEAT
+#define __ARCH_WANT_NEW_STAT
+#define __ARCH_WANT_SET_GET_RLIMIT
+#define __ARCH_WANT_SYS_CLONE3
+#endif
+#include <asm-generic/unistd.h>
+#ifndef __NR_riscv_flush_icache
+#define __NR_riscv_flush_icache (__NR_arch_specific_syscall + 15)
+#endif
+__SYSCALL(__NR_riscv_flush_icache, sys_riscv_flush_icache)
diff --git a/libc/libc.map.txt b/libc/libc.map.txt
index 88192239a..ee97535c0 100644
--- a/libc/libc.map.txt
+++ b/libc/libc.map.txt
@@ -680,28 +680,28 @@ LIBC {
     nftw64; # introduced=21
     nice;
     nrand48;
-    ns_format_ttl; # arm64 x86_64 mips64 introduced=22
-    ns_get16; # arm64 x86_64 mips64 introduced=22
-    ns_get32; # arm64 x86_64 mips64 introduced=22
-    ns_initparse; # arm64 x86_64 mips64 introduced=22
-    ns_makecanon; # arm64 x86_64 mips64 introduced=22
-    ns_msg_getflag; # arm64 x86_64 mips64 introduced=22
-    ns_name_compress; # arm64 x86_64 mips64 introduced=22
-    ns_name_ntol; # arm64 x86_64 mips64 introduced=22
-    ns_name_ntop; # arm64 x86_64 mips64 introduced=22
-    ns_name_pack; # arm64 x86_64 mips64 introduced=22
-    ns_name_pton; # arm64 x86_64 mips64 introduced=23
-    ns_name_rollback; # arm64 x86_64 mips64 introduced=22
-    ns_name_skip; # arm64 x86_64 mips64 introduced=22
-    ns_name_uncompress; # arm64 x86_64 mips64 introduced=22
-    ns_name_unpack; # arm64 x86_64 mips64 introduced=22
-    ns_parserr; # arm64 x86_64 mips64 introduced=22
-    ns_put16; # arm64 x86_64 mips64 introduced=22
-    ns_put32; # arm64 x86_64 mips64 introduced=22
-    ns_samename; # arm64 x86_64 mips64 introduced=22
-    ns_skiprr; # arm64 x86_64 mips64 introduced=22
-    ns_sprintrr; # arm64 x86_64 mips64 introduced=22
-    ns_sprintrrf; # arm64 x86_64 mips64 introduced=22
+    ns_format_ttl; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_get16; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_get32; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_initparse; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_makecanon; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_msg_getflag; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_name_compress; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_name_ntol; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_name_ntop; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_name_pack; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_name_pton; # arm64 x86_64 mips64 riscv64 introduced=23
+    ns_name_rollback; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_name_skip; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_name_uncompress; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_name_unpack; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_parserr; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_put16; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_put32; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_samename; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_skiprr; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_sprintrr; # arm64 x86_64 mips64 riscv64 introduced=22
+    ns_sprintrrf; # arm64 x86_64 mips64 riscv64 introduced=22
     nsdispatch;
     ntohl; # introduced=21
     ntohs; # introduced=21
@@ -740,7 +740,7 @@ LIBC {
     pread;
     pread64; # introduced-arm=12 introduced-arm64=21 introduced-mips=12 introduced-mips64=21 introduced-x86=12 introduced-x86_64=21
     printf;
-    prlimit; # arm64 x86_64 mips64
+    prlimit; # arm64 x86_64 mips64 riscv64
     prlimit64; # introduced=21
     process_vm_readv; # introduced=23
     process_vm_writev; # introduced=23
@@ -1449,7 +1449,7 @@ LIBC_Q { # introduced=Q
     ___tls_get_addr; # x86
     __aeabi_read_tp; # arm
     __res_randomid;
-    __tls_get_addr; # arm x86_64
+    __tls_get_addr; # arm x86_64 riscv64
     android_fdsan_close_with_tag;
     android_fdsan_create_owner_tag;
     android_fdsan_exchange_owner_tag;
diff --git a/libc/malloc_debug/backtrace.cpp b/libc/malloc_debug/backtrace.cpp
index 0e3a53f92..163c49016 100644
--- a/libc/malloc_debug/backtrace.cpp
+++ b/libc/malloc_debug/backtrace.cpp
@@ -110,6 +110,15 @@ static _Unwind_Reason_Code trace_function(__unwind_context* context, void* arg)
 #elif defined(__aarch64__)
     // All instructions are 4 bytes long, skip back one instruction.
     ip -= 4;
+#elif __riscv_xlen == 64
+    if (ip >= 4096) {
+      uint16_t value = (*reinterpret_cast<uint16_t*>(ip - 2)) & 3;
+      if (value == 0x3) {
+        ip -= 4;
+      } else {
+        ip -= 2;
+      }
+    }
 #elif defined(__i386__) || defined(__x86_64__)
     // It's difficult to decode exactly where the previous instruction is,
     // so subtract 1 to estimate where the instruction lives.
diff --git a/libc/private/__get_tls.h b/libc/private/__get_tls.h
index 04c5fdbbf..83d33e5c7 100644
--- a/libc/private/__get_tls.h
+++ b/libc/private/__get_tls.h
@@ -42,6 +42,8 @@
                "rdhwr   %0,$29\n" \
                ".set    pop\n" : "=r"(__val)); \
        __val; })
+#elif __riscv_xlen == 64
+# define __get_tls() ({ void** __val; __asm__("mv %0, tp" : "=r"(__val)); __val; })
 #elif defined(__i386__)
 # define __get_tls() ({ void** __val; __asm__("movl %%gs:0, %0" : "=r"(__val)); __val; })
 #elif defined(__x86_64__)
diff --git a/libc/private/bionic_asm.h b/libc/private/bionic_asm.h
index 30842f45d..3ece7b76e 100644
--- a/libc/private/bionic_asm.h
+++ b/libc/private/bionic_asm.h
@@ -44,6 +44,8 @@
 #include <private/bionic_asm_x86.h>
 #elif defined(__mips__)
 #include <private/bionic_asm_mips.h>
+#elif __riscv_xlen == 64
+#include <private/bionic_asm_riscv64.h>
 #elif defined(__x86_64__)
 #include <private/bionic_asm_x86_64.h>
 #endif
diff --git a/libc/private/bionic_asm_riscv64.h b/libc/private/bionic_asm_riscv64.h
new file mode 100644
index 000000000..905b9f64c
--- /dev/null
+++ b/libc/private/bionic_asm_riscv64.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#pragma once
+
+#define __bionic_asm_align 16
+#define SZREG  8
+
+#undef __bionic_asm_function_type
+#define __bionic_asm_function_type %function
diff --git a/libc/private/bionic_asm_tls.h b/libc/private/bionic_asm_tls.h
index 92f707aad..ea72e55af 100644
--- a/libc/private/bionic_asm_tls.h
+++ b/libc/private/bionic_asm_tls.h
@@ -114,6 +114,22 @@
 #define TLS_SLOT_BIONIC_TLS       9
 #define MAX_TLS_SLOT              9 // update this value when reserving a slot
 
+#elif __riscv_xlen == 64
+
+#define MIN_TLS_SLOT              0
+
+#define TLS_SLOT_SELF             0
+#define TLS_SLOT_THREAD_ID        1
+#define TLS_SLOT_APP              2 // was historically used for errno
+#define TLS_SLOT_OPENGL           3
+#define TLS_SLOT_OPENGL_API       4
+#define TLS_SLOT_STACK_GUARD      5
+#define TLS_SLOT_SANITIZER        6 // was historically used for dlerror
+#define TLS_SLOT_ART_THREAD_SELF  7
+#define TLS_SLOT_DTV              8
+#define TLS_SLOT_BIONIC_TLS       9
+#define MAX_TLS_SLOT              9 // update this value when reserving a slot
+
 #endif
 
 #define BIONIC_TLS_SLOTS (MAX_TLS_SLOT - MIN_TLS_SLOT + 1)
diff --git a/libc/private/bionic_macros.h b/libc/private/bionic_macros.h
index 4800e3af9..830aabd38 100644
--- a/libc/private/bionic_macros.h
+++ b/libc/private/bionic_macros.h
@@ -62,6 +62,8 @@ static inline T* align_up(T* p, size_t align) {
 #define BIONIC_STOP_UNWIND asm volatile(".cfi_undefined \%rip")
 #elif defined (__mips__)
 #define BIONIC_STOP_UNWIND asm volatile(".cfi_undefined $ra")
+#elif __riscv_xlen == 64
+#define BIONIC_STOP_UNWIND asm volatile(".cfi_undefined x1")
 #endif
 
 // The arraysize(arr) macro returns the # of elements in an array arr.
diff --git a/libc/seccomp/seccomp_bpfs.h b/libc/seccomp/seccomp_bpfs.h
index d9e80479c..5f02eb96a 100644
--- a/libc/seccomp/seccomp_bpfs.h
+++ b/libc/seccomp/seccomp_bpfs.h
@@ -72,3 +72,12 @@ extern const struct sock_filter mips64_system_filter[];
 extern const size_t mips64_system_filter_size;
 extern const struct sock_filter mips64_global_filter[];
 extern const size_t mips64_global_filter_size;
+
+extern const struct sock_filter riscv64_app_filter[];
+extern const size_t riscv64_app_filter_size;
+extern const struct sock_filter riscv64_app_zygote_filter[];
+extern const size_t riscv64_app_zygote_filter_size;
+extern const struct sock_filter riscv64_system_filter[];
+extern const size_t riscv64_system_filter_size;
+extern const struct sock_filter riscv64_global_filter[];
+extern const size_t riscv64_global_filter_size;
diff --git a/libc/seccomp/seccomp_policy.cpp b/libc/seccomp/seccomp_policy.cpp
index 222a2c87d..f2ab18cd0 100644
--- a/libc/seccomp/seccomp_policy.cpp
+++ b/libc/seccomp/seccomp_policy.cpp
@@ -110,6 +110,31 @@ static const size_t secondary_global_filter_size = mips_global_filter_size;
 
 static const long secondary_setresgid = __mips_setresgid;
 static const long secondary_setresuid = __mips_setresuid;
+#elif __riscv_xlen == 64
+#define PRIMARY_ARCH AUDIT_ARCH_RISCV64
+static const struct sock_filter* primary_app_filter = riscv64_app_filter;
+static const size_t primary_app_filter_size = riscv64_app_filter_size;
+static const struct sock_filter* primary_app_zygote_filter = riscv64_app_zygote_filter;
+static const size_t primary_app_zygote_filter_size = riscv64_app_zygote_filter_size;
+static const struct sock_filter* primary_system_filter = riscv64_system_filter;
+static const size_t primary_system_filter_size = riscv64_system_filter_size;
+static const struct sock_filter* primary_global_filter = riscv64_global_filter;
+static const size_t primary_global_filter_size = riscv64_global_filter_size;
+
+static const long primary_setresgid = __riscv64_setresgid;
+static const long primary_setresuid = __riscv64_setresuid;
+#define SECONDARY_ARCH AUDIT_ARCH_RISCV64
+static const struct sock_filter* secondary_app_filter = riscv64_app_filter;
+static const size_t secondary_app_filter_size = riscv64_app_filter_size;
+static const struct sock_filter* secondary_app_zygote_filter = riscv64_app_zygote_filter;
+static const size_t secondary_app_zygote_filter_size = riscv64_app_zygote_filter_size;
+static const struct sock_filter* secondary_system_filter = riscv64_system_filter;
+static const size_t secondary_system_filter_size = riscv64_system_filter_size;
+static const struct sock_filter* secondary_global_filter = riscv64_global_filter;
+static const size_t secondary_global_filter_size = riscv64_global_filter_size;
+
+static const long secondary_setresgid = __riscv64_setresgid;
+static const long secondary_setresuid = __riscv64_setresuid;
 #else
 #error No architecture was defined!
 #endif
diff --git a/libc/tools/genfunctosyscallnrs.py b/libc/tools/genfunctosyscallnrs.py
index 6a456f269..6d506ceb5 100755
--- a/libc/tools/genfunctosyscallnrs.py
+++ b/libc/tools/genfunctosyscallnrs.py
@@ -22,7 +22,7 @@ def load_syscall_names_from_file(file_path, architecture):
   return arch_map
 
 def gen_syscall_nrs(out_file, base_syscall_file, syscall_NRs):
-  for arch in ('arm', 'arm64', 'mips', 'mips64', 'x86', 'x86_64'):
+  for arch in ('arm', 'arm64', 'mips', 'mips64', 'riscv64', 'x86', 'x86_64'):
     base_names = load_syscall_names_from_file(base_syscall_file, arch)
 
     for func,syscall in base_names.iteritems():
diff --git a/libc/tools/genseccomp.py b/libc/tools/genseccomp.py
index 365e1980b..234722273 100755
--- a/libc/tools/genseccomp.py
+++ b/libc/tools/genseccomp.py
@@ -181,7 +181,7 @@ def construct_bpf(syscalls, architecture, name_modifier):
 
 
 def gen_policy(name_modifier, out_dir, base_syscall_file, syscall_files, syscall_NRs):
-  for arch in ('arm', 'arm64', 'mips', 'mips64', 'x86', 'x86_64'):
+  for arch in ('arm', 'arm64', 'mips', 'mips64', 'riscv64', 'x86', 'x86_64'):
     base_names = load_syscall_names_from_file(base_syscall_file, arch)
     whitelist_names = set()
     blacklist_names = set()
diff --git a/libc/tools/gensyscalls.py b/libc/tools/gensyscalls.py
index 9a3b95e58..f4da79cd3 100755
--- a/libc/tools/gensyscalls.py
+++ b/libc/tools/gensyscalls.py
@@ -18,7 +18,7 @@ import sys
 import tempfile
 
 
-all_arches = [ "arm", "arm64", "mips", "mips64", "x86", "x86_64" ]
+all_arches = [ "arm", "arm64", "mips", "mips64", "riscv64", "x86", "x86_64" ]
 
 
 # temp directory where we store all intermediate files
@@ -162,6 +162,23 @@ mips64_call = syscall_stub_header + """\
 END(%(func)s)
 """
 
+#
+# RISC-V64 assembler templates for each syscall stub
+#
+
+riscv64_call = syscall_stub_header + """\
+    li      a7, %(__NR_name)s
+    scall
+
+    li      a7, -MAX_ERRNO
+    bgtu    a0, a7, 1f;
+
+    ret
+1:
+    neg     a0, a0
+    j       __set_errno_internal
+END(%(func)s)
+"""
 
 #
 # x86 assembler templates for each syscall stub
@@ -320,6 +337,8 @@ def mips_genstub(syscall):
 def mips64_genstub(syscall):
     return mips64_call % syscall
 
+def riscv64_genstub(syscall):
+    return riscv64_call % syscall
 
 def x86_genstub(syscall):
     result     = syscall_stub_header % syscall
@@ -561,6 +580,9 @@ class State:
             if syscall.has_key("mips64"):
                 syscall["asm-mips64"] = add_footer(64, mips64_genstub(syscall), syscall)
 
+            if syscall.has_key("riscv64"):
+                syscall["asm-riscv64"] = add_footer(64, riscv64_genstub(syscall), syscall)
+
             if syscall.has_key("x86_64"):
                 syscall["asm-x86_64"] = add_footer(64, x86_64_genstub(syscall), syscall)
 
@@ -590,6 +612,7 @@ class State:
                          "kernel/uapi/asm-mips/asm/unistd_nr_n64.h",
                          "kernel/uapi/asm-mips/asm/unistd_nr_o32.h",
                          "kernel/uapi/asm-mips/asm/unistd_o32.h",
+                         "kernel/uapi/asm-riscv/asm/unistd.h",
                          "kernel/uapi/asm-x86/asm/unistd_32.h",
                          "kernel/uapi/asm-x86/asm/unistd_64.h",
                          "kernel/uapi/asm-x86/asm/unistd_x32.h"]:
diff --git a/libc/tools/test_genseccomp.py b/libc/tools/test_genseccomp.py
index 71a78d1fc..574db93aa 100755
--- a/libc/tools/test_genseccomp.py
+++ b/libc/tools/test_genseccomp.py
@@ -26,7 +26,7 @@ class TestGenseccomp(unittest.TestCase):
   def test_get_names(self):
     bionic = cStringIO.StringIO(textwrap.dedent("""\
 int __llseek:_llseek(int, unsigned long, unsigned long, off64_t*, int) arm,mips,x86
-int         fchown:fchown(int, uid_t, gid_t)    arm64,mips,mips64,x86_64
+int         fchown:fchown(int, uid_t, gid_t)    arm64,mips,mips64,riscv64,x86_64
     """))
 
     whitelist = cStringIO.StringIO(textwrap.dedent("""\
@@ -54,7 +54,7 @@ ssize_t     read(int, void*, size_t)        all
 
     # Blacklist item must be in bionic
     blacklist = cStringIO.StringIO(textwrap.dedent("""\
-int         fchown2:fchown2(int, uid_t, gid_t)    arm64,mips,mips64,x86_64
+int         fchown2:fchown2(int, uid_t, gid_t)    arm64,mips,mips64,riscv64,x86_64
     """))
     with self.assertRaises(RuntimeError):
       genseccomp.get_names([bionic, whitelist, blacklist], "arm")
@@ -64,7 +64,7 @@ int         fchown2:fchown2(int, uid_t, gid_t)    arm64,mips,mips64,x86_64
 
     # Test blacklist item is removed
     blacklist = cStringIO.StringIO(textwrap.dedent("""\
-int         fchown:fchown(int, uid_t, gid_t)    arm64,mips,mips64,x86_64
+int         fchown:fchown(int, uid_t, gid_t)    arm64,mips,mips64,riscv64,x86_64
     """))
     names = genseccomp.get_names([bionic, whitelist, blacklist], "arm64")
     bionic.seek(0)
@@ -75,7 +75,7 @@ int         fchown:fchown(int, uid_t, gid_t)    arm64,mips,mips64,x86_64
 
     # Blacklist item must not be in whitelist
     whitelist = cStringIO.StringIO(textwrap.dedent("""\
-int         fchown:fchown(int, uid_t, gid_t)    arm64,mips,mips64,x86_64
+int         fchown:fchown(int, uid_t, gid_t)    arm64,mips,mips64,riscv64,x86_64
     """))
     with self.assertRaises(RuntimeError):
       genseccomp.get_names([empty, whitelist, blacklist], "arm")
@@ -125,8 +125,8 @@ int __llseek:_llseek(int, unsigned long, unsigned long, off64_t*, int) arm,mips,
                       [("openat", 4288)])
 
     self.assertEquals(genseccomp.convert_names_to_NRs(["openat"],
-                                                      self.get_headers("mips64"),
-                                                      self.get_switches("mips64")),
+                                                      self.get_headers("mips64,riscv64"),
+                                                      self.get_switches("mips64,riscv64")),
                       [("openat", 5247)])
 
 
@@ -193,7 +193,7 @@ int __llseek:_llseek(int, unsigned long, unsigned long, off64_t*, int) arm,mips,
   def test_construct_bpf(self):
     syscalls = cStringIO.StringIO(textwrap.dedent("""\
     int __llseek:_llseek(int, unsigned long, unsigned long, off64_t*, int) arm,mips,x86
-    int         fchown:fchown(int, uid_t, gid_t)    arm64,mips,mips64,x86_64
+    int         fchown:fchown(int, uid_t, gid_t)    arm64,mips,mips64,riscv64,x86_64
     """))
 
     whitelist = cStringIO.StringIO(textwrap.dedent("""\
diff --git a/libc/versioner-dependencies/riscv64/kernel_uapi_asm-riscv64 b/libc/versioner-dependencies/riscv64/kernel_uapi_asm-riscv64
new file mode 120000
index 000000000..61353cb46
--- /dev/null
+++ b/libc/versioner-dependencies/riscv64/kernel_uapi_asm-riscv64
@@ -0,0 +1 @@
+../../kernel/uapi/asm-riscv/
\ No newline at end of file
diff --git a/libdl/Android.bp b/libdl/Android.bp
index fbbe7ba29..adcf380a7 100644
--- a/libdl/Android.bp
+++ b/libdl/Android.bp
@@ -50,6 +50,7 @@ cc_library {
         "-Wl,--exclude-libs=libgcc_stripped.a",
         "-Wl,--exclude-libs=libclang_rt.builtins-arm-android.a",
         "-Wl,--exclude-libs=libclang_rt.builtins-aarch64-android.a",
+        "-Wl,--exclude-libs=libclang_rt.builtins-riscv64-android.a",
         "-Wl,--exclude-libs=libclang_rt.builtins-x86-android.a",
         "-Wl,--exclude-libs=libclang_rt.builtins-x86_64-android.a",
     ],
@@ -64,6 +65,9 @@ cc_library {
         arm64: {
             version_script: ":libdl.arm64.map",
         },
+        riscv64: {
+            version_script: ":libdl.riscv64.map",
+        },
         x86: {
             pack_relocations: false,
             ldflags: [
@@ -131,6 +135,7 @@ cc_library {
         "-Wl,--exclude-libs=libgcc_stripped.a",
         "-Wl,--exclude-libs=libclang_rt.builtins-arm-android.a",
         "-Wl,--exclude-libs=libclang_rt.builtins-aarch64-android.a",
+        "-Wl,--exclude-libs=libclang_rt.builtins-riscv64-android.a",
         "-Wl,--exclude-libs=libclang_rt.builtins-x86-android.a",
         "-Wl,--exclude-libs=libclang_rt.builtins-x86_64-android.a",
     ],
@@ -206,6 +211,14 @@ genrule {
     cmd: "$(location :bionic-generate-version-script) arm64 $(in) $(out)",
 }
 
+genrule {
+    name: "libdl.riscv64.map",
+    out: ["libdl.riscv64.map"],
+    srcs: ["libdl.map.txt"],
+    tool_files: [":bionic-generate-version-script"],
+    cmd: "$(location :bionic-generate-version-script) riscv64 $(in) $(out)",
+}
+
 genrule {
     name: "libdl.x86.map",
     out: ["libdl.x86.map"],
diff --git a/libm/Android.bp b/libm/Android.bp
index 8c32810d0..4fd665cd6 100644
--- a/libm/Android.bp
+++ b/libm/Android.bp
@@ -321,6 +321,13 @@ cc_library {
             version_script: ":libm.arm64.map",
         },
 
+        riscv64: {
+            srcs: [
+                "riscv64/fenv.c",
+            ],
+            version_script: ":libm.riscv64.map",
+        },
+
         x86: {
             srcs: [
                 "i387/fenv.c",
@@ -541,6 +548,14 @@ genrule {
     cmd: "$(location :bionic-generate-version-script) arm64 $(in) $(out)",
 }
 
+genrule {
+    name: "libm.riscv64.map",
+    out: ["libm.riscv64.map"],
+    srcs: ["libm.map.txt"],
+    tool_files: [":bionic-generate-version-script"],
+    cmd: "$(location :bionic-generate-version-script) riscv64 $(in) $(out)",
+}
+
 genrule {
     name: "libm.x86.map",
     out: ["libm.x86.map"],
diff --git a/libm/riscv64/fenv.c b/libm/riscv64/fenv.c
new file mode 100644
index 000000000..611eeb0c6
--- /dev/null
+++ b/libm/riscv64/fenv.c
@@ -0,0 +1,133 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <stdint.h>
+#include <fenv.h>
+
+# define __get_fcw(cw) __asm__ volatile ("frsr %0" : "=r" (cw))
+# define __set_fcw(cw) __asm__ volatile ("fssr %z0" : : "r" (cw))
+
+const fenv_t __fe_dfl_env = 0;
+
+int fegetenv (fenv_t *envp)
+{
+  __get_fcw(*envp);
+  return 0;
+}
+
+int fesetenv(const fenv_t* envp)
+{
+  long int env;
+
+  __get_fcw(env);
+  if (*envp != env)
+	__set_fcw(env);
+  return 0;
+}
+
+
+int feclearexcept(int excepts)
+{
+  asm volatile ("csrc fflags, %0" : : "r" (excepts));
+  return 0;
+}
+
+int fegetexceptflag(fexcept_t* flagp, int excepts)
+{
+  int flags;
+  asm volatile ("frflags %0" : "=r" (flags));
+  *flagp = flags & excepts;
+  return 0;
+}
+
+int fesetexceptflag(const fexcept_t* flagp, int excepts)
+{
+  fexcept_t flags = *flagp;
+  asm volatile ("csrc fflags, %0" : : "r" (excepts));
+  asm volatile ("csrs fflags, %0" : : "r" (flags & excepts));
+  return 0;
+}
+
+int feraiseexcept(int excepts)
+{
+  asm volatile ("csrs fflags, %0" : : "r" (excepts));
+  return 0;
+}
+
+int fetestexcept(int excepts)
+{
+  int flags;
+  asm volatile ("frflags %0" : "=r" (flags));
+  return flags & excepts;
+}
+
+int fegetround(void)
+{
+  int rm;
+  asm volatile ("frrm %0" : "=r" (rm));
+  return rm;
+}
+
+int fesetround(int round)
+{
+  round &= FE_UPWARD;
+  asm volatile ("fsrm %z0" : : "r" (round));
+  return 0;
+}
+
+int feholdexcept(fenv_t* envp)
+{
+  asm volatile ("csrrc %0, fcsr, %1" : "=r" (*envp) : "i" (FE_ALL_EXCEPT));
+  return 0;
+}
+
+int feupdateenv(const fenv_t* envp)
+{
+  long int env;
+
+  asm volatile ("frflags %0" : "=r" (env));
+  env |= *envp;
+  __set_fcw(env);
+
+  return 0;
+}
+
+int feenableexcept(int mask __unused)
+{
+  return 0;
+}
+
+int fedisableexcept(int mask __unused)
+{
+  return 0;
+}
+
+int fegetexcept(void)
+{
+  return 0;
+}
diff --git a/linker/Android.bp b/linker/Android.bp
index 728dec575..d10b84531 100644
--- a/linker/Android.bp
+++ b/linker/Android.bp
@@ -107,6 +107,13 @@ filegroup {
     ],
 }
 
+filegroup {
+    name: "linker_sources_riscv64",
+    srcs: [
+        "arch/riscv64/begin.S",
+    ],
+}
+
 filegroup {
     name: "linker_sources_x86",
     srcs: [
@@ -258,6 +265,10 @@ cc_binary {
             srcs: [":linker_sources_mips64"],
             version_script: ":linker_version_script",
         },
+        riscv64: {
+            srcs: [":linker_sources_riscv64"],
+            version_script: ":linker_version_script",
+        },
     },
 
     // We need to access Bionic private headers in the linker.
@@ -322,6 +333,7 @@ cc_library {
         "-Wl,--exclude-libs=libgcc_stripped.a",
         "-Wl,--exclude-libs=libclang_rt.builtins-arm-android.a",
         "-Wl,--exclude-libs=libclang_rt.builtins-aarch64-android.a",
+        "-Wl,--exclude-libs=libclang_rt.builtins-riscv64-android.a",
         "-Wl,--exclude-libs=libclang_rt.builtins-x86-android.a",
         "-Wl,--exclude-libs=libclang_rt.builtins-x86_64-android.a",
     ],
@@ -348,6 +360,9 @@ cc_library {
         mips64: {
             version_script: "linker.generic.map",
         },
+        riscv64: {
+            version_script: "linker.generic.map",
+        },
     },
 
     srcs: ["ld_android.cpp"],
diff --git a/linker/arch/riscv64/begin.S b/linker/arch/riscv64/begin.S
new file mode 100644
index 000000000..6adf1bdf0
--- /dev/null
+++ b/linker/arch/riscv64/begin.S
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <private/bionic_asm.h>
+
+ENTRY(_start)
+  // Force unwinds to end in this function.
+  .cfi_undefined ra
+
+  mv a0, sp
+  jal __linker_init
+
+  /* linker init returns the _entry address in the main image */
+  jalr a0
+END(_start)
diff --git a/linker/linker_common_types.h b/linker/linker_common_types.h
index ae78aa99b..5442fb98d 100644
--- a/linker/linker_common_types.h
+++ b/linker/linker_common_types.h
@@ -37,7 +37,7 @@
 // consequent refactoring steps.
 
 // Android uses RELA for aarch64 and x86_64. mips64 still uses REL.
-#if defined(__aarch64__) || defined(__x86_64__)
+#if defined(__aarch64__) || defined(__x86_64__) || __riscv_xlen == 64
 #define USE_RELA 1
 #endif
 
diff --git a/linker/linker_phdr.cpp b/linker/linker_phdr.cpp
index 353428730..e2659fa37 100644
--- a/linker/linker_phdr.cpp
+++ b/linker/linker_phdr.cpp
@@ -53,6 +53,8 @@ static int GetTargetElfMachine() {
   return EM_386;
 #elif defined(__mips__)
   return EM_MIPS;
+#elif __riscv_xlen == 64
+  return EM_RISCV;
 #elif defined(__x86_64__)
   return EM_X86_64;
 #endif
diff --git a/linker/linker_relocs.h b/linker/linker_relocs.h
index 68191f911..91031afff 100644
--- a/linker/linker_relocs.h
+++ b/linker/linker_relocs.h
@@ -76,4 +76,15 @@
 #define R_GENERIC_TLS_TPREL     R_X86_64_TPOFF64
 #define R_GENERIC_TLSDESC       R_X86_64_TLSDESC
 
+#elif __riscv_xlen == 64
+
+#define R_GENERIC_JUMP_SLOT     R_RISCV_JUMP_SLOT
+#define R_GENERIC_GLOB_DAT      R_RISCV_64
+#define R_GENERIC_RELATIVE      R_RISCV_RELATIVE
+#define R_GENERIC_IRELATIVE     R_RISCV_IRELATIVE
+#define R_GENERIC_TLS_DTPMOD    R_RISCV_TLS_DTPMOD64
+#define R_GENERIC_TLS_DTPREL    R_RISCV_TLS_DTPREL64
+#define R_GENERIC_TLS_TPREL     R_RISCV_TLS_TPREL64
+#define R_GENERIC_TLSDESC       R_RISCV_TLS_GOT_HI20
+
 #endif
diff --git a/tests/Android.build.prebuilt.mk b/tests/Android.build.prebuilt.mk
index 3b3484664..e125b40c5 100644
--- a/tests/Android.build.prebuilt.mk
+++ b/tests/Android.build.prebuilt.mk
@@ -23,6 +23,7 @@ LOCAL_MODULE_CLASS := EXECUTABLES
 
 LOCAL_SRC_FILES_arm := prebuilt-elf-files/arm/$(bionic_tests_module)
 LOCAL_SRC_FILES_arm64 := prebuilt-elf-files/arm64/$(bionic_tests_module)
+LOCAL_SRC_FILES_riscv64 := prebuilt-elf-files/riscv64/$(bionic_tests_module)
 LOCAL_SRC_FILES_x86 := prebuilt-elf-files/x86/$(bionic_tests_module)
 LOCAL_SRC_FILES_x86_64 := prebuilt-elf-files/x86_64/$(bionic_tests_module)
 LOCAL_SRC_FILES_mips := prebuilt-elf-files/mips/$(bionic_tests_module)
diff --git a/tests/dlfcn_test.cpp b/tests/dlfcn_test.cpp
index f3be9883d..581623816 100644
--- a/tests/dlfcn_test.cpp
+++ b/tests/dlfcn_test.cpp
@@ -995,6 +995,8 @@ TEST(dlfcn, dlopen_executable_by_absolute_path) {
 #else
 #define ALTERNATE_PATH_TO_SYSTEM_LIB "/system/lib/mips/"
 #endif
+#elif __riscv_xlen == 64
+#define ALTERNATE_PATH_TO_SYSTEM_LIB "/system/lib/riscv64/"
 #else
 #error "Unknown architecture"
 #endif
diff --git a/tests/prebuilt-elf-files/riscv64/libtest_empty.so b/tests/prebuilt-elf-files/riscv64/libtest_empty.so
new file mode 100755
index 0000000000000000000000000000000000000000..916ea33a23747a40ebdfa87f5a645e9f4fb6d970
GIT binary patch
literal 3904
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

literal 0
HcmV?d00001

diff --git a/tests/prebuilt-elf-files/riscv64/libtest_invalid-empty_shdr_table.so b/tests/prebuilt-elf-files/riscv64/libtest_invalid-empty_shdr_table.so
new file mode 100755
index 0000000000000000000000000000000000000000..c8b543062ea53c049403fda0f0ded902a479b457
GIT binary patch
literal 6376
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
WfHc<r-tGISV29L=_C{z+`F{chzQO7M

literal 0
HcmV?d00001

diff --git a/tests/prebuilt-elf-files/riscv64/libtest_invalid-rw_load_segment.so b/tests/prebuilt-elf-files/riscv64/libtest_invalid-rw_load_segment.so
new file mode 100755
index 0000000000000000000000000000000000000000..6463c6bcdf52d7bfaac4dffb893c5ccfc3a05a6b
GIT binary patch
literal 6376
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
Zd@)&oG}iv!?fa-?hty5>Mrcd<e*!$v!T|sP

literal 0
HcmV?d00001

diff --git a/tests/prebuilt-elf-files/riscv64/libtest_invalid-textrels.so b/tests/prebuilt-elf-files/riscv64/libtest_invalid-textrels.so
new file mode 100755
index 0000000000000000000000000000000000000000..f83bbe43731d1190ad7c50a3e68eb2fd62f5a085
GIT binary patch
literal 6376
zcmeHLdsI}_8s9U62tE-+vIqthv%HLA4^5Xci1Kiugr*BY8qYWbOffS!b0m3KQshEQ
z6H~k{^-73HnhFV6Uds^kBG*=60!nE3D$PfLN+IC%?Q`~r(^39t-F4UM4?fnJ-~JxI
zy}$FF!`}Psw`Yb2%Vjcxq9BLJLyZtMa}>H^1hq{fec{)g3?+_Wc7RLG+)~V9ogq50
zIBM?0+K&S#=0qeeVie`kF^dL@dePH=#wfX{BO;HQDerT}`<(F*T^J7$^Q8AiuS#|w
zQk(=nDu^_eO5{~uN5}iCGMDjsy1!Rgo`{$yMLIT3Gti{7m<>8IoY`pU6mW&inNOZA
zSzmhbLTg>zok_l}3nCK0{8*v=xIV_C>cOt=!M+geE~Lfgq=bf@yaw&Z*=P4)CmPL?
z<(wwYVB!)Dsd^F~Ha&<W8njDPRx?FjZ{;<5V-lZ24H}I_A8)YodW(kR<II*f7@gzw
z%MCmzTB}uK<v9zq^(Gzs=s2FE{pb=|henE{(jw-Dg@nynA=D4+OP_0&T1iXfL~Zz-
z4`1Gp9yGJ|=DDR&o`lGSKN&m`8YrTS9Qd$o&`{8+uvbv<xr5GLak69}efj0xI*rBm
zT)|$jD2CU(sTZO_r{kbB+u7-}NBP~(&R!+K)tq+p6Bxf}NNY&D%R2$tO1XEPw^C7y
zm*8syU!Ld_^!uP6v(q1deo553pua8!$%f9W;mU5d**15jl^1@k(A0IMeI@vE2b1>P
z!RmHz;(cQ=A+ORlApzh&_DCG`v0hd^MCcFl&Tdl3_IwQS7ocC7<3rAuV&5L5{bM)M
zo(E&l9H0i-xgKh;slldhKhw>t5XOR-Ug@nsZv}cQ&|87t3iMW>w*r653gEsE_jJ{`
zpJUmEGW1~hH4DT&XJ2MVEM$KA{Xpdj5r{KG)Z1+~Gd1BJ6ZgEZO%<fS2;F@Awku@*
ze$2m;;k^f9e`DDA*sq@XQK$Q2DyW-8l?-Btd*~;bj{9WTfD3~6g>lKu?!|Bb!w$*)
z!G2Y^-zb(}C({#{-X)2D!1PS!w@LhLnExB#cWh4s2p=lolp@B{&k6d>Dbnx6cyppo
z>96wl2fb@zYE(41eyS@8mJ=V@FtG9CuI_B=_p_XfB>~wpGZUt+E@)VDan*>tv$N){
zb8)_1y!Kzo7pAG}ns@#BV&iDf1>tw{sw48pnNrGLY6)8O(ZcIPw8bCQXT{d685%RX
z*6-Hy8-rJT@a{j(EgsU}y6e-Eu2(`FPES1<ymPI0dZ_9bCsSK-eL!h*x@>mLF2z%g
ziYLmBPpa#GKhnRk$~k$~dzt&U&fDzu?ar4wJyRNzUk^I1-St+9NA&RTYKx4mWe3)s
z3Op9H=6*xb4~IUS66zA3?|J+DyT=dhIGmJwFd*%QyUs1fb!^G7+V`R|17&TAyDz<X
zr=-I7NYlvLxS0`qkL_KWzj9)1><On&qWf0fNZ)pdo4@{axnt?An2U9O%@1-6n-2aM
zvL@yJ2fm**Oeko*rz^ibZ2_;Y>f@}8tPgoTW6R~t4%f^v2ezkF#eQS?kJ9<5e{I=}
zz)0oy(N}fX)itAU=_mekwbAp+ltKBwj;&amwRGSQotH+%1mAS;L-zmI$8|v-pKA3v
z<F&&pd9%4?<hKQThk4vRaw)Y<zuY?7XWHEn69Ti0n?{=DIZ;O}K8EwB#x1IU<~zS_
z^NS9A7P8FIy!GYji};*9KTrPc^39r68@^BNXmM;f=iC3)Z=TF>*yp&o;;6PPdesS!
zRKo^e?<&h1yW4hix#h=Kcepgp@rWA}e7@!FlXGQxRkIpA-AlJjF`BpZ9a(gxw0L_<
zMA-GaW4Voo=X5@|)tEH=S}5oA^x1?vh6y9?g^iif8sRpgV*d-}b2A*gvLl|0$r$iL
z<G)vYk^WWARJRlJo|1QI-}0Fe7P)Wm;@nLGR;QlL-%-#SW;?j2$vLW@a>MM#`dOXD
zzpXn3uN$%Ln|x;J_}eu^*5z;wCWV|NTTb!u_zq!uaab5lRMrG5Z{ayDQJKuVUd4%r
zAS#1SZ{nFP-n2}mU1mts`N8RkN|$1?rWi%!Eks4V37j=SY$fY0R)g8}Cq)A+8pV7X
zAX)T@9PNp<k`iGoIAnldII1vcIE#f#5r*K5h9$r@g9m<8LZEQyAf`*ZrT=q&_Ty@F
zdhN1!A&S=Ee-S!A(>b3_$B&$6;XIFHu;T?(30-FF`Auv>MpSl3iVZ1$0+?wIIDU77
z844Mn@@UsMZ)0AQ!A7T6<m0-6xDtH!g6jp^rbD9*=49mKx`Q~L1+wY8dwk@FLxaxg
z$j5a75!WN+V;mwq2cv5S>bQ;|;(CSmFRfn!@aY<Zd|YP`mEfn+6aP)-Lw+Gk6cOu;
z`Ah4c!T8hZARxG}KnxYl!ZV`JS;}7pHu_9(-ymIwUSWI$<ik0WAn(JkJs<Z$h(#<8
zL0Uh0a5NY$yg%G0;5jRfhkU8N9UL@w<l}ma=gD|(jN>97^Dh7{%^&%dY~NN%lLEnb
zQF~P13l4ie?)$14e>@TyO8YC3@QIQIvIM2^QvEQ5<DQW*1#n_~e1Fl0bwIra8Z>{Y
djAHzJd@)&oG}iv!?fa-?hty5>Mrcd<e*iO>!UF&R

literal 0
HcmV?d00001

diff --git a/tests/prebuilt-elf-files/riscv64/libtest_invalid-textrels2.so b/tests/prebuilt-elf-files/riscv64/libtest_invalid-textrels2.so
new file mode 100755
index 0000000000000000000000000000000000000000..fbf62c5dd5a07d4382f8f40fe6b0de488cc42e48
GIT binary patch
literal 6376
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

literal 0
HcmV?d00001

diff --git a/tests/prebuilt-elf-files/riscv64/libtest_invalid-unaligned_shdr_offset.so b/tests/prebuilt-elf-files/riscv64/libtest_invalid-unaligned_shdr_offset.so
new file mode 100755
index 0000000000000000000000000000000000000000..6e5a6e362173c9618bfa39610ef6c14f50ed9505
GIT binary patch
literal 6376
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

literal 0
HcmV?d00001

diff --git a/tests/prebuilt-elf-files/riscv64/libtest_invalid-zero_shdr_table_content.so b/tests/prebuilt-elf-files/riscv64/libtest_invalid-zero_shdr_table_content.so
new file mode 100755
index 0000000000000000000000000000000000000000..14b80b5aabc972ac08905a73e3f26efcb70e4e1d
GIT binary patch
literal 6376
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
Fz&`~7k#PV3

literal 0
HcmV?d00001

diff --git a/tests/prebuilt-elf-files/riscv64/libtest_invalid-zero_shdr_table_offset.so b/tests/prebuilt-elf-files/riscv64/libtest_invalid-zero_shdr_table_offset.so
new file mode 100755
index 0000000000000000000000000000000000000000..0aaca72a8a476fdd31edd45e77e627dbbbd0ed4f
GIT binary patch
literal 6376
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
V(pdX@x9_8Z9a1;i8=)=b{|WZ4!9)N6

literal 0
HcmV?d00001

diff --git a/tests/prebuilt-elf-files/riscv64/libtest_invalid-zero_shentsize.so b/tests/prebuilt-elf-files/riscv64/libtest_invalid-zero_shentsize.so
new file mode 100755
index 0000000000000000000000000000000000000000..4ffc7e8b83df852b0405758c4837e60b91fe1fb1
GIT binary patch
literal 6376
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

literal 0
HcmV?d00001

diff --git a/tests/prebuilt-elf-files/riscv64/libtest_invalid-zero_shstrndx.so b/tests/prebuilt-elf-files/riscv64/libtest_invalid-zero_shstrndx.so
new file mode 100755
index 0000000000000000000000000000000000000000..9098310f6be5b86f9b2173badbbeaa82f2e07af6
GIT binary patch
literal 6376
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

literal 0
HcmV?d00001

diff --git a/tests/setjmp_test.cpp b/tests/setjmp_test.cpp
index 44d8af142..b6540df79 100644
--- a/tests/setjmp_test.cpp
+++ b/tests/setjmp_test.cpp
@@ -228,6 +228,8 @@ TEST(setjmp, setjmp_fp_registers) {
 #define __JB_SIGFLAG 1
 #elif defined(__mips__)
 #define __JB_SIGFLAG 2
+#elif __riscv_xlen == 64
+#define __JB_SIGFLAG 0
 #endif
 
 TEST(setjmp, setjmp_cookie) {
diff --git a/tests/signal_test.cpp b/tests/signal_test.cpp
index 1ae174a63..022ee138a 100644
--- a/tests/signal_test.cpp
+++ b/tests/signal_test.cpp
@@ -817,7 +817,7 @@ TEST(signal, sigset_size) {
   // The setjmp implementations for ARM, AArch64, x86, and x86_64 assume that sigset_t can fit in a
   // long. This is true because ARM and x86 have broken rt signal support, and AArch64 and x86_64
   // both have a SIGRTMAX defined as 64.
-#if defined(__arm__) || defined(__aarch64__) || defined(__i386__) || defined(__x86_64__)
+#if defined(__arm__) || defined(__aarch64__) || defined(__i386__) || defined(__x86_64__) || __riscv_xlen == 64
 #if defined(__BIONIC__)
   static_assert(sizeof(sigset_t) <= sizeof(long), "sigset_t doesn't fit in a long");
 #endif
diff --git a/tools/bionicbb/presubmit.py b/tools/bionicbb/presubmit.py
index 3e6ebfa0a..1ba328cd1 100644
--- a/tools/bionicbb/presubmit.py
+++ b/tools/bionicbb/presubmit.py
@@ -178,6 +178,8 @@ def handle_comment(gerrit_info, body, dry_run):
                                       lunch_target='aosp_mips-eng'),
         'mips64': lambda: build_project(gerrit_info, dry_run,
                                         lunch_target='aosp_mips64-eng'),
+        'riscv64': lambda: build_project(gerrit_info, dry_run,
+                                        lunch_target='aosp_riscv64-eng'),
         'x86': lambda: build_project(gerrit_info, dry_run,
                                      lunch_target='aosp_x86-eng'),
         'x86_64': lambda: build_project(gerrit_info, dry_run,
diff --git a/tools/generate-version-script.py b/tools/generate-version-script.py
index acfe21859..272d819f2 100755
--- a/tools/generate-version-script.py
+++ b/tools/generate-version-script.py
@@ -8,7 +8,7 @@
 import sys
 
 def has_arch_tags(tags):
-  for arch in ["arm", "arm64", "x86", "x86_64"]:
+  for arch in ["arm", "arm64", "riscv64", "x86", "x86_64"]:
     if arch in tags:
       return True
   return False
diff --git a/tools/versioner/src/Arch.cpp b/tools/versioner/src/Arch.cpp
index 4cd9e07b4..3d0e4bad5 100644
--- a/tools/versioner/src/Arch.cpp
+++ b/tools/versioner/src/Arch.cpp
@@ -34,6 +34,9 @@ std::string to_string(const Arch& arch) {
     case Arch::mips64:
       return "mips64";
 
+    case Arch::riscv64:
+      return "riscv64";
+
     case Arch::x86:
       return "x86";
 
@@ -49,6 +52,7 @@ static const std::unordered_map<std::string, Arch> arch_name_map{
   {"arm64", Arch::arm64},
   {"mips", Arch::mips},
   {"mips64", Arch::mips64},
+  {"riscv64", Arch::riscv64},
   {"x86", Arch::x86},
   {"x86_64", Arch::x86_64},
 };
diff --git a/tools/versioner/src/Arch.h b/tools/versioner/src/Arch.h
index 16fa2655b..7e72b16c5 100644
--- a/tools/versioner/src/Arch.h
+++ b/tools/versioner/src/Arch.h
@@ -30,6 +30,8 @@ enum class Arch : size_t {
   arm64,
   mips,
   mips64,
+  riscv32,
+  riscv64,
   x86,
   x86_64,
 };
@@ -125,6 +127,7 @@ static const std::set<Arch> supported_archs = {
   Arch::arm64,
   Arch::mips,
   Arch::mips64,
+  Arch::riscv64,
   Arch::x86,
   Arch::x86_64,
 };
@@ -134,6 +137,7 @@ static ArchMap<std::string> arch_targets = {
   { Arch::arm64, "aarch64-linux-android" },
   { Arch::mips, "mipsel-linux-android" },
   { Arch::mips64, "mips64el-linux-android" },
+  { Arch::riscv64, "riscv64-linux-android" },
   { Arch::x86, "i686-linux-android" },
   { Arch::x86_64, "x86_64-linux-android" },
 };
@@ -145,6 +149,7 @@ static const ArchMap<int> arch_min_api = {
   { Arch::arm64, 21 },
   { Arch::mips, 9 },
   { Arch::mips64, 21 },
+  { Arch::riscv64, 21 },
   { Arch::x86, 9 },
   { Arch::x86_64, 21 },
 };
diff --git a/tools/versioner/src/DeclarationDatabase.cpp b/tools/versioner/src/DeclarationDatabase.cpp
index 0ba51d1b8..ec5377a6d 100644
--- a/tools/versioner/src/DeclarationDatabase.cpp
+++ b/tools/versioner/src/DeclarationDatabase.cpp
@@ -162,6 +162,7 @@ class Visitor : public RecursiveASTVisitor<Visitor> {
           { "obsoleted_in", { &global_availability.obsoleted } },
           { "introduced_in_arm", { &arch_availability[Arch::arm].introduced } },
           { "introduced_in_mips", { &arch_availability[Arch::mips].introduced } },
+          { "introduced_in_riscv", { &arch_availability[Arch::riscv32].introduced } },
           { "introduced_in_x86", { &arch_availability[Arch::x86].introduced } },
           { "introduced_in_32",
             { &arch_availability[Arch::arm].introduced,
@@ -170,6 +171,7 @@ class Visitor : public RecursiveASTVisitor<Visitor> {
           { "introduced_in_64",
             { &arch_availability[Arch::arm64].introduced,
               &arch_availability[Arch::mips64].introduced,
+              &arch_availability[Arch::riscv64].introduced,
               &arch_availability[Arch::x86_64].introduced } },
         };
 
diff --git a/tools/versioner/src/Preprocessor.cpp b/tools/versioner/src/Preprocessor.cpp
index 9eac2abea..7ac03433f 100644
--- a/tools/versioner/src/Preprocessor.cpp
+++ b/tools/versioner/src/Preprocessor.cpp
@@ -141,7 +141,7 @@ static std::string generateGuardCondition(const DeclarationAvailability& avail)
   static const std::vector<std::pair<std::string, std::set<Arch>>> arch_sets = {
     { "", supported_archs },
     { "!defined(__LP64__)", { Arch::arm, Arch::mips, Arch::x86 } },
-    { "defined(__LP64__)", { Arch::arm64, Arch::mips64, Arch::x86_64 } },
+    { "defined(__LP64__)", { Arch::arm64, Arch::mips64, Arch::riscv64, Arch::x86_64 } },
     { "defined(__mips__)", { Arch::mips, Arch::mips64 } },
   };
   std::map<Arch, std::string> individual_archs = {
@@ -149,6 +149,7 @@ static std::string generateGuardCondition(const DeclarationAvailability& avail)
     { Arch::arm64, "defined(__aarch64__)" },
     { Arch::mips, "defined(__mips__) && !defined(__LP64__)" },
     { Arch::mips64, "defined(__mips__) && defined(__LP64__)" },
+    { Arch::riscv64, "defined(__riscv) && defined(__LP64__)" },
     { Arch::x86, "defined(__i386__)" },
     { Arch::x86_64, "defined(__x86_64__)" },
   };
diff --git a/tools/versioner/src/versioner.h b/tools/versioner/src/versioner.h
index a5f2c7d36..fc71d8616 100644
--- a/tools/versioner/src/versioner.h
+++ b/tools/versioner/src/versioner.h
@@ -38,7 +38,7 @@ static const std::unordered_map<std::string, std::set<Arch>> header_blacklist =
   { "sys/_system_properties.h", supported_archs },
 
   // time64.h #errors when included on LP64 archs.
-  { "time64.h", { Arch::arm64, Arch::mips64, Arch::x86_64 } },
+  { "time64.h", { Arch::arm64, Arch::mips64, Arch::riscv64, Arch::x86_64 } },
 };
 
 static const std::unordered_set<std::string> missing_symbol_whitelist = {
-- 
2.18.4

