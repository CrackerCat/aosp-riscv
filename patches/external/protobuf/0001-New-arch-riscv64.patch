From 031b3f79efe3b4cea423a50cdfb30a51c560cad7 Mon Sep 17 00:00:00 2001
From: Mao Han <han_mao@linux.alibaba.com>
Date: Sat, 16 Jan 2021 21:28:00 +0800
Subject: [PATCH] New arch riscv64

Change-Id: Ib1728f2985d2528db8074ef67ae06658ae8fd55f
---
 Android.bp                                    |   1 +
 src/google/protobuf/stubs/atomicops.h         |  48 +--
 .../stubs/atomicops_internals_riscv64_gcc.h   | 282 ++++++++++++++++++
 src/google/protobuf/stubs/platform_macros.h   |   4 +
 4 files changed, 312 insertions(+), 23 deletions(-)
 create mode 100644 src/google/protobuf/stubs/atomicops_internals_riscv64_gcc.h

diff --git a/Android.bp b/Android.bp
index dafb77806..561470b73 100644
--- a/Android.bp
+++ b/Android.bp
@@ -26,6 +26,7 @@ cc_defaults {
     clang_cflags: [
         "-Wno-unused-const-variable",
         "-Wno-error=user-defined-warnings",
+        "-Wno-error=deprecated-copy"
     ],
     cflags: [
         "-Wall",
diff --git a/src/google/protobuf/stubs/atomicops.h b/src/google/protobuf/stubs/atomicops.h
index 9b3d1e6b5..69ea78119 100644
--- a/src/google/protobuf/stubs/atomicops.h
+++ b/src/google/protobuf/stubs/atomicops.h
@@ -101,19 +101,19 @@ typedef intptr_t AtomicWord;
 // Always return the old value of "*ptr"
 //
 // This routine implies no memory barriers.
-Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,
+inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,
                                   Atomic32 old_value,
                                   Atomic32 new_value);
 
 // Atomically store new_value into *ptr, returning the previous value held in
 // *ptr.  This routine implies no memory barriers.
-Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr, Atomic32 new_value);
+inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr, Atomic32 new_value);
 
 // Atomically increment *ptr by "increment".  Returns the new value of
 // *ptr with the increment applied.  This routine implies no memory barriers.
-Atomic32 NoBarrier_AtomicIncrement(volatile Atomic32* ptr, Atomic32 increment);
+inline Atomic32 NoBarrier_AtomicIncrement(volatile Atomic32* ptr, Atomic32 increment);
 
-Atomic32 Barrier_AtomicIncrement(volatile Atomic32* ptr,
+inline Atomic32 Barrier_AtomicIncrement(volatile Atomic32* ptr,
                                  Atomic32 increment);
 
 // These following lower-level operations are typically useful only to people
@@ -125,10 +125,10 @@ Atomic32 Barrier_AtomicIncrement(volatile Atomic32* ptr,
 // after the operation.  "Barrier" operations have both "Acquire" and "Release"
 // semantics.   A MemoryBarrier() has "Barrier" semantics, but does no memory
 // access.
-Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,
+inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,
                                 Atomic32 old_value,
                                 Atomic32 new_value);
-Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,
+inline Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,
                                 Atomic32 old_value,
                                 Atomic32 new_value);
 
@@ -136,35 +136,35 @@ Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,
 #undef MemoryBarrier
 #endif
 void MemoryBarrier();
-void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value);
-void Acquire_Store(volatile Atomic32* ptr, Atomic32 value);
-void Release_Store(volatile Atomic32* ptr, Atomic32 value);
+inline void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value);
+inline void Acquire_Store(volatile Atomic32* ptr, Atomic32 value);
+inline void Release_Store(volatile Atomic32* ptr, Atomic32 value);
 
-Atomic32 NoBarrier_Load(volatile const Atomic32* ptr);
-Atomic32 Acquire_Load(volatile const Atomic32* ptr);
+inline Atomic32 NoBarrier_Load(volatile const Atomic32* ptr);
+inline Atomic32 Acquire_Load(volatile const Atomic32* ptr);
 Atomic32 Release_Load(volatile const Atomic32* ptr);
 
 // 64-bit atomic operations (only available on 64-bit processors).
 #ifdef GOOGLE_PROTOBUF_ARCH_64_BIT
-Atomic64 NoBarrier_CompareAndSwap(volatile Atomic64* ptr,
+inline Atomic64 NoBarrier_CompareAndSwap(volatile Atomic64* ptr,
                                   Atomic64 old_value,
                                   Atomic64 new_value);
-Atomic64 NoBarrier_AtomicExchange(volatile Atomic64* ptr, Atomic64 new_value);
-Atomic64 NoBarrier_AtomicIncrement(volatile Atomic64* ptr, Atomic64 increment);
-Atomic64 Barrier_AtomicIncrement(volatile Atomic64* ptr, Atomic64 increment);
+inline Atomic64 NoBarrier_AtomicExchange(volatile Atomic64* ptr, Atomic64 new_value);
+inline Atomic64 NoBarrier_AtomicIncrement(volatile Atomic64* ptr, Atomic64 increment);
+inline Atomic64 Barrier_AtomicIncrement(volatile Atomic64* ptr, Atomic64 increment);
 
-Atomic64 Acquire_CompareAndSwap(volatile Atomic64* ptr,
+inline Atomic64 Acquire_CompareAndSwap(volatile Atomic64* ptr,
                                 Atomic64 old_value,
                                 Atomic64 new_value);
-Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,
+inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,
                                 Atomic64 old_value,
                                 Atomic64 new_value);
-void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value);
-void Acquire_Store(volatile Atomic64* ptr, Atomic64 value);
-void Release_Store(volatile Atomic64* ptr, Atomic64 value);
-Atomic64 NoBarrier_Load(volatile const Atomic64* ptr);
-Atomic64 Acquire_Load(volatile const Atomic64* ptr);
-Atomic64 Release_Load(volatile const Atomic64* ptr);
+inline void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value);
+inline void Acquire_Store(volatile Atomic64* ptr, Atomic64 value);
+inline void Release_Store(volatile Atomic64* ptr, Atomic64 value);
+inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr);
+inline Atomic64 Acquire_Load(volatile const Atomic64* ptr);
+inline Atomic64 Release_Load(volatile const Atomic64* ptr);
 #endif  // GOOGLE_PROTOBUF_ARCH_64_BIT
 
 }  // namespace internal
@@ -210,6 +210,8 @@ Atomic64 Release_Load(volatile const Atomic64* ptr);
 #include <google/protobuf/stubs/atomicops_internals_arm_qnx.h>
 #elif defined(GOOGLE_PROTOBUF_ARCH_MIPS) || defined(GOOGLE_PROTOBUF_ARCH_MIPS64)
 #include <google/protobuf/stubs/atomicops_internals_mips_gcc.h>
+#elif defined(GOOGLE_PROTOBUF_ARCH_RISCV) || defined(GOOGLE_PROTOBUF_ARCH_RISCV64)
+#include <google/protobuf/stubs/atomicops_internals_riscv64_gcc.h>
 #elif defined(GOOGLE_PROTOBUF_ARCH_POWER)
 #include <google/protobuf/stubs/atomicops_internals_power.h>
 #elif defined(__native_client__)
diff --git a/src/google/protobuf/stubs/atomicops_internals_riscv64_gcc.h b/src/google/protobuf/stubs/atomicops_internals_riscv64_gcc.h
new file mode 100644
index 000000000..b5b08c980
--- /dev/null
+++ b/src/google/protobuf/stubs/atomicops_internals_riscv64_gcc.h
@@ -0,0 +1,282 @@
+// Protocol Buffers - Google's data interchange format
+// Copyright 2012 Google Inc.  All rights reserved.
+// https://developers.google.com/protocol-buffers/
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//     * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//     * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//     * Neither the name of Google Inc. nor the names of its
+// contributors may be used to endorse or promote products derived from
+// this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+// This file is an internal atomic implementation, use atomicops.h instead.
+
+#ifndef GOOGLE_PROTOBUF_ATOMICOPS_INTERNALS_RISCV_GCC_H_
+#define GOOGLE_PROTOBUF_ATOMICOPS_INTERNALS_RISCV_GCC_H_
+
+namespace google {
+namespace protobuf {
+namespace internal {
+
+// This struct is not part of the public API of this module; clients may not
+// use it.
+
+#define ATOMICOPS_COMPILER_BARRIER() __asm__ __volatile__("" : : : "memory")
+
+// 32-bit low-level operations on any platform.
+
+inline  Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,
+                                         Atomic32 old_value,
+                                         Atomic32 new_value) {
+  // C code:
+  // prev = *ptr
+  // if (*ptr == old_value) {
+  //   *ptr = new_value;
+  // }
+  // return prev;
+  //
+  Atomic32 prev = 0;
+  Atomic32 temp = 0;
+  __asm__ __volatile__ (
+    "0:\n\t"
+    "lr.w %0, %5\n\t"       // prev = *ptr
+    "bne %0, %3, 1f\n\t"       // if prev != old_value, goto 1:
+    "sc.w %2, %4, %1\n\t"   // prev == old_value, replace *ptr with new value
+    "bnez %2, 0b\n\t"       // result == 0, go out; else go to 0 and retry.
+    "1:\n\t"
+    : "=&r"(prev), "=m" (*ptr), "=&r" (temp)
+    : "r" (old_value), "r" (new_value), "m" (*ptr)
+    : "memory"
+  );
+  return prev;
+}
+
+inline  Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr,
+                                         Atomic32 new_value) {
+  // swap ptr and new value
+  // prev = *ptr
+  // *ptr = new_value
+  // return prev;
+  Atomic32 prev = 0;
+  Atomic32 temp = 0;
+  __asm__ __volatile__ (
+    "0:\n\t"
+    "lr.w %0, %4\n\t"       // prev = *ptr
+    "sc.w %2, %3, %1\n\t"   // prev == old_value, replace *ptr with new value
+    "bnez %2, 0b\n\t"
+    "1:\n\t"
+    : "=&r"(prev), "=m" (*ptr), "=&r" (temp)
+    : "r" (new_value), "m" (*ptr)
+    : "memory"
+  );
+  return prev;  // Now it's the previous value.
+}
+
+inline  Atomic32 NoBarrier_AtomicIncrement(volatile Atomic32* ptr,
+                                          Atomic32 increment) {
+  Atomic32 prev =0;
+  __asm__ __volatile__ (
+    "amoadd.w %0, %2, %1\n\t"
+    "add %0, %0, %2"
+    : "=&r"(prev), "=m" (*ptr)
+    : "r" (increment)
+    : "memory"
+  );
+
+  return prev;
+}
+
+inline  Atomic32 Barrier_AtomicIncrement(volatile Atomic32* ptr,
+                                        Atomic32 increment) {
+  ATOMICOPS_COMPILER_BARRIER();
+  Atomic32 res = NoBarrier_AtomicIncrement (ptr, increment);
+  ATOMICOPS_COMPILER_BARRIER();
+  return res;
+}
+
+inline  Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,
+                                       Atomic32 old_value,
+                                       Atomic32 new_value) {
+  ATOMICOPS_COMPILER_BARRIER();
+  Atomic32 x = NoBarrier_CompareAndSwap(ptr, old_value, new_value);
+  ATOMICOPS_COMPILER_BARRIER();
+  return x;
+}
+
+inline  Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,
+                                       Atomic32 old_value,
+                                       Atomic32 new_value) {
+  ATOMICOPS_COMPILER_BARRIER();
+  Atomic32 res = NoBarrier_CompareAndSwap(ptr, old_value, new_value);
+  ATOMICOPS_COMPILER_BARRIER();
+  return res;
+}
+inline  void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value) {
+  *ptr = value;
+}
+
+
+// 64-bit implementations of memory barrier can be simpler, because it
+// "mfence" is guaranteed to exist.
+
+inline  void Acquire_Store(volatile Atomic32* ptr, Atomic32 value) {
+  *ptr = value;
+  ATOMICOPS_COMPILER_BARRIER();
+}
+
+
+inline  void Release_Store(volatile Atomic32* ptr, Atomic32 value) {
+  ATOMICOPS_COMPILER_BARRIER();
+  *ptr = value;  // An x86 store acts as a release barrier.
+  // See comments in Atomic64 version of Release_Store(), below.
+}
+
+inline  Atomic32 NoBarrier_Load(volatile const Atomic32* ptr) {
+  return *ptr;
+}
+
+inline  Atomic32 Acquire_Load(volatile const Atomic32* ptr) {
+  Atomic32 value = *ptr;  // An x86 load acts as a acquire barrier.
+  // See comments in Atomic64 version of Release_Store(), below.
+  ATOMICOPS_COMPILER_BARRIER();
+  return value;
+}
+
+inline  Atomic32 Release_Load(volatile const Atomic32* ptr) {
+  ATOMICOPS_COMPILER_BARRIER();
+  return *ptr;
+}
+
+#if (__riscv_xlen == 64)
+
+// 64-bit low-level operations on 64-bit platform.
+
+inline  Atomic64 NoBarrier_CompareAndSwap(volatile Atomic64* ptr,
+                                         Atomic64 old_value,
+                                         Atomic64 new_value) {
+  Atomic64 prev = 0;
+  Atomic64 temp = 0;
+  __asm__ __volatile__ (
+    "0:\n\t"
+    "lr.d %0, %5\n\t"       // prev = *ptr
+    "bne %0, %3, 1f\n\t"       // if prev != old_value, goto 1:
+    "sc.d %2, %4, %1\n\t"   // prev == old_value, replace *ptr with new value
+    "bnez %2, 0b\n\t"       // result == 0, go out; else go to 0 and retry.
+    "1:\n\t"
+    : "=&r"(prev), "=m" (*ptr), "=&r" (temp)
+    : "r" (old_value), "r" (new_value), "m" (*ptr)
+    : "memory"
+  );
+  return prev;
+}
+
+inline  Atomic64 NoBarrier_AtomicExchange(volatile Atomic64* ptr,
+                                         Atomic64 new_value) {
+  Atomic64 prev = 0;
+  Atomic64 temp = 0;
+  __asm__ __volatile__ (
+    "0:\n\t"
+    "lr.d %0, %4\n\t"       // prev = *ptr
+    "sc.d %2, %3, %1\n\t"   // prev == old_value, replace *ptr with new value
+    "bnez %2, 0b\n\t"
+    : "=&r"(prev), "=m" (*ptr), "=&r" (temp)
+    : "r" (new_value), "m" (*ptr)
+    : "memory"
+  );
+  return prev;  // Now it's the previous value.
+}
+
+inline  Atomic64 NoBarrier_AtomicIncrement(volatile Atomic64* ptr,
+                                          Atomic64 increment) {
+  Atomic64 prev =0;
+  __asm__ __volatile__ (
+    "amoadd.d %0, %2, %1\n\t"
+    "add %0, %0, %2"
+    : "=&r"(prev), "=m" (*ptr)
+    : "r" (increment)
+    : "memory"
+  );
+
+  return prev;
+}
+
+inline  Atomic64 Barrier_AtomicIncrement(volatile Atomic64* ptr,
+                                        Atomic64 increment) {
+  ATOMICOPS_COMPILER_BARRIER();
+  Atomic64 res = NoBarrier_AtomicIncrement (ptr, increment);
+  ATOMICOPS_COMPILER_BARRIER();
+  return res;
+}
+
+inline  void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value) {
+  *ptr = value;
+}
+
+inline  void Acquire_Store(volatile Atomic64* ptr, Atomic64 value) {
+  *ptr = value;
+  ATOMICOPS_COMPILER_BARRIER();
+}
+
+inline  void Release_Store(volatile Atomic64* ptr, Atomic64 value) {
+  ATOMICOPS_COMPILER_BARRIER();
+  *ptr = value;
+}
+
+inline  Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {
+  return *ptr;
+}
+
+inline  Atomic64 Acquire_Load(volatile const Atomic64* ptr) {
+  Atomic64 value = *ptr;
+  ATOMICOPS_COMPILER_BARRIER();
+  return value;
+}
+
+inline  Atomic64 Release_Load(volatile const Atomic64* ptr) {
+  ATOMICOPS_COMPILER_BARRIER();
+  return *ptr;
+}
+
+inline  Atomic64 Acquire_CompareAndSwap(volatile Atomic64* ptr,
+                                       Atomic64 old_value,
+                                       Atomic64 new_value) {
+  Atomic64 res = NoBarrier_CompareAndSwap (ptr, old_value, new_value);
+  ATOMICOPS_COMPILER_BARRIER();
+  return res;
+}
+
+inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,
+                                       Atomic64 old_value,
+                                       Atomic64 new_value) {
+  ATOMICOPS_COMPILER_BARRIER();
+  return NoBarrier_CompareAndSwap(ptr, old_value, new_value);
+}
+
+#endif  // (__riscv_xlen == 64)
+
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+#undef ATOMICOPS_COMPILER_BARRIER
+
+#endif  // GOOGLE_PROTOBUF_ATOMICOPS_INTERNALS_RISCV_GCC_H_
diff --git a/src/google/protobuf/stubs/platform_macros.h b/src/google/protobuf/stubs/platform_macros.h
index 4ba4b348c..fbad78bec 100644
--- a/src/google/protobuf/stubs/platform_macros.h
+++ b/src/google/protobuf/stubs/platform_macros.h
@@ -76,6 +76,10 @@
 #elif defined(__PPC__)
 #define GOOGLE_PROTOBUF_ARCH_PPC 1
 #define GOOGLE_PROTOBUF_ARCH_32_BIT 1
+#elif defined(__riscv) && (__riscv_xlen == 64)
+#define GOOGLE_PROTOBUF_ARCH_RISCV64 1
+#define GOOGLE_PROTOBUF_ARCH_64_BIT 1
+
 #elif defined(__GNUC__)
 # if (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 7)) || (__GNUC__ > 4))
 // We fallback to the generic Clang/GCC >= 4.7 implementation in atomicops.h
-- 
2.18.4

