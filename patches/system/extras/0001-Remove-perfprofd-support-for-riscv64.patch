From fb8eae2dfd0d7d94371d3ac866b9627977200ccc Mon Sep 17 00:00:00 2001
From: Mao Han <han_mao@linux.alibaba.com>
Date: Sun, 17 Jan 2021 09:10:23 +0800
Subject: [PATCH] Remove perfprofd support for riscv64

Change-Id: I8badfca57fcc2f04ad4c2ce00902117ef10088ae
---
 perfprofd/Android.bp                          |  267 ---
 perfprofd/NOTICE                              |  190 --
 perfprofd/OWNERS                              |    2 -
 perfprofd/TEST_MAPPING                        |    7 -
 perfprofd/binder_interface/Android.bp         |   47 -
 .../aidl/android/os/IPerfProfd.aidl           |   45 -
 .../binder_interface/perfprofd_binder.cc      |  377 ----
 perfprofd/binder_interface/perfprofd_binder.h |   31 -
 perfprofd/config.h                            |  128 --
 perfprofd/configreader.cc                     |  620 ------
 perfprofd/configreader.h                      |   83 -
 perfprofd/cpuconfig.cc                        |  113 --
 perfprofd/cpuconfig.h                         |   50 -
 perfprofd/dropbox/Android.bp                  |   52 -
 perfprofd/dropbox/dropbox.cc                  |  129 --
 perfprofd/dropbox/dropbox.h                   |   37 -
 perfprofd/dropbox/dropbox_host.cc             |   35 -
 perfprofd/map_utils.h                         |  129 --
 perfprofd/perf_data_converter.cc              |  197 --
 perfprofd/perf_data_converter.h               |   23 -
 perfprofd/perf_profile.proto                  |  131 --
 perfprofd/perfprofd.conf                      |   24 -
 perfprofd/perfprofd.rc                        |    5 -
 perfprofd/perfprofd_cmdline.cc                |  258 ---
 perfprofd/perfprofd_cmdline.h                 |   39 -
 perfprofd/perfprofd_config.proto              |   96 -
 perfprofd/perfprofd_io.cc                     |  310 ---
 perfprofd/perfprofd_io.h                      |   38 -
 perfprofd/perfprofd_perf.cc                   |  332 ----
 perfprofd/perfprofd_perf.h                    |   57 -
 perfprofd/perfprofd_record-fwd.h              |   31 -
 perfprofd/perfprofd_record.proto              |   58 -
 perfprofd/perfprofd_threaded_handler.h        |  198 --
 perfprofd/perfprofdcore.cc                    |  732 -------
 perfprofd/perfprofdcore.h                     |   91 -
 perfprofd/perfprofdmain.cc                    |   60 -
 perfprofd/quipper_helper.h                    |  146 --
 perfprofd/scripts/Android.bp                  |   89 -
 perfprofd/scripts/perf_config_proto.py        |  193 --
 perfprofd/scripts/perf_proto_json2sqlite.py   |  167 --
 perfprofd/scripts/perf_proto_stack.py         |  576 ------
 .../scripts/perf_proto_stack_sqlite_flame.py  |  272 ---
 perfprofd/scripts/sorted_collection.py        |  147 --
 perfprofd/symbolizer.cc                       |  179 --
 perfprofd/symbolizer.h                        |   35 -
 perfprofd/tests/Android.bp                    |   73 -
 perfprofd/tests/AndroidTest.xml               |   29 -
 perfprofd/tests/README.txt                    |   64 -
 perfprofd/tests/callchain.canned.perf.data    |  Bin 256412 -> 0 bytes
 perfprofd/tests/canned.perf.data              |  Bin 1366208 -> 0 bytes
 perfprofd/tests/perfprofd_test.cc             | 1743 -----------------
 perfprofd/tests/perfprofdmockutils.cc         |  101 -
 perfprofd/tests/perfprofdmockutils.h          |   31 -
 simpleperf/Android.bp                         |   12 +-
 simpleperf/perf_regs.cpp                      |   24 +
 simpleperf/perf_regs.h                        |    5 +
 simpleperf/runtest/Android.bp                 |   90 -
 simpleperf/scripts/inferno/Android.bp         |   32 -
 simpleperf/simpleperf_app_runner/Android.bp   |   28 -
 59 files changed, 39 insertions(+), 9019 deletions(-)
 delete mode 100644 perfprofd/Android.bp
 delete mode 100644 perfprofd/NOTICE
 delete mode 100644 perfprofd/OWNERS
 delete mode 100644 perfprofd/TEST_MAPPING
 delete mode 100644 perfprofd/binder_interface/Android.bp
 delete mode 100644 perfprofd/binder_interface/aidl/android/os/IPerfProfd.aidl
 delete mode 100644 perfprofd/binder_interface/perfprofd_binder.cc
 delete mode 100644 perfprofd/binder_interface/perfprofd_binder.h
 delete mode 100644 perfprofd/config.h
 delete mode 100644 perfprofd/configreader.cc
 delete mode 100644 perfprofd/configreader.h
 delete mode 100644 perfprofd/cpuconfig.cc
 delete mode 100644 perfprofd/cpuconfig.h
 delete mode 100644 perfprofd/dropbox/Android.bp
 delete mode 100644 perfprofd/dropbox/dropbox.cc
 delete mode 100644 perfprofd/dropbox/dropbox.h
 delete mode 100644 perfprofd/dropbox/dropbox_host.cc
 delete mode 100644 perfprofd/map_utils.h
 delete mode 100644 perfprofd/perf_data_converter.cc
 delete mode 100644 perfprofd/perf_data_converter.h
 delete mode 100644 perfprofd/perf_profile.proto
 delete mode 100644 perfprofd/perfprofd.conf
 delete mode 100644 perfprofd/perfprofd.rc
 delete mode 100644 perfprofd/perfprofd_cmdline.cc
 delete mode 100644 perfprofd/perfprofd_cmdline.h
 delete mode 100644 perfprofd/perfprofd_config.proto
 delete mode 100644 perfprofd/perfprofd_io.cc
 delete mode 100644 perfprofd/perfprofd_io.h
 delete mode 100644 perfprofd/perfprofd_perf.cc
 delete mode 100644 perfprofd/perfprofd_perf.h
 delete mode 100644 perfprofd/perfprofd_record-fwd.h
 delete mode 100644 perfprofd/perfprofd_record.proto
 delete mode 100644 perfprofd/perfprofd_threaded_handler.h
 delete mode 100644 perfprofd/perfprofdcore.cc
 delete mode 100644 perfprofd/perfprofdcore.h
 delete mode 100644 perfprofd/perfprofdmain.cc
 delete mode 100644 perfprofd/quipper_helper.h
 delete mode 100644 perfprofd/scripts/Android.bp
 delete mode 100644 perfprofd/scripts/perf_config_proto.py
 delete mode 100644 perfprofd/scripts/perf_proto_json2sqlite.py
 delete mode 100644 perfprofd/scripts/perf_proto_stack.py
 delete mode 100644 perfprofd/scripts/perf_proto_stack_sqlite_flame.py
 delete mode 100644 perfprofd/scripts/sorted_collection.py
 delete mode 100644 perfprofd/symbolizer.cc
 delete mode 100644 perfprofd/symbolizer.h
 delete mode 100644 perfprofd/tests/Android.bp
 delete mode 100644 perfprofd/tests/AndroidTest.xml
 delete mode 100644 perfprofd/tests/README.txt
 delete mode 100644 perfprofd/tests/callchain.canned.perf.data
 delete mode 100644 perfprofd/tests/canned.perf.data
 delete mode 100644 perfprofd/tests/perfprofd_test.cc
 delete mode 100644 perfprofd/tests/perfprofdmockutils.cc
 delete mode 100644 perfprofd/tests/perfprofdmockutils.h
 delete mode 100644 simpleperf/runtest/Android.bp
 delete mode 100644 simpleperf/scripts/inferno/Android.bp
 delete mode 100644 simpleperf/simpleperf_app_runner/Android.bp

diff --git a/perfprofd/Android.bp b/perfprofd/Android.bp
deleted file mode 100644
index 334590c1..00000000
--- a/perfprofd/Android.bp
+++ /dev/null
@@ -1,267 +0,0 @@
-//
-// Copyright (C) 2016 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-//
-
-cc_defaults {
-    name: "perfprofd_defaults",
-
-    cflags: [
-        "-Wall",
-        "-Wextra",
-        "-Werror",
-
-        // Try some more extreme warnings.
-        "-Wpedantic",
-        "-Wunreachable-code-aggressive",
-        // And disable some dumb things.
-        "-Wno-zero-length-array",
-        "-Wno-c99-extensions",
-        "-Wno-language-extension-token",
-        "-Wno-gnu-zero-variadic-macro-arguments",
-        "-Wno-nested-anon-types",
-        "-Wno-gnu-statement-expression",
-        "-Wno-vla-extension",
-    ],
-    cppflags: [
-        "-Wno-sign-compare",
-        "-Wno-unused-parameter",
-    ],
-
-    target: {
-        darwin: {
-            enabled: false,
-        },
-    },
-}
-
-cc_defaults {
-    name: "perfprofd_debug_defaults",
-
-    cflags: [
-        "-O0",
-        "-g",
-        "-UNDEBUG",
-    ],
-
-    // Add sanitizers that work w/o extra libraries. This is important
-    // for atest etc to work.
-    sanitize: {
-        integer_overflow: true,
-        undefined: true,
-    },
-
-//  TODO: Re-enable when ART's ASAN flags are correctly propagated.
-//    target: {
-//        // On the host add ASAN.
-//        host: {
-//            sanitize: {
-//                address: true,
-//            },
-//        },
-//    }
-}
-
-filegroup {
-    name: "perfprofd_record_proto",
-    srcs: [
-        "perfprofd_record.proto",
-    ],
-}
-
-// Static library for the record proto and its I/O.
-
-cc_library_static {
-    name: "libperfprofd_record_proto",
-    defaults: [
-        "perfprofd_defaults",
-    ],
-    host_supported: true,
-
-    static_libs: [
-        "libbase",
-        "libprotobuf-cpp-lite",
-        "libquipper",
-        "libz",
-    ],
-    srcs: [
-        "perfprofd_io.cc",
-        ":perfprofd_record_proto",
-    ],
-
-    proto: {
-        export_proto_headers: true,
-        include_dirs: ["external/perf_data_converter/src/quipper"],
-        type: "lite",
-    },
-
-    export_include_dirs: ["."],  // Really only the -fwd.h.
-    export_static_lib_headers: ["libquipper"],
-}
-
-filegroup {
-    name: "perfprofd_config_proto",
-    srcs: [
-        "perfprofd_config.proto",
-    ],
-}
-
-cc_library_static {
-    name: "libperfprofd_proto_config",
-    defaults: [
-        "perfprofd_defaults",
-    ],
-    host_supported: true,
-
-    static_libs: [
-        "libprotobuf-cpp-lite",
-    ],
-    srcs: [
-        ":perfprofd_config_proto",
-    ],
-
-    proto: {
-        export_proto_headers: true,
-        type: "lite",
-    },
-
-    export_include_dirs: ["."],  // Really only the -fwd.h.
-}
-
-//
-// Static library containing guts of AWP daemon.
-//
-
-cc_defaults {
-    name: "libperfprofdcore_defaults",
-    defaults: [
-        "perfprofd_defaults",
-    ],
-    host_supported: true,
-
-    static_libs: [
-        "libbase",
-        "libperfprofd_proto_config",
-        "libprotobuf-cpp-lite",
-        "libsimpleperf_dex_read",
-        "libsimpleperf_elf_read",
-    ],
-    whole_static_libs: [
-        "libperfprofd_dropbox",
-        "libperfprofd_record_proto",
-        "libquipper",
-    ],
-    srcs: [
-        "perf_data_converter.cc",
-        "configreader.cc",
-        "cpuconfig.cc",
-        "perfprofdcore.cc",
-        "perfprofd_cmdline.cc",
-        "perfprofd_perf.cc",
-        "symbolizer.cc"
-    ],
-
-    cflags: [
-        "-Wno-gnu-anonymous-struct",
-    ],
-
-    export_include_dirs: ["."],
-
-    target: {
-        android: {
-            static_libs: [
-                "libhealthhalutils",
-            ],
-            shared_libs: [
-                "android.hardware.health@2.0",
-                "libhidlbase",
-            ],
-        }
-    }
-}
-
-cc_library_static {
-    name: "libperfprofdcore",
-    defaults: [
-        "libart_static_defaults",
-        "libperfprofdcore_defaults",
-    ],
-}
-
-// Debug version.
-cc_library_static {
-    name: "libperfprofdcored",
-    defaults: [
-        "libartd_static_defaults",
-        "libperfprofdcore_defaults",
-        "perfprofd_debug_defaults",
-    ],
-}
-
-
-//
-// Main daemon
-//
-cc_binary {
-    name: "perfprofd",
-    defaults: [
-        "libart_static_defaults",
-        "perfprofd_defaults",
-        "libsimpleperf_dex_read_static_reqs_defaults",
-        "libsimpleperf_elf_read_static_reqs_defaults",
-    ],
-
-    srcs: [
-        "perfprofdmain.cc",
-    ],
-
-    static_libs: [
-        "libhealthhalutils",
-        "libperfprofdcore",
-        "libperfprofd_binder",
-        "libperfprofd_proto_config",
-        "libsimpleperf_dex_read",
-        "libsimpleperf_elf_read",
-    ],
-    group_static_libs: true,
-
-    shared_libs: [
-        "android.hardware.health@2.0",
-        "liblog",
-        "libprotobuf-cpp-lite",
-        "libbase",
-        "libbinder",
-        "libhidlbase",
-        "libservices",
-        "libutils",
-    ],
-
-    init_rc: ["perfprofd.rc"],
-
-    product_variables: {
-        pdk: {
-            enabled: false,
-        },
-    },
-
-    // We're technically independent, but ensure simpleperf is there.
-    required: [
-        "simpleperf",
-    ],
-}
-
-subdirs = [
-    "binder_interface",
-    "tests",
-]
diff --git a/perfprofd/NOTICE b/perfprofd/NOTICE
deleted file mode 100644
index 8530865d..00000000
--- a/perfprofd/NOTICE
+++ /dev/null
@@ -1,190 +0,0 @@
-
-   Copyright (c) 2015, The Android Open Source Project
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
-
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
-
diff --git a/perfprofd/OWNERS b/perfprofd/OWNERS
deleted file mode 100644
index 2c69ac95..00000000
--- a/perfprofd/OWNERS
+++ /dev/null
@@ -1,2 +0,0 @@
-agampe@google.com
-yabinc@google.com
diff --git a/perfprofd/TEST_MAPPING b/perfprofd/TEST_MAPPING
deleted file mode 100644
index 30101c2b..00000000
--- a/perfprofd/TEST_MAPPING
+++ /dev/null
@@ -1,7 +0,0 @@
-{
-  "presubmit": [
-    {
-      "name": "perfprofd_test"
-    }
-  ]
-}
\ No newline at end of file
diff --git a/perfprofd/binder_interface/Android.bp b/perfprofd/binder_interface/Android.bp
deleted file mode 100644
index 8d6837f1..00000000
--- a/perfprofd/binder_interface/Android.bp
+++ /dev/null
@@ -1,47 +0,0 @@
-//
-// Copyright (C) 2017 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-//
-
-//
-// Static library with binder service.
-//
-cc_library_static {
-    name: "libperfprofd_binder",
-    defaults: [
-        "perfprofd_defaults",
-    ],
-
-    export_include_dirs: ["."],
-    shared_libs: [
-        "libbinder",
-    ],
-    static_libs: [
-        "libbase",
-        "libperfprofdcore",
-        "libperfprofd_proto_config",
-        "libprotobuf-cpp-lite",
-    ],
-    srcs: [
-        "perfprofd_binder.cc",
-        ":perfprofd_aidl",
-    ],
-}
-
-filegroup {
-    name: "perfprofd_aidl",
-    srcs: [
-        "aidl/android/os/IPerfProfd.aidl",
-    ],
-}
diff --git a/perfprofd/binder_interface/aidl/android/os/IPerfProfd.aidl b/perfprofd/binder_interface/aidl/android/os/IPerfProfd.aidl
deleted file mode 100644
index e2628c71..00000000
--- a/perfprofd/binder_interface/aidl/android/os/IPerfProfd.aidl
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package android.os;
-
-/** {@hide} */
-interface IPerfProfd {
-    /**
-     * Start continuous profiling with the given parameters.
-     */
-    void startProfiling(int collectionInterval, int iterations,
-            int process, int samplingPeriod, int samplingFrequency,
-            int sampleDuration, boolean stackProfile,
-            boolean useElfSymbolizer, boolean sendToDropbox);
-
-    /**
-     * Start continuous profiling with the given encoded parameters.
-     * Parameters should be encoded in the ConfigReader syntax,
-     * separated by colons.
-     */
-    void startProfilingString(String config);
-
-    /**
-     * Start profiling with the parameters in the given protobuf.
-     */
-    void startProfilingProtobuf(in byte[] config_proto);
-
-    /**
-     * Stop an active profiling session.
-     */
-    void stopProfiling();
-}
diff --git a/perfprofd/binder_interface/perfprofd_binder.cc b/perfprofd/binder_interface/perfprofd_binder.cc
deleted file mode 100644
index a1c77e24..00000000
--- a/perfprofd/binder_interface/perfprofd_binder.cc
+++ /dev/null
@@ -1,377 +0,0 @@
-/*
-**
-** Copyright 2017, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-#include "perfprofd_binder.h"
-
-#include <cstdio>
-#include <cstdlib>
-#include <fstream>
-#include <memory>
-#include <mutex>
-#include <string>
-#include <thread>
-
-#include <inttypes.h>
-#include <unistd.h>
-
-#include <android-base/logging.h>
-#include <android-base/stringprintf.h>
-#include <android-base/strings.h>
-#include <binder/BinderService.h>
-#include <binder/IResultReceiver.h>
-#include <binder/Status.h>
-#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
-#include <utils/String16.h>
-#include <utils/String8.h>
-#include <utils/Vector.h>
-
-#include "android/os/BnPerfProfd.h"
-#include "perfprofd_config.pb.h"
-#include "perfprofd_record.pb.h"
-
-#include "config.h"
-#include "configreader.h"
-#include "perfprofdcore.h"
-#include "perfprofd_threaded_handler.h"
-
-namespace android {
-namespace perfprofd {
-namespace binder {
-
-namespace {
-
-using Status = ::android::binder::Status;
-
-class PerfProfdNativeService : public BinderService<PerfProfdNativeService>,
-                               public ::android::os::BnPerfProfd,
-                               public ThreadedHandler {
- public:
-  static status_t start();
-  static int Main();
-
-  static char const* getServiceName() { return "perfprofd"; }
-
-  status_t dump(int fd, const Vector<String16> &args) override;
-
-  Status startProfiling(int32_t collectionInterval,
-                        int32_t iterations,
-                        int32_t process,
-                        int32_t samplingPeriod,
-                        int32_t samplingFrequency,
-                        int32_t sampleDuration,
-                        bool stackProfile,
-                        bool useElfSymbolizer,
-                        bool sendToDropbox) override;
-  Status startProfilingString(const String16& config) override;
-  Status startProfilingProtobuf(const std::vector<uint8_t>& config_proto) override;
-
-  Status stopProfiling() override;
-
-  // Override onTransact so we can handle shellCommand.
-  status_t onTransact(uint32_t _aidl_code,
-                      const Parcel& _aidl_data,
-                      Parcel* _aidl_reply,
-                      uint32_t _aidl_flags = 0) override;
-
- private:
-  status_t shellCommand(int /*in*/, int out, int err, Vector<String16>& args);
-
-  template <typename ProtoLoaderFn> Status StartProfilingProtobuf(ProtoLoaderFn fn);
-  Status StartProfilingProtobufFd(int fd);
-};
-
-status_t PerfProfdNativeService::start() {
-  IPCThreadState::self()->disableBackgroundScheduling(true);
-  status_t ret = BinderService<PerfProfdNativeService>::publish();
-  if (ret != android::OK) {
-    return ret;
-  }
-  sp<ProcessState> ps(ProcessState::self());
-  ps->startThreadPool();
-  ps->giveThreadPoolName();
-  return android::OK;
-}
-
-status_t PerfProfdNativeService::dump(int fd, const Vector<String16> &args) {
-  auto out = std::fstream(base::StringPrintf("/proc/self/fd/%d", fd));
-  auto print_config = [&out](bool is_profiling, const Config* config) {
-    if (is_profiling) {
-      out << "Profiling with config: " << ConfigReader::ConfigToString(*config);
-    } else {
-      out << "Not actively profiling.";
-    }
-  };
-  RunOnConfig(print_config);
-  out << std::endl;
-
-  return NO_ERROR;
-}
-
-Status PerfProfdNativeService::startProfiling(int32_t collectionInterval,
-                                              int32_t iterations,
-                                              int32_t process,
-                                              int32_t samplingPeriod,
-                                              int32_t samplingFrequency,
-                                              int32_t sampleDuration,
-                                              bool stackProfile,
-                                              bool useElfSymbolizer,
-                                              bool sendToDropbox) {
-  auto config_fn = [&](ThreadedConfig& config) {
-    config = ThreadedConfig();  // Reset to a default config.
-
-    if (collectionInterval >= 0) {
-      config.collection_interval_in_s = collectionInterval;
-    }
-    if (iterations >= 0) {
-      config.main_loop_iterations = iterations;
-    }
-    if (process >= 0) {
-      config.process = process;
-    }
-    if (samplingPeriod > 0) {
-      config.sampling_period = samplingPeriod;
-    }
-    if (samplingFrequency > 0) {
-      config.sampling_frequency = samplingFrequency;
-    }
-    if (sampleDuration > 0) {
-      config.sample_duration_in_s = sampleDuration;
-    }
-    config.stack_profile = stackProfile;
-    config.use_elf_symbolizer = useElfSymbolizer;
-    config.send_to_dropbox = sendToDropbox;
-  };
-  std::string error_msg;
-  if (!StartProfiling(config_fn, &error_msg)) {
-    return Status::fromExceptionCode(1, error_msg.c_str());
-  }
-  return Status::ok();
-}
-Status PerfProfdNativeService::startProfilingString(const String16& config) {
-  ConfigReader reader;
-  std::string error_msg;
-  // Split configuration along colon.
-  std::vector<std::string> args = base::Split(String8(config).string(), ":");
-  for (auto& arg : args) {
-    if (!reader.Read(arg, /* fail_on_error */ true, &error_msg)) {
-      std::string tmp = base::StringPrintf("Could not parse %s: %s",
-                                           arg.c_str(),
-                                           error_msg.c_str());
-      return Status::fromExceptionCode(1, tmp.c_str());
-    }
-  }
-  auto config_fn = [&](ThreadedConfig& config) {
-    config = ThreadedConfig();  // Reset to a default config.
-    reader.FillConfig(&config);
-  };
-  if (!StartProfiling(config_fn, &error_msg)) {
-    return Status::fromExceptionCode(1, error_msg.c_str());
-  }
-  return Status::ok();
-}
-Status PerfProfdNativeService::startProfilingProtobuf(const std::vector<uint8_t>& config_proto) {
-  auto proto_loader_fn = [&config_proto](ProfilingConfig& proto_config) {
-    return proto_config.ParseFromArray(config_proto.data(), config_proto.size());
-  };
-  return StartProfilingProtobuf(proto_loader_fn);
-}
-
-template <typename ProtoLoaderFn>
-Status PerfProfdNativeService::StartProfilingProtobuf(ProtoLoaderFn fn) {
-  ProfilingConfig proto_config;
-  if (!fn(proto_config)) {
-    return binder::Status::fromExceptionCode(2, "Could not read protobuf");
-  }
-  auto config_fn = [&proto_config](ThreadedConfig& config) {
-    config = ThreadedConfig();  // Reset to a default config.
-    ConfigReader::ProtoToConfig(proto_config, &config);
-  };
-  std::string error_msg;
-  if (!StartProfiling(config_fn, &error_msg)) {
-    return Status::fromExceptionCode(1, error_msg.c_str());
-  }
-  return Status::ok();
-}
-
-Status PerfProfdNativeService::StartProfilingProtobufFd(int fd) {
-  auto proto_loader_fn = [fd](ProfilingConfig& proto_config) {
-    struct IstreamCopyingInputStream : public google::protobuf::io::CopyingInputStream {
-      IstreamCopyingInputStream(int fd_in)
-                : stream(base::StringPrintf("/proc/self/fd/%d", fd_in),
-                         std::ios::binary | std::ios::in) {
-      }
-
-      int Read(void* buffer, int size) override {
-        stream.read(reinterpret_cast<char*>(buffer), size);
-        size_t count = stream.gcount();
-        if (count > 0) {
-          return count;
-        }
-        return -1;
-      }
-
-      std::ifstream stream;
-    };
-    std::unique_ptr<IstreamCopyingInputStream> is(new IstreamCopyingInputStream(fd));
-    std::unique_ptr<google::protobuf::io::CopyingInputStreamAdaptor> is_adaptor(
-        new google::protobuf::io::CopyingInputStreamAdaptor(is.get()));
-    return proto_config.ParseFromZeroCopyStream(is_adaptor.get());
-  };
-  return StartProfilingProtobuf(proto_loader_fn);
-}
-
-Status PerfProfdNativeService::stopProfiling() {
-  std::string error_msg;
-  if (!StopProfiling(&error_msg)) {
-    Status::fromExceptionCode(1, error_msg.c_str());
-  }
-  return Status::ok();
-}
-
-status_t PerfProfdNativeService::shellCommand(int in,
-                                              int out,
-                                              int err_fd,
-                                              Vector<String16>& args) {
-  if (android::base::kEnableDChecks) {
-    LOG(VERBOSE) << "Perfprofd::shellCommand";
-
-    for (size_t i = 0, n = args.size(); i < n; i++) {
-      LOG(VERBOSE) << "  arg[" << i << "]: '" << String8(args[i]).string() << "'";
-    }
-  }
-
-  auto err_str = std::fstream(base::StringPrintf("/proc/self/fd/%d", err_fd));
-
-  if (args.size() >= 1) {
-    if (args[0] == String16("dump")) {
-      dump(out, args);
-      return OK;
-    } else if (args[0] == String16("startProfiling")) {
-      ConfigReader reader;
-      for (size_t i = 1; i < args.size(); ++i) {
-        std::string error_msg;
-        if (!reader.Read(String8(args[i]).string(), /* fail_on_error */ true, &error_msg)) {
-          err_str << "Could not parse '" << String8(args[i]).string() << "': " << error_msg
-                  << std::endl;
-          return BAD_VALUE;
-        }
-      }
-      auto config_fn = [&](ThreadedConfig& config) {
-        config = ThreadedConfig();  // Reset to a default config.
-        reader.FillConfig(&config);
-      };
-      std::string error_msg;
-      if (!StartProfiling(config_fn, &error_msg)) {
-        err_str << error_msg << std::endl;
-        return UNKNOWN_ERROR;
-      }
-      return OK;
-    } else if (args[0] == String16("startProfilingProto")) {
-      if (args.size() < 2) {
-        return BAD_VALUE;
-      }
-      int fd = -1;
-      if (args[1] == String16("-")) {
-        fd = in;
-      } else {
-        // TODO: Implement reading from disk?
-      }
-      if (fd < 0) {
-        err_str << "Bad file descriptor " << args[1] << std::endl;
-        return BAD_VALUE;
-      }
-      binder::Status status = StartProfilingProtobufFd(fd);
-      if (status.isOk()) {
-        return OK;
-      } else {
-        err_str << status.toString8() << std::endl;
-        return UNKNOWN_ERROR;
-      }
-    } else if (args[0] == String16("stopProfiling")) {
-      Status status = stopProfiling();
-      if (status.isOk()) {
-        return OK;
-      } else {
-        err_str << status.toString8() << std::endl;
-        return UNKNOWN_ERROR;
-      }
-    }
-  }
-  return BAD_VALUE;
-}
-
-status_t PerfProfdNativeService::onTransact(uint32_t _aidl_code,
-                                            const Parcel& _aidl_data,
-                                            Parcel* _aidl_reply,
-                                            uint32_t _aidl_flags) {
-  switch (_aidl_code) {
-    case IBinder::SHELL_COMMAND_TRANSACTION: {
-      int in = _aidl_data.readFileDescriptor();
-      int out = _aidl_data.readFileDescriptor();
-      int err = _aidl_data.readFileDescriptor();
-      int argc = _aidl_data.readInt32();
-      Vector<String16> args;
-      for (int i = 0; i < argc && _aidl_data.dataAvail() > 0; i++) {
-        args.add(_aidl_data.readString16());
-      }
-      sp<IBinder> unusedCallback;
-      sp<IResultReceiver> resultReceiver;
-      status_t status;
-      if ((status = _aidl_data.readNullableStrongBinder(&unusedCallback)) != OK)
-        return status;
-      if ((status = _aidl_data.readNullableStrongBinder(&resultReceiver)) != OK)
-        return status;
-      status = shellCommand(in, out, err, args);
-      if (resultReceiver != nullptr) {
-        resultReceiver->send(status);
-      }
-      return OK;
-    }
-
-    default:
-      return ::android::os::BnPerfProfd::onTransact(
-          _aidl_code, _aidl_data, _aidl_reply, _aidl_flags);
-  }
-}
-
-}  // namespace
-
-int Main() {
-  {
-    struct DummyConfig : public Config {
-      void Sleep(size_t seconds) override {}
-      bool IsProfilingEnabled() const override { return false; }
-    };
-    DummyConfig config;
-    GlobalInit(config.perf_path);
-  }
-
-  android::status_t ret;
-  if ((ret = PerfProfdNativeService::start()) != android::OK) {
-    LOG(ERROR) << "Unable to start InstalldNativeService: %d" << ret;
-    exit(1);
-  }
-
-  android::IPCThreadState::self()->joinThreadPool();
-
-  LOG(INFO) << "Exiting perfprofd";
-  return 0;
-}
-
-}  // namespace binder
-}  // namespace perfprofd
-}  // namespace android
diff --git a/perfprofd/binder_interface/perfprofd_binder.h b/perfprofd/binder_interface/perfprofd_binder.h
deleted file mode 100644
index 8ab6d091..00000000
--- a/perfprofd/binder_interface/perfprofd_binder.h
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
-**
-** Copyright 2017, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-#ifndef SYSTEM_EXTRAS_PERFPROFD_BINDER_INTERFACE_PERFPROFD_BINDER_H_
-#define SYSTEM_EXTRAS_PERFPROFD_BINDER_INTERFACE_PERFPROFD_BINDER_H_
-
-namespace android {
-namespace perfprofd {
-namespace binder {
-
-int Main();
-
-}  // namespace binder
-}  // namespace perfprofd
-}  // namespace android
-
-#endif  // SYSTEM_EXTRAS_PERFPROFD_BINDER_INTERFACE_PERFPROFD_BINDER_H_
diff --git a/perfprofd/config.h b/perfprofd/config.h
deleted file mode 100644
index b5e5d5d4..00000000
--- a/perfprofd/config.h
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- *
- * Copyright 2015, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef SYSTEM_EXTRAS_PERFPROFD_CONFIG_H_
-#define SYSTEM_EXTRAS_PERFPROFD_CONFIG_H_
-
-#include <cstdint>
-#include <string>
-#include <vector>
-
-struct Config {
-  virtual ~Config() {}
-
-  // Average number of seconds between perf profile collections (if
-  // set to 100, then over time we want to see a perf profile
-  // collected every 100 seconds). The actual time within the interval
-  // for the collection is chosen randomly.
-  uint32_t collection_interval_in_s = 14400;
-  // Use the specified fixed seed for random number generation (unit
-  // testing)
-  uint32_t use_fixed_seed = 0;
-  // For testing purposes, number of times to iterate through main
-  // loop.  Value of zero indicates that we should loop forever.
-  uint32_t main_loop_iterations = 0;
-
-  // The pid of the process to profile. May be negative, in which case
-  // the whole system will be profiled.
-  int32_t process = -1;
-
-  // Destination directory (where to write profiles).
-  std::string destination_directory = "/data/misc/perfprofd";
-  // Config directory (where to read configs).
-  std::string config_directory = "/data/data/com.google.android.gms/files";
-  // Full path to 'perf' executable.
-  std::string perf_path = "/system/bin/simpleperf";
-
-  // Desired sampling period (passed to perf -c option). Small
-  // sampling periods can perturb the collected profiles, so enforce
-  // min/max. A value of 0 means perf default. sampling_frequency
-  // takes priority.
-  uint32_t sampling_period = 0;
-  // Desired sampling frequency (passed to perf -f option). A value of 0
-  // means using sampling_period or default.
-  uint32_t sampling_frequency = 0;
-  // Length of time to collect samples (number of seconds for 'perf
-  // record -a' run).
-  uint32_t sample_duration_in_s = 2;
-
-  // If this parameter is non-zero it will cause perfprofd to
-  // exit immediately if the build type is not userdebug or eng.
-  // Currently defaults to 1 (true).
-  bool only_debug_build = true;
-
-  // If the "mpdecision" service is running at the point we are ready
-  // to kick off a profiling run, then temporarily disable the service
-  // and hard-wire all cores on prior to the collection run, provided
-  // that the duration of the recording is less than or equal to the value of
-  // 'hardwire_cpus_max_duration'.
-  bool hardwire_cpus = true;
-  uint32_t hardwire_cpus_max_duration_in_s = 5;
-
-  // Maximum number of unprocessed profiles we can accumulate in the
-  // destination directory. Once we reach this limit, we continue
-  // to collect, but we just overwrite the most recent profile.
-  uint32_t max_unprocessed_profiles = 10;
-
-  // If set to 1, pass the -g option when invoking 'perf' (requests
-  // stack traces as opposed to flat profile).
-  bool stack_profile = false;
-
-  // For unit testing only: if set to 1, emit info messages on config
-  // file parsing.
-  bool trace_config_read = false;
-
-  // Control collection of various additional profile tags
-  bool collect_cpu_utilization = true;
-  bool collect_charging_state = true;
-  bool collect_booting = true;
-  bool collect_camera_active = false;
-
-  // If true, use an ELF symbolizer to on-device symbolize.
-  bool use_elf_symbolizer = true;
-  // Whether to symbolize everything. If false, objects with build ID will be skipped.
-  bool symbolize_everything = false;
-
-  // If true, use libz to compress the output proto.
-  bool compress = true;
-
-  // If true, send the proto to dropbox instead to a file.
-  bool send_to_dropbox = false;
-
-  // Whether to fail or strip unsupported events.
-  bool fail_on_unsupported_events = false;
-
-  struct PerfCounterConfigElem {
-    std::vector<std::string> events;
-    bool group;
-    uint32_t sampling_period;
-  };
-  std::vector<PerfCounterConfigElem> event_config;
-
-  // Sleep for the given number of seconds.
-  virtual void Sleep(size_t seconds) = 0;
-
-  // Should the profiling be stopped immediately?
-  virtual bool ShouldStopProfiling() {
-    return false;
-  }
-
-  // Is profiling enabled?
-  virtual bool IsProfilingEnabled() const = 0;
-};
-
-#endif  // SYSTEM_EXTRAS_PERFPROFD_CONFIG_H_
diff --git a/perfprofd/configreader.cc b/perfprofd/configreader.cc
deleted file mode 100644
index 1ad573bd..00000000
--- a/perfprofd/configreader.cc
+++ /dev/null
@@ -1,620 +0,0 @@
-/*
-**
-** Copyright 2015, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-#include "configreader.h"
-
-#include <inttypes.h>
-
-#include <algorithm>
-#include <climits>
-#include <cstdlib>
-#include <cstring>
-#include <map>
-#include <sstream>
-#include <vector>
-
-#include <android-base/file.h>
-#include <android-base/logging.h>
-#include <android-base/parseint.h>
-#include <android-base/stringprintf.h>
-#include <android-base/strings.h>
-
-#include "perfprofd_config.pb.h"
-
-using android::base::StringPrintf;
-
-//
-// Config file path
-//
-static const char *config_file_path =
-    "/data/data/com.google.android.gms/files/perfprofd.conf";
-
-struct ConfigReader::Data {
-  struct values {
-    unsigned minv;
-    unsigned maxv;
-  };
-  std::map<std::string, values> u_info;
-  std::map<std::string, unsigned> u_entries;
-  std::map<std::string, std::string> s_entries;
-
-  struct events {
-    std::vector<std::string> names;
-    unsigned period;
-    bool group;
-  };
-  std::vector<events> e_entries;
-  bool trace_config_read;
-};
-
-ConfigReader::ConfigReader() : data_(new ConfigReader::Data())
-{
-  data_->trace_config_read = false;
-  addDefaultEntries();
-}
-
-ConfigReader::~ConfigReader()
-{
-}
-
-const char *ConfigReader::getConfigFilePath()
-{
-  return config_file_path;
-}
-
-void ConfigReader::setConfigFilePath(const char *path)
-{
-  config_file_path = strdup(path);
-  LOG(INFO) << "config file path set to " << config_file_path;
-}
-
-//
-// Populate the reader with the set of allowable entries
-//
-void ConfigReader::addDefaultEntries()
-{
-  struct DummyConfig : public Config {
-    void Sleep(size_t seconds) override {}
-    bool IsProfilingEnabled() const override { return false; }
-  };
-  DummyConfig config;
-
-  // Average number of seconds between perf profile collections (if
-  // set to 100, then over time we want to see a perf profile
-  // collected every 100 seconds). The actual time within the interval
-  // for the collection is chosen randomly.
-  addUnsignedEntry("collection_interval", config.collection_interval_in_s, 0, UINT32_MAX);
-
-  // Use the specified fixed seed for random number generation (unit
-  // testing)
-  addUnsignedEntry("use_fixed_seed", config.use_fixed_seed, 0, UINT32_MAX);
-
-  // For testing purposes, number of times to iterate through main
-  // loop.  Value of zero indicates that we should loop forever.
-  addUnsignedEntry("main_loop_iterations", config.main_loop_iterations, 0, UINT32_MAX);
-
-  // Destination directory (where to write profiles).
-  addStringEntry("destination_directory", config.destination_directory.c_str());
-
-  // Config directory (where to read configs).
-  addStringEntry("config_directory", config.config_directory.c_str());
-
-  // Full path to 'perf' executable.
-  addStringEntry("perf_path", config.perf_path.c_str());
-
-  // Desired sampling period (passed to perf -c option).
-  addUnsignedEntry("sampling_period", config.sampling_period, 0, UINT32_MAX);
-  // Desired sampling frequency (passed to perf -f option).
-  addUnsignedEntry("sampling_frequency", config.sampling_frequency, 0, UINT32_MAX);
-
-  // Length of time to collect samples (number of seconds for 'perf
-  // record -a' run).
-  addUnsignedEntry("sample_duration", config.sample_duration_in_s, 1, 600);
-
-  // If this parameter is non-zero it will cause perfprofd to
-  // exit immediately if the build type is not userdebug or eng.
-  // Currently defaults to 1 (true).
-  addUnsignedEntry("only_debug_build", config.only_debug_build ? 1 : 0, 0, 1);
-
-  // If the "mpdecision" service is running at the point we are ready
-  // to kick off a profiling run, then temporarily disable the service
-  // and hard-wire all cores on prior to the collection run, provided
-  // that the duration of the recording is less than or equal to the value of
-  // 'hardwire_cpus_max_duration'.
-  addUnsignedEntry("hardwire_cpus", config.hardwire_cpus, 0, 1);
-  addUnsignedEntry("hardwire_cpus_max_duration",
-                   config.hardwire_cpus_max_duration_in_s,
-                   1,
-                   UINT32_MAX);
-
-  // Maximum number of unprocessed profiles we can accumulate in the
-  // destination directory. Once we reach this limit, we continue
-  // to collect, but we just overwrite the most recent profile.
-  addUnsignedEntry("max_unprocessed_profiles", config.max_unprocessed_profiles, 1, UINT32_MAX);
-
-  // If set to 1, pass the -g option when invoking 'perf' (requests
-  // stack traces as opposed to flat profile).
-  addUnsignedEntry("stack_profile", config.stack_profile ? 1 : 0, 0, 1);
-
-  // For unit testing only: if set to 1, emit info messages on config
-  // file parsing.
-  addUnsignedEntry("trace_config_read", config.trace_config_read ? 1 : 0, 0, 1);
-
-  // Control collection of various additional profile tags
-  addUnsignedEntry("collect_cpu_utilization", config.collect_cpu_utilization ? 1 : 0, 0, 1);
-  addUnsignedEntry("collect_charging_state", config.collect_charging_state ? 1 : 0, 0, 1);
-  addUnsignedEntry("collect_booting", config.collect_booting ? 1 : 0, 0, 1);
-  addUnsignedEntry("collect_camera_active", config.collect_camera_active ? 1 : 0, 0, 1);
-
-  // If true, use an ELF symbolizer to on-device symbolize.
-  addUnsignedEntry("use_elf_symbolizer", config.use_elf_symbolizer ? 1 : 0, 0, 1);
-  // Whether to symbolize everything. If false, objects with build ID will be skipped.
-  addUnsignedEntry("symbolize_everything", config.symbolize_everything ? 1 : 0, 0, 1);
-
-  // If true, use libz to compress the output proto.
-  addUnsignedEntry("compress", config.compress ? 1 : 0, 0, 1);
-
-  // If true, send the proto to dropbox instead of to a file.
-  addUnsignedEntry("dropbox", config.send_to_dropbox ? 1 : 0, 0, 1);
-
-  // The pid of the process to profile. May be negative, in which case
-  // the whole system will be profiled.
-  addUnsignedEntry("process", static_cast<uint32_t>(-1), 0, UINT32_MAX);
-
-  // Whether to fail or strip unsupported events.
-  addUnsignedEntry("fail_on_unsupported_events", config.fail_on_unsupported_events ? 1 : 0, 0, 1);
-}
-
-void ConfigReader::addUnsignedEntry(const char *key,
-                                    unsigned default_value,
-                                    unsigned min_value,
-                                    unsigned max_value)
-{
-  std::string ks(key);
-  CHECK(data_->u_entries.find(ks) == data_->u_entries.end() &&
-        data_->s_entries.find(ks) == data_->s_entries.end())
-      << "internal error -- duplicate entry for key " << key;
-  Data::values vals;
-  vals.minv = min_value;
-  vals.maxv = max_value;
-  data_->u_info[ks] = vals;
-  data_->u_entries[ks] = default_value;
-}
-
-void ConfigReader::addStringEntry(const char *key, const char *default_value)
-{
-  std::string ks(key);
-  CHECK(data_->u_entries.find(ks) == data_->u_entries.end() &&
-        data_->s_entries.find(ks) == data_->s_entries.end())
-      << "internal error -- duplicate entry for key " << key;
-  CHECK(default_value != nullptr) << "internal error -- bad default value for key " << key;
-  data_->s_entries[ks] = std::string(default_value);
-}
-
-unsigned ConfigReader::getUnsignedValue(const char *key) const
-{
-  std::string ks(key);
-  auto it = data_->u_entries.find(ks);
-  CHECK(it != data_->u_entries.end());
-  return it->second;
-}
-
-bool ConfigReader::getBoolValue(const char *key) const
-{
-  std::string ks(key);
-  auto it = data_->u_entries.find(ks);
-  CHECK(it != data_->u_entries.end());
-  return it->second != 0;
-}
-
-std::string ConfigReader::getStringValue(const char *key) const
-{
-  std::string ks(key);
-  auto it = data_->s_entries.find(ks);
-  CHECK(it != data_->s_entries.end());
-  return it->second;
-}
-
-void ConfigReader::overrideUnsignedEntry(const char *key, unsigned new_value)
-{
-  std::string ks(key);
-  auto it = data_->u_entries.find(ks);
-  CHECK(it != data_->u_entries.end());
-  Data::values vals;
-  auto iit = data_->u_info.find(key);
-  CHECK(iit != data_->u_info.end());
-  vals = iit->second;
-  CHECK(new_value >= vals.minv && new_value <= vals.maxv);
-  it->second = new_value;
-  LOG(INFO) << "option " << key << " overridden to " << new_value;
-}
-
-
-//
-// Parse a key=value pair read from the config file. This will issue
-// warnings or errors to the system logs if the line can't be
-// interpreted properly.
-//
-bool ConfigReader::parseLine(const std::string& key,
-                             const std::string& value,
-                             unsigned linecount,
-                             std::string* error_msg)
-{
-  if (key.empty()) {
-    *error_msg = StringPrintf("line %u: Key is empty", linecount);
-    return false;
-  }
-  if (value.empty()) {
-    *error_msg = StringPrintf("line %u: Value for %s is empty", linecount, key.c_str());
-    return false;
-  }
-
-  auto uit = data_->u_entries.find(key);
-  if (uit != data_->u_entries.end()) {
-    uint64_t conv;
-    if (!android::base::ParseUint(value, &conv)) {
-      *error_msg = StringPrintf("line %u: value %s cannot be parsed", linecount, value.c_str());
-      return false;
-    }
-    Data::values vals;
-    auto iit = data_->u_info.find(key);
-    DCHECK(iit != data_->u_info.end());
-    vals = iit->second;
-    if (conv < vals.minv || conv > vals.maxv) {
-      *error_msg = StringPrintf("line %u: "
-                                    "specified value %" PRIu64 " for '%s' "
-                                    "outside permitted range [%u %u]",
-                                linecount,
-                                conv,
-                                key.c_str(),
-                                vals.minv,
-                                vals.maxv);
-      return false;
-    } else {
-      if (data_->trace_config_read) {
-        LOG(INFO) << "option " << key << " set to " << conv;
-      }
-      uit->second = static_cast<unsigned>(conv);
-    }
-    data_->trace_config_read = (getUnsignedValue("trace_config_read") != 0);
-    return true;
-  }
-
-  auto sit = data_->s_entries.find(key);
-  if (sit != data_->s_entries.end()) {
-    if (data_->trace_config_read) {
-      LOG(INFO) << "option " << key << " set to " << value;
-    }
-    sit->second = std::string(value);
-    return true;
-  }
-
-  // Check whether this follows event syntax, and create an event entry, if necessary.
-  // -e_evtname(,evtname)*=period
-  // -g_evtname(,evtname)*=period
-  {
-    bool event_key = android::base::StartsWith(key, "-e_");
-    bool group_key = android::base::StartsWith(key, "-g_");
-    if (event_key || group_key) {
-      Data::events events;
-      events.group = group_key;
-
-      uint64_t conv;
-      if (!android::base::ParseUint(value, &conv)) {
-        *error_msg = StringPrintf("line %u: key %s cannot be parsed", linecount, key.c_str());
-        return false;
-      }
-      if (conv > std::numeric_limits<unsigned>::max()) {
-        *error_msg = StringPrintf("line %u: key %s: period too large", linecount, key.c_str());
-        return false;
-      }
-      events.period = static_cast<unsigned>(conv);
-
-      events.names = android::base::Split(key.substr(3), ",");
-      data_->e_entries.push_back(events);
-      return true;
-    }
-  }
-
-  *error_msg = StringPrintf("line %u: unknown option '%s'", linecount, key.c_str());
-  return false;
-}
-
-static bool isblank(const std::string &line)
-{
-  auto non_space = [](char c) { return isspace(c) == 0; };
-  return std::find_if(line.begin(), line.end(), non_space) == line.end();
-}
-
-
-
-bool ConfigReader::readFile()
-{
-  std::string contents;
-  if (! android::base::ReadFileToString(config_file_path, &contents)) {
-    return false;
-  }
-  std::string error_msg;
-  if (!Read(contents, /* fail_on_error */ false, &error_msg)) {
-    LOG(ERROR) << error_msg;
-    return false;
-  }
-  if (!error_msg.empty()) {
-    LOG(WARNING) << error_msg;
-  }
-  return true;
-}
-
-bool ConfigReader::Read(const std::string& content, bool fail_on_error, std::string* error_msg) {
-  std::stringstream ss(content);
-  std::string line;
-
-  auto append_error = [error_msg](const std::string& tmp) {
-    if (!error_msg->empty()) {
-      error_msg->append("\n");
-      error_msg->append(tmp);
-    } else {
-      *error_msg = tmp;
-    }
-  };
-
-  for (unsigned linecount = 1;
-       std::getline(ss,line,'\n');
-       linecount += 1)
-  {
-
-    // comment line?
-    if (line[0] == '#') {
-      continue;
-    }
-
-    // blank line?
-    if (isblank(line)) {
-      continue;
-    }
-
-    // look for X=Y assignment
-    auto efound = line.find('=');
-    if (efound == std::string::npos) {
-      append_error(StringPrintf("line %u: line malformed (no '=' found)", linecount));
-      if (fail_on_error) {
-        return false;
-      }
-      continue;
-    }
-
-    std::string key(line.substr(0, efound));
-    std::string value(line.substr(efound+1, std::string::npos));
-
-    std::string local_error_msg;
-    bool parse_success = parseLine(key, value, linecount, &local_error_msg);
-    if (!parse_success) {
-      append_error(local_error_msg);
-      if (fail_on_error) {
-        return false;
-      }
-    }
-  }
-
-  return true;
-}
-
-void ConfigReader::FillConfig(Config* config) {
-  config->collection_interval_in_s = getUnsignedValue("collection_interval");
-
-  config->use_fixed_seed = getUnsignedValue("use_fixed_seed");
-
-  config->main_loop_iterations = getUnsignedValue("main_loop_iterations");
-
-  config->destination_directory = getStringValue("destination_directory");
-
-  config->config_directory = getStringValue("config_directory");
-
-  config->perf_path = getStringValue("perf_path");
-
-  config->sampling_period = getUnsignedValue("sampling_period");
-  config->sampling_frequency = getUnsignedValue("sampling_frequency");
-
-  config->sample_duration_in_s = getUnsignedValue("sample_duration");
-
-  config->only_debug_build = getBoolValue("only_debug_build");
-
-  config->hardwire_cpus = getBoolValue("hardwire_cpus");
-  config->hardwire_cpus_max_duration_in_s = getUnsignedValue("hardwire_cpus_max_duration");
-
-  config->max_unprocessed_profiles = getUnsignedValue("max_unprocessed_profiles");
-
-  config->stack_profile = getBoolValue("stack_profile");
-
-  config->trace_config_read = getBoolValue("trace_config_read");
-
-  config->collect_cpu_utilization = getBoolValue("collect_cpu_utilization");
-  config->collect_charging_state = getBoolValue("collect_charging_state");
-  config->collect_booting = getBoolValue("collect_booting");
-  config->collect_camera_active = getBoolValue("collect_camera_active");
-
-  config->process = static_cast<int32_t>(getUnsignedValue("process"));
-  config->use_elf_symbolizer = getBoolValue("use_elf_symbolizer");
-  config->symbolize_everything = getBoolValue("symbolize_everything");
-  config->compress = getBoolValue("compress");
-  config->send_to_dropbox = getBoolValue("dropbox");
-  config->fail_on_unsupported_events = getBoolValue("fail_on_unsupported_events");
-
-  config->event_config.clear();
-  for (const auto& event : data_->e_entries) {
-    Config::PerfCounterConfigElem elem;
-    elem.events = event.names;
-    elem.group = event.group;
-    elem.sampling_period = event.period;
-    config->event_config.push_back(std::move(elem));
-  }
-}
-
-namespace {
-
-template <typename T>
-struct OssFormatter {
-};
-
-template <>
-struct OssFormatter<std::string> {
-  void Add(std::ostream& os, const std::string& val) {
-    os << val;
-  }
-};
-
-template <>
-struct OssFormatter<uint32_t> {
-  void Add(std::ostream& os, const uint32_t& val) {
-    os << val;
-  }
-};
-
-template <>
-struct OssFormatter<int32_t> {
-  void Add(std::ostream& os, const int32_t& val) {
-    os << val;
-  }
-};
-
-template <>
-struct OssFormatter<bool> {
-  void Add(std::ostream& os, const bool& val) {
-    os << (val ? 1 : 0);
-  }
-};
-
-
-}  // namespace
-
-std::string ConfigReader::ConfigToString(const Config& config) {
-  std::ostringstream oss;
-
-  auto add = [&oss](const char* str, auto val) {
-    if (oss.tellp() != 0) {
-      oss << ' ';
-    }
-    oss << str << '=';
-    OssFormatter<decltype(val)> fmt;
-    fmt.Add(oss, val);
-  };
-
-  add("collection_interval", config.collection_interval_in_s);
-  add("use_fixed_seed", config.use_fixed_seed);
-  add("main_loop_iterations", config.main_loop_iterations);
-
-  add("destination_directory", config.destination_directory);  // TODO: Escape.
-  add("config_directory", config.config_directory);            // TODO: Escape.
-  add("perf_path", config.perf_path);                          // TODO: Escape.
-
-  add("sampling_period", config.sampling_period);
-  add("sampling_frequency", config.sampling_frequency);
-
-  add("sample_duration", config.sample_duration_in_s);
-
-  add("only_debug_build", config.only_debug_build);
-
-  add("hardwire_cpus", config.hardwire_cpus);
-
-  add("hardwire_cpus_max_duration", config.hardwire_cpus_max_duration_in_s);
-
-  add("max_unprocessed_profiles", config.max_unprocessed_profiles);
-
-  add("stack_profile", config.stack_profile);
-
-  add("trace_config_read", config.trace_config_read);
-
-  add("collect_cpu_utilization", config.collect_cpu_utilization);
-  add("collect_charging_state", config.collect_charging_state);
-  add("collect_booting", config.collect_booting);
-  add("collect_camera_active", config.collect_camera_active);
-
-  add("process", config.process);
-  add("use_elf_symbolizer", config.use_elf_symbolizer);
-  add("symbolize_everything", config.symbolize_everything);
-  add("compress", config.compress);
-  add("dropbox", config.send_to_dropbox);
-  add("fail_on_unsupported_events", config.fail_on_unsupported_events);
-
-  for (const auto& elem : config.event_config) {
-    std::ostringstream oss_elem;
-    oss_elem << '-' << (elem.group ? 'g' : 'e') << '_';
-    bool first = true;
-    for (const auto& event : elem.events) {
-      if (!first) {
-        oss_elem << ',';
-      }
-      oss_elem << event;
-      first = false;
-    }
-    add(oss_elem.str().c_str(), elem.sampling_period);
-  }
-
-  return oss.str();
-}
-
-void ConfigReader::ProtoToConfig(const android::perfprofd::ProfilingConfig& in, Config* out) {
-  // Copy base proto values.
-#define CHECK_AND_COPY_FROM_PROTO(name)      \
-  if (in.has_ ## name()) {      \
-    out->name = in.name();  \
-  }
-  CHECK_AND_COPY_FROM_PROTO(collection_interval_in_s)
-  CHECK_AND_COPY_FROM_PROTO(use_fixed_seed)
-  CHECK_AND_COPY_FROM_PROTO(main_loop_iterations)
-  CHECK_AND_COPY_FROM_PROTO(destination_directory)
-  CHECK_AND_COPY_FROM_PROTO(config_directory)
-  CHECK_AND_COPY_FROM_PROTO(perf_path)
-  CHECK_AND_COPY_FROM_PROTO(sampling_period)
-  CHECK_AND_COPY_FROM_PROTO(sampling_frequency)
-  CHECK_AND_COPY_FROM_PROTO(sample_duration_in_s)
-  CHECK_AND_COPY_FROM_PROTO(only_debug_build)
-  CHECK_AND_COPY_FROM_PROTO(hardwire_cpus)
-  CHECK_AND_COPY_FROM_PROTO(hardwire_cpus_max_duration_in_s)
-  CHECK_AND_COPY_FROM_PROTO(max_unprocessed_profiles)
-  CHECK_AND_COPY_FROM_PROTO(stack_profile)
-  CHECK_AND_COPY_FROM_PROTO(collect_cpu_utilization)
-  CHECK_AND_COPY_FROM_PROTO(collect_charging_state)
-  CHECK_AND_COPY_FROM_PROTO(collect_booting)
-  CHECK_AND_COPY_FROM_PROTO(collect_camera_active)
-  CHECK_AND_COPY_FROM_PROTO(process)
-  CHECK_AND_COPY_FROM_PROTO(use_elf_symbolizer)
-  CHECK_AND_COPY_FROM_PROTO(symbolize_everything)
-  CHECK_AND_COPY_FROM_PROTO(send_to_dropbox)
-  CHECK_AND_COPY_FROM_PROTO(compress)
-  CHECK_AND_COPY_FROM_PROTO(fail_on_unsupported_events)
-#undef CHECK_AND_COPY_FROM_PROTO
-
-  // Convert counters.
-  for (const auto& event_config : in.event_config()) {
-    Config::PerfCounterConfigElem config_elem;
-
-    if (event_config.counters_size() == 0) {
-      LOG(WARNING) << "Missing counters.";
-      continue;
-    }
-    config_elem.events.reserve(event_config.counters_size());
-    for (const std::string& str : event_config.counters()) {
-      config_elem.events.push_back(str);
-    }
-    config_elem.group = event_config.has_as_group() ? event_config.as_group() : false;
-    config_elem.sampling_period = event_config.has_sampling_period()
-                                      ? event_config.sampling_period()
-                                      : 0;
-    out->event_config.push_back(std::move(config_elem));
-  }
-}
diff --git a/perfprofd/configreader.h b/perfprofd/configreader.h
deleted file mode 100644
index 3d2243c5..00000000
--- a/perfprofd/configreader.h
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- *
- * Copyright 2015, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef SYSTEM_EXTRAS_PERFPROFD_CONFIGREADER_H_
-#define SYSTEM_EXTRAS_PERFPROFD_CONFIGREADER_H_
-
-#include <memory>
-#include <string>
-
-#include "config.h"
-
-namespace android {
-namespace perfprofd {
-class ProfilingConfig;  // Config proto.
-}  // namespace perfprofd
-}  // namespace android
-
-//
-// This table describes the perfprofd config file syntax in terms of
-// key/value pairs.  Values come in two flavors: strings, or unsigned
-// integers. In the latter case the reader sets allowable
-// minimum/maximum for the setting.
-//
-class ConfigReader {
-
- public:
-  ConfigReader();
-  ~ConfigReader();
-
-  // Ask for the current setting of a config item
-  unsigned getUnsignedValue(const char *key) const;
-  bool getBoolValue(const char *key) const;
-  std::string getStringValue(const char *key) const;
-
-  // read the specified config file, applying any settings it contains
-  // returns true for successful read, false if conf file cannot be opened.
-  bool readFile();
-
-  bool Read(const std::string& data, bool fail_on_error, std::string* error_msg);
-
-  // set/get path to config file
-  static void setConfigFilePath(const char *path);
-  static const char *getConfigFilePath();
-
-  // override a config item (for unit testing purposes)
-  void overrideUnsignedEntry(const char *key, unsigned new_value);
-
-  void FillConfig(Config* config);
-  static std::string ConfigToString(const Config& config);
-
-  static void ProtoToConfig(const android::perfprofd::ProfilingConfig& in, Config* out);
-
- private:
-  void addUnsignedEntry(const char *key,
-                        unsigned default_value,
-                        unsigned min_value,
-                        unsigned max_value);
-  void addStringEntry(const char *key, const char *default_value);
-  void addDefaultEntries();
-  bool parseLine(const std::string& key,
-                 const std::string& value,
-                 unsigned linecount,
-                 std::string* error_msg);
-
-  struct Data;
-  std::unique_ptr<Data> data_;
-};
-
-#endif
diff --git a/perfprofd/cpuconfig.cc b/perfprofd/cpuconfig.cc
deleted file mode 100644
index 0f23fd0f..00000000
--- a/perfprofd/cpuconfig.cc
+++ /dev/null
@@ -1,113 +0,0 @@
-/*
-**
-** Copyright 2015, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <unistd.h>
-#include <string>
-#include <sstream>
-#include <sys/types.h>
-#include <sys/wait.h>
-
-#include <android-base/logging.h>
-#ifdef __BIONIC__
-#include <android-base/properties.h>
-#endif
-
-#include "cpuconfig.h"
-
-#define SYSFSCPU "/sys/devices/system/cpu"
-
-HardwireCpuHelper::HardwireCpuHelper(bool perform)
-    : mpdecision_stopped_(false)
-{
-  if (perform && GetMpdecisionRunning()) {
-    mpdecision_stopped_ = true;
-    StopMpdecision();
-    int ncores = GetNumCores();
-    for (int i = 0; i < ncores; ++i) {
-      OnlineCore(i, 1);
-    }
-  }
-}
-
-HardwireCpuHelper::~HardwireCpuHelper()
-{
-  if (mpdecision_stopped_) {
-    RestartMpdecision();
-  }
-}
-
-bool HardwireCpuHelper::GetMpdecisionRunning()
-{
-#ifdef __BIONIC__
-  return android::base::GetProperty("init.svc.mpdecision", "") == "running";
-#else
-  return false;
-#endif
-}
-
-
-int HardwireCpuHelper::GetNumCores()
-{
-  int ncores = -1;
-  std::string possible(SYSFSCPU "/possible");
-  FILE *fp = fopen(possible.c_str(), "re");
-  if (fp) {
-    unsigned lo = 0, hi = 0;
-    if (fscanf(fp, "%u-%u", &lo, &hi) == 2) {
-      ncores = hi - lo + 1;
-    }
-    fclose(fp);
-  }
-  return ncores;
-}
-
-void HardwireCpuHelper::OnlineCore(int i, int onoff)
-{
-  std::stringstream ss;
-  ss << SYSFSCPU "/cpu" << i << "/online";
-  FILE *fp = fopen(ss.str().c_str(), "we");
-  if (fp) {
-    fprintf(fp, onoff ? "1\n" : "0\n");
-    fclose(fp);
-  } else {
-    PLOG(WARNING) << "open failed for " << ss.str();
-  }
-}
-
-void HardwireCpuHelper::StopMpdecision()
-{
-#ifdef __BIONIC__
-  if (!android::base::SetProperty("ctl.stop", "mpdecision")) {
-    LOG(ERROR) << "setprop ctl.stop mpdecision failed";
-  }
-#endif
-}
-
-void HardwireCpuHelper::RestartMpdecision()
-{
-#ifdef __BIONIC__
-  // Don't try to offline the cores we previously onlined -- let
-  // mpdecision figure out what to do
-
-  if (!android::base::SetProperty("ctl.start", "mpdecision")) {
-    LOG(ERROR) << "setprop ctl.start mpdecision failed";
-  }
-#endif
-}
diff --git a/perfprofd/cpuconfig.h b/perfprofd/cpuconfig.h
deleted file mode 100644
index bc5b5cf9..00000000
--- a/perfprofd/cpuconfig.h
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
-**
-** Copyright 2015, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-//
-// Helper class to perform cpu setup (if needed) prior to a profile collection.
-//
-class HardwireCpuHelper {
- public:
-
-  // The constructor for this class checks to see if the 'mpdecision'
-  // service is running; if so (and if 'perform' is TRUE), then it
-  // disables the service and on-lines all of the available cores/cpus
-  // (anything listed in /sys/devices/system/cpu/possible). The
-  // destructor will re-enable the mpdecision service if it was
-  // previously disabled.
-  explicit HardwireCpuHelper(bool perform);
-  virtual ~HardwireCpuHelper();
-
- private:
-  bool mpdecision_stopped_;
-
-  // Collect the number of available cpus/cores from /sys/devices/system/cpu/possible
-  int GetNumCores();
-
-  // Returns TRUE if the system service 'mpdecision' is running
-  bool GetMpdecisionRunning();
-
-  // Online/offline the specified cpu
-  void OnlineCore(int whichCore, int onoff);
-
-  // Enable/disable the mpdecision service via the equivalent of
-  //   setprop ctl.start mpdecision
-  //   setprop ctl.stop mpdecision
-  void StopMpdecision();
-  void RestartMpdecision();
-};
diff --git a/perfprofd/dropbox/Android.bp b/perfprofd/dropbox/Android.bp
deleted file mode 100644
index 4ab3a11c..00000000
--- a/perfprofd/dropbox/Android.bp
+++ /dev/null
@@ -1,52 +0,0 @@
-//
-// Copyright (C) 2018 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-//
-
-//
-// Static library for dropbox submission.
-//
-cc_library_static {
-    name: "libperfprofd_dropbox",
-    defaults: [
-        "perfprofd_defaults",
-    ],
-    host_supported: true,
-
-    export_include_dirs: ["."],
-    static_libs: [
-        "libbase",
-        "libperfprofd_record_proto",
-        "libprotobuf-cpp-lite",
-    ],
-    target: {
-        android: {
-            srcs: [
-                "dropbox.cc",
-            ],
-            static_libs: [
-                "libutils",
-            ],
-            shared_libs: [
-                "libbinder",
-                "libservices",
-            ],
-        },
-        host: {
-            srcs: [
-                "dropbox_host.cc",
-            ],
-        },
-    },
-}
diff --git a/perfprofd/dropbox/dropbox.cc b/perfprofd/dropbox/dropbox.cc
deleted file mode 100644
index 2b1dc2ef..00000000
--- a/perfprofd/dropbox/dropbox.cc
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- *
- * Copyright 2017, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "dropbox.h"
-
-#include <cstdio>
-#include <cstdlib>
-#include <memory>
-
-#include <inttypes.h>
-#include <unistd.h>
-
-#include <android-base/logging.h>
-#include <android-base/stringprintf.h>
-#include <android-base/unique_fd.h>
-#include <android/os/DropBoxManager.h>
-#include <binder/Status.h>
-#include <utils/String8.h>
-
-#include "perfprofd_record.pb.h"
-
-#include "perfprofd_io.h"
-
-namespace android {
-namespace perfprofd {
-namespace dropbox {
-
-namespace {
-
-bool WriteDropboxFile(android::perfprofd::PerfprofdRecord* encodedProfile,
-                      const std::string& temp_dir,
-                      std::string* error_msg) {
-  android::base::unique_fd tmp_fd;
-  {
-    char path[PATH_MAX];
-    snprintf(path, sizeof(path), "%s/dropboxtmp-XXXXXX", temp_dir.c_str());
-    tmp_fd.reset(mkstemp(path));
-    if (tmp_fd.get() == -1) {
-      *error_msg = android::base::StringPrintf("Could not create temp file %s: %s",
-                                               path,
-                                               strerror(errno));
-      return false;
-    }
-    if (unlink(path) != 0) {
-      PLOG(WARNING) << "Could not unlink binder temp file";
-    }
-  }
-
-  // Dropbox takes ownership of the fd, and if it is not readonly,
-  // a selinux violation will occur. Get a read-only version.
-  android::base::unique_fd read_only;
-  {
-    char fdpath[64];
-    snprintf(fdpath, arraysize(fdpath), "/proc/self/fd/%d", tmp_fd.get());
-    read_only.reset(open(fdpath, O_RDONLY | O_CLOEXEC));
-    if (read_only.get() < 0) {
-      *error_msg = android::base::StringPrintf("Could not create read-only fd: %s",
-                                               strerror(errno));
-      return false;
-    }
-  }
-
-  constexpr bool kCompress = true;  // Ignore the config here. Dropbox will always end up
-                                    // compressing the data, might as well make the temp
-                                    // file smaller and help it out.
-  using DropBoxManager = android::os::DropBoxManager;
-  constexpr int kDropboxFlags = DropBoxManager::IS_GZIPPED;
-
-  if (!SerializeProtobuf(encodedProfile, std::move(tmp_fd), kCompress)) {
-    *error_msg = "Could not serialize to temp file";
-    return false;
-  }
-
-  sp<DropBoxManager> dropbox(new DropBoxManager());
-  android::binder::Status status =  dropbox->addFile(String16("perfprofd"),
-                                                     read_only.release(),
-                                                     kDropboxFlags);
-  if (!status.isOk()) {
-    *error_msg = status.toString8();
-    return false;
-  }
-  return true;
-}
-
-}  // namespace
-
-bool SendToDropbox(android::perfprofd::PerfprofdRecord* profile,
-                   const std::string& temp_directory,
-                   std::string* error_msg) {
-  size_t size = profile->ByteSize();
-  if (size < 1024 * 1024) {
-    // For a small size, send as a byte buffer directly.
-    std::unique_ptr<uint8_t[]> data(new uint8_t[size]);
-    profile->SerializeWithCachedSizesToArray(data.get());
-
-    using DropBoxManager = android::os::DropBoxManager;
-    sp<DropBoxManager> dropbox(new DropBoxManager());
-    android::binder::Status status = dropbox->addData(String16("perfprofd"),
-                                                      data.get(),
-                                                      size,
-                                                      0);
-    if (!status.isOk()) {
-      *error_msg = status.toString8();
-      return false;
-    }
-    return true;
-  } else {
-    // For larger buffers, we need to go through the filesystem.
-    return WriteDropboxFile(profile, temp_directory, error_msg);
-  }
-}
-
-}  // namespace dropbox
-}  // namespace perfprofd
-}  // namespace android
diff --git a/perfprofd/dropbox/dropbox.h b/perfprofd/dropbox/dropbox.h
deleted file mode 100644
index b25d2cc2..00000000
--- a/perfprofd/dropbox/dropbox.h
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- *
- * Copyright 2018, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef SYSTEM_EXTRAS_PERFPROFD_DROPBOX_DROPBOX_H_
-#define SYSTEM_EXTRAS_PERFPROFD_DROPBOX_DROPBOX_H_
-
-#include <string>
-
-#include "perfprofd_record-fwd.h"
-
-namespace android {
-namespace perfprofd {
-namespace dropbox {
-
-bool SendToDropbox(android::perfprofd::PerfprofdRecord* profile,
-                   const std::string& temp_directory,
-                   std::string* error_msg);
-
-}  // namespace dropbox
-}  // namespace perfprofd
-}  // namespace android
-
-#endif  // SYSTEM_EXTRAS_PERFPROFD_DROPBOX_DROPBOX_H_
diff --git a/perfprofd/dropbox/dropbox_host.cc b/perfprofd/dropbox/dropbox_host.cc
deleted file mode 100644
index 5c08aa85..00000000
--- a/perfprofd/dropbox/dropbox_host.cc
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- *
- * Copyright 2018, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "dropbox.h"
-
-#include <android-base/macros.h>
-
-namespace android {
-namespace perfprofd {
-namespace dropbox {
-
-bool SendToDropbox(android::perfprofd::PerfprofdRecord* profile,
-                   const std::string& temp_directory ATTRIBUTE_UNUSED,
-                   std::string* error_msg) {
-  *error_msg = "Dropbox not supported on host";
-  return false;
-}
-
-}  // namespace dropbox
-}  // namespace perfprofd
-}  // namespace android
diff --git a/perfprofd/map_utils.h b/perfprofd/map_utils.h
deleted file mode 100644
index 2e3d97d9..00000000
--- a/perfprofd/map_utils.h
+++ /dev/null
@@ -1,129 +0,0 @@
-#ifndef SYSTEM_EXTRAS_PERFPROFD_MAP_UTILS_H_
-#define SYSTEM_EXTRAS_PERFPROFD_MAP_UTILS_H_
-
-#include <map>
-#include <set>
-
-#include <android-base/logging.h>
-
-namespace android {
-namespace perfprofd {
-
-template <typename T, typename U>
-decltype(static_cast<T*>(nullptr)->begin()) GetLeqIterator(T& map, U key) {
-  if (map.empty()) {
-    return map.end();
-  }
-  auto it = map.upper_bound(key);
-  if (it == map.begin()) {
-    return map.end();
-  }
-  --it;
-  return it;
-}
-
-template <typename SymType, typename ValType>
-class RangeMap {
- public:
-  struct AggregatedSymbol {
-    SymType symbol;
-    std::set<ValType> offsets;
-    AggregatedSymbol(const SymType& sym, const ValType& offset) : symbol(sym) {
-      offsets.insert(offset);
-    }
-  };
-
- public:
-  void Insert(const SymType& sym, const ValType& val) {
-    auto aggr_it = GetLeqIterator(map_, val);
-    if (aggr_it == map_.end()) {
-      // Maybe we need to extend the first one.
-      if (!map_.empty()) {
-        AggregatedSymbol& first = map_.begin()->second;
-        CHECK_LT(val, map_.begin()->first);
-        if (first.symbol == sym) {
-          ExtendLeft(map_.begin(), val);
-          return;
-        }
-      }
-      // Nope, new entry needed.
-      map_.emplace(val, AggregatedSymbol(sym, val));
-      return;
-    }
-
-    AggregatedSymbol& maybe_match = aggr_it->second;
-
-    if (maybe_match.symbol == sym) {
-      // Same symbol, just insert. This is true for overlap as well as extension.
-      maybe_match.offsets.insert(val);
-      return;
-    }
-
-    // Is there overlap?
-    if (*maybe_match.offsets.rbegin() < val) {
-      // No. See if it can be merged with the next one.
-      ++aggr_it;
-      if (aggr_it != map_.end() && aggr_it->second.symbol == sym) {
-        ExtendLeft(aggr_it, val);
-        return;
-      }
-
-      // Just add a new symbol entry.
-      map_.emplace(val, AggregatedSymbol(sym, val));
-      return;
-    }
-
-    // OK, we have an overlapping non-symbol-equal AggregatedSymbol. Need to break
-    // things up.
-    AggregatedSymbol left(maybe_match.symbol, *maybe_match.offsets.begin());
-    auto offset_it = maybe_match.offsets.begin();
-    for (; *offset_it < val; ++offset_it) {
-      left.offsets.insert(*offset_it);
-    }
-
-    if (*offset_it == val) {
-      // This should not happen.
-      LOG(ERROR) << "Unexpected overlap!";
-      return;
-    }
-
-    AggregatedSymbol right(maybe_match.symbol, *offset_it);
-    for (; offset_it != maybe_match.offsets.end(); ++offset_it) {
-      right.offsets.insert(*offset_it);
-    }
-
-    map_.erase(aggr_it);
-    map_.emplace(*left.offsets.begin(), std::move(left));
-    map_.emplace(val, AggregatedSymbol(sym, val));
-    map_.emplace(*right.offsets.begin(), std::move(right));
-  }
-
-  using RangeMapType = std::map<ValType, AggregatedSymbol>;
-
-  typename RangeMapType::const_iterator begin() const {
-    return map_.begin();
-  }
-  typename RangeMapType::const_iterator end() const {
-    return map_.end();
-  }
-
-  bool empty() const {
-    return map_.empty();
-  }
-
- private:
-  void ExtendLeft(typename RangeMapType::iterator it, const ValType& val) {
-    CHECK(val < *it->second.offsets.begin());
-    AggregatedSymbol copy = std::move(it->second);
-    map_.erase(it);
-    copy.offsets.insert(val);
-    map_.emplace(val, std::move(copy));
-  }
-
-  RangeMapType map_;
-};
-
-}  // namespace perfprofd
-}  // namespace android
-
-#endif  // SYSTEM_EXTRAS_PERFPROFD_MAP_UTILS_H_
diff --git a/perfprofd/perf_data_converter.cc b/perfprofd/perf_data_converter.cc
deleted file mode 100644
index ea560f11..00000000
--- a/perfprofd/perf_data_converter.cc
+++ /dev/null
@@ -1,197 +0,0 @@
-
-#include "perf_data_converter.h"
-
-#include <algorithm>
-#include <limits>
-#include <map>
-#include <memory>
-#include <set>
-#include <unordered_map>
-
-#include <android-base/logging.h>
-#include <android-base/macros.h>
-#include <android-base/strings.h>
-#include <perf_data_utils.h>
-#include <perf_parser.h>
-#include <perf_protobuf_io.h>
-
-#include "perfprofd_record.pb.h"
-#include "perf_data.pb.h"
-
-#include "map_utils.h"
-#include "quipper_helper.h"
-#include "symbolizer.h"
-
-using std::map;
-
-namespace android {
-namespace perfprofd {
-
-namespace {
-
-void AddSymbolInfo(PerfprofdRecord* record,
-                   ::quipper::PerfParser& perf_parser,
-                   ::perfprofd::Symbolizer* symbolizer,
-                   bool symbolize_everything) {
-  std::unordered_set<std::string> filenames_w_build_id;
-  if (!symbolize_everything) {
-    for (auto& perf_build_id : record->build_ids()) {
-      filenames_w_build_id.insert(perf_build_id.filename());
-    }
-  }
-
-  std::unordered_set<std::string> files_wo_build_id;
-  {
-    quipper::MmapEventIterator it(*record);
-    for (; it != it.end(); ++it) {
-      const ::quipper::PerfDataProto_MMapEvent* mmap_event = &it->mmap_event();
-      if (!mmap_event->has_filename() || !mmap_event->has_start() || !mmap_event->has_len()) {
-        // Don't care.
-        continue;
-      }
-      if (filenames_w_build_id.count(mmap_event->filename()) == 0) {
-        files_wo_build_id.insert(mmap_event->filename());
-      }
-    }
-  }
-  if (files_wo_build_id.empty()) {
-    return;
-  }
-
-  struct Dso {
-    uint64_t min_vaddr;
-    RangeMap<std::string, uint64_t> symbols;
-    explicit Dso(uint64_t min_vaddr_in) : min_vaddr(min_vaddr_in) {
-    }
-  };
-  std::unordered_map<std::string, Dso> files;
-
-  auto it = record->events().begin();
-  auto end = record->events().end();
-  auto parsed_it = perf_parser.parsed_events().begin();
-  auto parsed_end = perf_parser.parsed_events().end();
-  for (; it != end; ++it, ++parsed_it) {
-    CHECK(parsed_it != parsed_end);
-    if (!it->has_sample_event()) {
-      continue;
-    }
-
-    const ::quipper::PerfDataProto_SampleEvent& sample_event = it->sample_event();
-
-    if (android::base::kEnableDChecks) {
-      // Check that the parsed_event and sample_event are consistent.
-      CHECK_EQ(parsed_it->callchain.size(), sample_event.callchain_size());
-    }
-
-    auto check_address = [&](const std::string& dso_name, uint64_t offset) {
-      if (files_wo_build_id.count(dso_name) == 0) {
-        return;
-      }
-
-      // OK, that's a hit in the mmap segment (w/o build id).
-
-      Dso* dso_data;
-      {
-        auto dso_it = files.find(dso_name);
-        constexpr uint64_t kNoMinAddr = std::numeric_limits<uint64_t>::max();
-        if (dso_it == files.end()) {
-          uint64_t min_vaddr;
-          bool has_min_vaddr = symbolizer->GetMinExecutableVAddr(dso_name, &min_vaddr);
-          if (!has_min_vaddr) {
-            min_vaddr = kNoMinAddr;
-          }
-          auto it = files.emplace(dso_name, Dso(min_vaddr));
-          dso_data = &it.first->second;
-        } else {
-          dso_data = &dso_it->second;
-        }
-        if (dso_data->min_vaddr == kNoMinAddr) {
-          return;
-        }
-      }
-
-      // TODO: Is min_vaddr necessary here?
-      const uint64_t file_addr = offset;
-
-      std::string symbol = symbolizer->Decode(dso_name, file_addr);
-      if (symbol.empty()) {
-        return;
-      }
-
-      dso_data->symbols.Insert(symbol, file_addr);
-    };
-    if (sample_event.has_ip() && parsed_it->dso_and_offset.dso_info_ != nullptr) {
-      check_address(parsed_it->dso_and_offset.dso_info_->name, parsed_it->dso_and_offset.offset_);
-    }
-    if (sample_event.callchain_size() > 0) {
-      for (auto& callchain_data: parsed_it->callchain) {
-        if (callchain_data.dso_info_ == nullptr) {
-          continue;
-        }
-        check_address(callchain_data.dso_info_->name, callchain_data.offset_);
-      }
-    }
-  }
-
-  if (!files.empty()) {
-    // We have extra symbol info, create proto messages now.
-    size_t symbol_info_index = 0;
-    for (auto& file_data : files) {
-      const std::string& filename = file_data.first;
-      const Dso& dso = file_data.second;
-      if (dso.symbols.empty()) {
-        continue;
-      }
-
-      auto* symbol_info = record->AddExtension(::quipper::symbol_info);
-      symbol_info->set_filename(filename);
-      symbol_info->set_filename_md5_prefix(::quipper::Md5Prefix(filename));
-      symbol_info->set_min_vaddr(dso.min_vaddr);
-      for (auto& aggr_sym : dso.symbols) {
-        auto* symbol = symbol_info->add_symbols();
-        symbol->set_addr(*aggr_sym.second.offsets.begin());
-        symbol->set_size(*aggr_sym.second.offsets.rbegin() - *aggr_sym.second.offsets.begin() + 1);
-        symbol->set_name(aggr_sym.second.symbol);
-        symbol->set_name_md5_prefix(::quipper::Md5Prefix(aggr_sym.second.symbol));
-      }
-
-      ++symbol_info_index;
-    }
-  }
-}
-
-}  // namespace
-
-PerfprofdRecord*
-RawPerfDataToAndroidPerfProfile(const string &perf_file,
-                                ::perfprofd::Symbolizer* symbolizer,
-                                 bool symbolize_everything) {
-  std::unique_ptr<PerfprofdRecord> ret(new PerfprofdRecord());
-  ret->SetExtension(::quipper::id, 0);  // TODO.
-
-  ::quipper::PerfParserOptions options = {};
-  options.do_remap = true;
-  options.discard_unused_events = true;
-  options.read_missing_buildids = true;
-
-  ::quipper::PerfReader reader;
-  if (!reader.ReadFile(perf_file)) return nullptr;
-
-  ::quipper::PerfParser parser(&reader, options);
-  if (!parser.ParseRawEvents()) return nullptr;
-
-  if (!reader.Serialize(ret.get())) return nullptr;
-
-  // Append parser stats to protobuf.
-  ::quipper::PerfSerializer::SerializeParserStats(parser.stats(), ret.get());
-
-  // TODO: Symbolization.
-  if (symbolizer != nullptr) {
-    AddSymbolInfo(ret.get(), parser, symbolizer, symbolize_everything);
-  }
-
-  return ret.release();
-}
-
-}  // namespace perfprofd
-}  // namespace android
diff --git a/perfprofd/perf_data_converter.h b/perfprofd/perf_data_converter.h
deleted file mode 100644
index 8b4ab9ff..00000000
--- a/perfprofd/perf_data_converter.h
+++ /dev/null
@@ -1,23 +0,0 @@
-#ifndef WIRELESS_ANDROID_LOGGING_AWP_PERF_DATA_CONVERTER_H_
-#define WIRELESS_ANDROID_LOGGING_AWP_PERF_DATA_CONVERTER_H_
-
-#include <string>
-
-#include "perfprofd_record-fwd.h"
-
-namespace perfprofd {
-struct Symbolizer;
-}  // namespace perfprofd
-
-namespace android {
-namespace perfprofd {
-
-PerfprofdRecord*
-RawPerfDataToAndroidPerfProfile(const std::string &perf_file,
-                                ::perfprofd::Symbolizer* symbolizer,
-                                bool symbolize_everything);
-
-}  // namespace perfprofd
-}  // namespace android
-
-#endif  // WIRELESS_ANDROID_LOGGING_AWP_PERF_DATA_CONVERTER_H_
diff --git a/perfprofd/perf_profile.proto b/perfprofd/perf_profile.proto
deleted file mode 100644
index 65c9c39a..00000000
--- a/perfprofd/perf_profile.proto
+++ /dev/null
@@ -1,131 +0,0 @@
-
-syntax = "proto2";
-
-option java_package = "com.google.common.logging";
-
-option optimize_for = LITE_RUNTIME;
-
-package wireless_android_play_playlog;
-
-// An entry of the map from a stack of addresses to count.
-// Address here is the offset of the instruction address to the load address
-// of the load_module.
-message AddressSample {
-  // List of addresses that represents a call stack.
-  // address[0] is the leaf of the call stack.
-  repeated uint64 address = 1;
-
-  // List of load_module_ids that represents a call stack.
-  // load_module_id[0] is the leaf of the call stack.
-  // This field can be set as empty if all frame share the same load_module_id
-  // with LoadModuleSamples.load_module_id.
-  repeated int32 load_module_id = 2;
-
-  // Total count that the address/address_range is sampled.
-  optional int64 count = 3;
-};
-
-// An entry of the map from address_range to count.
-// [start, end] represents the range of addresses, end->to represents the
-// taken branch that ends the range.
-message RangeSample {
-  // Start instruction address of a range.
-  optional uint64 start = 1;
-
-  // If "end" and "to" is not provided, "start" represents a single instruction.
-  optional uint64 end = 2;
-  optional uint64 to = 3;
-
-  // Total count that the address/address_range is sampled.
-  optional int64 count = 4;
-};
-
-// A load module.
-message LoadModule {
-  // Name of the load_module.
-  optional string name = 1;
-
-  // LoadModule's linker build_id.
-  optional string build_id = 2;
-
-  // On-device symbolized entries.
-  repeated string symbol = 3;
-}
-
-// All samples for a load_module.
-message LoadModuleSamples {
-  optional int32 load_module_id = 1;
-
-  // Map from a stack of addresses to count.
-  repeated AddressSample address_samples = 2;
-
-  // Map from a range triplet (start, end, to) to count.
-  repeated RangeSample range_samples = 3;
-}
-
-// A table of program names.
-message ProcessNames {
-  repeated string name = 1;
-}
-
-// All samples for a program.
-message ProgramSamples {
-  // Name of the program.
-  optional string name = 1;
-
-  // Load module profiles.
-  repeated LoadModuleSamples modules = 2;
-
-  // Index into ProcessNames for the name of the process.
-  optional uint32 process_name_id = 3;
-}
-
-// A compressed representation of a perf profile, which contains samples from
-// multiple binaries.
-message AndroidPerfProfile {
-
-  // Type of the hardware event.
-  enum EventType {
-    CYCLE = 0;
-    BRANCH = 1;
-  }
-  // Hardware event used in profiling.
-  optional EventType event = 1;
-
-  // Total number of samples in this profile.
-  // This is the sum of counts of address_samples and range_samples in all
-  // load_module_samples.
-  optional int64 total_samples = 2;
-
-  // Samples for all profiled programs.
-  repeated ProgramSamples programs = 3;
-
-  // List of all load modules.
-  repeated LoadModule load_modules = 4;
-
-  // Table of process names.
-  optional ProcessNames process_names = 11;
-
-  // is device screen on at point when profile is collected?
-  optional bool display_on = 5;
-
-  // system load at point when profile is collected; corresponds
-  // to first value from /proc/loadavg multiplied by 100 then
-  // converted to int32
-  optional int32 sys_load_average = 6;
-
-  // At the point when the profile was collected, was a camera active?
-  optional bool camera_active = 7;
-
-  // At the point when the profile was collected, was the device still booting?
-  optional bool booting = 8;
-
-  // At the point when the profile was collected, was the device plugged into
-  // a charger?
-  optional bool on_charger = 9;
-
-  // CPU utilization measured prior to profile collection (expressed as
-  // 100 minus the idle percentage).
-  optional int32 cpu_utilization = 10;
-
-}
diff --git a/perfprofd/perfprofd.conf b/perfprofd/perfprofd.conf
deleted file mode 100644
index 696c3de5..00000000
--- a/perfprofd/perfprofd.conf
+++ /dev/null
@@ -1,24 +0,0 @@
-#
-# Configuration file for perf profile collection daemon (perfprofd)
-#
-#------------------------------------------------------------------------
-#
-# Destination directory for profiles
-#
-destination_directory=/data/misc/perfprofd
-#
-# Config directory for perfprofd
-#
-config_directory=/data/data/com.google.android.gms/files
-#
-# Sampling period (for perf -c option)
-#
-sampling_period=500000
-#
-# Average interval to wait between profile collection attempts (seconds)
-#
-collection_interval=86400
-#
-# Number of seconds of profile data to collect
-#
-sample_duration=3
diff --git a/perfprofd/perfprofd.rc b/perfprofd/perfprofd.rc
deleted file mode 100644
index 937c407b..00000000
--- a/perfprofd/perfprofd.rc
+++ /dev/null
@@ -1,5 +0,0 @@
-service perfprofd /system/bin/perfprofd --binder
-    class late_start
-    user root
-    group root wakelock
-    writepid /dev/cpuset/system-background/tasks
diff --git a/perfprofd/perfprofd_cmdline.cc b/perfprofd/perfprofd_cmdline.cc
deleted file mode 100644
index 2c958c0a..00000000
--- a/perfprofd/perfprofd_cmdline.cc
+++ /dev/null
@@ -1,258 +0,0 @@
-/*
- *
- * Copyright 2015, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "perfprofd_cmdline.h"
-
-#include <fcntl.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <sys/stat.h>
-#include <sys/types.h>
-#include <sys/wait.h>
-#include <unistd.h>
-
-#include <set>
-#include <string>
-
-#include <android-base/logging.h>
-#include <android-base/macros.h>
-#include <android-base/stringprintf.h>
-
-#include "perfprofd_record.pb.h"
-
-#include "configreader.h"
-#include "dropbox.h"
-#include "perfprofdcore.h"
-#include "perfprofd_io.h"
-
-//
-// Perf profiling daemon -- collects system-wide profiles using
-//
-//       simpleperf record -a
-//
-// and encodes them so that they can be uploaded by a separate service.
-//
-
-//
-
-//
-// Output file from 'perf record'.
-//
-#define PERF_OUTPUT "perf.data"
-
-//
-// Path to the perf file to convert and exit? Empty value is the default, daemon mode.
-//
-static std::string perf_file_to_convert = "";
-
-//
-// SIGHUP handler. Sending SIGHUP to the daemon can be used to break it
-// out of a sleep() call so as to trigger a new collection (debugging)
-//
-static void sig_hup(int /* signum */)
-{
-  LOG(WARNING) << "SIGHUP received";
-}
-
-//
-// Parse command line args. Currently supported flags:
-// *  "-c PATH" sets the path of the config file to PATH.
-// *  "-x PATH" reads PATH as a perf data file and saves it as a file in
-//    perf_profile.proto format. ".encoded" suffix is appended to PATH to form
-//    the output file path.
-//
-static void parse_args(int argc, char** argv)
-{
-  int ac;
-
-  for (ac = 1; ac < argc; ++ac) {
-    if (!strcmp(argv[ac], "-c")) {
-      if (ac >= argc-1) {
-        LOG(ERROR) << "malformed command line: -c option requires argument)";
-        continue;
-      }
-      ConfigReader::setConfigFilePath(argv[ac+1]);
-      ++ac;
-    } else if (!strcmp(argv[ac], "-x")) {
-      if (ac >= argc-1) {
-        LOG(ERROR) << "malformed command line: -x option requires argument)";
-        continue;
-      }
-      perf_file_to_convert = argv[ac+1];
-      ++ac;
-    } else {
-      LOG(ERROR) << "malformed command line: unknown option or arg " <<  argv[ac] << ")";
-      continue;
-    }
-  }
-}
-
-//
-// Post-processes after profile is collected and converted to protobuf.
-// * GMS core stores processed file sequence numbers in
-//   /data/data/com.google.android.gms/files/perfprofd_processed.txt
-// * Update /data/misc/perfprofd/perfprofd_produced.txt to remove the sequence
-//   numbers that have been processed and append the current seq number
-// Returns true if the current_seq should increment.
-//
-static bool post_process(const Config& config, int current_seq)
-{
-  const std::string& dest_dir = config.destination_directory;
-  std::string processed_file_path =
-      config.config_directory + "/" + PROCESSED_FILENAME;
-  std::string produced_file_path = dest_dir + "/" + PRODUCED_FILENAME;
-
-
-  std::set<int> processed;
-  FILE *fp = fopen(processed_file_path.c_str(), "r");
-  if (fp != NULL) {
-    int seq;
-    while(fscanf(fp, "%d\n", &seq) > 0) {
-      if (remove(android::base::StringPrintf(
-          "%s/perf.data.encoded.%d", dest_dir.c_str(),seq).c_str()) == 0) {
-        processed.insert(seq);
-      }
-    }
-    fclose(fp);
-  }
-
-  std::set<int> produced;
-  fp = fopen(produced_file_path.c_str(), "r");
-  if (fp != NULL) {
-    int seq;
-    while(fscanf(fp, "%d\n", &seq) > 0) {
-      if (processed.find(seq) == processed.end()) {
-        produced.insert(seq);
-      }
-    }
-    fclose(fp);
-  }
-
-  uint32_t maxLive = config.max_unprocessed_profiles;
-  if (produced.size() >= maxLive) {
-    return false;
-  }
-
-  produced.insert(current_seq);
-  fp = fopen(produced_file_path.c_str(), "w");
-  if (fp == NULL) {
-    PLOG(WARNING) << "Cannot write " <<  produced_file_path;
-    return false;
-  }
-  for (std::set<int>::const_iterator iter = produced.begin();
-       iter != produced.end(); ++iter) {
-    fprintf(fp, "%d\n", *iter);
-  }
-  fclose(fp);
-  chmod(produced_file_path.c_str(),
-        S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH);
-  return true;
-}
-
-//
-// Initialization
-//
-
-static void init(ConfigReader &config)
-{
-  if (!config.readFile()) {
-    LOG(ERROR) << "unable to open configuration file " << config.getConfigFilePath();
-  }
-
-  CommonInit(static_cast<uint32_t>(config.getUnsignedValue("use_fixed_seed")),
-             config.getStringValue("destination_directory").c_str());
-
-  signal(SIGHUP, sig_hup);
-}
-
-//
-// Main routine:
-// 1. parse cmd line args
-// 2. read config file
-// 3. loop: {
-//       sleep for a while
-//       perform a profile collection
-//    }
-//
-int perfprofd_main(int argc, char** argv, Config* config)
-{
-  LOG(INFO) << "starting Android Wide Profiling daemon";
-
-  parse_args(argc, argv);
-  {
-    ConfigReader config_reader;
-    init(config_reader);
-    config_reader.FillConfig(config);
-  }
-  GlobalInit(config->perf_path);
-
-  if (!perf_file_to_convert.empty()) {
-    std::string encoded_path = perf_file_to_convert + ".encoded";
-    encode_to_proto(perf_file_to_convert, encoded_path.c_str(), *config, 0, nullptr);
-    return 0;
-  }
-
-  // Early exit if we're not supposed to run on this build flavor
-  if (!IsDebugBuild() && config->only_debug_build) {
-    LOG(INFO) << "early exit due to inappropriate build type";
-    return 0;
-  }
-
-  auto config_fn = [config]() {
-    return config;
-  };
-  auto reread_config = [config]() {
-    // Reread config file -- the uploader may have rewritten it.
-    ConfigReader config_reader;
-    if (config_reader.readFile()) {
-      config_reader.FillConfig(config);
-    }
-  };
-  int seq = 0;
-  auto handler = [&seq](android::perfprofd::PerfprofdRecord* proto, Config* handler_config) {
-    if (proto == nullptr) {
-      return false;
-    }
-    if (handler_config->send_to_dropbox) {
-      std::string error_msg;
-      if (!android::perfprofd::dropbox::SendToDropbox(proto,
-                                                      handler_config->destination_directory,
-                                                      &error_msg)) {
-        LOG(ERROR) << "Failed dropbox submission: " << error_msg;
-        return false;
-      }
-    } else {
-      std::string data_file_path(handler_config->destination_directory);
-      data_file_path += "/";
-      data_file_path += PERF_OUTPUT;
-      std::string path = android::base::StringPrintf("%s.encoded.%d", data_file_path.c_str(), seq);
-      if (!android::perfprofd::SerializeProtobuf(proto, path.c_str(), handler_config->compress)) {
-        return false;
-      }
-      if (!post_process(*handler_config, seq)) {
-        return false;
-      }
-    }
-    seq++;
-    return true;
-  };
-  ProfilingLoop(config_fn, reread_config, handler);
-
-  LOG(INFO) << "finishing Android Wide Profiling daemon";
-  return 0;
-}
diff --git a/perfprofd/perfprofd_cmdline.h b/perfprofd/perfprofd_cmdline.h
deleted file mode 100644
index 5a6b766c..00000000
--- a/perfprofd/perfprofd_cmdline.h
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- *
- * Copyright 2015, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_CMDLINE_H_
-#define SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_CMDLINE_H_
-
-// Semaphore file that indicates that the user is opting in
-#define SEMAPHORE_FILENAME "perf_profile_collection_enabled.txt"
-
-// File containing a list of sequence numbers corresponding to profiles
-// that have been processed/uploaded. Written by the GmsCore uploader,
-// within the GmsCore files directory.
-#define PROCESSED_FILENAME "perfprofd_processed.txt"
-
-// File containing a list of sequence numbers corresponding to profiles
-// that have been created by the perfprofd but not yet uploaded. Written
-// by perfprofd within the destination directory; consumed by GmsCore.
-#define PRODUCED_FILENAME "perfprofd_produced.txt"
-
-struct Config;
-
-// Main routine for perfprofd daemon
-int perfprofd_main(int argc, char **argv, Config* config);
-
-#endif  // SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_CMDLINE_H_
diff --git a/perfprofd/perfprofd_config.proto b/perfprofd/perfprofd_config.proto
deleted file mode 100644
index 3702b8d8..00000000
--- a/perfprofd/perfprofd_config.proto
+++ /dev/null
@@ -1,96 +0,0 @@
-
-syntax = "proto2";
-
-option java_package = "android.perfprofd";
-
-package android.perfprofd;
-
-message PerfConfigElement {
-  repeated string counters = 1;
-  optional bool as_group = 2 [ default = false ];
-  optional uint32 sampling_period = 3;
-};
-
-// The configuration for a profiling session.
-message ProfilingConfig {
-  // Average number of seconds between perf profile collections (if
-  // set to 100, then over time we want to see a perf profile
-  // collected every 100 seconds). The actual time within the interval
-  // for the collection is chosen randomly.
-  optional uint32 collection_interval_in_s = 1;
-
-  // Use the specified fixed seed for random number generation (unit
-  // testing)
-  optional uint32 use_fixed_seed = 2;
-
-  // Number of times to iterate through main
-  // loop. Value of zero indicates that we should loop forever.
-  optional uint32 main_loop_iterations = 3;
-
-  // Destination directory (where to write profiles).
-  optional string destination_directory = 4;
-  // Config directory (where to read configs).
-  optional string config_directory = 5;
-  // Full path to 'perf' executable.
-  optional string perf_path = 6;
-
-  // Desired sampling period (passed to perf -c option). Small
-  // sampling periods can perturb the collected profiles, so enforce
-  // min/max. A value of 0 means perf default. sampling_frequency
-  // takes priority.
-  optional uint32 sampling_period = 7;
-  // Desired sampling frequency (passed to perf -f option). A value of 0
-  // means using sampling_period or default.
-  optional uint32 sampling_frequency = 22;
-  // Length of time to collect samples (number of seconds for 'perf
-  // record -a' run).
-  optional uint32 sample_duration_in_s = 8;
-
-  // If this parameter is non-zero it will cause perfprofd to
-  // exit immediately if the build type is not userdebug or eng.
-  // Currently defaults to 1 (true).
-  optional bool only_debug_build = 9;
-
-  // If the "mpdecision" service is running at the point we are ready
-  // to kick off a profiling run, then temporarily disable the service
-  // and hard-wire all cores on prior to the collection run, provided
-  // that the duration of the recording is less than or equal to the value of
-  // 'hardwire_cpus_max_duration'.
-  optional bool hardwire_cpus = 10;
-  optional uint32 hardwire_cpus_max_duration_in_s = 11;
-
-  // Maximum number of unprocessed profiles we can accumulate in the
-  // destination directory. Once we reach this limit, we continue
-  // to collect, but we just overwrite the most recent profile.
-  optional uint32 max_unprocessed_profiles = 12;
-
-  // If set to 1, pass the -g option when invoking 'perf' (requests
-  // stack traces as opposed to flat profile).
-  optional bool stack_profile = 13;
-
-  // Control collection of various additional profile tags
-  optional bool collect_cpu_utilization = 14;
-  optional bool collect_charging_state = 15;
-  optional bool collect_booting = 16;
-  optional bool collect_camera_active = 17;
-
-  // The pid of the process to profile. May be negative, in which case
-  // the whole system will be profiled.
-  optional int32 process = 18;
-
-  // Whether to use a symbolizer on-device.
-  optional bool use_elf_symbolizer = 19;
-  // Whether to symbolize everything. If false, objects with build ID will be skipped.
-  optional bool symbolize_everything = 25;
-
-  // Whether to send the result to dropbox.
-  optional bool send_to_dropbox = 20;
-
-  // If true, use libz to compress the output proto.
-  optional bool compress = 21;
-
-  // Whether to fail or strip unsupported events.
-  optional bool fail_on_unsupported_events = 24;
-
-  repeated PerfConfigElement event_config = 23;
-};
diff --git a/perfprofd/perfprofd_io.cc b/perfprofd/perfprofd_io.cc
deleted file mode 100644
index d88cae4a..00000000
--- a/perfprofd/perfprofd_io.cc
+++ /dev/null
@@ -1,310 +0,0 @@
-/*
-**
-** Copyright 2015, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-#include "perfprofd_io.h"
-
-#include <fcntl.h>
-#include <unistd.h>
-
-#include <memory>
-
-#include <android-base/file.h>
-#include <android-base/logging.h>
-#include <android-base/macros.h>
-#include <android-base/stringprintf.h>
-#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
-#include <zlib.h>
-
-#include "perfprofd_record.pb.h"
-
-namespace android {
-namespace perfprofd {
-
-using android::base::StringPrintf;
-using android::base::unique_fd;
-using android::base::WriteFully;
-
-namespace {
-
-// Protobuf's file implementation is not available in protobuf-lite. :-(
-class FileCopyingOutputStream : public ::google::protobuf::io::CopyingOutputStream {
- public:
-  explicit FileCopyingOutputStream(android::base::unique_fd&& fd_in) : fd_(std::move(fd_in)) {
-  };
-  bool Write(const void * buffer, int size) override {
-    return WriteFully(fd_.get(), buffer, size);
-  }
-
- private:
-  android::base::unique_fd fd_;
-};
-
-using google::protobuf::io::ZeroCopyOutputStream;
-
-// Protobuf's Gzip implementation is not available in protobuf-lite. :-(
-class GzipOutputStream : public ZeroCopyOutputStream {
- public:
-  ~GzipOutputStream();
-
-  static std::unique_ptr<GzipOutputStream> Create(ZeroCopyOutputStream* next,
-                                                  std::string* error_msg);
-
-  bool Next(void** data, int* size) override;
-
-  void BackUp(int count) override;
-
-  google::protobuf::int64 ByteCount() const override;
-
-  bool WriteAliasedRaw(const void* data, int size) override;
-  bool AllowsAliasing() const override;
-
-  bool Flush();
-  bool Close();
-
- private:
-  GzipOutputStream(ZeroCopyOutputStream* next, z_stream* stream);
-
-  int Write(int flush_flags);
-  bool NextBuffer();
-
-  ZeroCopyOutputStream* next_;
-  void* next_data_;
-  int next_size_;
-
-  z_stream* stream_;
-  std::unique_ptr<uint8_t[]> stream_buffer_;
-  bool had_error_;
-};
-
-constexpr size_t kStreamBufferSize = 16u * 1024u;
-
-GzipOutputStream::GzipOutputStream(ZeroCopyOutputStream* next, z_stream* stream)
-    : next_(next),
-      next_data_(nullptr),
-      next_size_(0),
-      stream_(stream),
-      stream_buffer_(nullptr),
-      had_error_(false) {
-}
-
-GzipOutputStream::~GzipOutputStream() {
-  if (stream_ != nullptr) {
-    deflateEnd(stream_);
-    delete stream_;
-    stream_ = nullptr;
-  }
-}
-
-bool GzipOutputStream::WriteAliasedRaw(const void* data ATTRIBUTE_UNUSED,
-                                       int size ATTRIBUTE_UNUSED) {
-  LOG(FATAL) << "Not supported";
-  __builtin_unreachable();
-}
-bool GzipOutputStream::AllowsAliasing() const {
-  return false;
-}
-
-google::protobuf::int64 GzipOutputStream::ByteCount() const {
-  return stream_->total_in + stream_->avail_in;
-}
-
-std::unique_ptr<GzipOutputStream> GzipOutputStream::Create(ZeroCopyOutputStream* next,
-                                                           std::string* error_msg) {
-  std::unique_ptr<z_stream> stream(new z_stream);
-
-  stream->zalloc = Z_NULL;
-  stream->zfree = Z_NULL;
-  stream->opaque = Z_NULL;
-  stream->msg = nullptr;
-  stream->avail_in = 0;
-  stream->total_in = 0;
-  stream->next_in = nullptr;
-  stream->total_out = 0;
-
-  {
-    constexpr int kWindowBits = 15;
-    constexpr int kGzipEncoding = 16;
-    constexpr int kMemLevel = 8;  // Default.
-    int init_result = deflateInit2(stream.get(),
-                                   Z_DEFAULT_COMPRESSION,
-                                   Z_DEFLATED,
-                                   kWindowBits | kGzipEncoding,
-                                   kMemLevel,
-                                   Z_DEFAULT_STRATEGY);
-    if (init_result != Z_OK) {
-      *error_msg = StringPrintf("Could not initialize compression: %d (%s)",
-                                init_result,
-                                stream->msg != nullptr ? stream->msg : "no message");
-      return nullptr;
-    }
-  }
-
-  return std::unique_ptr<GzipOutputStream>(new GzipOutputStream(next, stream.release()));
-}
-
-bool GzipOutputStream::NextBuffer() {
-  for (;;) {
-    if (!next_->Next(&next_data_, &next_size_)) {
-      next_data_ = nullptr;
-      next_size_ = 0;
-      return false;
-    }
-    if (next_size_ == 0) {
-      continue;
-    }
-    stream_->next_out = static_cast<Bytef*>(next_data_);
-    stream_->avail_out = next_size_;
-    return true;
-  }
-}
-
-int GzipOutputStream::Write(int flush_flags) {
-  CHECK(flush_flags == Z_NO_FLUSH || flush_flags == Z_FULL_FLUSH || flush_flags == Z_FINISH);
-
-  int res;
-  do {
-    if ((next_data_ == nullptr || stream_->avail_out == 0) && !NextBuffer()) {
-      return Z_BUF_ERROR;
-    }
-    res = deflate(stream_, flush_flags);
-  } while (res == Z_OK && stream_->avail_out == 0);
-
-  if (flush_flags == Z_FULL_FLUSH || flush_flags == Z_FINISH) {
-    next_->BackUp(stream_->avail_out);
-    next_data_ = nullptr;
-    next_size_ = 0;
-  }
-
-  return res;
-}
-
-bool GzipOutputStream::Next(void** data, int* size) {
-  if (had_error_) {
-    return false;
-  }
-
-  // Write all pending data.
-  if (stream_->avail_in > 0) {
-    int write_error = Write(Z_NO_FLUSH);
-    if (write_error != Z_OK) {
-      had_error_ = true;
-      return false;
-    }
-    CHECK_EQ(stream_->avail_in, 0);
-  }
-
-  if (stream_buffer_ == nullptr) {
-    stream_buffer_.reset(new uint8_t[kStreamBufferSize]);
-  }
-
-  stream_->next_in = static_cast<Bytef*>(stream_buffer_.get());
-  stream_->avail_in = kStreamBufferSize;
-  *data = stream_buffer_.get();
-  *size = kStreamBufferSize;
-  return true;
-}
-
-void GzipOutputStream::BackUp(int count) {
-  CHECK_GE(stream_->avail_in, count);
-  stream_->avail_in -= count;
-}
-
-bool GzipOutputStream::Flush() {
-  if (had_error_) {
-    return false;
-  }
-
-  int res = Write(Z_FULL_FLUSH);
-  had_error_ |= (res != Z_OK)
-      && !(res == Z_BUF_ERROR && stream_->avail_in == 0 && stream_->avail_out > 0);
-  return !had_error_;
-}
-
-bool GzipOutputStream::Close() {
-  if (had_error_) {
-    return false;
-  }
-
-  {
-    int res;
-    do {
-      res = Write(Z_FINISH);
-    } while (res == Z_OK);
-  }
-
-  int res = deflateEnd(stream_);
-  delete stream_;
-  stream_ = nullptr;
-
-  had_error_ = true;  // Pretend an error so no other operations succeed.
-
-  return res == Z_OK;
-}
-
-}  // namespace
-
-bool SerializeProtobuf(android::perfprofd::PerfprofdRecord* encodedProfile,
-                       android::base::unique_fd&& fd,
-                       bool compress) {
-  FileCopyingOutputStream fcos(std::move(fd));
-  google::protobuf::io::CopyingOutputStreamAdaptor cosa(&fcos);
-
-  ZeroCopyOutputStream* out;
-
-  std::unique_ptr<GzipOutputStream> gzip;
-  if (compress) {
-    std::string error_msg;
-    gzip = GzipOutputStream::Create(&cosa, &error_msg);
-    if (gzip == nullptr) {
-      LOG(ERROR) << error_msg;
-      return false;
-    }
-    out = gzip.get();
-  } else {
-    out = &cosa;
-  }
-
-  bool serialized = encodedProfile->SerializeToZeroCopyStream(out);
-  if (!serialized) {
-    LOG(WARNING) << "SerializeToZeroCopyStream failed";
-    return false;
-  }
-
-  bool zip_ok = true;
-  if (gzip != nullptr) {
-    zip_ok = gzip->Flush();
-    zip_ok = gzip->Close() && zip_ok;
-  }
-  cosa.Flush();
-  return zip_ok;
-}
-
-bool SerializeProtobuf(PerfprofdRecord* encodedProfile,
-                       const char* encoded_file_path,
-                       bool compress) {
-  unlink(encoded_file_path);  // Attempt to unlink for a clean slate.
-  constexpr int kFlags = O_CREAT | O_WRONLY | O_TRUNC | O_NOFOLLOW | O_CLOEXEC;
-  unique_fd fd(open(encoded_file_path, kFlags, 0664));
-  if (fd.get() == -1) {
-    PLOG(WARNING) << "Could not open " << encoded_file_path << " for serialization";
-    return false;
-  }
-  return SerializeProtobuf(encodedProfile, std::move(fd), compress);
-}
-
-}  // namespace perfprofd
-}  // namespace android
diff --git a/perfprofd/perfprofd_io.h b/perfprofd/perfprofd_io.h
deleted file mode 100644
index 3e754b54..00000000
--- a/perfprofd/perfprofd_io.h
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
-**
-** Copyright 2018, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-#ifndef SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_IO_H_
-#define SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_IO_H_
-
-#include <android-base/unique_fd.h>
-
-#include "perfprofd_record-fwd.h"
-
-namespace android {
-namespace perfprofd {
-
-bool SerializeProtobuf(android::perfprofd::PerfprofdRecord* encodedProfile,
-                       const char* encoded_file_path,
-                       bool compress = true);
-bool SerializeProtobuf(android::perfprofd::PerfprofdRecord* encodedProfile,
-                       android::base::unique_fd&& fd,
-                       bool compress = true);
-
-}  // namespace perfprofd
-}  // namespace android
-
-#endif
diff --git a/perfprofd/perfprofd_perf.cc b/perfprofd/perfprofd_perf.cc
deleted file mode 100644
index 15dde6fb..00000000
--- a/perfprofd/perfprofd_perf.cc
+++ /dev/null
@@ -1,332 +0,0 @@
-/*
-**
-** Copyright 2015, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-#include "perfprofd_perf.h"
-
-
-#include <inttypes.h>
-#include <signal.h>
-#include <sys/wait.h>
-#include <unistd.h>
-
-#include <algorithm>
-#include <cerrno>
-#include <cstdio>
-#include <cstring>
-#include <memory>
-#include <vector>
-
-#include <android-base/file.h>
-#include <android-base/logging.h>
-#include <android-base/stringprintf.h>
-#include <android-base/strings.h>
-#include <android-base/unique_fd.h>
-
-#include "config.h"
-
-namespace android {
-namespace perfprofd {
-
-namespace {
-
-std::unordered_set<std::string>& GetSupportedPerfCountersInternal() {
-  static std::unordered_set<std::string>& vec = *new std::unordered_set<std::string>();
-  return vec;
-}
-
-}  // namespace
-
-//
-// Invoke "perf record". Return value is OK_PROFILE_COLLECTION for
-// success, or some other error code if something went wrong.
-//
-PerfResult InvokePerf(Config& config,
-                      const std::string &perf_path,
-                      const char *stack_profile_opt,
-                      unsigned duration,
-                      const std::string &data_file_path,
-                      const std::string &perf_stderr_path)
-{
-  std::vector<std::string> argv_backing;
-  std::vector<const char*> argv_vector;
-  char paranoid_env[] = "PERFPROFD_DISABLE_PERF_EVENT_PARANOID_CHANGE=1";
-  char* envp[2] = {paranoid_env, nullptr};
-
-  {
-    auto add = [&argv_backing](auto arg) {
-      argv_backing.push_back(arg);
-    };
-
-    add(perf_path);
-    add("record");
-
-    // -o perf.data
-    add("-o");
-    add(data_file_path);
-
-    // -c/f N
-    std::string p_str;
-    if (config.sampling_frequency > 0) {
-      add("-f");
-      add(android::base::StringPrintf("%u", config.sampling_frequency));
-    } else if (config.sampling_period > 0) {
-      add("-c");
-      add(android::base::StringPrintf("%u", config.sampling_period));
-    }
-
-    if (!config.event_config.empty()) {
-      const std::unordered_set<std::string>& supported = GetSupportedPerfCountersInternal();
-      for (const auto& event_set : config.event_config) {
-        if (event_set.events.empty()) {
-          LOG(WARNING) << "Unexpected empty event set";
-          continue;
-        }
-
-        std::ostringstream event_str;
-        bool added = false;
-        for (const std::string& event : event_set.events) {
-          if (supported.find(event) == supported.end()) {
-            LOG(WARNING) << "Event " << event << " is unsupported.";
-            if (config.fail_on_unsupported_events) {
-              return PerfResult::kUnsupportedEvent;
-            }
-            continue;
-          }
-          if (added) {
-            event_str << ',';
-          }
-          event_str << event;
-          added = true;
-        }
-
-        if (!added) {
-          continue;
-        }
-
-        if (event_set.sampling_period > 0) {
-          add("-c");
-          add(std::to_string(event_set.sampling_period));
-        }
-        add(event_set.group ? "--group" : "-e");
-        add(event_str.str());
-      }
-    }
-
-    // -g if desired
-    if (stack_profile_opt != nullptr) {
-      add(stack_profile_opt);
-      add("-m");
-      add("8192");
-    }
-
-    if (config.process < 0) {
-      // system wide profiling
-      add("-a");
-    } else {
-      add("-p");
-      add(std::to_string(config.process));
-    }
-
-    // no need for kernel or other symbols
-    add("--no-dump-kernel-symbols");
-    add("--no-dump-symbols");
-
-    // sleep <duration>
-    add("--duration");
-    add(android::base::StringPrintf("%u", duration));
-
-
-    // Now create the char* buffer.
-    argv_vector.resize(argv_backing.size() + 1, nullptr);
-    std::transform(argv_backing.begin(),
-                   argv_backing.end(),
-                   argv_vector.begin(),
-                   [](const std::string& in) { return in.c_str(); });
-  }
-
-  pid_t pid = fork();
-
-  if (pid == -1) {
-    PLOG(ERROR) << "Fork failed";
-    return PerfResult::kForkFailed;
-  }
-
-  if (pid == 0) {
-    // child
-
-    // Open file to receive stderr/stdout from perf
-    FILE *efp = fopen(perf_stderr_path.c_str(), "w");
-    if (efp) {
-      dup2(fileno(efp), STDERR_FILENO);
-      dup2(fileno(efp), STDOUT_FILENO);
-    } else {
-      PLOG(WARNING) << "unable to open " << perf_stderr_path << " for writing";
-    }
-
-    // record the final command line in the error output file for
-    // posterity/debugging purposes
-    fprintf(stderr, "perf invocation (pid=%d):\n", getpid());
-    for (unsigned i = 0; argv_vector[i] != nullptr; ++i) {
-      fprintf(stderr, "%s%s", i ? " " : "", argv_vector[i]);
-    }
-    fprintf(stderr, "\n");
-
-    // exec
-    execvpe(argv_vector[0], const_cast<char* const*>(argv_vector.data()), envp);
-    fprintf(stderr, "exec failed: %s\n", strerror(errno));
-    exit(1);
-
-  } else {
-    // parent
-
-    // Try to sleep.
-    config.Sleep(duration);
-
-    // We may have been woken up to stop profiling.
-    if (config.ShouldStopProfiling()) {
-      // Send SIGHUP to simpleperf to make it stop.
-      kill(pid, SIGHUP);
-    }
-
-    // Wait for the child, so it's reaped correctly.
-    int st = 0;
-    pid_t reaped = TEMP_FAILURE_RETRY(waitpid(pid, &st, 0));
-
-    auto print_perferr = [&perf_stderr_path]() {
-      std::string tmp;
-      if (android::base::ReadFileToString(perf_stderr_path, &tmp)) {
-        LOG(WARNING) << tmp;
-      } else {
-        PLOG(WARNING) << "Could not read " << perf_stderr_path;
-      }
-    };
-
-    if (reaped == -1) {
-      PLOG(WARNING) << "waitpid failed";
-    } else if (WIFSIGNALED(st)) {
-      if (WTERMSIG(st) == SIGHUP && config.ShouldStopProfiling()) {
-        // That was us...
-        return PerfResult::kOK;
-      }
-      LOG(WARNING) << "perf killed by signal " << WTERMSIG(st);
-      print_perferr();
-    } else if (WEXITSTATUS(st) != 0) {
-      LOG(WARNING) << "perf bad exit status " << WEXITSTATUS(st);
-      print_perferr();
-    } else {
-      return PerfResult::kOK;
-    }
-  }
-
-  return PerfResult::kRecordFailed;
-}
-
-bool FindSupportedPerfCounters(const std::string& perf_path) {
-  const char* argv[] = { perf_path.c_str(), "list", nullptr };
-  char paranoid_env[] = "PERFPROFD_DISABLE_PERF_EVENT_PARANOID_CHANGE=1";
-  char* envp[2] = {paranoid_env, nullptr};
-
-  base::unique_fd link[2];
-  {
-    int link_fd[2];
-
-    if (pipe(link_fd) == -1) {
-      PLOG(ERROR) << "Pipe failed";
-      return false;
-    }
-    link[0].reset(link_fd[0]);
-    link[1].reset(link_fd[1]);
-  }
-
-  pid_t pid = fork();
-
-  if (pid == -1) {
-    PLOG(ERROR) << "Fork failed";
-    return PerfResult::kForkFailed;
-  }
-
-  if (pid == 0) {
-    // Child
-
-    // Redirect stdout and stderr.
-    dup2(link[1].get(), STDOUT_FILENO);
-    dup2(link[1].get(), STDERR_FILENO);
-
-    link[0].reset();
-    link[1].reset();
-
-    // exec
-    execvpe(argv[0], const_cast<char* const*>(argv), envp);
-    PLOG(WARNING) << "exec failed";
-    exit(1);
-    __builtin_unreachable();
-  }
-
-  link[1].reset();
-
-  std::string result;
-  if (!android::base::ReadFdToString(link[0].get(), &result)) {
-    PLOG(WARNING) << perf_path << " list reading failed.";
-  }
-
-  link[0].reset();
-
-  int status_code;
-  if (waitpid(pid, &status_code, 0) == -1) {
-    LOG(WARNING) << "Failed to wait for " << perf_path << " list";
-    return false;
-  }
-
-  if (!WIFEXITED(status_code) || WEXITSTATUS(status_code) != 0) {
-    LOG(WARNING) << perf_path << " list did not exit normally.";
-    return false;
-  }
-
-  std::unordered_set<std::string>& supported = GetSupportedPerfCountersInternal();
-  supported.clear();
-
-  // Could implement something with less memory requirements. But for now this is good
-  // enough.
-  std::vector<std::string> lines = base::Split(result, "\n");
-  for (const std::string& line : lines) {
-    if (line.length() < 2 || line.compare(0, 2, "  ") != 0) {
-      continue;
-    }
-    const size_t comment = line.find('#');
-    const size_t space = line.find(' ', 2);
-    size_t end = std::min(space, comment);
-    if (end != std::string::npos) {
-      // Scan backwards.
-      --end;
-      while (end > 2 && isspace(line[end])) {
-        end--;
-      }
-    }
-    if (end > 2) {
-      supported.insert(line.substr(2, end - 2));
-    }
-  }
-
-  return true;
-}
-
-const std::unordered_set<std::string>& GetSupportedPerfCounters() {
-  return GetSupportedPerfCountersInternal();
-}
-
-}  // namespace perfprofd
-}  // namespace android
diff --git a/perfprofd/perfprofd_perf.h b/perfprofd/perfprofd_perf.h
deleted file mode 100644
index 232ef829..00000000
--- a/perfprofd/perfprofd_perf.h
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
-**
-** Copyright 2018, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-#ifndef SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_PERF_H_
-#define SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_PERF_H_
-
-#include <string>
-#include <unordered_set>
-
-struct Config;
-
-namespace android {
-namespace perfprofd {
-
-
-
-enum PerfResult {
-  kOK,
-  kForkFailed,
-  kRecordFailed,
-  kUnsupportedEvent,
-};
-
-//
-// Invoke "perf record". Return value is PerfResult::kOK for
-// success, or some other error code if something went wrong.
-//
-PerfResult InvokePerf(Config& config,
-                      const std::string &perf_path,
-                      const char *stack_profile_opt,
-                      unsigned duration,
-                      const std::string &data_file_path,
-                      const std::string &perf_stderr_path);
-
-// Prepare the internal list of supported perf counters.
-bool FindSupportedPerfCounters(const std::string& perf_path);
-// Get the list of supported perf counters.
-const std::unordered_set<std::string>& GetSupportedPerfCounters();
-
-}  // namespace perfprofd
-}  // namespace android
-
-#endif  // SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_PERF_H_
diff --git a/perfprofd/perfprofd_record-fwd.h b/perfprofd/perfprofd_record-fwd.h
deleted file mode 100644
index 69725826..00000000
--- a/perfprofd/perfprofd_record-fwd.h
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- *
- * Copyright 2018, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_RECORD_FWD_H_
-#define SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_RECORD_FWD_H_
-
-namespace quipper {
-class PerfDataProto;
-}  // namespace quipper
-
-namespace android {
-namespace perfprofd {
-using PerfprofdRecord = ::quipper::PerfDataProto;
-}  // namespace perfprofd
-}  // namespace android
-
-#endif  // SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_RECORD_FWD_H_
diff --git a/perfprofd/perfprofd_record.proto b/perfprofd/perfprofd_record.proto
deleted file mode 100644
index 1660d5f1..00000000
--- a/perfprofd/perfprofd_record.proto
+++ /dev/null
@@ -1,58 +0,0 @@
-
-syntax = "proto2";
-
-import "perf_data.proto";
-
-option java_package = "com.google.android.perfprofd";
-
-package quipper;
-
-// Symbol info for a shared library without build id.
-message SymbolInfo {
-  // A symbol, stretching the given range of the library.
-  message Symbol {
-    optional string name = 1;
-    optional uint64 name_md5_prefix = 2;
-
-    optional uint64 addr = 3;
-    optional uint64 size = 4;
-  };
-
-  optional string filename = 1;
-  optional uint64 filename_md5_prefix = 2;
-
-  optional uint64 min_vaddr = 3;
-
-  repeated Symbol symbols = 4;
-};
-
-extend PerfDataProto {
-  optional int64 id = 32;
-
-  // Extra symbol info.
-  repeated SymbolInfo symbol_info = 33;
-
-  // Stats inherited from old perf_profile.proto.
-
-  // is device screen on at point when profile is collected?
-  optional bool display_on = 34;
-
-  // system load at point when profile is collected; corresponds
-  // to first value from /proc/loadavg multiplied by 100 then
-  // converted to int32
-  optional int32 sys_load_average = 35;
-
-  // At the point when the profile was collected, was a camera active?
-  optional bool camera_active = 36;
-
-  // At the point when the profile was collected, was the device still booting?
-  optional bool booting = 37;
-
-  // At the point when the profile was collected, was the device plugged into
-  // a charger?
-  optional bool on_charger = 38;
-
-  // CPU utilization measured prior to profile collection (expressed as
-  // 100 minus the idle percentage).
-  optional int32 cpu_utilization = 39;
-};
diff --git a/perfprofd/perfprofd_threaded_handler.h b/perfprofd/perfprofd_threaded_handler.h
deleted file mode 100644
index 76cdd67a..00000000
--- a/perfprofd/perfprofd_threaded_handler.h
+++ /dev/null
@@ -1,198 +0,0 @@
-/*
- *
- * Copyright 2017, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_THREADED_HANDLER_H_
-#define SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_THREADED_HANDLER_H_
-
-#include <chrono>
-#include <condition_variable>
-#include <cstdio>
-#include <cstdlib>
-#include <memory>
-#include <mutex>
-#include <string>
-#include <thread>
-#include <functional>
-
-#include <inttypes.h>
-#include <unistd.h>
-
-#include <android-base/logging.h>
-#include <android-base/stringprintf.h>
-
-#include "perfprofd_record.pb.h"
-
-#include "config.h"
-#include "dropbox.h"
-#include "perfprofdcore.h"
-#include "perfprofd_io.h"
-
-namespace android {
-namespace perfprofd {
-
-class ThreadedConfig : public Config {
- public:
-  void Sleep(size_t seconds) override {
-    if (seconds == 0) {
-      return;
-    }
-    std::unique_lock<std::mutex> guard(mutex_);
-    using namespace std::chrono_literals;
-    cv_.wait_for(guard, seconds * 1s, [&]() { return interrupted_; });
-  }
-  bool ShouldStopProfiling() override {
-    std::unique_lock<std::mutex> guard(mutex_);
-    return interrupted_;
-  }
-
-  void ResetStopProfiling() {
-    std::unique_lock<std::mutex> guard(mutex_);
-    interrupted_ = false;
-  }
-  void StopProfiling() {
-    std::unique_lock<std::mutex> guard(mutex_);
-    interrupted_ = true;
-    cv_.notify_all();
-  }
-
-  bool IsProfilingEnabled() const override {
-    return true;
-  }
-
-  // Operator= to simplify setting the config values. This will retain the
-  // original mutex, condition-variable etc.
-  ThreadedConfig& operator=(const ThreadedConfig& rhs) {
-    // Copy base fields.
-    *static_cast<Config*>(this) = static_cast<const Config&>(rhs);
-
-    return *this;
-  }
-
- private:
-  bool is_profiling = false;
-  std::mutex mutex_;
-  std::condition_variable cv_;
-  bool interrupted_ = false;
-
-  friend class ThreadedHandler;
-};
-
-class ThreadedHandler  {
- public:
-  ThreadedHandler() : cur_config_(new ThreadedConfig()) {}
-  explicit ThreadedHandler(ThreadedConfig* in) : cur_config_(in) {
-    CHECK(cur_config_ != nullptr);
-  }
-
-  virtual ~ThreadedHandler() {}
-
-  template <typename ConfigFn> bool StartProfiling(ConfigFn fn, std::string* error_msg) {
-    std::lock_guard<std::mutex> guard(lock_);
-
-    if (cur_config_->is_profiling) {
-      *error_msg = "Already profiling";
-      return false;
-    }
-    cur_config_->is_profiling = true;
-    cur_config_->ResetStopProfiling();
-
-    fn(*cur_config_);
-
-    HandlerFn handler = GetResultHandler();
-    auto profile_runner = [handler](ThreadedHandler* service) {
-      ProfilingLoop(*service->cur_config_, handler);
-
-      // This thread is done.
-      std::lock_guard<std::mutex> unset_guard(service->lock_);
-      service->cur_config_->is_profiling = false;
-    };
-    std::thread profiling_thread(profile_runner, this);
-    profiling_thread.detach();  // Let it go.
-
-    return true;
-  }
-
-  bool StopProfiling(std::string* error_msg) {
-    std::lock_guard<std::mutex> guard(lock_);
-    if (!cur_config_->is_profiling) {
-      *error_msg = "Not profiling";
-      return false;
-    }
-
-    cur_config_->StopProfiling();
-
-    return true;
-  }
-
- protected:
-  // Handler for ProfilingLoop.
-  virtual bool ResultHandler(android::perfprofd::PerfprofdRecord* encodedProfile,
-                             Config* config) {
-    CHECK(config != nullptr);
-    if (encodedProfile == nullptr) {
-      return false;
-    }
-
-    if (static_cast<ThreadedConfig*>(config)->send_to_dropbox) {
-      std::string error_msg;
-      if (!dropbox::SendToDropbox(encodedProfile, config->destination_directory, &error_msg)) {
-        LOG(WARNING) << "Failed dropbox submission: " << error_msg;
-        return false;
-      }
-      return true;
-    }
-
-    if (encodedProfile == nullptr) {
-      return false;
-    }
-    std::string data_file_path(config->destination_directory);
-    data_file_path += "/perf.data";
-    std::string path = android::base::StringPrintf("%s.encoded.%d", data_file_path.c_str(), seq_);
-    if (!SerializeProtobuf(encodedProfile, path.c_str(), config->compress)) {
-      return false;
-    }
-
-    seq_++;
-    return true;
-  }
-
-  template <typename Fn>
-  void RunOnConfig(Fn& fn) {
-    std::lock_guard<std::mutex> guard(lock_);
-    fn(cur_config_->is_profiling, cur_config_.get());
-  }
-
- private:
-  // Helper for the handler.
-  HandlerFn GetResultHandler() {
-    return HandlerFn(std::bind(&ThreadedHandler::ResultHandler,
-                               this,
-                               std::placeholders::_1,
-                               std::placeholders::_2));
-  }
-
-  std::mutex lock_;
-
-  std::unique_ptr<ThreadedConfig> cur_config_;
-
-  int seq_ = 0;
-};
-
-}  // namespace perfprofd
-}  // namespace android
-
-#endif  // SYSTEM_EXTRAS_PERFPROFD_PERFPROFD_THREADED_HANDLER_H_
diff --git a/perfprofd/perfprofdcore.cc b/perfprofd/perfprofdcore.cc
deleted file mode 100644
index 00ec8a70..00000000
--- a/perfprofd/perfprofdcore.cc
+++ /dev/null
@@ -1,732 +0,0 @@
-/*
-**
-** Copyright 2015, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-#include <assert.h>
-#include <dirent.h>
-#include <errno.h>
-#include <fcntl.h>
-#include <signal.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <sys/stat.h>
-#include <sys/types.h>
-#include <sys/wait.h>
-#include <time.h>
-#include <unistd.h>
-
-#include <memory>
-#include <sstream>
-#include <string>
-
-#include <android-base/file.h>
-#include <android-base/logging.h>
-#include <android-base/macros.h>
-#include <android-base/scopeguard.h>
-#include <android-base/stringprintf.h>
-
-#ifdef __BIONIC__
-#include <android-base/properties.h>
-#endif
-
-#ifdef __ANDROID__
-#include <healthhalutils/HealthHalUtils.h>
-#endif
-
-#include "perfprofd_record.pb.h"
-
-#include "config.h"
-#include "cpuconfig.h"
-#include "perf_data_converter.h"
-#include "perfprofdcore.h"
-#include "perfprofd_io.h"
-#include "perfprofd_perf.h"
-#include "symbolizer.h"
-
-//
-// Perf profiling daemon -- collects system-wide profiles using
-//
-//       simpleperf record -a
-//
-// and encodes them so that they can be uploaded by a separate service.
-//
-
-//......................................................................
-
-using ProtoUniquePtr = std::unique_ptr<android::perfprofd::PerfprofdRecord>;
-
-//
-// Output file from 'perf record'.
-//
-#define PERF_OUTPUT "perf.data"
-
-//
-// This enum holds the results of the "should we profile" configuration check.
-//
-typedef enum {
-
-  // All systems go for profile collection.
-  DO_COLLECT_PROFILE,
-
-  // The selected configuration directory doesn't exist.
-  DONT_PROFILE_MISSING_CONFIG_DIR,
-
-  // Destination directory does not contain the semaphore file that
-  // the perf profile uploading service creates when it determines
-  // that the user has opted "in" for usage data collection. No
-  // semaphore -> no user approval -> no profiling.
-  DONT_PROFILE_MISSING_SEMAPHORE,
-
-  // No perf executable present
-  DONT_PROFILE_MISSING_PERF_EXECUTABLE,
-
-  // We're running in the emulator, perf won't be able to do much
-  DONT_PROFILE_RUNNING_IN_EMULATOR
-
-} CKPROFILE_RESULT;
-
-static bool common_initialized = false;
-
-//
-// Are we running in the emulator? If so, stub out profile collection
-// Starts as uninitialized (-1), then set to 1 or 0 at init time.
-//
-static int running_in_emulator = -1;
-
-//
-// Is this a debug build ('userdebug' or 'eng')?
-//
-static bool is_debug_build = false;
-
-//
-// Random number generator seed (set at startup time).
-//
-static unsigned short random_seed[3];
-
-//
-// Convert a CKPROFILE_RESULT to a string
-//
-static const char *ckprofile_result_to_string(CKPROFILE_RESULT result)
-{
-  switch (result) {
-    case DO_COLLECT_PROFILE:
-      return "DO_COLLECT_PROFILE";
-    case DONT_PROFILE_MISSING_CONFIG_DIR:
-      return "missing config directory";
-    case DONT_PROFILE_MISSING_SEMAPHORE:
-      return "missing semaphore file";
-    case DONT_PROFILE_MISSING_PERF_EXECUTABLE:
-      return "missing 'perf' executable";
-    case DONT_PROFILE_RUNNING_IN_EMULATOR:
-      return "running in emulator";
-    default:
-      return "unknown";
-  }
-}
-
-//
-// Check to see whether we should perform a profile collection
-//
-static CKPROFILE_RESULT check_profiling_enabled(const Config& config)
-{
-  //
-  // Profile collection in the emulator doesn't make sense
-  //
-  assert(running_in_emulator != -1);
-  if (running_in_emulator) {
-    return DONT_PROFILE_RUNNING_IN_EMULATOR;
-  }
-
-  if (!config.IsProfilingEnabled()) {
-    return DONT_PROFILE_MISSING_CONFIG_DIR;
-  }
-
-  // Check for existence of simpleperf/perf executable
-  std::string pp = config.perf_path;
-  if (access(pp.c_str(), R_OK|X_OK) == -1) {
-    LOG(WARNING) << "unable to access/execute " << pp;
-    return DONT_PROFILE_MISSING_PERF_EXECUTABLE;
-  }
-
-  //
-  // We are good to go
-  //
-  return DO_COLLECT_PROFILE;
-}
-
-bool get_booting()
-{
-#ifdef __BIONIC__
-  return android::base::GetBoolProperty("sys.boot_completed", false) != true;
-#else
-  return false;
-#endif
-}
-
-//
-// Constructor takes a timeout (in seconds) and a child pid; If an
-// alarm set for the specified number of seconds triggers, then a
-// SIGKILL is sent to the child. Destructor resets alarm. Example:
-//
-//       pid_t child_pid = ...;
-//       { AlarmHelper h(10, child_pid);
-//         ... = read_from_child(child_pid, ...);
-//       }
-//
-// NB: this helper is not re-entrant-- avoid nested use or
-// use by multiple threads
-//
-class AlarmHelper {
- public:
-  AlarmHelper(unsigned num_seconds, pid_t child)
-  {
-    struct sigaction sigact;
-    assert(child);
-    assert(child_ == 0);
-    memset(&sigact, 0, sizeof(sigact));
-    sigact.sa_sigaction = handler;
-    sigaction(SIGALRM, &sigact, &oldsigact_);
-    child_ = child;
-    alarm(num_seconds);
-  }
-  ~AlarmHelper()
-  {
-    alarm(0);
-    child_ = 0;
-    sigaction(SIGALRM, &oldsigact_, NULL);
-  }
-  static void handler(int, siginfo_t *, void *);
-
- private:
-  struct sigaction oldsigact_;
-  static pid_t child_;
-};
-
-pid_t AlarmHelper::child_;
-
-void AlarmHelper::handler(int, siginfo_t *, void *)
-{
-  LOG(WARNING) << "SIGALRM timeout";
-  kill(child_, SIGKILL);
-}
-
-//
-// This implementation invokes "dumpsys media.camera" and inspects the
-// output to determine if any camera clients are active. NB: this is
-// currently disable (via config option) until the selinux issues can
-// be sorted out. Another possible implementation (not yet attempted)
-// would be to use the binder to call into the native camera service
-// via "ICameraService".
-//
-bool get_camera_active()
-{
-  int pipefds[2];
-  if (pipe2(pipefds, O_CLOEXEC) != 0) {
-    PLOG(ERROR) << "pipe2() failed";
-    return false;
-  }
-  pid_t pid = fork();
-  if (pid == -1) {
-    PLOG(ERROR) << "fork() failed";
-    close(pipefds[0]);
-    close(pipefds[1]);
-    return false;
-  } else if (pid == 0) {
-    // child
-    close(pipefds[0]);
-    dup2(pipefds[1], fileno(stderr));
-    dup2(pipefds[1], fileno(stdout));
-    const char *argv[10];
-    unsigned slot = 0;
-    argv[slot++] = "/system/bin/dumpsys";
-    argv[slot++] = "media.camera";
-    argv[slot++] = nullptr;
-    execvp(argv[0], (char * const *)argv);
-    PLOG(ERROR) << "execvp() failed";
-    return false;
-  }
-  // parent
-  AlarmHelper helper(10, pid);
-  close(pipefds[1]);
-
-  // read output
-  bool have_cam = false;
-  bool have_clients = true;
-  std::string dump_output;
-  bool result = android::base::ReadFdToString(pipefds[0], &dump_output);
-  close(pipefds[0]);
-  if (result) {
-    std::stringstream ss(dump_output);
-    std::string line;
-    while (std::getline(ss,line,'\n')) {
-      if (line.find("Camera module API version:") !=
-          std::string::npos) {
-        have_cam = true;
-      }
-      if (line.find("No camera module available") !=
-          std::string::npos ||
-          line.find("No active camera clients yet") !=
-          std::string::npos) {
-        have_clients = false;
-      }
-    }
-  }
-
-  // reap child (no zombies please)
-  int st = 0;
-  TEMP_FAILURE_RETRY(waitpid(pid, &st, 0));
-  return have_cam && have_clients;
-}
-
-bool get_charging()
-{
-#ifdef __ANDROID__
-  using android::sp;
-  using android::hardware::Return;
-  using android::hardware::health::V2_0::get_health_service;
-  using android::hardware::health::V2_0::HealthInfo;
-  using android::hardware::health::V2_0::IHealth;
-  using android::hardware::health::V2_0::Result;
-
-  sp<IHealth> service = get_health_service();
-  if (service == nullptr) {
-    LOG(ERROR) << "Failed to get health HAL";
-    return false;
-  }
-  Result res = Result::UNKNOWN;
-  HealthInfo val;
-  Return<void> ret =
-      service->getHealthInfo([&](Result out_res, HealthInfo out_val) {
-        res = out_res;
-        val = out_val;
-      });
-  if (!ret.isOk()) {
-    LOG(ERROR) << "Failed to call getChargeStatus on health HAL: " << ret.description();
-    return false;
-  }
-  if (res != Result::SUCCESS) {
-    LOG(ERROR) << "Failed to retrieve charge status from health HAL: result = "
-               << toString(res);
-    return false;
-  }
-  return val.legacy.chargerAcOnline || val.legacy.chargerUsbOnline ||
-         val.legacy.chargerWirelessOnline;
-#else
-  return false;
-#endif
-}
-
-static bool postprocess_proc_stat_contents(const std::string &pscontents,
-                                           long unsigned *idleticks,
-                                           long unsigned *remainingticks)
-{
-  long unsigned usertime, nicetime, systime, idletime, iowaittime;
-  long unsigned irqtime, softirqtime;
-
-  int rc = sscanf(pscontents.c_str(), "cpu  %lu %lu %lu %lu %lu %lu %lu",
-                  &usertime, &nicetime, &systime, &idletime,
-                  &iowaittime, &irqtime, &softirqtime);
-  if (rc != 7) {
-    return false;
-  }
-  *idleticks = idletime;
-  *remainingticks = usertime + nicetime + systime + iowaittime + irqtime + softirqtime;
-  return true;
-}
-
-unsigned collect_cpu_utilization()
-{
-  std::string contents;
-  long unsigned idle[2];
-  long unsigned busy[2];
-  for (unsigned iter = 0; iter < 2; ++iter) {
-    if (!android::base::ReadFileToString("/proc/stat", &contents)) {
-      return 0;
-    }
-    if (!postprocess_proc_stat_contents(contents, &idle[iter], &busy[iter])) {
-      return 0;
-    }
-    if (iter == 0) {
-      sleep(1);
-    }
-  }
-  long unsigned total_delta = (idle[1] + busy[1]) - (idle[0] + busy[0]);
-  long unsigned busy_delta = busy[1] - busy[0];
-  return busy_delta * 100 / total_delta;
-}
-
-static void annotate_encoded_perf_profile(android::perfprofd::PerfprofdRecord* profile,
-                                          const Config& config,
-                                          unsigned cpu_utilization)
-{
-  //
-  // Incorporate cpu utilization (collected prior to perf run)
-  //
-  if (config.collect_cpu_utilization) {
-    profile->SetExtension(quipper::cpu_utilization, cpu_utilization);
-  }
-
-  //
-  // Load average as reported by the kernel
-  //
-  std::string load;
-  double fload = 0.0;
-  if (android::base::ReadFileToString("/proc/loadavg", &load) &&
-      sscanf(load.c_str(), "%lf", &fload) == 1) {
-    int iload = static_cast<int>(fload * 100.0);
-    profile->SetExtension(quipper::sys_load_average, iload);
-  } else {
-    PLOG(ERROR) << "Failed to read or scan /proc/loadavg";
-  }
-
-  //
-  // Device still booting? Camera in use? Plugged into charger?
-  //
-  bool is_booting = get_booting();
-  if (config.collect_booting) {
-    profile->SetExtension(quipper::booting, is_booting);
-  }
-  if (config.collect_camera_active) {
-    profile->SetExtension(quipper::camera_active, is_booting ? false : get_camera_active());
-  }
-  if (config.collect_charging_state) {
-    profile->SetExtension(quipper::on_charger, get_charging());
-  }
-
-  //
-  // Examine the contents of wake_unlock to determine whether the
-  // device display is on or off. NB: is this really the only way to
-  // determine this info?
-  //
-  std::string disp;
-  if (android::base::ReadFileToString("/sys/power/wake_unlock", &disp)) {
-    bool ison = (strstr(disp.c_str(), "PowerManagerService.Display") == 0);
-    profile->SetExtension(quipper::display_on, ison);
-  } else {
-    PLOG(ERROR) << "Failed to read /sys/power/wake_unlock";
-  }
-}
-
-static ProtoUniquePtr encode_to_proto(const std::string &data_file_path,
-                                      const Config& config,
-                                      unsigned cpu_utilization,
-                                      perfprofd::Symbolizer* symbolizer) {
-  //
-  // Open and read perf.data file
-  //
-  ProtoUniquePtr encodedProfile(
-      android::perfprofd::RawPerfDataToAndroidPerfProfile(data_file_path,
-                                                          symbolizer,
-                                                          config.symbolize_everything));
-  if (encodedProfile == nullptr) {
-    return nullptr;
-  }
-
-  // All of the info in 'encodedProfile' is derived from the perf.data file;
-  // here we tack display status, cpu utilization, system load, etc.
-  annotate_encoded_perf_profile(encodedProfile.get(), config, cpu_utilization);
-
-  return encodedProfile;
-}
-
-PROFILE_RESULT encode_to_proto(const std::string &data_file_path,
-                               const char *encoded_file_path,
-                               const Config& config,
-                               unsigned cpu_utilization,
-                               perfprofd::Symbolizer* symbolizer)
-{
-  ProtoUniquePtr encodedProfile = encode_to_proto(data_file_path,
-                                                  config,
-                                                  cpu_utilization,
-                                                  symbolizer);
-
-  //
-  // Issue error if no samples
-  //
-  if (encodedProfile == nullptr || encodedProfile->events_size() == 0) {
-    return ERR_PERF_ENCODE_FAILED;
-  }
-
-  return android::perfprofd::SerializeProtobuf(encodedProfile.get(),
-                                               encoded_file_path,
-                                               config.compress)
-      ? OK_PROFILE_COLLECTION
-      : ERR_WRITE_ENCODED_FILE_FAILED;
-}
-
-//
-// Remove all files in the destination directory during initialization
-//
-static void cleanup_destination_dir(const std::string& dest_dir)
-{
-  DIR* dir = opendir(dest_dir.c_str());
-  if (dir != NULL) {
-    struct dirent* e;
-    while ((e = readdir(dir)) != 0) {
-      if (e->d_name[0] != '.') {
-        std::string file_path = dest_dir + "/" + e->d_name;
-        remove(file_path.c_str());
-      }
-    }
-    closedir(dir);
-  } else {
-    PLOG(WARNING) << "unable to open destination dir " << dest_dir << " for cleanup";
-  }
-}
-
-//
-// Collect a perf profile. Steps for this operation are:
-// - kick off 'perf record'
-// - read perf.data, convert to protocol buf
-//
-static ProtoUniquePtr collect_profile(Config& config)
-{
-  //
-  // Collect cpu utilization if enabled
-  //
-  unsigned cpu_utilization = 0;
-  if (config.collect_cpu_utilization) {
-    cpu_utilization = collect_cpu_utilization();
-  }
-
-  //
-  // Form perf.data file name, perf error output file name
-  //
-  const std::string& destdir = config.destination_directory;
-  std::string data_file_path(destdir);
-  data_file_path += "/";
-  data_file_path += PERF_OUTPUT;
-  std::string perf_stderr_path(destdir);
-  perf_stderr_path += "/perferr.txt";
-
-  //
-  // Remove any existing perf.data file -- if we don't do this, perf
-  // will rename the old file and we'll have extra cruft lying around.
-  //
-  struct stat statb;
-  if (stat(data_file_path.c_str(), &statb) == 0) { // if file exists...
-    if (unlink(data_file_path.c_str())) {          // then try to remove
-      PLOG(WARNING) << "unable to unlink previous perf.data file";
-    }
-  }
-
-  //
-  // The "mpdecision" daemon can cause problems for profile
-  // collection: if it decides to online a CPU partway through the
-  // 'perf record' run, the activity on that CPU will be invisible to
-  // perf, and if it offlines a CPU during the recording this can
-  // sometimes leave the PMU in an unusable state (dmesg errors of the
-  // form "perfevents: unable to request IRQXXX for ...").  To avoid
-  // these issues, if "mpdecision" is running the helper below will
-  // stop the service and then online all available CPUs. The object
-  // destructor (invoked when this routine terminates) will then
-  // restart the service again when needed.
-  //
-  uint32_t duration = config.sample_duration_in_s;
-  bool hardwire = config.hardwire_cpus;
-  uint32_t max_duration = config.hardwire_cpus_max_duration_in_s;
-  bool take_action = (hardwire && duration <= max_duration);
-  HardwireCpuHelper helper(take_action);
-
-  auto scope_guard = android::base::make_scope_guard(
-      [&data_file_path]() { unlink(data_file_path.c_str()); });
-
-  //
-  // Invoke perf
-  //
-  const char *stack_profile_opt =
-      (config.stack_profile ? "-g" : nullptr);
-  const std::string& perf_path = config.perf_path;
-
-  android::perfprofd::PerfResult invoke_res =
-      android::perfprofd::InvokePerf(config,
-                                     perf_path,
-                                     stack_profile_opt,
-                                     duration,
-                                     data_file_path,
-                                     perf_stderr_path);
-  if (invoke_res != android::perfprofd::PerfResult::kOK) {
-    return nullptr;
-  }
-
-  //
-  // Read the resulting perf.data file, encode into protocol buffer, then write
-  // the result to the file perf.data.encoded
-  //
-  std::unique_ptr<perfprofd::Symbolizer> symbolizer;
-  if (config.use_elf_symbolizer) {
-    symbolizer = perfprofd::CreateELFSymbolizer();
-  }
-  return encode_to_proto(data_file_path, config, cpu_utilization, symbolizer.get());
-}
-
-//
-// Assuming that we want to collect a profile every N seconds,
-// randomly partition N into two sub-intervals.
-//
-static void determine_before_after(unsigned &sleep_before_collect,
-                                   unsigned &sleep_after_collect,
-                                   unsigned collection_interval)
-{
-  double frac = erand48(random_seed);
-  sleep_before_collect = (unsigned) (((double)collection_interval) * frac);
-  assert(sleep_before_collect <= collection_interval);
-  sleep_after_collect = collection_interval - sleep_before_collect;
-}
-
-//
-// Set random number generator seed
-//
-static void set_seed(uint32_t use_fixed_seed)
-{
-  unsigned seed = 0;
-  if (use_fixed_seed) {
-    //
-    // Use fixed user-specified seed
-    //
-    seed = use_fixed_seed;
-  } else {
-    //
-    // Randomized seed
-    //
-#ifdef __BIONIC__
-    seed = arc4random();
-#else
-    seed = 12345678u;
-#endif
-  }
-  LOG(INFO) << "random seed set to " << seed;
-  // Distribute the 32-bit seed into the three 16-bit array
-  // elements. The specific values being written do not especially
-  // matter as long as we are setting them to something based on the seed.
-  random_seed[0] = seed & 0xffff;
-  random_seed[1] = (seed >> 16);
-  random_seed[2] = (random_seed[0] ^ random_seed[1]);
-}
-
-void CommonInit(uint32_t use_fixed_seed, const char* dest_dir) {
-  // Children of init inherit an artificially low OOM score -- this is not
-  // desirable for perfprofd (its OOM score should be on par with
-  // other user processes).
-  std::stringstream oomscore_path;
-  oomscore_path << "/proc/" << getpid() << "/oom_score_adj";
-  if (!android::base::WriteStringToFile("0", oomscore_path.str())) {
-    LOG(ERROR) << "unable to write to " << oomscore_path.str();
-  }
-
-  set_seed(use_fixed_seed);
-  if (dest_dir != nullptr) {
-    cleanup_destination_dir(dest_dir);
-  }
-
-#ifdef __BIONIC__
-  running_in_emulator = android::base::GetBoolProperty("ro.kernel.qemu", false);
-  is_debug_build = android::base::GetBoolProperty("ro.debuggable", false);
-#else
-  running_in_emulator = false;
-  is_debug_build = true;
-#endif
-
-  common_initialized = true;
-}
-
-void GlobalInit(const std::string& perf_path) {
-  if (!android::perfprofd::FindSupportedPerfCounters(perf_path)) {
-    LOG(WARNING) << "Could not read supported perf counters.";
-  }
-}
-
-bool IsDebugBuild() {
-  CHECK(common_initialized);
-  return is_debug_build;
-}
-
-template <typename ConfigFn, typename UpdateFn>
-static void ProfilingLoopImpl(ConfigFn config, UpdateFn update, HandlerFn handler) {
-  unsigned iterations = 0;
-  while(config()->main_loop_iterations == 0 ||
-      iterations < config()->main_loop_iterations) {
-    if (config()->ShouldStopProfiling()) {
-      return;
-    }
-
-    // Figure out where in the collection interval we're going to actually
-    // run perf
-    unsigned sleep_before_collect = 0;
-    unsigned sleep_after_collect = 0;
-    determine_before_after(sleep_before_collect,
-                           sleep_after_collect,
-                           config()->collection_interval_in_s);
-    if (sleep_before_collect > 0) {
-      config()->Sleep(sleep_before_collect);
-    }
-
-    if (config()->ShouldStopProfiling()) {
-      return;
-    }
-
-    // Run any necessary updates.
-    update();
-
-    // Check for profiling enabled...
-    CKPROFILE_RESULT ckresult = check_profiling_enabled(*config());
-    if (ckresult != DO_COLLECT_PROFILE) {
-      LOG(INFO) << "profile collection skipped (" << ckprofile_result_to_string(ckresult) << ")";
-    } else {
-      // Kick off the profiling run...
-      LOG(INFO) << "initiating profile collection";
-      ProtoUniquePtr proto = collect_profile(*config());
-      if (proto == nullptr) {
-        LOG(WARNING) << "profile collection failed";
-      }
-
-      // Always report, even a null result.
-      bool handle_result = handler(proto.get(), config());
-      if (handle_result) {
-        LOG(INFO) << "profile collection complete";
-      } else if (proto != nullptr) {
-        LOG(WARNING) << "profile handling failed";
-      }
-    }
-
-    if (config()->ShouldStopProfiling()) {
-      return;
-    }
-
-    if (sleep_after_collect > 0) {
-      config()->Sleep(sleep_after_collect);
-    }
-    iterations += 1;
-  }
-}
-
-void ProfilingLoop(Config& config, HandlerFn handler) {
-  CommonInit(config.use_fixed_seed, nullptr);
-
-  auto config_fn = [&config]() {
-    return &config;;
-  };
-  auto do_nothing = []() {
-  };
-  ProfilingLoopImpl(config_fn, do_nothing, handler);
-}
-
-void ProfilingLoop(std::function<Config*()> config_fn,
-                   std::function<void()> update_fn,
-                   HandlerFn handler) {
-  ProfilingLoopImpl(config_fn, update_fn, handler);
-}
diff --git a/perfprofd/perfprofdcore.h b/perfprofd/perfprofdcore.h
deleted file mode 100644
index fdcc6f7a..00000000
--- a/perfprofd/perfprofdcore.h
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
-**
-** Copyright 2015, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-#ifndef SYSTEM_EXTRAS_PERFPROFD_PERFPROFDCORE_H_
-#define SYSTEM_EXTRAS_PERFPROFD_PERFPROFDCORE_H_
-
-#include <functional>
-#include <memory>
-#include <string>
-
-#include "perfprofd_record-fwd.h"
-
-struct Config;
-
-namespace perfprofd {
-struct Symbolizer;
-}
-
-void CommonInit(uint32_t use_fixed_seed, const char* dest_dir);
-void GlobalInit(const std::string& perf_path);
-
-//
-// This enumeration holds the results of what happened when on an
-// attempted perf profiling run.
-//
-typedef enum {
-
-  // Success
-  OK_PROFILE_COLLECTION,
-
-  // Fork system call failed (lo mem?)
-  ERR_FORK_FAILED,
-
-  // Perf ran but crashed or returned a bad exit status
-  ERR_PERF_RECORD_FAILED,
-
-  // The perf.data encoding process failed somehow
-  ERR_PERF_ENCODE_FAILED,
-
-  // We tried to open the output file perf.data.encoded but the open failed
-  ERR_OPEN_ENCODED_FILE_FAILED,
-
-  // Error while writing perf.data.encoded
-  ERR_WRITE_ENCODED_FILE_FAILED
-} PROFILE_RESULT;
-
-//
-// Given a full path to a perf.data file specified by "data_file_path",
-// read/summarize/encode the contents into a new file specified
-// by "encoded_file_path". Return status indicates whether the operation
-// was successful (either OK_PROFILE_COLLECTION or an error of some sort).
-//
-PROFILE_RESULT encode_to_proto(const std::string &data_file_path,
-                               const char *encoded_file_path,
-                               const Config& config,
-                               unsigned cpu_utilization,
-                               perfprofd::Symbolizer* symbolizer);
-
-using HandlerFn = std::function<bool(android::perfprofd::PerfprofdRecord* proto,
-                                     Config* config)>;
-
-void ProfilingLoop(Config& config, HandlerFn handler);
-void ProfilingLoop(std::function<Config*()> config_fn,
-                   std::function<void()> update_fn,
-                   HandlerFn handler);
-
-//
-// Exposed for unit testing
-//
-extern unsigned collect_cpu_utilization();
-extern bool get_booting();
-extern bool get_charging();
-extern bool get_camera_active();
-
-bool IsDebugBuild();
-
-#endif
diff --git a/perfprofd/perfprofdmain.cc b/perfprofd/perfprofdmain.cc
deleted file mode 100644
index 0f9f53e9..00000000
--- a/perfprofd/perfprofdmain.cc
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
-**
-** Copyright 2015, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-#include <string.h>
-
-#include <android-base/logging.h>
-
-#include "config.h"
-#include "perfprofd_binder.h"
-#include "perfprofd_cmdline.h"
-#include "perfprofdcore.h"
-
-extern int perfprofd_main(int argc, char** argv, Config* config);
-
-int main(int argc, char** argv)
-{
-  if (argc > 1 && strcmp(argv[1], "--binder") == 0) {
-    return android::perfprofd::binder::Main();
-  }
-
-  struct PosixSleepConfig : public Config {
-    void Sleep(size_t seconds) override {
-      sleep(seconds);
-    }
-    bool IsProfilingEnabled() const override {
-      //
-      // Check for existence of semaphore file in config directory
-      //
-      if (access(config_directory.c_str(), F_OK) == -1) {
-        PLOG(WARNING) << "unable to open config directory " << config_directory;
-        return false;
-      }
-
-      // Check for existence of semaphore file
-      std::string semaphore_filepath = config_directory
-          + "/" + SEMAPHORE_FILENAME;
-      if (access(semaphore_filepath.c_str(), F_OK) == -1) {
-        return false;
-      }
-
-      return true;
-    }
-  };
-  PosixSleepConfig config;
-  return perfprofd_main(argc, argv, &config);
-}
diff --git a/perfprofd/quipper_helper.h b/perfprofd/quipper_helper.h
deleted file mode 100644
index d72bd405..00000000
--- a/perfprofd/quipper_helper.h
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * Copyright (C) 2018 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <iterator>
-
-#include "perf_data.pb.h"
-
-namespace android {
-namespace perfprofd {
-namespace quipper {
-
-template<typename Iterator, typename Predicate>
-class FilteredIterator {
- public:
-  using value_type =      typename std::iterator_traits<Iterator>::value_type;
-  using difference_type = typename std::iterator_traits<Iterator>::difference_type;
-  using reference =       typename std::iterator_traits<Iterator>::reference;
-  using pointer =         typename std::iterator_traits<Iterator>::pointer;
-
-  FilteredIterator(const Iterator& begin, const Iterator& end, const Predicate& pred)
-      : iter_(begin), end_(end), pred_(pred) {
-    filter();
-  }
-
-  reference operator*() const {
-    return *iter_;
-  }
-  pointer operator->() const {
-    return std::addressof(*iter_);
-  }
-
-  FilteredIterator& operator++() {
-    ++iter_;
-    filter();
-    return *this;
-  }
-
-  FilteredIterator end() {
-    return FilteredIterator(end_, end_, pred_);
-  }
-
-  bool operator==(const FilteredIterator& rhs) const {
-    return iter_ == rhs.iter_;
-  }
-  bool operator!=(const FilteredIterator& rhs) const {
-    return !(operator==(rhs));
-  }
-
-private:
-  void filter() {
-    while (iter_ != end_ && !pred_(*iter_)) {
-      ++iter_;
-    }
-  }
-
-  Iterator iter_;
-  Iterator end_;
-  Predicate pred_;
-};
-
-template <typename Predicate>
-using EventFilteredIterator = FilteredIterator<
-    decltype(static_cast<::quipper::PerfDataProto*>(nullptr)->events().begin()),
-    Predicate>;
-
-struct CommEventPredicate {
-  bool operator()(const ::quipper::PerfDataProto_PerfEvent& evt) {
-    return evt.has_comm_event();
-  }
-};
-struct CommEventIterator : public EventFilteredIterator<CommEventPredicate> {
-  explicit CommEventIterator(const ::quipper::PerfDataProto& proto)
-      : EventFilteredIterator<CommEventPredicate>(proto.events().begin(),
-                                                  proto.events().end(),
-                                                  CommEventPredicate()) {
-  }
-};
-
-struct MmapEventPredicate {
-  bool operator()(const ::quipper::PerfDataProto_PerfEvent& evt) {
-    return evt.has_mmap_event();
-  }
-};
-struct MmapEventIterator : public EventFilteredIterator<MmapEventPredicate> {
-  explicit MmapEventIterator(const ::quipper::PerfDataProto& proto)
-      : EventFilteredIterator<MmapEventPredicate>(proto.events().begin(),
-                                                  proto.events().end(),
-                                                  MmapEventPredicate()) {
-  }
-};
-
-struct SampleEventPredicate {
-  bool operator()(const ::quipper::PerfDataProto_PerfEvent& evt) {
-    return evt.has_sample_event();
-  }
-};
-struct SampleEventIterator : public EventFilteredIterator<SampleEventPredicate> {
-  explicit SampleEventIterator(const ::quipper::PerfDataProto& proto)
-      : EventFilteredIterator<SampleEventPredicate>(proto.events().begin(),
-                                                    proto.events().end(),
-                                                    SampleEventPredicate()) {
-  }
-};
-
-struct ForkEventPredicate {
-  bool operator()(const ::quipper::PerfDataProto_PerfEvent& evt) {
-    return evt.has_fork_event();
-  }
-};
-struct ForkEventIterator : public EventFilteredIterator<ForkEventPredicate> {
-  explicit ForkEventIterator(const ::quipper::PerfDataProto& proto)
-      : EventFilteredIterator<ForkEventPredicate>(proto.events().begin(),
-                                                  proto.events().end(),
-                                                  ForkEventPredicate()) {
-  }
-};
-
-struct ExitEventPredicate {
-  bool operator()(const ::quipper::PerfDataProto_PerfEvent& evt) {
-    return evt.has_exit_event();
-  }
-};
-struct ExitEventIterator : public EventFilteredIterator<ExitEventPredicate> {
-  explicit ExitEventIterator(const ::quipper::PerfDataProto& proto)
-      : EventFilteredIterator<ExitEventPredicate>(proto.events().begin(),
-                                                  proto.events().end(),
-                                                  ExitEventPredicate()) {
-  }
-};
-
-}  // namespace quipper
-}  // namespace perfprofd
-}  // namespace android
diff --git a/perfprofd/scripts/Android.bp b/perfprofd/scripts/Android.bp
deleted file mode 100644
index 93aed1c8..00000000
--- a/perfprofd/scripts/Android.bp
+++ /dev/null
@@ -1,89 +0,0 @@
-// Copyright (C) 2018 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-python_defaults {
-    name: "perfprofd_python_default",
-    version: {
-        py2: {
-            enabled: true,
-            embedded_launcher: true,
-        },
-        py3: {
-            enabled: false,
-            embedded_launcher: false,
-        },
-    },
-}
-
-python_binary_host {
-    name: "perf_proto_stack",
-    defaults: ["perfprofd_python_default"],
-    main: "perf_proto_stack.py",
-    srcs: [
-        "perf_proto_stack.py",
-        "sorted_collection.py",
-        ":quipper_data_proto",
-        ":perfprofd_record_proto",
-    ],
-    libs: [
-        "python-symbol",
-        // Soong won't add "libprotobuf-python" to the dependencies if
-        // filegroup contains .proto files. So add it here explicitly.
-        "libprotobuf-python",
-    ],
-    proto: {
-        canonical_path_from_root: false,
-        include_dirs: ["external/perf_data_converter/src/quipper"],
-    },
-    required: [ "unwind_symbols" ],
-}
-
-python_binary_host {
-    name: "perf_proto_json2sqlite",
-    defaults: ["perfprofd_python_default"],
-    main: "perf_proto_json2sqlite.py",
-    srcs: [
-        "perf_proto_json2sqlite.py",
-    ],
-}
-
-python_binary_host {
-    name: "perf_proto_flames",
-    defaults: ["perfprofd_python_default"],
-    main: "perf_proto_stack_sqlite_flame.py",
-    srcs: [
-        "perf_proto_stack_sqlite_flame.py",
-    ],
-    libs: [
-        "simpleperf-inferno",
-    ],
-}
-
-python_binary_host {
-    name: "perf_config_proto",
-    defaults: ["perfprofd_python_default"],
-    main: "perf_config_proto.py",
-    srcs: [
-        "perf_config_proto.py",
-        ":perfprofd_config_proto",
-    ],
-    libs: [
-        // Soong won't add "libprotobuf-python" to the dependencies if
-        // filegroup contains .proto files. So add it here explicitly.
-        "libprotobuf-python",
-    ],
-    proto: {
-        canonical_path_from_root: false,
-    },
-}
diff --git a/perfprofd/scripts/perf_config_proto.py b/perfprofd/scripts/perf_config_proto.py
deleted file mode 100644
index 2b374a8c..00000000
--- a/perfprofd/scripts/perf_config_proto.py
+++ /dev/null
@@ -1,193 +0,0 @@
-#!/usr/bin/python
-#
-# Copyright (C) 2017 The Android Open Source Project
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-# Test converter of a Config proto.
-
-# Generate with:
-#  aprotoc -I=system/extras/perfprofd --python_out=system/extras/perfprofd/scripts \
-#      system/extras/perfprofd/binder_interface/perfprofd_config.proto
-#
-# Note: it is necessary to do a '*' import to not have to jump through hoops
-#       with reflective instantiation.
-from perfprofd_config_pb2 import *
-
-# Necessary for introspection.
-from google.protobuf.descriptor import FieldDescriptor
-
-import sys
-
-PROTO_FIELD_TYPE_NAMES = {
-    FieldDescriptor.TYPE_DOUBLE: "double",
-    FieldDescriptor.TYPE_FLOAT: "float",
-    FieldDescriptor.TYPE_INT64: "int64",
-    FieldDescriptor.TYPE_UINT64: "uint64",
-    FieldDescriptor.TYPE_INT32: "int32",
-    FieldDescriptor.TYPE_FIXED64: "fixed64",
-    FieldDescriptor.TYPE_FIXED32: "fixed32",
-    FieldDescriptor.TYPE_BOOL: "bool",
-    FieldDescriptor.TYPE_STRING: "string",
-    FieldDescriptor.TYPE_GROUP: "group",
-    FieldDescriptor.TYPE_MESSAGE: "message",
-    FieldDescriptor.TYPE_BYTES: "bytes",
-    FieldDescriptor.TYPE_UINT32: "uint32",
-    FieldDescriptor.TYPE_ENUM: "enum",
-    FieldDescriptor.TYPE_SFIXED32: "sfixed32",
-    FieldDescriptor.TYPE_SFIXED64: "sfixed64",
-    FieldDescriptor.TYPE_SINT32: "sint32",
-    FieldDescriptor.TYPE_SINT64: "sint64",
-}
-def get_type_string(proto_field_type):
-    if proto_field_type in PROTO_FIELD_TYPE_NAMES:
-        return PROTO_FIELD_TYPE_NAMES[proto_field_type]
-    return "unknown type"
-
-
-def read_message(msg_descriptor, indent):
-    istr = ' ' * indent
-    print('%s%s' % (istr, msg_descriptor.name))
-    # Create an instance
-    instance = globals()[msg_descriptor.name]()
-
-    # Fill fields.
-
-    primitive_fields = [None]
-    message_fields = [None]
-    for field in msg_descriptor.fields:
-        if field.type == FieldDescriptor.TYPE_MESSAGE:
-            message_fields.append(field)
-        else:
-            primitive_fields.append(field)
-
-    def table_loop(fields, field_fn):
-        while True:
-            # Print selection table
-            maxlen = len(str(len(fields) - 1))
-            def pad_index(key):
-                while len(key) < maxlen:
-                    key = ' ' + key
-                return key
-
-            for i in xrange(1, len(fields)):
-                print('%s%s: %s' % (istr, pad_index(str(i)), fields[i].name))
-            print('%s%s: done' % (istr, pad_index('0')))
-            print('%s%s: end' % (istr, pad_index('!')))
-
-            sel = raw_input('%s ? ' % (istr))
-            if sel == '!':
-                # Special-case input, end argument collection.
-                return False
-
-            try:
-                sel_int = int(sel)
-                if sel_int == 0:
-                    return True
-
-                if sel_int > 0 and sel_int < len(fields):
-                    field = fields[sel_int]
-                    if not field_fn(field):
-                        return False
-                else:
-                    print('Not a valid input (%d)!' % (sel_int))
-                    continue
-            except:
-                print('Not a valid input! (%s, %s)' % (sel, str(sys.exc_info()[0])))
-                continue
-
-#    # 1) Non-message-type fields.
-    if len(primitive_fields) > 1:
-        print('%s(Primitives)' % (istr))
-
-        def primitive_fn(field):
-            input = raw_input('%s  -> %s (%s): ' % (istr, field.name, get_type_string(field.type)))
-            if input == '':
-                # Skip this field
-                return True
-            if input == '!':
-                # Special-case input, end argument collection.
-                return False
-
-            # Simplification: assume ints or bools or strings, but not floats
-            if field.type == FieldDescriptor.TYPE_BOOL:
-                input = input.lower()
-                set_val = True if input == 'y' or input == 'true' or input == '1' else False
-            elif field.type == FieldDescriptor.TYPE_STRING:
-                set_val = input
-            else:
-                try:
-                    set_val = int(input)
-                except:
-                    print('Could not parse input as integer!')
-                    return True
-            if field.label == FieldDescriptor.LABEL_REPEATED:
-                getattr(instance, field.name).extend([set_val])
-            else:
-                setattr(instance, field.name, set_val)
-            return True
-
-        if not table_loop(primitive_fields, primitive_fn):
-            return (instance, False)
-
-    # 2) Message-type fields.
-    if len(message_fields) > 1:
-        print('%s(Nested messages)' % (istr))
-
-        def message_fn(field):
-            sub_msg, cont = read_message(field.message_type, indent + 4)
-            if sub_msg is not None:
-                if field.label == FieldDescriptor.LABEL_REPEATED:
-                    # Repeated field, use extend.
-                    getattr(instance, field.name).extend([sub_msg])
-                else:
-                    # Singular field, copy into.
-                    getattr(instance, field.name).CopyFrom(sub_msg)
-            return cont
-
-        if not table_loop(message_fields, message_fn):
-            return (instance, False)
-
-    return (instance, True)
-
-
-def collect_and_write(filename):
-    config, _ = read_message(ProfilingConfig.DESCRIPTOR, 0)
-
-    if config is not None:
-        with open(filename, "wb") as f:
-            f.write(config.SerializeToString())
-
-
-def read_and_print(filename):
-    config = ProfilingConfig()
-
-    with open(filename, "rb") as f:
-        config.ParseFromString(f.read())
-
-    print config
-
-
-def print_usage():
-    print('Usage: python perf_config_proto.py (read|write) filename')
-
-
-if __name__ == "__main__":
-    if len(sys.argv) < 3:
-        print_usage()
-    elif sys.argv[1] == 'read':
-        read_and_print(sys.argv[2])
-    elif sys.argv[1] == 'write':
-        collect_and_write(sys.argv[2])
-    else:
-        print_usage()
diff --git a/perfprofd/scripts/perf_proto_json2sqlite.py b/perfprofd/scripts/perf_proto_json2sqlite.py
deleted file mode 100644
index b0d74c8b..00000000
--- a/perfprofd/scripts/perf_proto_json2sqlite.py
+++ /dev/null
@@ -1,167 +0,0 @@
-#!/usr/bin/python
-#
-# Copyright (C) 2018 The Android Open Source Project
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import argparse
-import itertools
-import json
-import sqlite3
-
-
-class SqliteWriter(object):
-    def __init__(self):
-        self.sample_count = 0
-        self.dso_map = {}
-        self.pid_map = {}
-        self.tid_map = {}
-        self.symbol_map = {}
-
-    def open(self, out):
-        self._conn = sqlite3.connect(out)
-        self._c = self._conn.cursor()
-        # Ensure tables exist
-        # The sample replicates pid and tid.
-        try:
-            self._c.execute('''CREATE TABLE pids (id integer PRIMARY KEY AUTOINCREMENT,
-                                                  name text)''')
-            self._c.execute('''CREATE TABLE tids (id integer PRIMARY KEY AUTOINCREMENT,
-                                                  name text)''')
-            self._c.execute('''CREATE TABLE syms (id integer PRIMARY KEY AUTOINCREMENT,
-                                                  name text)''')
-            self._c.execute('''CREATE TABLE dsos (id integer PRIMARY KEY AUTOINCREMENT,
-                                                  name text)''')
-            self._c.execute('''CREATE TABLE samples (id integer PRIMARY KEY AUTOINCREMENT,
-                                                     pid_id int not null,
-                                                     tid_id int not null)
-                                                     ''')
-            self._c.execute('''CREATE TABLE stacks (sample_id int not null,
-                                                    depth int not null,
-                                                    dso_id int not null,
-                                                    sym_id int not null,
-                                                    offset int not null,
-                                                    primary key (sample_id, depth))
-                                                    ''')
-        except sqlite3.OperationalError:
-            pass  # ignore
-
-    def close(self):
-        self._conn.commit()
-        self._conn.close()
-
-    def insert_into_tmp_or_get(self, name, table_dict, table_dict_tmp):
-        if name in table_dict:
-            return table_dict[name]
-        if name in table_dict_tmp:
-            return table_dict_tmp[name]
-        index = len(table_dict) + len(table_dict_tmp)
-        table_dict_tmp[name] = index
-        return index
-
-    def prepare(self):
-        self.dso_tmp_map = {}
-        self.pid_tmp_map = {}
-        self.tid_tmp_map = {}
-        self.symbol_tmp_map = {}
-        self.samples_tmp_list = []
-        self.stacks_tmp_list = []
-
-    def write_sqlite_index_table(self, table_dict, table_name):
-        for key, value in table_dict.iteritems():
-            self._c.execute("insert into {tn} values (?,?)".format(tn=table_name), (value, key))
-
-    def flush(self):
-        self.write_sqlite_index_table(self.pid_tmp_map, 'pids')
-        self.write_sqlite_index_table(self.tid_tmp_map, 'tids')
-        self.write_sqlite_index_table(self.dso_tmp_map, 'dsos')
-        self.write_sqlite_index_table(self.symbol_tmp_map, 'syms')
-
-        for sample in self.samples_tmp_list:
-            self._c.execute("insert into samples values (?,?,?)", sample)
-        for stack in self.stacks_tmp_list:
-            self._c.execute("insert into stacks values (?,?,?,?,?)", stack)
-
-        self.pid_map.update(self.pid_tmp_map)
-        self.tid_map.update(self.tid_tmp_map)
-        self.dso_map.update(self.dso_tmp_map)
-        self.symbol_map.update(self.symbol_tmp_map)
-
-        self.dso_tmp_map = {}
-        self.pid_tmp_map = {}
-        self.tid_tmp_map = {}
-        self.symbol_tmp_map = {}
-        self.samples_tmp_list = []
-        self.stacks_tmp_list = []
-
-    def add_sample(self, sample, tid_name_map):
-        sample_id = self.sample_count
-        self.sample_count = self.sample_count + 1
-
-        def get_name(pid, name_map):
-            if pid in name_map:
-                return name_map[pid]
-            pid_str = str(pid)
-            if pid_str in name_map:
-                return name_map[pid_str]
-            if pid == 0:
-                return "[kernel]"
-            return "[unknown]"
-
-        pid_name = get_name(sample[0], tid_name_map)
-        pid_id = self.insert_into_tmp_or_get(pid_name, self.pid_map, self.pid_tmp_map)
-        tid_name = get_name(sample[1], tid_name_map)
-        tid_id = self.insert_into_tmp_or_get(tid_name, self.tid_map, self.tid_tmp_map)
-
-        self.samples_tmp_list.append((sample_id, pid_id, tid_id))
-
-        stack_depth = 0
-        for entry in sample[2]:
-            sym_id = self.insert_into_tmp_or_get(entry[0], self.symbol_map, self.symbol_tmp_map)
-            dso = entry[2]
-            if dso is None:
-                dso = "None"
-            dso_id = self.insert_into_tmp_or_get(dso, self.dso_map, self.dso_tmp_map)
-
-            self.stacks_tmp_list.append((sample_id, stack_depth, dso_id, sym_id, entry[1]))
-
-            stack_depth = stack_depth + 1
-
-
-if __name__ == "__main__":
-    parser = argparse.ArgumentParser(description='''Process a set of perfprofd JSON files produced
-                                                    by perf_proto_stack.py into SQLite database''')
-
-    parser.add_argument('file', help='JSON files to parse and combine', metavar='file', nargs='+')
-
-    parser.add_argument('--sqlite-out', help='SQLite database output', type=str,
-                        default='sqlite.db')
-
-    args = parser.parse_args()
-    if args is not None:
-        sql_out = SqliteWriter()
-        sql_out.open(args.sqlite_out)
-        sql_out.prepare()
-
-        for f in args.file:
-            print 'Processing %s' % (f)
-            fp = open(f, 'r')
-            data = json.load(fp)
-            fp.close()
-
-            for sample in data['samples']:
-                sql_out.add_sample(sample, data['names'])
-
-            sql_out.flush()
-
-        sql_out.close()
diff --git a/perfprofd/scripts/perf_proto_stack.py b/perfprofd/scripts/perf_proto_stack.py
deleted file mode 100644
index 2b0c3107..00000000
--- a/perfprofd/scripts/perf_proto_stack.py
+++ /dev/null
@@ -1,576 +0,0 @@
-#!/usr/bin/python
-#
-# Copyright (C) 2017 The Android Open Source Project
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-# Super simplistic printer of a perfprofd output proto. Illustrates
-# how to parse and traverse a perfprofd output proto in Python.
-
-# This relies on libunwindstack's unwind_symbol. Build with
-#   mmma system/core/libunwindstack
-
-import argparse
-from datetime import datetime
-import itertools
-import json
-import logging
-from multiprocessing.dummy import Pool as ThreadPool
-import os.path
-from sorted_collection import SortedCollection
-import subprocess
-from threading import Timer
-
-# Generate with:
-#  aprotoc -I=external/perf_data_converter/src/quipper \
-#      --python_out=system/extras/perfprofd/scripts \
-#      external/perf_data_converter/src/quipper/perf_data.proto
-#  aprotoc -I=external/perf_data_converter/src/quipper -I=system/extras/perfprofd \
-#      --python_out=system/extras/perfprofd/scripts \
-#      system/extras/perfprofd/perfprofd_record.proto
-import perfprofd_record_pb2
-import perf_data_pb2
-
-# Make sure that symbol is on the PYTHONPATH, e.g., run as
-# PYTHONPATH=$PYTHONPATH:$ANDROID_BUILD_TOP/development/scripts python ...
-import symbol
-from symbol import SymbolInformation
-
-logging.basicConfig(format='%(message)s')
-
-# This is wrong. But then the symbol module is a bad quagmire.
-# TODO: Check build IDs.
-symbol.SetAbi(["ABI: 'arm64'"])
-
-
-class MmapState(object):
-
-    def __init__(self):
-        self._list = SortedCollection((), lambda x: x[0])
-
-    def add_map(self, start, length, pgoff, name):
-        map_tuple = (start, length, pgoff, name)
-        self._list.insert(map_tuple)
-
-    def find(self, addr):
-        try:
-            map_tuple = self._list.find_le(addr)
-            if addr < map_tuple[0] + map_tuple[1]:
-                return map_tuple
-            return None
-        except ValueError:
-            return None
-
-    def copy(self):
-        ret = MmapState()
-        ret._list = self._list.copy()
-        return ret
-
-    def __str__(self):
-        return 'MmapState: ' + self._list.__str__()
-
-    def __repr__(self):
-        return self.__str__()
-
-
-class SymbolMap(object):
-    def __init__(self, min_v):
-        self._list = SortedCollection((), lambda x: x[0])
-        self._min_vaddr = min_v
-
-    def add_symbol(self, start, length, name):
-        tuple = (start, length, name)
-        self._list.insert(tuple)
-
-    def find(self, addr):
-        try:
-            tuple = self._list.find_le(addr)
-            if addr < tuple[0] + tuple[1]:
-                return tuple[2]
-            return None
-        except ValueError:
-            return None
-
-    def copy(self):
-        ret = SymbolMap()
-        ret._list = self._list.copy()
-        return ret
-
-    def __str__(self):
-        return "SymbolMap: " + self._list.__str__()
-
-    def __repr__(self):
-        return self.__str__()
-
-
-def intern_uni(u):
-    return intern(u.encode('ascii', 'replace'))
-
-
-def collect_tid_names(perf_data):
-    tid_name_map = {}
-    for event in perf_data.events:
-        if event.HasField('comm_event'):
-            tid_name_map[event.comm_event.tid] = intern_uni(event.comm_event.comm)
-    return tid_name_map
-
-
-def create_symbol_maps(profile):
-    symbol_maps = {}
-
-    for si in profile.Extensions[perfprofd_record_pb2.symbol_info]:
-        map = SymbolMap(si.min_vaddr)
-        symbol_maps[si.filename] = map
-        for sym in si.symbols:
-            map.add_symbol(sym.addr, sym.size, intern_uni(sym.name))
-    return symbol_maps
-
-
-def update_mmap_states(event, state_map):
-    if event.HasField('mmap_event'):
-        mmap_event = event.mmap_event
-        # Skip kernel stuff.
-        if mmap_event.tid == 0:
-            return
-        # Create new map, if necessary.
-        if mmap_event.pid not in state_map:
-            state_map[mmap_event.pid] = MmapState()
-        state_map[mmap_event.pid].add_map(mmap_event.start, mmap_event.len, mmap_event.pgoff,
-                                          intern_uni(mmap_event.filename))
-    elif event.HasField('fork_event'):
-        fork_event = event.fork_event
-        # Skip threads
-        if fork_event.pid == fork_event.ppid:
-            return
-
-        if fork_event.ppid not in state_map:
-            logging.warn("fork from %d without map", fork_event.ppid)
-            return
-        state_map[fork_event.pid] = state_map[fork_event.ppid].copy()
-
-
-skip_dso = set()
-vaddr = {}
-
-
-def find_vaddr(vaddr_map, filename):
-    if filename in vaddr_map:
-        return vaddr_map[filename]
-
-    path = "%s/%s" % (symbol.SYMBOLS_DIR, filename)
-    if not os.path.isfile(path):
-        logging.warn('Cannot find %s for min_vaddr', filename)
-        vaddr_map[filename] = 0
-        return 0
-
-    try:
-        # Use "-W" to have single-line format.
-        res = subprocess.check_output(['readelf', '-lW', path])
-        lines = res.split("\n")
-        reading_headers = False
-        min_vaddr = None
-
-        def min_fn(x, y):
-            return y if x is None else min(x, y)
-        # Using counting loop for access to next line.
-        for i in range(0, len(lines) - 1):
-            line = lines[i].strip()
-            if reading_headers:
-                if line == "":
-                    # Block is done, won't find anything else.
-                    break
-                if line.startswith("LOAD"):
-                    # Look at the current line to distinguish 32-bit from 64-bit
-                    line_split = line.split()
-                    if len(line_split) >= 8:
-                        if " R E " in line:
-                            # Found something expected. So parse VirtAddr.
-                            try:
-                                min_vaddr = min_fn(min_vaddr, int(line_split[2], 0))
-                            except ValueError:
-                                pass
-                    else:
-                        logging.warn('Could not parse readelf line %s', line)
-            else:
-                if line.strip() == "Program Headers:":
-                    reading_headers = True
-
-        if min_vaddr is None:
-            min_vaddr = 0
-        logging.debug("min_vaddr for %s is %d", filename, min_vaddr)
-        vaddr_map[filename] = min_vaddr
-    except subprocess.CalledProcessError:
-        logging.warn('Error finding min_vaddr for %s', filename)
-
-        vaddr_map[filename] = 0
-    return vaddr_map[filename]
-
-
-unwind_symbols_cache = {}
-unwind_symbols_warn_missing_cache = set()
-
-
-def run_unwind_symbols(filename, offset_hex):
-    path = "%s/%s" % (symbol.SYMBOLS_DIR, filename)
-    if not os.path.isfile(path):
-        if path not in unwind_symbols_warn_missing_cache:
-            logging.warn('Cannot find %s for unwind_symbols', filename)
-            unwind_symbols_warn_missing_cache.add(path)
-        return None
-
-    if (path, offset_hex) in unwind_symbols_cache:
-        pair = unwind_symbols_cache[(path, offset_hex)]
-        if pair is None:
-            return None
-        return [(pair[0], pair[1], filename)]
-
-    try:
-        res = subprocess.check_output(['unwind_symbols', path, offset_hex])
-        lines = res.split("\n")
-        for line in lines:
-            if line.startswith('<0x'):
-                parts = line.split(' ', 1)
-                if len(parts) == 2:
-                    # Get offset, too.
-                    offset = 0
-                    plus_index = parts[0].find('>+')
-                    if plus_index > 0:
-                        offset_str = parts[0][plus_index + 2:-1]
-                        try:
-                            offset = int(offset_str)
-                        except ValueError:
-                            logging.warn('error parsing offset from %s', parts[0])
-
-                    # TODO C++ demangling necessary.
-                    logging.debug('unwind_symbols: %s %s -> %s +%d', filename, offset_hex, parts[1],
-                                  offset)
-                    sym = intern(parts[1])
-                    unwind_symbols_cache[(path, offset_hex)] = (sym, offset)
-                    return [(sym, offset, filename)]
-    except subprocess.CalledProcessError:
-        logging.warn('Failed running unwind_symbols for %s', filename)
-        unwind_symbols_cache[(path, offset_hex)] = None
-        return None
-
-
-def decode_with_symbol_lib(name, addr_rel_hex):
-    info = SymbolInformation(name, addr_rel_hex)
-    # As-is, only info[0] (inner-most inlined function) is recognized.
-    (source_symbol, source_location, object_symbol_with_offset) = info[0]
-
-    def parse_symbol_lib_output(s):
-        i = s.rfind('+')
-        if i > 0:
-            try:
-                off = int(s[i + 1:])
-                return (s[0:i], off)
-            except ValueError:
-                pass
-        return (s, 0)
-
-    ret = []
-
-    if object_symbol_with_offset is not None:
-        pair = parse_symbol_lib_output(object_symbol_with_offset)
-        ret.append((intern(pair[0]), pair[1], name))
-
-    if source_symbol is not None:
-        iterinfo = iter(info)
-        next(iterinfo)
-        for (sym_inlined, loc_inlined, _) in iterinfo:
-            # TODO: Figure out what's going on here:
-            if sym_inlined is not None:
-                pair = parse_symbol_lib_output(sym_inlined)
-                ret.insert(0, (intern(pair[0]), pair[1], name))
-    if len(ret) > 0:
-        return ret
-    return None
-
-
-def decode_addr(addr, mmap_state, device_symbols):
-    """Try to decode the given address against the current mmap table and device symbols.
-
-    First, look up the address in the mmap state. If none is found, use a simple address
-    heuristic to guess kernel frames on 64-bit devices.
-
-    Next, check on-device symbolization for a hit.
-
-    Last, try to symbolize against host information. First try the symbol module. However,
-    as it is based on addr2line, it will not work for pure-gnu_debugdata DSOs (e.g., ART
-    preopt artifacts). For that case, use libunwindstack's unwind_symbols.
-    """
-
-    map = mmap_state.find(addr)
-    if map is None:
-        # If it looks large enough, assume it's from
-        # the kernel.
-        if addr > 18000000000000000000:
-            return [("[kernel]", 0, "[kernel]")]
-        return [("%d (no mapped segment)" % addr, 0, None)]
-    name = map[3]
-    logging.debug('%d is %s (%d +%d)', addr, name, map[0], map[1])
-
-    # Once relocation packer is off, it would be:
-    #   offset = addr - map.start + map.pgoff
-    # Right now it is
-    #   offset = addr - map.start (+ min_vaddr)
-    # Note that on-device symbolization doesn't include min_vaddr but
-    # does include pgoff.
-    offset = addr - map[0]
-
-    if name in device_symbols:
-        offset = offset + map[2]
-        symbol = device_symbols[name].find(offset)
-        if symbol is None:
-            return [("%s (missing on-device symbol)" % (name), offset, name)]
-        else:
-            # TODO: Should we change the format?
-            return [(symbol, 0, name)]
-    offset = offset + find_vaddr(vaddr, name)
-    if (name, offset) in skip_dso:
-        # We already failed, skip symbol finding.
-        return [(name, offset, name)]
-    else:
-        addr_rel_hex = intern("%x" % offset)
-        ret = decode_with_symbol_lib(name, addr_rel_hex)
-        if ret is not None and len(ret) != 0:
-            # Addr2line may report oatexec+xyz. Let unwind_symbols take care of that.
-            if len(ret) != 1 or ret[0][0] != 'oatexec':
-                logging.debug('Got result from symbol module: %s', str(ret))
-                return ret
-        # Try unwind_symbols
-        ret = run_unwind_symbols(name, addr_rel_hex)
-        if ret is not None and len(ret) != 0:
-            return ret
-        logging.warn("Failed to find symbol for %s +%d (%d)", name, offset, addr)
-        # Remember the fail.
-        skip_dso.add((name, offset))
-        return [(name, offset, name)]
-
-
-def print_sample(sample, tid_name_map):
-    if sample[0] in tid_name_map:
-        pid_name = "%s (%d)" % (tid_name_map[sample[0]], sample[0])
-    elif sample[0] == 0:
-        pid_name = "kernel (0)"
-    else:
-        pid_name = "unknown (%d)" % (sample[0])
-
-    if sample[1] in tid_name_map:
-        tid_name = "%s (%d)" % (tid_name_map[sample[1]], sample[1])
-    elif sample[1] == 0:
-        tid_name = "kernel (0)"
-    else:
-        tid_name = "unknown (%d)" % (sample[1])
-    print " %s - %s:" % (pid_name, tid_name)
-
-    for sym in sample[2]:
-        print "   %s +%d (%s)" % (sym[0], sym[1], sym[2])
-
-
-def print_samples(samples, tid_name_map):
-    for sample in samples:
-        print_sample(sample, tid_name_map)
-
-
-def symbolize_events(perf_data, device_symbols, tid_name_map, printSamples=False,
-                     removeKernelTop=False):
-    samples = []
-    mmap_states = {}
-    for event in perf_data.events:
-        update_mmap_states(event, mmap_states)
-        if event.HasField('sample_event'):
-            sample_ev = event.sample_event
-            # Handle sample.
-            new_sample = None
-            if sample_ev.pid in mmap_states:
-                mmap_state = mmap_states[sample_ev.pid]
-                ip_sym = decode_addr(sample_ev.ip, mmap_state, device_symbols)
-                stack = ip_sym
-                for cc_ip in sample_ev.callchain:
-                    cc_sym = decode_addr(cc_ip, mmap_state, device_symbols)
-                    stack.extend(cc_sym)
-                if removeKernelTop:
-                    while len(stack) > 1 and stack[0][0] == "[kernel]":
-                        stack.pop(0)
-                new_sample = (sample_ev.pid, sample_ev.tid, stack)
-            else:
-                # Handle kernel symbols specially.
-                if sample_ev.pid == 0:
-                    samples.append((0, sample_ev.tid, [("[kernel]", 0, "[kernel]")]))
-                elif sample_ev.pid in tid_name_map:
-                    samples.append((sample_ev.pid, sample_ev.tid, [(tid_name_map[sample_ev.pid], 0,
-                                                                    None)]))
-                else:
-                    samples.append((sample_ev.pid, sample_ev.tid, [("[unknown]", 0, None)]))
-            if new_sample is not None:
-                samples.append(new_sample)
-                if printSamples:
-                    print_sample(new_sample, tid_name_map)
-    return samples
-
-
-def count_key_reduce_function(x, y, key_fn):
-    key = key_fn(y)
-    if key not in x:
-        x[key] = 0
-    x[key] += 1
-    return x
-
-
-def print_histogram(samples, reduce_key_fn, label_key_fn, size):
-    # Create a sorted list of top samples.
-    sorted_count_list = sorted(
-        reduce(lambda x, y: count_key_reduce_function(x, y, reduce_key_fn), samples, {}).
-        iteritems(),
-        cmp=lambda x, y: cmp(x[1], y[1]),
-        reverse=True)
-    sorted_count_topX = list(itertools.islice(sorted_count_list, size))
-
-    # Print top-size samples.
-    print 'Histogram top-%d:' % (size)
-    for i in xrange(0, len(sorted_count_topX)):
-        print '  %d: %s (%s)' % (i + 1, label_key_fn(sorted_count_topX[i][0]),
-                                 sorted_count_topX[i][1])
-
-
-def get_name(pid, tid_name_map):
-    if pid in tid_name_map:
-        return tid_name_map[pid]
-    if pid == 0:
-        return "[kernel]"
-    return "[unknown]"
-
-
-def create_cmd(args, f):
-    ret = ['python', '-u', 'system/extras/perfprofd/scripts/perf_proto_stack.py']
-    if args.syms is not None:
-        ret.extend(['--syms', args.syms[0]])
-    if args.print_samples is not None:
-        ret.append('--print-samples')
-    if args.skip_kernel_syms is not None:
-        ret.append('--skip-kernel-syms')
-    if args.print_pid_histogram is not None:
-        ret.append('--print-pid-histogram')
-    if args.print_sym_histogram is not None:
-        ret.append('--print-sym-histogram')
-    if args.print_dso_histogram is not None:
-
-        ret.append('--print-dso-histogram')
-    ret.extend(['--json-out', '%s.json' % (f)])
-    ret.append(f)
-    return ret
-
-
-def run_cmd(x):
-
-    args = x[0]
-    f = x[1]
-    cmd = create_cmd(args, f)
-    logging.warn('Running on %s', f)
-    success = False
-    logging.debug('%r', cmd)
-    err_out = open('%s.err' % (f), 'w')
-
-    def kill(process):
-        process.kill()
-    start = datetime.now()
-
-    p = subprocess.Popen(cmd, stderr=err_out)
-    kill_timer = Timer(3600, kill, [p])
-    try:
-        kill_timer.start()
-        p.communicate()
-        success = True
-
-    finally:
-        kill_timer.cancel()
-    err_out.close()
-    end = datetime.now()
-    logging.warn('Ended %s (%s)', f, str(end - start))
-    return '%s: %r' % (f, success)
-
-
-def parallel_runner(args):
-    pool = ThreadPool(args.parallel)
-    map_args = map(lambda f: (args, f), args.file)
-
-    result = pool.map(run_cmd, map_args)
-    pool.close()
-    pool.join()
-    print result
-
-
-def run(args):
-    if args.syms is not None:
-        symbol.SYMBOLS_DIR = args.syms[0]
-    print_symbols = args.print_samples is not None
-    skip_kernel_syms = args.skip_kernel_syms is not None
-
-    # TODO: accept argument for parsing.
-    file = open(args.file[0], 'rb')
-    data = file.read()
-
-    file.close()
-
-    profile = perf_data_pb2.PerfDataProto()
-    # PerfprofdRecord()
-    profile.ParseFromString(data)
-
-    perf_data = profile
-
-    print "Stats: ", perf_data.stats
-
-    tid_name_map = collect_tid_names(perf_data)
-    symbol_maps = create_symbol_maps(profile)
-
-    samples = symbolize_events(perf_data, symbol_maps, tid_name_map, printSamples=print_symbols,
-                               removeKernelTop=skip_kernel_syms)
-
-    if args.print_pid_histogram is not None:
-        print_histogram(samples, lambda x: x[0], lambda x: get_name(x, tid_name_map), 25)
-    if args.print_sym_histogram is not None:
-        print_histogram(samples, lambda x: x[2][0][0], lambda x: x, 100)
-    if args.print_dso_histogram is not None:
-        print_histogram(samples, lambda x: x[2][0][2], lambda x: x, 25)
-
-    if args.json_out is not None:
-        json_file = open(args.json_out[0], 'w')
-        json_data = {'samples': samples, 'names': tid_name_map}
-        json.dump(json_data, json_file)
-        json_file.close()
-
-
-if __name__ == "__main__":
-    parser = argparse.ArgumentParser(description='Process a perfprofd record.')
-
-    parser.add_argument('file', help='proto file to parse', metavar='file', nargs='+')
-    parser.add_argument('--syms', help='directory for symbols', nargs=1)
-    parser.add_argument('--json-out', help='output file for JSON', nargs=1)
-    parser.add_argument('--print-samples', help='print samples', action='store_const', const=True)
-    parser.add_argument('--skip-kernel-syms', help='skip kernel symbols at the top of stack',
-                        action='store_const', const=True)
-    parser.add_argument('--print-pid-histogram', help='print a top-25 histogram of processes',
-                        action='store_const', const=True)
-    parser.add_argument('--print-sym-histogram', help='print a top-100 histogram of symbols',
-                        action='store_const', const=True)
-    parser.add_argument('--print-dso-histogram', help='print a top-25 histogram of maps',
-                        action='store_const', const=True)
-    parser.add_argument('--parallel', help='run parallel jobs', type=int)
-
-    args = parser.parse_args()
-    if args is not None:
-        if args.parallel is not None:
-            parallel_runner(args)
-        else:
-            run(args)
diff --git a/perfprofd/scripts/perf_proto_stack_sqlite_flame.py b/perfprofd/scripts/perf_proto_stack_sqlite_flame.py
deleted file mode 100644
index 3eb2379a..00000000
--- a/perfprofd/scripts/perf_proto_stack_sqlite_flame.py
+++ /dev/null
@@ -1,272 +0,0 @@
-#!/usr/bin/python
-#
-# Copyright (C) 2018 The Android Open Source Project
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-# Make sure that simpleperf's inferno is on the PYTHONPATH, e.g., run as
-# PYTHONPATH=$PYTHONPATH:$ANDROID_BUILD_TOP/system/extras/simpleperf/scripts/inferno python ..
-
-import argparse
-import itertools
-import sqlite3
-
-
-class Callsite(object):
-    def __init__(self, dso_id, sym_id):
-        self.dso_id = dso_id
-        self.sym_id = sym_id
-        self.count = 0
-        self.child_map = {}
-        self.id = self._get_next_callsite_id()
-
-    def add(self, dso_id, sym_id):
-        if (dso_id, sym_id) in self.child_map:
-            return self.child_map[(dso_id, sym_id)]
-        new_callsite = Callsite(dso_id, sym_id)
-        self.child_map[(dso_id, sym_id)] = new_callsite
-        return new_callsite
-
-    def child_count_to_self(self):
-        self.count = reduce(lambda x, y: x + y[1].count, self.child_map.iteritems(), 0)
-
-    def trim(self, local_threshold_in_percent, global_threshold):
-        local_threshold = local_threshold_in_percent * 0.01 * self.count
-        threshold = max(local_threshold, global_threshold)
-        for k, v in self.child_map.items():
-            if v.count < threshold:
-                del self.child_map[k]
-        for _, v in self.child_map.iteritems():
-            v.trim(local_threshold_in_percent, global_threshold)
-
-    def _get_str(self, id, m):
-        if id in m:
-            return m[id]
-        return str(id)
-
-    def print_callsite_ascii(self, depth, indent, dsos, syms):
-
-        print '  ' * indent + "%s (%s) [%d]" % (self._get_str(self.sym_id, syms),
-                                                self._get_str(self.dso_id, dsos),
-                                                self.count)
-        if depth == 0:
-            return
-        for v in sorted(self.child_map.itervalues, key=lambda x: x.count, reverse=True):
-            v.print_callsite_ascii(depth - 1, indent + 1, dsos, syms)
-
-    # Functions for flamegraph compatibility.
-
-    callsite_counter = 0
-
-    @classmethod
-    def _get_next_callsite_id(cls):
-        cls.callsite_counter += 1
-        return cls.callsite_counter
-
-    def create_children_list(self):
-        self.children = sorted(self.child_map.itervalues(), key=lambda x: x.count, reverse=True)
-
-    def generate_offset(self, start_offset):
-        self.offset = start_offset
-        child_offset = start_offset
-        for child in self.children:
-            child_offset = child.generate_offset(child_offset)
-        return self.offset + self.count
-
-    def svgrenderer_compat(self, dsos, syms):
-        self.create_children_list()
-        self.method = self._get_str(self.sym_id, syms)
-        self.dso = self._get_str(self.dso_id, dsos)
-        self.offset = 0
-        for c in self.children:
-            c.svgrenderer_compat(dsos, syms)
-
-    def weight(self):
-        return float(self.count)
-
-    def get_max_depth(self):
-        if self.child_map:
-            return max([c.get_max_depth() for c in self.child_map.itervalues()]) + 1
-        return 1
-
-
-class SqliteReader(object):
-    def __init__(self):
-        self.root = Callsite("root", "root")
-        self.dsos = {}
-        self.syms = {}
-
-    def open(self, f):
-        self._conn = sqlite3.connect(f)
-        self._c = self._conn.cursor()
-
-    def close(self):
-        self._conn.close()
-
-    def read(self, local_threshold_in_percent, global_threshold_in_percent, limit,
-             skip_simpleperf):
-        # Read aux tables first, as we need to find the kernel symbols.
-        def read_table(name, dest_table):
-            self._c.execute('select id, name from %s' % (name))
-            while True:
-                rows = self._c.fetchmany(100)
-                if not rows:
-                    break
-                for row in rows:
-                    dest_table[row[0]] = row[1]
-
-        print 'Reading DSOs'
-        read_table('dsos', self.dsos)
-
-        print 'Reading symbol strings'
-        read_table('syms', self.syms)
-
-        kernel_sym_id = None
-        for i, v in self.syms.iteritems():
-            if v == '[kernel]':
-                kernel_sym_id = i
-                break
-
-        skip_query_str = ""
-        if skip_simpleperf:
-            self._c.execute('select id from pids where name = "simpleperf"')
-            pid_row = self._c.fetchone()
-            if pid_row:
-                skip_query_join = "as st join samples sa on st.sample_id = sa.id "
-                skip_query_str = skip_query_join + "where sa.pid_id != %d" % (pid_row[0])
-
-        query_prefix = 'select sample_id, depth, dso_id, sym_id from stacks '
-        query_suffix = ' order by sample_id asc, depth desc'
-
-        print 'Reading samples'
-        self._c.execute(query_prefix + skip_query_str + query_suffix)
-
-        last_sample_id = None
-        chain = None
-        count = 0
-        while True:
-            rows = self._c.fetchmany(100)
-
-            if not rows:
-                break
-            for row in rows:
-                if row[3] == kernel_sym_id and row[1] == 0:
-                    # Skip kernel.
-                    continue
-                if row[0] != last_sample_id:
-                    last_sample_id = row[0]
-                    chain = self.root
-                chain = chain.add(row[2], row[3])
-                chain.count = chain.count + 1
-            count = count + len(rows)
-            if limit is not None and count >= limit:
-                print 'Breaking as limit is reached'
-                break
-
-        self.root.child_count_to_self()
-        global_threshold = global_threshold_in_percent * 0.01 * self.root.count
-        self.root.trim(local_threshold_in_percent, global_threshold)
-
-    def print_data_ascii(self, depth):
-        self.root.print_callsite_ascii(depth, 0, self.dsos, self.syms)
-
-    def get_script_js(self):
-        # Try to get the data directly (if packaged with embedded_loader).
-        import os.path
-        import sys
-        if '__loader__' in globals():
-            try:
-                js = __loader__.get_data(os.path.join(os.path.dirname(__file__), "script.js"))
-                if js is not None and len(js) > 0:
-                    return js
-            except:
-                pass
-        # See if we can find it another way.
-        rel_paths = [
-            # Maybe we're being run packaged.
-            "script.js",
-            # Maybe we're being run directly.
-            "../../simpleperf/scripts/inferno/script.js",
-        ]
-        for rel_path in rel_paths:
-            script_js = os.path.join(os.path.dirname(__file__), rel_path)
-            if os.path.exists(script_js):
-                with open(script_js, 'r') as script_f:
-                    return script_f.read()
-        return None
-
-    def print_svg(self, filename, depth):
-        from svg_renderer import render_svg
-        self.root.svgrenderer_compat(self.dsos, self.syms)
-        self.root.generate_offset(0)
-        f = open(filename, 'w')
-        f.write('''
-<html>
-<body>
-<div id='flamegraph_id' style='font-family: Monospace;'>
-<style type="text/css"> .s { stroke:black; stroke-width:0.5; cursor:pointer;} </style>
-<style type="text/css"> .t:hover { cursor:pointer; } </style>
-''')
-
-        class FakeProcess:
-            def __init__(self):
-                self.props = {'trace_offcpu': False}
-        fake_process = FakeProcess()
-        render_svg(fake_process, self.root, f, 'hot')
-
-        f.write('''
-</div>
-''')
-
-        # Emit script.js, if we can find it.
-        script_data = self.get_script_js()
-        if script_data is not None:
-            f.write('<script>\n')
-            f.write(script_data)
-            f.write('''
-</script>
-<br/><br/>
-<div>Navigate with WASD, zoom in with SPACE, zoom out with BACKSPACE.</div>
-<script>document.addEventListener('DOMContentLoaded', flamegraphInit);</script>
-</body>
-</html>
-''')
-        f.close()
-
-
-if __name__ == "__main__":
-    parser = argparse.ArgumentParser(description='''Translate a perfprofd database into a flame
-                                                    representation''')
-
-    parser.add_argument('file', help='the sqlite database to use', metavar='file', type=str)
-
-    parser.add_argument('--html-out', help='output file for HTML flame graph', type=str)
-    parser.add_argument('--threshold', help='child threshold in percent', type=float, default=5)
-    parser.add_argument('--global-threshold', help='global threshold in percent', type=float,
-                        default=.1)
-    parser.add_argument('--depth', help='depth to print to', type=int, default=10)
-    parser.add_argument('--limit', help='limit to given number of stack trace entries', type=int)
-    parser.add_argument('--skip-simpleperf', help='skip simpleperf samples', action='store_const',
-                        const=True)
-
-    args = parser.parse_args()
-    if args is not None:
-        sql_out = SqliteReader()
-        sql_out.open(args.file)
-        sql_out.read(args.threshold, args.global_threshold, args.limit,
-                     args.skip_simpleperf is not None)
-        if args.html_out is None:
-            sql_out.print_data_ascii(args.depth)
-        else:
-            sql_out.print_svg(args.html_out, args.depth)
-        sql_out.close()
diff --git a/perfprofd/scripts/sorted_collection.py b/perfprofd/scripts/sorted_collection.py
deleted file mode 100644
index 46622e21..00000000
--- a/perfprofd/scripts/sorted_collection.py
+++ /dev/null
@@ -1,147 +0,0 @@
-# Note: Taken from https://code.activestate.com/recipes/577197-sortedcollection/.
-#
-# Copyright 2010 Raymond Hettinger
-#
-# Permission is hereby granted, free of charge, to any person obtaining a copy of
-# this software and associated documentation files (the "Software"), to deal in the
-# Software without restriction, including without limitation the rights to use, copy,
-# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
-# and to permit persons to whom the Software is furnished to do so, subject to the
-# following conditions:
-#
-# The above copyright notice and this permission notice shall be included in all copies
-# or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
-# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
-# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
-# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
-# DEALINGS IN THE SOFTWARE.
-
-from bisect import bisect_left, bisect_right
-
-
-class SortedCollection(object):
-    def __init__(self, iterable=(), key=None):
-        self._given_key = key
-        key = (lambda x: x) if key is None else key
-        decorated = sorted((key(item), item) for item in iterable)
-        self._keys = [k for k, item in decorated]
-        self._items = [item for k, item in decorated]
-        self._key = key
-
-    def _getkey(self):
-        return self._key
-
-    def _setkey(self, key):
-        if key is not self._key:
-            self.__init__(self._items, key=key)
-
-    def _delkey(self):
-        self._setkey(None)
-
-    key = property(_getkey, _setkey, _delkey, 'key function')
-
-    def clear(self):
-        self.__init__([], self._key)
-
-    def copy(self):
-        return self.__class__(self, self._key)
-
-    def __len__(self):
-        return len(self._items)
-
-    def __getitem__(self, i):
-        return self._items[i]
-
-    def __iter__(self):
-        return iter(self._items)
-
-    def __reversed__(self):
-        return reversed(self._items)
-
-    def __repr__(self):
-        return '%s(%r, key=%s)' % (
-            self.__class__.__name__,
-            self._items,
-            getattr(self._given_key, '__name__', repr(self._given_key))
-        )
-
-    def __reduce__(self):
-        return self.__class__, (self._items, self._given_key)
-
-    def __contains__(self, item):
-        k = self._key(item)
-        i = bisect_left(self._keys, k)
-        j = bisect_right(self._keys, k)
-        return item in self._items[i:j]
-
-    def index(self, item):
-        'Find the position of an item.  Raise ValueError if not found.'
-        k = self._key(item)
-        i = bisect_left(self._keys, k)
-        j = bisect_right(self._keys, k)
-        return self._items[i:j].index(item) + i
-
-    def count(self, item):
-        'Return number of occurrences of item'
-        k = self._key(item)
-        i = bisect_left(self._keys, k)
-        j = bisect_right(self._keys, k)
-        return self._items[i:j].count(item)
-
-    def insert(self, item):
-        'Insert a new item.  If equal keys are found, add to the left'
-        k = self._key(item)
-        i = bisect_left(self._keys, k)
-        self._keys.insert(i, k)
-        self._items.insert(i, item)
-
-    def insert_right(self, item):
-        'Insert a new item.  If equal keys are found, add to the right'
-        k = self._key(item)
-        i = bisect_right(self._keys, k)
-        self._keys.insert(i, k)
-        self._items.insert(i, item)
-
-    def remove(self, item):
-        'Remove first occurence of item.  Raise ValueError if not found'
-        i = self.index(item)
-        del self._keys[i]
-        del self._items[i]
-
-    def find(self, k):
-        'Return first item with a key == k.  Raise ValueError if not found.'
-        i = bisect_left(self._keys, k)
-        if i != len(self) and self._keys[i] == k:
-            return self._items[i]
-        raise ValueError('No item found with key equal to: %r' % (k,))
-
-    def find_le(self, k):
-        'Return last item with a key <= k.  Raise ValueError if not found.'
-        i = bisect_right(self._keys, k)
-        if i:
-            return self._items[i-1]
-        raise ValueError('No item found with key at or below: %r' % (k,))
-
-    def find_lt(self, k):
-        'Return last item with a key < k.  Raise ValueError if not found.'
-        i = bisect_left(self._keys, k)
-        if i:
-            return self._items[i-1]
-        raise ValueError('No item found with key below: %r' % (k,))
-
-    def find_ge(self, k):
-        'Return first item with a key >= equal to k.  Raise ValueError if not found'
-        i = bisect_left(self._keys, k)
-        if i != len(self):
-            return self._items[i]
-        raise ValueError('No item found with key at or above: %r' % (k,))
-
-    def find_gt(self, k):
-        'Return first item with a key > k.  Raise ValueError if not found'
-        i = bisect_right(self._keys, k)
-        if i != len(self):
-            return self._items[i]
-        raise ValueError('No item found with key above: %r' % (k,))
diff --git a/perfprofd/symbolizer.cc b/perfprofd/symbolizer.cc
deleted file mode 100644
index 3b39f6f5..00000000
--- a/perfprofd/symbolizer.cc
+++ /dev/null
@@ -1,179 +0,0 @@
-/*
- *
- * Copyright 2018, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "symbolizer.h"
-
-#include <map>
-#include <memory>
-#include <unordered_map>
-
-#include <android-base/logging.h>
-#include <base/mem_map.h>
-#include <build_id.h>
-#include <read_dex_file.h>
-#include <read_elf.h>
-#include <vdex_file.h>
-
-namespace perfprofd {
-
-namespace {
-
-struct SimpleperfSymbolizer : public Symbolizer {
-  // For simplicity, we assume non-overlapping symbols.
-  struct Symbol {
-    Symbol(std::string_view n, uint64_t l) : name(n), length(l) {}
-
-    std::string name;
-    uint64_t length;
-  };
-  using SymbolMap = std::map<uint64_t, Symbol>;
-
-  std::string Decode(const std::string& dso, uint64_t address) override {
-    auto it = dsos.find(dso);
-    if (it == dsos.end()) {
-      LoadDso(dso);
-      it = dsos.find(dso);
-      DCHECK(it != dsos.end());
-    }
-
-    const SymbolMap& map = it->second;
-    if (map.empty()) {
-      return "";
-    }
-    auto upper_bound = map.upper_bound(address);
-    if (upper_bound == map.begin()) {
-      // Nope, not in the map.
-      return "";
-    }
-
-    upper_bound--;
-    if (upper_bound->first + upper_bound->second.length > address) {
-      // This element covers the given address, return its name.
-      return upper_bound->second.name;
-    }
-
-    return "";
-  }
-
-  void LoadDso(const std::string& dso) {
-    // See whether it's an ELF file.
-    {
-      SymbolMap elf_data;
-      auto callback = [&elf_data](const ElfFileSymbol& sym) {
-        if (sym.is_func) {
-          if (sym.len == 0) {
-            LOG(ERROR) << "Symbol size is zero for " << sym.name;
-          }
-          elf_data.emplace(sym.vaddr, Symbol(sym.name, sym.len));
-        }
-      };
-      ElfStatus status = ParseSymbolsFromElfFile(dso, BuildId(), callback);
-      if (status == ElfStatus::NO_ERROR) {
-        dsos.emplace(dso, std::move(elf_data));
-        return;
-      }
-    }
-
-    // See whether it's a vdex file.
-    {
-      ::art::MemMap::Init();
-
-      using VdexFile = ::art::VdexFile;
-      std::string error_msg;
-      std::unique_ptr<VdexFile> vdex = VdexFile::Open(dso,
-                                                      /* writable= */ false,
-                                                      /* low_4gb= */ false,
-                                                      /* unquicken= */ false,
-                                                      &error_msg);
-      if (vdex != nullptr) {
-        const uint8_t* cur = nullptr;
-        std::vector<uint64_t> dex_file_offsets;
-        const uint8_t* base = vdex->Begin();
-        for (;;) {
-          cur = vdex->GetNextDexFileData(cur);
-          if (cur == nullptr) {
-            break;
-          }
-          dex_file_offsets.push_back(cur - base);
-        }
-
-        if (!dex_file_offsets.empty()) {
-          std::vector<DexFileSymbol> symbols;
-          if (ReadSymbolsFromDexFile(dso, dex_file_offsets, &symbols)) {
-            SymbolMap vdex_data;
-            for (const DexFileSymbol& symbol : symbols) {
-              vdex_data.emplace(symbol.offset, Symbol(symbol.name, symbol.len));
-            }
-            dsos.emplace(dso, std::move(vdex_data));
-            LOG(INFO) << "Found " << symbols.size() << " dex symbols in " << dso;
-            return;
-          } else {
-            LOG(WARNING) << "Could not read symbols from dex files in " << dso;
-          }
-        } else {
-          LOG(WARNING) << "Could not find dex files for vdex " << dso;
-          dsos.emplace(dso, SymbolMap());
-        }
-      } else {
-        LOG(WARNING) << dso << " is not a vdex: " << error_msg;
-      }
-    }
-
-    // TODO: See whether it's a dex file.
-
-    // OK, give up.
-    LOG(WARNING) << "Could not symbolize " << dso;
-    dsos.emplace(dso, SymbolMap());
-  }
-
-  bool GetMinExecutableVAddr(const std::string& dso, uint64_t* addr) override {
-    uint64_t file_offset_of_min_vaddr;
-    ElfStatus status = ReadMinExecutableVirtualAddressFromElfFile(dso, BuildId(), addr,
-                                                                  &file_offset_of_min_vaddr);
-    if (status != ElfStatus::NO_ERROR) {
-      return true;
-    }
-
-    {
-      ::art::MemMap::Init();
-
-      using VdexFile = ::art::VdexFile;
-      std::string error_msg;
-      std::unique_ptr<VdexFile> vdex = VdexFile::Open(dso,
-                                                      /* writable= */ false,
-                                                      /* low_4gb= */ false,
-                                                      /* unquicken= */ false,
-                                                      &error_msg);
-      if (vdex != nullptr) {
-        *addr = 0u;
-        return true;
-      }
-    }
-
-    return false;
-  }
-
-  std::unordered_map<std::string, SymbolMap> dsos;
-};
-
-}  // namespace
-
-std::unique_ptr<Symbolizer> CreateELFSymbolizer() {
-  return std::unique_ptr<Symbolizer>(new SimpleperfSymbolizer());
-}
-
-}  // namespace perfprofd
diff --git a/perfprofd/symbolizer.h b/perfprofd/symbolizer.h
deleted file mode 100644
index 10771595..00000000
--- a/perfprofd/symbolizer.h
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- *
- * Copyright 2018, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef SYSTEM_EXTRAS_PERFPROFD_SYMBOLIZER_H_
-#define SYSTEM_EXTRAS_PERFPROFD_SYMBOLIZER_H_
-
-#include <memory>
-
-namespace perfprofd {
-
-struct Symbolizer {
-  virtual ~Symbolizer() {}
-  virtual std::string Decode(const std::string& dso, uint64_t address) = 0;
-  virtual bool GetMinExecutableVAddr(const std::string& dso, uint64_t* addr) = 0;
-};
-
-std::unique_ptr<Symbolizer> CreateELFSymbolizer();
-
-}  // namespace perfprofd
-
-#endif  // SYSTEM_EXTRAS_PERFPROFD_SYMBOLIZER_H_
diff --git a/perfprofd/tests/Android.bp b/perfprofd/tests/Android.bp
deleted file mode 100644
index 21649033..00000000
--- a/perfprofd/tests/Android.bp
+++ /dev/null
@@ -1,73 +0,0 @@
-// Build the unit tests.
-
-cc_defaults {
-    name: "perfprofd_test_defaults",
-    defaults: [
-        "libartd_static_defaults",
-        "perfprofd_defaults",
-        "perfprofd_debug_defaults",
-    ],
-
-    strip: {
-        keep_symbols: true,
-    },
-}
-
-//
-// Unit test for perfprofd
-//
-cc_test {
-    name: "perfprofd_test",
-    defaults: [
-        "perfprofd_test_defaults",
-        "libsimpleperf_dex_read_static_reqs_defaults",
-        "libsimpleperf_elf_read_static_reqs_defaults",
-    ],
-    test_suites: ["device-tests"],
-    host_supported: true,
-
-    stl: "libc++",
-    static_libs: [
-        "libperfprofdcored",
-        "libperfprofd_proto_config",
-        "libsimpleperf_dex_read",
-        "libsimpleperf_elf_read",
-        "libbase",
-        "libutils",
-        "libz",
-        "libprotobuf-cpp-lite",
-        "liblog",
-    ],
-    target: {
-        host: {
-            host_ldlibs: [
-                "-lncurses",
-            ],
-        },
-
-        // The live tests require simpleperf.
-        android: {
-            required: [
-                "simpleperf",
-            ],
-            static_libs: [
-                "libhealthhalutils",
-            ],
-            shared_libs: [
-                "android.hardware.health@2.0",
-                "libbinder",
-                "libhidlbase",
-                "libservices",
-                "libutils",
-            ],
-        },
-
-    },
-    srcs: [
-        "perfprofd_test.cc",
-    ],
-    data: [
-        "canned.perf.data",
-        "callchain.canned.perf.data",
-    ],
-}
diff --git a/perfprofd/tests/AndroidTest.xml b/perfprofd/tests/AndroidTest.xml
deleted file mode 100644
index 20b13731..00000000
--- a/perfprofd/tests/AndroidTest.xml
+++ /dev/null
@@ -1,29 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2017 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-<configuration description="Config for perfprofd_test">
-    <target_preparer class="com.android.tradefed.targetprep.PushFilePreparer">
-        <option name="cleanup" value="true" />
-        <option name="push" value="perfprofd_test->/data/local/tmp/perfprofd_test" />
-        <option name="push" value="canned.perf.data->/data/local/tmp/canned.perf.data" />
-        <option name="push" value="callchain.canned.perf.data->/data/local/tmp/callchain.canned.perf.data" />
-
-    </target_preparer>
-    <option name="test-suite-tag" value="apct" />
-    <test class="com.android.tradefed.testtype.GTest" >
-        <option name="native-test-device-path" value="/data/local/tmp" />
-        <option name="module-name" value="perfprofd_test" />
-    </test>
-</configuration>
diff --git a/perfprofd/tests/README.txt b/perfprofd/tests/README.txt
deleted file mode 100644
index 949e73f0..00000000
--- a/perfprofd/tests/README.txt
+++ /dev/null
@@ -1,64 +0,0 @@
-Native tests for 'perfprofd'. Please run with
-
-   runtest --path=system/extras/perfprofd/tests
-
-(where runtest == $ANDROID_BUILD_TOP"/development/testrunner/runtest.py).
-
-Notes:
-
-1. Several of the testpoints in this unit tests perform a live 'simpleperf'
-run on the device (if you are using a userdebug build, simpleperf should
-already be available in /system/xbin/simpleperf).
-
-2. Part of the test is a system-wide profile, meaning that you will
-need to run 'adb root' prior to test execution.
-
-3. The daemon under test, perfprofd, is broken into a main function, a
-"core" library, and a "utils library. Picture:
-
-	+-----------+   perfprofdmain.o
-	| perfprofd |
-	| main()    |   1-liner; calls perfprofd_main()
-	+-----------+
-	   |
-	   v
-	+-----------+   perfprofdcore.a
-	| perfprofd |
-	| core      |   most of the interesting code is here;
-	|           |   calls into utils library when for
-	+-----------+   operations such as sleep, log, etc
-	   |
-	   v
-	+-----------+   perfprofdutils.a
-	| perfprofd |
-	| utils     |   real implementations of perfprofd_sleep,
-	|           |   perfprofd_log_* etc
-	+-----------+
-
-Because the daemon tends to spend a lot of time sleeping/waiting,
-it is impractical to try to test it directly. Instead we insert a
-mock utilities layer and then have a test driver that invokes the
-daemon main function. Picture for perfprofd_test:
-
-	+----------------+   perfprofd_test.cc
-	| perfprofd_test |
-	|                |   makes calls into perfprofd_main(),
-	+----------------+   then verifies behavior
-	   |
-	   v
-	+-----------+   perfprofdcore.a
-	| perfprofd |
-	| core      |   same as above
-	+-----------+
-	   |
-	   v
-	+-----------+   perfprofdmockutils.a
-	| perfprofd |
-	| mockutils |   mock implementations of perfprofd_sleep,
-	|           |   perfprofd_log_* etc
-	+-----------+
-
-The mockup versions of perfprofd_sleep() and  perfprofd_log_* do
-simply log the fact that they are called; the test driver can
-then examine the log to make sure that the daemon is doing
-what it is supposed to be doing.
diff --git a/perfprofd/tests/callchain.canned.perf.data b/perfprofd/tests/callchain.canned.perf.data
deleted file mode 100644
index 8d8439351a7063f786cedbda991044256aa57cc9..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 256412
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

diff --git a/perfprofd/tests/canned.perf.data b/perfprofd/tests/canned.perf.data
deleted file mode 100644
index e6510d2afb286d910ba66ee6fc0cfc13d2c18a3c..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1366208
zcmc${37lk0RVRFTY;HiQxPT~$IG+nvclPq$>xY2Zue;xZ-R~vcZz*^{W>#iaRldsQ
zc4k&}HR_P!#(XGKe*WAYEp+Dl`STl`aui%}NpVoYWl9uv)PZ7AaY4!rR1m&%ZbY1j
zxHs>;aqo*$lfRCxdo$zwPsEA!#{Hj&`lYLP-Fx}c>5V{qLism-|3~usrMEv_UfF*>
z{)LaTzgTeBG``z=nz;GanAqc=ycpjQU3jU|tA0e-#|10FC*h;M!@qcsANAcMo89rS
z+dr|{>h~u%2a{Jcrrn*X`Zf9Y@zGaRz()Ka=nZ=ru|=F)f_o@_FpB_!VEzPoA^x1q
z0YY831a*xAIf*2fESTVt?QVNI8c$wff1S7!`8Wrdh#Lf((~WVr)#)T6#=cN;_!q<G
zWVANzjjwl3R%0>kTP62o_!`6JjnNoPe{$>j)qCui_MMXZ6!;p$ptnA5O?#uElfG*3
z6p+ENxzX*1-7#D({s=wQ;HmI4hGBO)oGgwSeXG*-S#XD8FzR#%jp1n8TkB=0iEI`G
z=Yr1$84Qy_r_tVM4WSM;+WirHv-qR*Ve7y!8B7L^_G;tC^~Lekw<=$s3twOuhl6F%
zseVrUReC-Te!-y2>6BABeLl!wfGTnF%&FU#yRGq~t@b8-v-qR*Jp+EmFu6HwHzr$9
zR9V&+br0?MOpw8_+UYHKx@)bier9u&_OAwC05TXhSNo&(W}ZE&!LuMPhV21#6r(m=
zE&eEbe<A#gVRK_^H62~&<BK3J2DIC$>gi=H-ri^c-z@$pyFD9z#!ytQ0x}qi$~^~U
zFreJ+cc^6Mr}K+J216uw&Ry=gAcLW(+?Rk1hDh$LyS{%1G8iJcTixaUFOb1dRPIYb
z218M~F9R72MdiL6WH6xI>D$k!48k{yKdPR61^kSmsNC~F1_R37al2BNUthiwWH1z!
zTLu{n#pJ5N36R0iKizJrIS||?KEfW=;3WKlp>=wY6`lHf933&V*VfNfPoFvkmzf`>
z=QPB^aDC8oihl-TVHgg&tt<gmu4f?<hN!;@+l}#PYw9w7-3l@oTH(0S8TYocWFQ*#
zySKwNhRw;1R@gy{EdHqUor9k-tWBb^^=4zx8mEsYTF)IIgQ4A9oAgHMJ+QL#^C2#V
z_V{KvO&^A-JTF6B3@sSGTm81<ID9U+0x}pjI)h$gy3@dEP}UHx>~J5*U}z0@Za-H&
z7s<hG>PN}l4>2%oHZ~?(t#S6?2=SCX>Tr#r(`&6~WlrgN3B<(^#cvO%{VXAfr{u1}
zHHJv8)9&Snk=!+q!LYeL=`Wwjs7Me8KT6+&aE)Q@jyrC<ty-;~n1q=POWEV4AcJ9R
zvI<i}xJdaZJuidbF<?J*=JXxQvfNUnbow5F7#KDi;{hmY47Q>=k|S3QUJfxZtThJH
zFg3Q;gU<&T)_VQ!@&uk3TI<~mF{&4@gh&{+y3>uUHm~f^fVdc7Ue^kzz4j!hfR$Vm
zWH3bbyY2My<jk2{(|Ze@FYNR%V1KsV>p;Vdo-^Q^#UG__6@JE0R1SL<3@FzQL(!hM
z(oL!KVGImW{%)-<uU^0PRP_}0+>1X-ZXJHc&>1vVx7K<i=zZE7>FTK7Z-5Mj&g!Ir
zbL^bQCz8X)fq~?5MlO}kM?nSy$>AWD@lkTvw__l=bdyAAO0Exg7}{&SAq-%x_7ujX
zD8}Odl-vM*#(?E;>h@|hL78;gi-q7@Ay*BCaE)QLH|)5y0~}H?K>yKLZ4Gi-fzop>
zz_yHGbG+6b4Kg0wAP#<1zHm&zfVw)^iHvvf=hTmq8$%2XBsX=Fn}7_4@%6@J+M42J
z=118PyHX7B?A9G;Jj|-}Z9`lPqF*?*eC7NK6x&(&X7NYq!CYV%4BD_(kzR?Fo|_OC
zgNzT4&DcAnf0W#-APR;X{YH1YJDfJ)*}l_HuZc?TYe5D>XQR`&(VDh5I-~W*6kF`#
zkIL8A!Os{_t`oKwM}}`z{I7>=3>bgBvz8P8T=4H91_q2jxd~ILbQKYn&~q+$HQZs?
z?ybUl%?PVh=10lRAQpx}Yv<J2+fHX!K8UB}z5%W=MD^knwBy!JZ_vP&z4)W#UIRa4
z5OSv+<*LCqf((YOsFc&^myd%uxc;Z&N121~7O(%MFM0@^y2kOe{`bw06bz59c21v!
z%D&p)tcIs?X21BO?Dj42GX_{JJ-giLjh45DH^v!Dp-S#`AcMiycMiT;{84h>20vpc
zs&5x$FxdL=31sm{>H7}&8ADNh{}0Guu=Jg}4Zd0YQTo0Ue#THtUp4q~kipO&t*2K)
z_+9D2xbK$nPvDAg*5DPBdykUCl6I04={uBi0m#AS!jGB0_dyKI&xzJnr#H>aR<s^|
zOVA`c1oL;jIa07>t2qgs*R(r0+3&4lfT=Y+xb=I`L!X%7xSaM8?asgt{z%|gY>5~?
zv<8?MEQeE=iFC6xB=Bnzf9`;fz(w(A|68OVCl$sgmi|>(v!%4>r+-D;f9c%<|HuG`
z%NYK!FVk+v(s#lx25#j&0(XwT=uZrH5TzAtqGQ-s3EZXk3f$c%SrKEn?ZUYG9~8I;
zpOT6Dyyqcuf%G2zoxp8o+F@(j>rbLITiW%Fu!B*r!+#LC`#KI@#qE#_EX5OcuKlCH
zuV>;zv&U4YH_1f0_a$yK6Bk;)TgnsZ-uow!?h5{*KgupJ|A+o$2(Pk&$mBYPeU-pn
z`l!H7X@?Om_UTTzb>04Q=LL}7jIl!W!`0ybgXCk_=(hUPjr2ZP<f~5cQ|C7m%#lJ%
zAFC30x%t7=rQ@mmyb<z(p+CrY*#o}|{mm#Y#t&wHEXrvKZ}dl%f7$Uwr6-vGsjOcb
z8?R#cg~t=Z4`hEocfiM{=Qy4ae(ilC{jU8+QT(O%XSNe*|H9)HrGHQ2d+ASCbiJwk
znMk)&|DQesNz}*Y-wNF9`WTK!?e1i<4$Jvr)-WLJyOHiaiSIBTBEDU#^qokzfm{2C
zNcS9n(Vtj7kH+spxYd6axOI(*S20{Ut`tb`(!U7Y%Hs4I{XR6B0=Tn(6}Z*K>5Xu)
zj~e43n1@@}^)0ubgnmDx?^E;dpMYdxm~_Y6y>@rd8p6VGYANgfQppATvfgLc&w}&s
zl_*W9BRKjCVZW&6;uqo*EAOy9j;7tY^FT`X(q9T(m-;!1mTr}5>#wT!gd6;|z;$U)
zMR522Uf??QFL~*0YWp63OxnT9R=hn;x-jY4+R5x%B7lTF<{uaMPVMzX>N;WqckkZ>
zu2Xx>!!_)&^ht@k*dEwkUE2yGh;-Mry&c*u;@jHwotoeLH~0#}_NbpeS%crr_@54m
zDH8uP9O8@oHKVj(dV<5bu%Fldz`(EkYG(P!`9b0Nld@;fl=ySZjQ+&>8-ZV7{zUkD
zzu}Vp$+XiJkBUz7rwzmY5<k>w$E#TSH@mPrG8%UqP@iE*$hBP?<uH4@$VavwYo3OB
z>{RJHQIA%1K9=4g@ICeWWdGW43fw)^s6R3Lyb3J>|8m9?!ydtJ3*4H<#H$$YBy5c*
znF~ZxJkhS25<j~ig>kmXbFY#91BqXe36Otc>Aw-SoR-mKzh{(Z<#&XAjxzDZIuR_>
z*|GFpqMlU$r@)<OmZw-JDuP@2U4iQ`jt50>=W@NzX&le9gHe8gd@ieMTj5o#{E)p1
zZGX^$#nH@GpQwLziNBPIztI|ZZnVT)%mLr1A2W&H%q+*;%AH7e@BvvrGSgjfeq-4E
zP~smx)lv|%yPz56ceAqH82x!wu195;>)Poxc+VeoE)l^sS5v}HGpT3a%0|5Y;OmM8
z6+(OSgdJPoCGhL=d9b46;8n~{@Z5G|+=?Dyq4&+jH|(@4@oSm*s(v>5-St-cX0DlJ
zc^Ks#$aTEz^62y?o9)qXtrsnCf*w0n`cBx%Xa{wPU)OQ)DrqN7`&#Pzm4yB05;wbi
z+f=r;`ovuVe^)-2H*c}x#?tLN-ALL!l+P(m3qEd_!t1^?FKEi=lnUlde^mOT=kx;W
zzJz-qpHt@PxY3;4aov}29iAhy=KAXSAFBg~$<}xcrkZQ;n3wtdZ_0f+Wa-Xm{@6GL
zjxo-1UjcF#dz0`Q@REwieWliSx`^Bg$ZgzcKN!8be<1RE(FGj4GV}LRA@>mSr*g#T
zeJk2>9pvu5T-gdcEqrYXFI{6wj9XLR2FR5uhaSjXLh^}BWY+qPsqfK}`Zi1I>nphn
zqv3Qs>PN&Q!xrYHna($YoUCVOf&y}nKB1gFUk9%SrM|O8>e<z&kld|#a*!q9iEKn|
zPjt!e`spbDM;A;pQ2z$S+Zm13>+DH;xpij8VL3+jqlTXF1#gNJ>{@C_k9>Yc?%8PA
znDz$UBJ+JiPwj<5Pc2i=B<yx~#@$J45cb7{G-pUo*lkbhX=dtaw+28GYz(^77BtEh
zDuI6)AEBqI%ct@pk)Qp{@lEQ<XBs5%o96}o5_)0jj~ahux%Apwy;J9gnEq@ggTP<W
z>94(1miuRFaJWk1Z;5x`RxEuZa6^rIuqkloOFEK)Yt-BBdLQfW-Ip(2+dkcBb;jM{
zD5td5`k9fB%3SDcTI%BY7_PQ@ncxZg?@QcTCN45mz+)okWjjD5?6mYNBHdN|MSo)U
z2QKA$cWvBT-<USmMq5Lutl;~YYbB-6sITE$g}$XHYGrU0*EbsWwntG%BJ^32jT@04
zqa2QYUEm*O@+byfAo^z|KY?4DiRZOirk%PwVJnl#BXA9S9DIYots9w2+N1FL3HIF>
zg4$~Yeg$vzCuZ-0>nBF~cO`yPW8+l}|GHe8Mw2`AZ$^Jz`9^8?O#IT%Ph_WECq3|-
z34Yow$r{RielqNIB=P5&`51u%Q@<si|DxwWJGQ<P^~kW(!8ZvzEv47bjT<Lnx;Ywz
zBPfj%;3;tKj@!>>H3CqVsIQf85qhdREqE0#?+$fFLXRC=-zD%vC;S1t5k&u2OnsCO
zjc8vb>@?5E2RngtcLeWdBv6^qv-GXPPNAJ1WvAHq17px+YxVrFGamIiSw)ht*Iepp
zikYd>ru4}1c{1&XqjA(T2|X%a{I9?_#?j{MWW8F9AIpatM^7~_TyYvog+8PI-g~{!
zw}-#zPb@#tIyjEoI);6fuv2qa;8yH-F<kwA!;Y4?OW^NG{A#Y9z((LKmQ~20ErGxE
zpGEpz*Ylk4jsBzg)0y@$${ErxCP{k1Enyz|Lgd5H6TC_22^Y^-4Lx#RcIocR4mBxZ
zul=79dX^|D(M7DhWAFddpNJFrIQlt(U&mkcCx#FFm+1%`q?W-aYq<|><(y(kmV5Ip
zndKtecj5PnH16$5{JG8pUd8fJ@V%nZp55NN;!*~hCUtI*DBq=D5q8<joaf=BzCi?H
zJB!v`0{`&W1%68ZE$wc-N3;NAHwpaE>3wTBy3rj=@=Ipb5%`AP=Mw)A78{IDtX$W(
zdI&pg8Bwgu1nx|}FT)CCd}6o)HW$~JAJygivRwldE@QajAuZDqLOx;d;6S$5e0&_d
z@>C@35=#7o%;y^D%n<p)6+0FBE|Ko)ABuD@={R^5vx}Pl<|SM9FGf9SO8hx$)}I)D
z^qvympXnI(Rl*+i|0UAx@Sd^|?$M#Zb$d_gp5E$T3EXC;9cWf-=U(3>%5PutuDrf~
zFv@RN@+9jz4R{qRKW9EWHfsz)@L^#OaT9%m|HW_%zLzoP0S6NQVDUUa_OJG`b8hWc
z^CrVS%AcUJxLl3*C(&yL%4qB&QLcxQ?_aSaD*GU=op?K5{7&H4_4<{=dlbZv<EVQv
z3q2S7Bz%EkJeYz*Y_5Afy)QtSk3gcz$bGb=+&`C;`<DW85Ea(9n`D=u`A$*Km*5BE
zqsmd%!`M90h#0#};P3suz^~X5WB7&VZ>n5_Ly13kz{mFE#M?6LQ;~iLVJ5yc56Wt$
z!agh7{`(TYo{2B}uRQ;x4UJp*6Jhu2VqD`n1Bw`SwP|#R?M^pyjTw;==?|qIFXM(`
zmm}$qF-ML16RS7TxLnBIhte<3VO%bRJNt8CZ>MoNb($~jYt+9v&p1TwXZI+x{U_^*
zd<8YhT*jCAFzVx6>Z$3n#4A;v3-nB)skxILqu%UFzr4!gdSi@tQN6cQqwf;+Jdl2Q
zH5~`9RQeIuWvmdmb=^)K#yP~bwdy-H&i!}z3Ii-OccFwb-fRn5l|LmH?0>aOKaKk@
zWHk#}?kiDR5IazO)a>zPGRa)^Q~gd;<L*nIYc_7-af|G6B>AWnVK4Q+DsMS179O_<
zzxrFk-gAX4{w~Bvi#v{6gda+t<o;rOyS?GAPpBlnUn2Zn>91Q^j4$n@*At84A4vQ#
z6W<zl^V4tC%ckTt&KLI+GX2r`g1+N+D)e2V9n~f8&}keffV=x4m-g8i57wOgjj0?D
zC2mdU39n-H@FmwSUAizDoUh-T+4@yGHSAm~@_cr_Zl^-uCG5N}ahsXt=lr}%_NdBn
zDy7}XdQtGX&#*@z$0vvRM^-^5?BVVw7Zk!(esW8?EbvOz4;=Ss%*m)5BE5Cpe>;qO
zh-+)rcVgVD20sN~VVI<E(Gv*?{Y{D=G-W$Y$(JnWg5$@E#^00kL5KbYSt&Ya_LVAU
zmCs=JgQ6dBs6T~pRlRrWw+f{9u!#R=9&TORxBf9<hm>`tX#HU$+QQ5>sJv74k?iVF
zAEAzIE(C)w)jSNzVi@2pquA-BF>VbyTWMl)zSN9lBBEJS`c-<amnvPsp1XggOZ_3-
zUAfNZsa_IpRnEIT)l0$+i}*k0)yoxKe)S^$k9oL8y_kPO)c2}gmCSxPR_8J|#8vg5
z?BP=Xp-$V{^_}XEF_9Rs<J7+<ugv)Oz!GSY`1cl!|Kfu2zouaP%LU_KDH#90g7NP!
z7{BfiUyYxte1pSZ67|t*Kh=!tP6S+$?>8%U-BI;jj?aakzbO4pi9dJ1FYx?D_<O%5
z>=S0<ThA{U(<d4y2)`=d&sH+=ZC)EZ;iY}lJcICO65nC|g4=gF<A(CN-C>+4gu5i4
zcb&$G0_m;G_1Pv`NPpt>FpqkgXg>#P-Be@ZRSdVV-wc&sU9O)VW#S9JPS~Q#j-~Gs
z>2At>Z0b4=Ud7T4-Ffb#R|Js2KXAeybcS-tD7{KA#;?is-%9i|{TEBW;qOLK7G8+-
zujqbjCh@cFBiHlu{LeNt?vcc;*~y5dTfGM_>_<oSrYZM#+t1XapMRylo*i4?CCayY
zh^k;ef~V?8a23mk_RDm_H|&2TpWiE}S$`D1vHm;FTER|~Yg6v?v7e3`&0)Y_EFZV7
z%hh4tl{Gg~&mBJlS;f%lu5PV^$5-a$3*xDAQF1}>2cle-w9W8J*{$sJFyYswe|4l;
z>xkhy?ibUH@`~6&D0vnYjfqz=+`{t&O836RpF7|?&l6U3`c=E0FRoY8?$J7A))Kj@
zuaxdX+0Gos*+RH8x&GiZ&ZbW|67_E`*Tu5!T+kofu(R5y$4kF#)W0Q;{TdDYLx~?|
z)<0_=X~(qhlJ!LKI2PAGv%hp%2dDa{{K}iQe$_4!SNBzU>)>_WUL5*M#I?2RJN4Z8
zv+xy$d+QgjK5$k49=}rYe-3`YFz&hS>w|HZ!K6jvqYF}z_-6~oe+fM26~Vt+F#ZDt
z<3Ct1{zC=huM~{`(t`0{Rxth}4)L)SqW`I?Z^6;G3V*ID{9t@kJF?&773FaldTOr~
zdQ$qCq@H$LzMnTzmAn-BY3lqO{zd^kF!LF#JM33t;LqMJ@Mm^fQtZ{q%R?glwRZ@7
zXMa!_1Jj2=IS*UW_Nly2;O~B>l>wE0IUfLjQx|_wqkQ-OQKs91rFqhV@)fSePW%hQ
z{)bXeWw9Qae*Ip!A^0SAY<-t#50!rs`8dR1^hepp&PQj`Yd{@pPsgtQCe-fsJ}UI=
zYaMu%qDQ_zpN{R=`YutA=1&&$?b@w6l7TPn1l{%W_4YEf>*Z58yUf84bv;^|3w-zX
z9PPs1xDJPuWGzI=)F$$?Ur1jk+DZntMzAt(+$8Ypa=k8_Up~36oJ=qeMev*1>uGkq
z>UE;}l#6e)zr7;(+mlISxD8E1?AT=3C4MRFWav?T8%uV~#r0O|k=d~&?7M`XCFx&L
zNDpphl3lqHdTPp#!%olQ{6IUAj<#9vxDhF#XIHLER-E*};ODl)BJ>#j<AKyugUNvL
zNzD(M3${cuqFR>%-)Q%Hl2_zZE~0zE|2IaX&E-)ydd{>I#BLIHJCyoncErW`>FC|x
zr9N9q-zDrell$PM<V*IKxKv_njFCR@Ch+Id|E8kTfLAIX62I^|0*xoi|7Pxhk7b_I
zQWEK}y-W1>^-O%Q53S2)w!{SfzQnI&;un11V6+Rh{uE~7+t0b_#Vgylfxqjtz6DKz
z>;o_H(-)V8eT;s0F7a!b=`X!LOZ7<kL#6N@WIct)Yq@=><N7J#FZq1mVa#iH<@=5~
zT26mr?aP_ZP3cwVs5q>1WsN+dJdN~v-8bIARr|*8X&c~G%nncwF|~R1&#2!O4xYG?
z?jwnx-M={cSsAzo&g=DHkMstaD8HIqudgh&Gp;{@k>&pGdAM~wuXb2}ig0bUbf?zq
ze;&TU0EA7Pv1Dxx7Rj1&FNe(DsrGjx<i!`J-234O94U8tacupquxA*h5z`s$f1i9F
zdajNHSE}CH^W%pfx;BMFtp;*KF`$h$E=SKVmaKUr^fk4<qdVpE5&oh-N}ufKknaiv
zt1g}{n%Q6k{))z*T@?8H!a_<z41XdvD(K!&zsLV3(!F<&z;%7U6$gyn3;Ye8?xPi%
zZaboxZZHaN=(KjD13QFlc8BY|VdhwmNQrzLzEtSRZtv!NBGO~0O5Y{$>n{`dH5~`9
z%zQu|Y~C^C!;Y=*5_Z~`_)*SuJcV!9*Bjelv%D%Afe1ZDJvw|u<YNzi(I2Hp*3)Re
zj^65xZ5_kDO4w)b6$00JUlSWIekbsa_FQWT{Mq7k8}^aa3I5#JhV9_CpgLuZq(XBd
zKSyJsZ^=$s%uccS`}V+&t?vZB(Jrc60-tF=3e{f+``bcKk$o3n-wT~``zm3l+1CsF
ziXAUzr^3%6l>WKIpF7}VF*`kn808SieV%qR@ud@4@qG*_9|unRRh8Vw&=`lR-z3T-
zJ3o3~2DM+Joqf6!<!$yK5<h!gOYWPHH%~Fry(jlAs*vjFB36$I?yq5#^O3}FX5uf{
z-_edAze}`-@Y`J4gI-UT`$)!d)qTSL`w~C9Uvl1`h3e;#6Rvt5%<WJU>8^acuuIDL
zCdVDcr^w}ZQMzld7r3FanD`s3H}-S59o4!^r29bPH?3&#ao>5LNJ@9}KZ<nMGI0y;
z6KS;5xx{zcPo|f%FPAY6&%R5f8(;n!pP0QL^Zt`$r^D|S`n>L!YS^jr{jwY~^W(fv
zB&B=z2L!J3dpE<F3oaA&GW;ol@8!Ll(GLfb2kgAx=Yqr<Ux{=Z_%rFJx^F~+%UJ!<
zd_6l_;x1vAx?JDQ#uxh?W%ObR+=^V!o#QY16HB*Pk1m3{^gm@eX6}n6_BkkmyD!)G
zJn^2WULUFRbhQoeDrSd*yeFf697rCR>w2M`jKp1{9QWTZ>|M8`#?tS+E<|>zNdLTM
zX8kZ0Yi<4NE|K0nc`n{jX8my9AD7ar*7Yij(~Ij(@_bsSeRm00?Gv=8awPsL`ywtp
znaMSzy!FDmUPo|P$3k3NtG-j~N^gO$F!aK9V>}%<uHV*x%hcD@(oe1$`~t{en5-_J
zf<LJrrRSF*28O6$99GPPTs4yU1iWfH9}XTEr7s_l{~qf2q=<hW_moaenEb&^AA*3M
z`?sdyR_crG1#*uAxnlV`7v<{~kh=>`47$?Wf%U_5o1;oIomXH>yeM;!(niiopec8s
zDR)+8B;}7OcR$GKbfyT%uT8m^nEGyWmwOQ8XnnMR+;!*@XnnMR-07#0+?gOpPV`4%
zRDM|3g8h5{Ta>f?=UN$5?b}#~fhm3Ybyd}Vg1u*>%U=*IS?Utwjo$Bk<3`3X89jaA
zeo`9$TLpeC6W?CfOMk3Q;s>u4_)Sq$lon+#`P^gf_nY<FAc?>CI)Oh|$l|ZUx61<-
z#LzfJ(tq%6F806PxdKNbT+BZbLDVP1{=v5k{OtMt{ezu{<Ze$c>EF=h8wBD#Kz9A<
z^tN|k_y85-n_=dL@Y2j8ABLWq)Kgtt4zirvr#tOYe>8?Oo!}jcgQA4JcBP)|`4QR+
zHps%l7JBSd>AM7e_3^@9+4%tc3zF>Pf^YO6Gl^f<X}~L0U(rsmpLg`!dt%%G7vVu~
z=R~Kw*4pYjm@C;nj-<Xyx<1g^>Q7oUH$#1PY<-s~_v#aby)y7AKU<Sk*Q_M;gi=pN
zxsaaLY2d55*-Yq}>GpDTHn+V@@IZ;R9eihV9TrBnM{wY?JUARqZ|Za>?Qt)Jy$ka=
zO=wl2->4szTOXr-tn=gC^USFKZ%Tc;m=gUl>!Xq1H8}AQ739<pqklWPBJ#7ZvGGdb
z+x@fJ*C-F)=y!slz&}h+Khz7cu6bgkHGuPLHsB;F%tY2ll#8h+cykoLVoRxfV7oQ!
z)b9*8hV6(6T~JR=>REEq(_LHZwx>|}c5=?(OXMdkl%MV1WUJNhy(;^#OGt7;&%V?%
zbIQ*c&K4W5;?ad+wyK1l`r}0TL@Cg^Qp#r)T5!KxMo)N)(34R<P~YH1ZmS<1`(*Y*
z8FfzN$LI(4q@J423tpw<2m2v7CIf3iTjVXLf+zG<9xw8h(Z3q?JL>nWI^m?xXiuTk
zS6Q4tyI*K^dN5mPMdNvP9Zb}Vd3L^HdfJ`UB6^H|uJVM;`WMr))q(nvWwJy*nokt?
zbtij4KKi4U!->>FkCBf<sVAjeu%E;E0zPYx;RL6Mr~rEGRO!0}e&tCbAKCcR-tZ<?
zX*kj>8gJb3n-agK(|}iIyMgp0KF)ct2r%T}8})WB@iY1vnumnr-k>$U>2h>U(oSFI
zVyEk)!4A>RQIDN#eV3?Dp~P?MICvGa(_rvu*j;b*hH#8fJ{cV36MBL#7x~yjbp1)_
zk#8PdH6`@SpC{V~{-QrIJ*CgLp!rgDS>`8mJ<>kM!GTXe_`zA1axcs$ApDxdpKBZ8
zRm@HTA6teKpI}ALpJ#W7^zUbu!_{kWz({`oXN-r<uaf1PnQrsFTWh;5ot3f_NjOoT
z41EVuU&c5O{fMa#o;Qo?Gwc?;K-Q~FyG6VtJlD>)g1!^^F#4;57rN9ZGaom%w(|`p
z^cd-1dXX&m>~$W&&&x}{fm@Nh!dWKnDBOz1i5$Ba<J`d|k>2d`jq#hbo#R)+9tQr>
zU2b;ow4e7pG<VL!eFDEJ@ptW%#M-guxj5k)c3-+%q~8nA#cWqsq}><$)0p#%aMbU$
zZ_3kT+#cuU_+yqsUFb`hH%WaaFS0d+vm<S*>bpca%p`tA$HA*uIoN&{x%g)LmH4$x
z{3LJ6j-I$n<fHZyVW*iLHI|R)5nu}a4{TY2wKnzPHi5r%Rp5u2_!dv45dNOT-$Tv%
z6HEX0XuR5+^yE@%Zu*UKXg(n8QD(h0`_UU~xvLBd=1WHp2|Wjy`7rgs6wtN5Hu4il
zzHr96Pi%bKm`=lfZ#$csoGACX<n<n8`bQi2!Mubyd>o^F*9O8~wM=`#+P1|zcgH^%
z3Vc_7xZt(t;2Zs6<<$benwfsXK4s3cHTw10%*9^Ld>@)u2Cosgp7}n6fB1a@-xJ@5
zaKry9)BQx<X~0#i-<at0eXVGT8&UradmsIzz^`P^U+^glD}L(x`vh+7O)}kf65{EW
z=hV65h7#9_H<y=Qqn%dYBGQ}vo~z)w--eyTUy}Hl_7J=$@Hn+&={sR(qo1t(vWuOg
z^$=^mlG7z8^n^}&q_;G_s_9LmC0{2!Mmg+BJr$j2yo%MEIM3L9oDb&0UfK9!-C8W|
zU=DKdjq<2V{2HcOe`4uZJY6@ZZ-5cyVc2Od^<+OEC_R`5r}K}g-#L=_+4J|3yn8br
zavz48wiRB*>=o5tdI6ZbKd4b2mA8uWK12)Z&mw$S%xi%|O7_COgb?LnwC~FQ5PIgB
zdZO3+s7I&7zDnRO{hGja@JB6#yD#~YZv4ZX^cwa)lDx(}J6|z-oAY$pXJmI2!Y)R=
zIgsZpX1`|#I-Bxa9!GlYRO!2f-3y(g1+6RPlfYHyXf^Q{{fXI!s=AJ0UkO~p?t5~7
z*5;F~h%wxV78b&Z=v`rsyzMh&zhl(%UCE>L#CN3r=J0PsJ#SjckM{%4JbuCrKO}JX
zGjR*@nGL(E^GK?h_>tX#wCYsX5lNJ<QQ!CE`6PRp<tyeV4q6iRr}9x3`^)*y0LVlg
zNhY%M9luNH*^_#*%fpzjIAms#y=MO`@)H7i&-ldJL!@U7h_rIOplw98E=4|!c5wJ_
z0>6U4=#Roj9<Ai(ju2nRu&)xh^-l`il=_6YF5FImTi5H}4*XoiwNt0>#M8mK;FsYm
z480*d^7XU#E<|aOjwZ<kyZ=k%ZwY_ZA7wYa-evB)qT|J{l>Jn?0<{lzq*=#~;VVC;
zoOQGno$dnX2f}FJj$7dTz(Tl%&JWB>uTg&L{J^=kEnda!ThPD2u=AeWzoDLq@3`N!
zk?tkAA8dBNQ*azG(p^{kLtu^6A7vM#KY-oQ^XCgxpXYMF)?JN>S0*mC#a!IFuFnqr
z0pi+P^_}Vu=I|8;;FUGt^=<>V#%l~yUvm&|{8vB*!)Es;9;2JuULZ>J5$(Jg$)H@&
z{A$_%ir>}$$}X}W(SDpNLdsu(zoGH>^6}w4x=OywEA&WnA|L8`v}PwPmJgfXeEZp4
z|4X!yu#?ksV(dLq0sKArd{xOzf8qDRl>S4BKX<?vPq~>3z{373x|}O=KRCDXB4?g&
z)X$pSmo3apxAi{3j%nW|(yjJ=o8vF~6RS7kc@y4|>lpS`0(UO`|6HCoi{LhYPqbI3
z=gqwI8g^FCJ##x>F*_6<kA4N<Fa&BpsAi^}9iP{XbO-Oroad?jYqU0nJ_cB=Kyb<E
z-lN)kOJLONy2N)HM+Yt2dioA?jr#|qEieRgiJM)oRlnHK58x=A{t<c%`!o+-=85L|
zR`j5srXhj9EAd_5n~dNn1SkP#{6jg9*|#NP^-|9_isJ9f`HbuOhZDY0e}aFK<11QD
ze^mO7`AlZT6m~ao!;c8una0E`6IWH9i1}tmqdS3H*Y(n2K7+Uf5W7(GnYY6C7*@x<
z&UzO%i|)iC#%@iyKQ1Y^2Cr<(=vyx-_hd-4t3K6klwE?#J6zgjY(5b)nsJ-JZ%Y60
ziV+DeRsFDes`(qu3jB?zOfe6E+RyY5Z}ev|e$oA3L#^jfuCJ!_lXgCEpLIMPaX2ly
zUow@;>~}=Dxb`<vpSFN~CG57M^HZ08@DB40m**QwckOpYx*g^lg>Vn$`7loNjlAcv
zrnW=neImWJTP%a6)}O3F8xRt9K9cLJbqk*AznmAy=ilo&d|D&jP3fneQa|kaNPaGM
zB8<C4yPC=IVrE2w%f)sv_U*N!C+-sV*_Go*1%J^WrN<bTz*L>o{yu>l$o0aR#>6WV
z*XT2IaO=9hIE+h(YireaVtlCvzY1Sr!0psiBg5}z{68%i|4X1s7r{SYF#eqd<6kHk
z|6;-TmkP$et6==Q9pa06*rf6e=JGw_5)_{CQT0%^|H9*|sy{(cWZ!uA@s;pv693Rh
zJY1^u+x<+@@pVJnX(pfBXD)h-{>G_44z-?2_H%q9Kc&X;6|HYB^*M~Q;NF?j{~Ngb
z?$7mwaO*{$>+{lUw1ZvwKGW+sYv30>m(Z!+82IX3La*bkQJ(c8>*VS0b<{XW?YAnQ
zEAz)!m^2l@Rp+Ip*aOFHIrcc<)^&Sv7+(?B?j`h{8ZZ9`e1!oz*35@KGyb0xjQ`g#
z9u&d<n}YE_R51SEI>cAwld?~+C!aGsk57bubRg!}6)>*xSv-EYk57bOmCqZ81~^<U
z#xFWPg;5<sT|xLxk&n<(PswqE^0g%UVNc@*;Rf$=em-*<Hwag)+d4g;<&PVLdnliC
zoa`=IV^-ImsQ>D{YJG9J>iHQh2|KLYHg&x@`t#z?m+6nMf$HDMKJ&j6_}S@qe!e8!
z>R$=m{Y<;)^-eol;x1wL;IA|B?Rl8{^DCvl@-cxwvy-y8UohsAcJ#zu!v58d3qASc
ztJCu<rGHQIQBwRRaC}u`PyTapUDrp4@fC3s8JAy(@$y{oHn_(y=?*8j^9VZVr^(>=
zrrZZg%6+h;+#wWNnRNbHNx45SDYpURcbRlvFDbWEQtoC+xmT5x``VInUsqD@>r2Z0
z`;v06E-5!FDfdk!<z8P>?z>9LeRoN@$3tgRrX4-0q}+*;a%W4*-BwcWTuHg-my~-!
zNx2u5l&h7LyR)R+#gcM&m6W@uq}+>3%3UrgcV9`ldP%vfCFLF{DfduGxoz0OqfEc_
zngViSe%hq@S+FPlaVju*GCpb^ET3-*^Xk<6FF2I=GXoqh6}~->KmRpX&fRg_nXCsi
z36sc2<yXZ#dug#A{hVg<jME>a68O!x$$5Mxeqr7l*=bMW&mHj5K2H0f80CB@-{V&n
z<J;vR*ICldBcC%jbUmub_2xqt{G#hDh91Qin7QaNp4)QjRHD3t?DzSyK3ROe{P)$N
zw%2YpzFi(=`2s6iUsbN-H8H39quQa&4=rNo81|L0lYzVM&J)Ngf&}iKJ5QhxZcX|l
zIITma(m#{+f2Mc>w!M^n7nJ8DIy>Hup12csG3x)J)Kj&irt5)ifaLZPwuF6`&{KWC
z=<h;1Ub-GQ(ijUOqt8I3gr2$7lhSW5uv?*X<*9!?l6v+R=SS9my<R1^PO@X`yF`7R
z7vXWF8%f|A{dSdu$6>VJxijw%OqBQj$4s~M`%3Z0!u2WFxei)g*rl%fGlz95#MdQe
zU%?a&KIekpfd4T}H@f3NtG_HxJ6y&e7k*5+KZh7)<o>#(+~1Ux`%p=_zbz^E;gWJk
zCFTCEq}<<^l>3L0a{pLT?w?A^eWaw^M@!26b4j^>DJl1_CFMR=Qtsm=<^HXt+$T!P
zeX^t+cCuyqv&WT`yQQSu<4ejtp`_dsOUgZ|q}-EB%6&>nxlb)A_h}{NKC`6UXO)!u
z?2>X%FDduACFR~zQmz5(;APrvyQEyFfE;8g!1G<yJSzw#-z{anFX!R#iqTxB0g#kW
z0$=goDz<=nZc)#<!yB+u$Z|LxJFcTp`j6x~$J_xQpNER#E51rf`t9c-_jMXdf5^#)
z+0f;@FZnRD#dfmuQGA_-@}u~ODbIB=J-wFL)-3hGK2e{-?B`%vpR9GDtcPHMA8I=V
z^0_f|u~XS~AfsINq`s=FKD~aBwXLJb*NV=U@@r_~FZvU2hp=&2*0Py=?lW*h$(N~X
zOuUNWN<K?!F(+{kCGI>ky^()y#`a)I+=CB_brc7GmqNIq<b!%z$D;PM|1ToFON;Gm
zx2LE+7Fdrl>fxc(<6iI8`cl?%pR~WBC;Zm}`H`b&Z`7V<o`#^-BaCrvPwLrUY&Y3Y
z==CLBZ2&!XY<-t#PluAPR9Rd<O+T2d1|@Kfbk`-1XfGW%Hn-T=(8)|(3H-Y52OQRE
z5I+GVzYyy!)!^-Lk73YC-&+So)cOp@T?f>w-L>u*y0Gp`wz^y0ix_3$$CTRuxx0Ep
zalXvOR(CK;-Ok6-*Ei)JZcW=8orSvaOH<zf<nHOV!UtND%^Y>Ie(#Vyg0OZyQc}Mt
z3b6i$=<i9~t_l9@Z}&Er+pYFS_hf54kiBG$_MWY+jz-fHqgLv^A1VW)Ttlt5{_Y=(
zeoN^mWPQKUUES_=Z?reYqd{+L(9nl~<meUpnp)pX>YJ$)iNCRaAJ6FM!H#}#mMC@;
zjhuZo4gAV`M1JO(_^n}QJnBXJC>O+EIu!U#QSwSlEd9p0gD&_+dF;Pmrr$0Qg>UrR
z-Ss{mnIg7gZ?rnlJVu#)DyB72{)Zox<-a&TDf&(|E?jX^nJE9t$ArFWu0F`yy4cqL
z+IH&MumXQW*RSvs0>7e4M*Ll1Kfo78YvjHyQ+6}-97sJOJVY6v1$tyTUAp_SgT)g0
z+5eFrkKj|rSJ^(5>%FmWLw03IluP|bg`TRB8MsvWiRr<5=CrSZ>hFU+iC;s_`V+%{
zw6)!ej*5(GvctX&gdhAD7dwq7jYo&k`z_2tF1}ITyAr>q(~eiM^hf*BiA`vgB0GNk
zE>R9gQqQg(Go~lnN^aQM#9TxfvSaJJ1pfa2E9{gqPmtwo?`IDN(}?z!z&Gp^{+Pf&
z$Sh}b-|+(b%p3ju?8l{^BKyDR<-@=aeo@w^#r>4DQ&bMBr18in+dBF#VW+)!zcKpN
z?&huf1p8DCx&vI=*etwH6}5|c?I$8V+5JbfuWL9OMYH8Qa`&k+#;Ze#U)OoXt5|(C
z%e%z+IV-w<ub&tBnPrxX^SLc#r{I#n&F-J#`~BOQHts}u8+O{gOW@CqNN|~Dr@?r*
z>U#2z&}Y~wyj$oy%4~<-o!%PuA*ma`C2(sm7P#5{)1!H3VG3Ncz18+3%PeKu2l~2o
zIK*+I*Uox40tkU`*uUz8Z`RWi=PnujU{mU=Wah`zC(lQMrxYxalux2O_N1OF{-Qsz
zdNr6vr()%uk7Sfb{Z3gPne8kZujPToTKR&jM7j@a;(Y4ri>%nObhpI(zk9-pWZVc`
zBi*y7=bm#5efOld-rj&m&<slpC5d#;KUd(_zSl@aq8(qp{LmG|c29Tk(*iemLKg07
zyEk0RpXICiZ}bP%pB4D%OkjLs_FipAXJO{mKck)>{=C4=?hi`uH&6ZZ{#%5eijjD@
zjHN$*zQE9qt?xv+8u<u*LEzW%7yXIjk4Mwd>ekva95c5JM<rzLS%@f!`V;=5(6gVZ
z$MGCHqkQYXEO4{O#jDq_R;CxPOs{E|Ulq7DZ4<nT*`?$;QAYZkQcp8ekK;b#M!$a~
zakKkJvmai=W4K$>US>b6Qkf{<=G%n5B1@`R345u1jC00avtRo)fm_j-coi!L`#dl^
zs&yyQZQvhD{5>F{8=n}yeg32oFMgS@%l>bR^k<*@wl+PD6|~ik<Ei^3?(YfQW@f(@
z4x{%)1#qi>AaJwiBNKTJPEL9aJ2xe6Mde8RjoG;%Pv5}bbHXpoZ>N6vP~y)s(_i?U
zPr|SKsj&Mza~#~bAx_-MnI{=`slHd>Rx;B)gm%B(6&prn&J7anCzSZv^##w-hNFkq
z;fUkRV@hQ|Y@~l*;%ASugWj;WDW)|A@n`Q7_L*hc$2|X|n0@N+cWF<B`2tjLb|wCP
zX8L=Bb-mh`T6q8>S-u|-=@0I<6vWzX*ja<+aXH2o!k>Soc)wM%;N$(feV&dT)w)ac
zla*zGzlXo*Pb~e>Ik31Ks$<w!3A-Gg5V*7K_Szb+t!};QRj|c)X0=J$efNyOuh{8`
zrF(0#x&g=3Ben~^G4D7~_}R}nuIH#xeXQIr((UEE6{8;r<^JZL&%>j1Hy;-1_HrJc
zVdtZsz}?TZ^F%E8r?;F${R@Ty*L6Q&yBa0#68QChFYuS1XvK}yzk=uZ8RdEKjRJpe
z!N=Qu!F{le`TPDi3H(|nzS@tu@VRDGZz|s`?c}5f8>z#&W=8#~OZ-YE{-p;loQgUD
zJC?pnl<%&@%^p|vdB+-R;Z*{^_ASCLbvt^j{zUlrQZ2jpQsa_gmwkz!J+FqBPl$Zs
zik%95mq_>Q+eNywaVOVZ9)dxQz&Fyp`<(*+@QZaK;3{U9$!4#G2~X`11g=rvn?EaX
zn-**wx8!+9M!P+fdc2-HY2a6WLF6O*dA>Icx2DE9NOq=;yM+CZep%w<FZvU+e}tb^
zClk1H=_h=cIUiWhnZ76M%S`T1nLWP~u<6w$IlrjO{V22BC(KJ7UJ`>Dg*}XNoJ;(g
zwlQAC>@1!;HoE;Vb60kSZ?vPT<l)vb%hCDVUFy&Gl%H|tbG77Atlh|}BbeWWU5?~_
z;Y;|d{>1D;@4uiA$owSmE7^Xz^8KB~_smit@D01Ga~S8Dc8?wfkei%_oxt6bez*=i
z!$P>VKNRiViD#IXUZcOA$@3TvKEujltQ=)MX^gjq)7~I=)pS99QRnq#uk!$XPM#Yn
z^;n5AZW4B{$o(_3`vJ*EO|Oj!++B&=%&aH5or}OV`jw@B5apTOA8MYWk@rQHiFDWh
zQQ%h=r@JUmk@^+or&_gBq3R3bw!*L>7fQ~YwxcEPM7rzx{jdX15%Cj1@(b~FQVre#
z_ZTLfb}Q>F2{Zoh7L5N+hxn@8ReFN(y`o&Q`^|#uC@YlTU|;g&o!UV!w_l@lS0rEE
zp}!mj1#p)n-`lBQ%foGIJJdhS(!R7kB=6gypU-;Lt=cW&R^@*9`Rz6+gu5qs-ZiMS
z#>Z^8s;%VX*0r4-+AHE3Dy>V={>}xz3EyHE43@8p$^CK%7{69r^G4V$B)MSeq$uyX
z-LO>t3?3v*9R>sW0I>!`J9brh)1M%r@9=Gz?KnkWZ?JRf_B$F~R2t1K%siRbLSIwo
zulZ}4`s92l)^9X=CZ>6vz~7Ve+=>}1G0!dh-a(aXa47NT4)|Caj{aJNUy=K&gqir(
zd@-xgg?(1E{r7$D+p?i?YjWS^>f&_U^$7huv>%WyVc#XncQ<=~XIX#rdn>8OM%8x$
z-)Mga5`PJQ(Vv|52kZHuIjbNfR6<`M{o3s2PS0hw-Bf!&-PjJhjlrn1)z6v3CiGRy
z>ANu;m($mj`gXM~@haP%ryK3la2{xx{HcAcqn=Ld%+&{TF?W4Ny|4bh=+B(;Cw3@_
zRtBX$okIIcl$)VvN$#Uvv*W3J$$GCUNTWAst#=zhCx|L#XUmq-cS6sOZpXV)Pj&J0
zc3OP|P18xE)n6Ztd((}~At6#O^cwxrk$f(!>$KrjEPwL3XOKFeCUBd7B*#<yMSo(r
zQG!P>YU>#GRRXvE$Fkfrc?!{hTnP6_&a0i~k$LGg%C#!@zdo|_rR<PauA*a;O(SbU
zC1Hh~4866#5q4@8(;MP!#$BzP*BE*aq~3!4fM}uaibZ~n@uT{;BES2K*Bw*sJW>5m
zWaJ$FwvkWu{9P+%-yY5w-Lsjr?@T`T7qxHHPl%q@p*l&uMnAYG*8^rQ`5krT1Q|zW
z=${6ut9POtjd^NK?qjvTSdZ*)^}2?bi0AMuS9Cu+b3cbH%T9@OAAMBRzsllt<GM!d
z*(AdoQLTT~b-Ep%lMvt5uJ6=y(r>|67;qJ?flo-8snGt7DDyPPbQ!t#mXyP#zB2k+
zCFNEN$f@#I_6&}GNtFMRwmDv@eqPqw*z=Vg*St&MSLJ(^iWw_`U-<co(jQ9vxdVQI
z=PSbBm(QOm>9_l5_x&&k|48B=E>6FV56?l9?s&TgT&$dD2T=|iQJX<sK~+A7&Rp~q
z-w%WGb0GDk^n-SO)VUdX>(Wh~k0Uuh3m4}@)>rF!H;Xtd>=bJJncSZ<1>a78`Ta1+
zUKKentS-(^QlEYfcG(Yu^n_AR6LYLTv3Bmbp1-2)b@V5q|EOzByo%vE?}tI@ZOZf5
z=9%f0^YGMRTFwWI^w!@k((5!|&cij@*Y00r_M^#il&%GnY_Et!JDy8D?)9_4z7<A0
ztA9}BXFs!C^?arw_g}T6)1AnNQ4SS(E|8~nWU4pr=gB#(BNMJVPp(E;iY`<=$9a;=
zm@n*5*X_q)euTKTR(+@DNAH5KFbpPx#-!gHz`4$N#IueVyHaw00N-OkITRUBcN(da
zF^H$+{s^uy^v2guo<4VO`9`~Q$Ii|Ue6#o?<f_4Y;b#n+$OxTw7Dt9}m7b@7!7yB(
zbi2@E(gh@vDfiTpa=4UNM&B2fl>4Frau7ARC0L1Uf_4e^C9kp~4IuxhdMU@laX83c
zZ4|gojoXyt_);b=_?2Sq%$bY;L?YcYr+wHa6S>!goeF)INcX-IZsGZ?s)vEvf32d^
zfLAel7oN`&epT{I<_`D;=Cg#a_Fqfs*X?mi&Cl}2L8IR6%Jry9X8QGdd&H|QfPWzI
zQ^vo=^S?ZNqdhg{{^kzz4i_E^*}X2`BRkDI@^~ypdUro0#_4Q(qyKm2BSWGc9ZK9<
zW;wp(+NDbuMuYS9dvm&gMEh5~n0h9@oHw42#nLhf+<m#8*2G`*C*D5Y_I)$zbydFi
zPH8u?-s$;}R=w~lk?uh9Z9L6~sNOBf_urMp_AvM`PV*tcoyq;imh9{)J0mWQp&4~U
z*rBe+9f$c4;@VpEof`i?AAm97yhiRH_WX@e`ZiNa?inD1!IWDYr>diQ%EKUoVbGaO
z8f&Xnoub88LSHp_H^^YPw|?R316LQv#cx&m-Uo3p^ujjG)y9p<pwocsR6(WZDR6<o
zb^kJqy95FE1*=Rq#@$w@0{d*_=s6eZ_{@@WpH))sb3pD|Zyh#Ft6acc&(e2uQ+BLI
z>HJ)fd-27G>jB86WelRgN961C;HKz)ZfM8Phfs7sH<WvZDd)JK8_GQsg6n>65S8-x
z6>xKBL_}<y3UZcMO}Xc3xzlcP!v0?ga#4L8H&W?xLXU{QTrmF0g7I-{uOjI=T`>Nc
zg7I%H82|Qy@$V=Y|Emhde__G+UtKW%`GWB;6pVkVVEnra#=o~<{I4k(|4PC5_ZN)+
zl7jKC6^#F&b9~W1uR#23-65R!dkG$6rsvz6=>sZ6rGD?FBzH|Lt_N;%F9SKXA>-<L
z0F!n%xko_md>b6Ld()d&T0<aSjHA>n`p-<~%i-oO*j@7eReT8mLXL8;Fw(iU9yrUr
z(vaKgxyv;SxgP9R=bFx@A=l|m!hY-KB9lblK~(sNa&N)Sg>dTu+;9v`;w-lca`n-T
z?pPKAlzxP|=s%%Pj6-d>iN*<#TND?+Gvjxh<BR-sA^x4M>9jk(c`bVVeWR78hUSGh
z?yo_pgAJfU<y9+7?gc<SkaG79ftb_p=g)Uh-wQ$Rd>^)TRoWcoUIcOvMopAzvQz%<
z0=aw9aqJ>gj+}`eBo98qo_8y`t1yd&GR~SHnsWDm+!feVWvaS`-1;H(-3xLLjryGn
zqv5dIo{q-Q1kygHzRMtYwTq4*4@490z)`Laa&q2wCV(uu$~_EJr2F8YgQDqN5pp+1
z<ISjky6StWmaC8Yz4lGV{Jjk19`3F6>Ze0h5^3hN>h&X14igD2qP>x^b+cIxFIRGM
zG;o!B1;|NTMtysJe<JG3D?#qQNk`@FrmI{7<OUaq6Zi5H{Z|v@#;qatl{x*FNM8%$
z4@Xldfp)aL(DEex4S{LLRggOm%lspiGe@}|$YFVlN1o9-l%G?1Z%R4U9l6T&rQEf4
zYdGu;*In&DkaAb2)I&I>a|m*ma8UwQp_OUU1cg0Cxs5;$Uu<uMLFz(=Y5xht7d^@H
z?Pt>z$nQ<LEs(q1deu$b5By=EXF`9JDs9SrH^|9;=xk6x?!ST@miLv>u!p^+tG<8L
z`fd#h$bC%9-Bv{I<67?aB69x*at}^cWl>jf!w)BWegfoV`JJlX9yrSdPlk4fJ3PUj
z^W&QjLpSX<p1&I8E^f5LqW$IBPYHq(b+JQ`YI|uJH0#SFAb0;}Z&XnY-ElnF202;J
z&IKEt5l(5-KBm4KTJDY_ayPZy`66<!(sFkek^44~yAf^Q4_Paazt@A@HQWTQ4jbYI
z?soZ)rkt93q!`q+=LbOUuFLg`s@NA=`R|)?-uRa#<^H;)+!4sZJO}4155UXH2g8or
zc=EVUEtkLNfSjzK7vQN77A4*6@+Bqp-Ck1et8_Xq7D?v|OX_=3Nx7O%=cOX)>}t8Y
zipb5h+^K5dUVbn5G}-Usz*%`Ntf9J<`wMM3SVMJ_+XlI7(9Pciix6<;#Bw!oll#=q
zu+n)ZaFl!fQ!F`{Qn=~c1vwc1E_PS9*4JTv1!F`?@1mZY#k})JK@Ru!UOu%vjUI@W
zPdUkLes<C4dZF(do(cKG`D(P15R6^tfo}u3yDwL^pkINxlDpjNo^9FlR@ZfsHf-f)
z=yR6qfE;c>h}9D;=`7bZ<WA?v!K*3Yr|d-USFo=Sj`@5T)EViW{o40Lm1Y0AR-IAr
zCvBd?!w+4X!Yi%;JV{N*qdvUOZd{JMu2LszBA@VnSm`@__V-7MYA$|Iz_h}5qM*-8
zoN*)YH#C0zA%TC0zv$26{B$P020UD}r{kPsqynL5Me8|yrO<Pvb>NlKBj0lmBiz+a
zj^Bx4pQDDrP4SbIxHsT2V0j{*yEEPzD?X87pIRpq-!AVy_zJbcUSqo&ZQE*R)w)ZR
z!{IMU`&_W%Df`%ZChg_cnVpEIo0*#h`3ax&1CfHzQbXln=)rSZAWXJa&+F5HY$<&w
z@?(@s<q=msP()Ct2J3M8NNTl}^~u1WOZ?r%^;VWU76=@Dj>rY^XE#LpXF88~wYWU4
zccONen|`xi?G(T_c=L905_gGuRsDIP=g^Ltl8=IZ0HJQ*OYbjG-sSo2)GzK!eKVJQ
z^;aiwaKt#`6ArfW`RztI&A#9VBMmhtJy6{`;C>oL)uE7{L#b!xqNn$&)|4_76w~uD
zk)Qnb4^1d4C&BZErkStDXrJN7g`SlB80}LPjL>6epYD?V%fAWyCPj%ZRJ}%gI4@>B
zoR~+&q&Lt6{=USor{jYT#3$c|e1DMF>h^MQ%YTZH4`HCkkMz^bKHn}J_qLZ|yPnzu
z-9FNm)!!4XaI@C#w<Z&C;OTVJ>C(x5boccl9nB~e^k2-5YyHr)W0<-ylCWd#+z&;d
zRf3K#Onj_p9kL?!)dlc(o$z7bG<f|a_9bz^H`@PUK0em7v4979*Eu{cD7~UdGbHS^
z|INZqmBn^4#$_;<^aleyc5Hno@Qr*N{NDn9Nyot}RSq_O)b0zMe`?h0qdVUaX{bLU
z6zw*nzuEO#pW7(sXp<9<w#HVCcB<FLc=TA$aTIgK9Qzvm9n(3EG~O|t<4E{S=QtAn
zF`eT``i|)wN7Bc1jw9hSpW{e+n9p$}J<R7gk{+gW90{N497n=uI>(Xlna^<~Jxu2~
z5<b&8j)c#Ajw9(|I>(Xlna*(}eAaUujrq*(d)^pLENapJ^k2q&W)eM=r7tl=7>Rk=
z;fIBueNqu!EY_p^n$o9#3H%c0QRY8q81tZGI**dd-}8Btgv)duCE*{_d6cBj^Ldnn
z>-9WJqrFwX<|m?xKXYjZ>)p{B9!_84IcV>S&{JEi2cPR9*#2Rl$BwP<674OxPvFmW
z9K2fGo^NbN8v*3v@9F3I*)@TGgqq<~7wh)f&p-5Bf2}*6!kerKupYL1K-jCrzi@xj
z7wSd+jdBbg66vdm-_`#r|7c%$o{i28Jh9Ol47y`=bSbVoTvPGmf0K50I$tz)ere}K
z99P{7e4}4Grt?dwT``|uN_sq>UrM+v=a(Aws(R|DqOwX^Uy${x-&^09PGS{HmGPp#
ziTXRgRp?1sPfD(1=zUEV;j8b29^-x0(rvl<fjo(Jl0Mwa^)|y!HHlkMn#Et${_OP2
zUEs#uoKvC}yyuxoJ-hCDqBoNnc|oK^J8a%A>=fp{pM-8j<i}c)wUd{)6Z(vGmf-n9
zU&W59?1%LX!ek3h;2cIi{-ZJKvt#SK1b$88ALuxE6~~X<K^$Hv3Vfsd>t7|(e}KQ}
zPYhq34}coFkb#_1QRVVlJr31}QqR+bk|WVDv&SL54rjeEjjzS&WGAjfevNii=v?EI
z?&Y);i1X)Wb`oNCjLvIuC?;92ceVZY9w+eY5?|_ZwO?2AaOtIU0UM&mM7=D2j&pZV
zTgzFeH_FNLInFfhFrDK}_@2*kCS2xooJkMUInIR7e2z2e@qCUm;d(yDnQ#Mn4ss1!
zoBqW5kJ9HjlOE6KI1}zMo#RaUJfGuCxHFz}oC%-l9B0D!e2%lm^?Qyp;d(yDnQ)oT
zaVC7GbDRmE=^SUm_k4~s;WC}$O!!RaI1@h8InIR7bdEFOGo9m1_)O<G6Mo2Zjx*si
zo#RaSp3iY6T&8oJ37_d4XTtY<jx*tUKF67Gna*)0e9z}N6RziToC%ld9B0C3I>(vt
zna*)0eCBhUNe|OG&V=vz9B0C1I>(vtna*)0e9z}N6E4#^&V=vz9B0C1KF68#FrDK}
z_)O<G6TatjoC(+SInIRZ`5b4$Wje>1@R`nWCVbE5I1?_@InIR7bdEFOGo9m1_@2*k
zCS1?wI1{etbDRm6`5b4`qxP%C!(EI|Y#nm7=sC`W@A({O!u5QPGvTUpr1lMCz-7!H
z#rMNi{*<22ai(-Lo#RaS4*S>UpW}Qkcog>jz;GjMH6~kO2-_vKhN<4D`aP7A3#vaY
z_JtO&6RD75<pU0V9XKYS2ixUkzq?fLxd=aev&+8Ih4(=x{C$Z(r=&+0vGfakOuFN_
zsf2&@7Looi6W=;VCd)$VeJbJ4enH?j@fZDxr{8rSYQhcVc}=eUkXF6$Dv|EPxk&ds
zGu;v0D$5ZxfqU>)f$OyYdHQSg1n!dDFaOBSUd+zIUpdIb-Jo_CxQ*YN-J28GvZ&k8
z9lxE9_+29X^WPSB*_ZxhQXrQ8$s}^P?xvpqE^wPV{Rh7*a1WnqB_W2}9^VY7*(cBl
z@kF{Sa-aOV1t0JK<^Jt?b~n<!D{=QTaSM+t)P9=soOn<BtP^f1&&#Z!rSwPH8|nw}
zU7|hL9QIi^>~Sd1rJPHCh=ewAUB?I%73Emh^~7PkLVTSg`%2W>bHQiA-ccBo2Rby1
z?f^CoP5YQ~p9gY9_ZdfBpI=h$871YO335gE8OL;f0R-25#xef0AQata9Ob?cLeYK3
zQSOUOImdm*QSR9gitaOxauo=2e<bI9#!>D$TF!BwaZxYNgPh(MEBok3vtHh5$~o?f
zh3UKt!qsjY=2Vkq+-v1(H<d0$`&FXcx1heL;XHV6<r)ktt@X6#W68Y`_P45UjD}s@
zxNU24XDgLWr1#fBedj?g+ILUxLF_8`a*#9kxpdjj2lX{U?k;eC-iX+x(OxS~`RjsQ
zw4a^YS81A_L9_hUK<*{i9)KN_@4+qiP6du~o3_5wu5z!l<<7XueLKim`@TA+^EY9i
zD#I>kUG*K>a<{t5t;2p(vfZ8uD$jM6dlu~DR3?94_e|1vHrm(L(JrqBIla#j?1$?p
z_ZmYEIv8iUZw5JI-zaCf*Mgj}k5i_c7`Jz5oIT!sl{U2A`3J>*4o4TPwyWkNF<!LZ
z|7Os|{r75?kZ~jO7aDqQdqec|W81&U&|qH*eNC-z=@mlX+>W<6U((+scmJkcjX!&>
z#Qz+jAcVq)Pc~0g`<uvNp{B-%a{eWTeIKjeJ<jhQytfu*V!?k2`!f06<G6w$VDh^s
zd?vqp!apXzd(wAIe)pu0$?u-<nf>lb53}Dr>0$P}Cp}Dl_k_>ncTf0Ce)ojW>~~Lk
znEdVupULl@@R|MYNe`3XJ>fI?-4i~m-@P%PDdDe<8zL<j%A>Eucy7!ej>%u0?B>~D
zop71_)d~NY{MAXHXMc6V_3W=sxHIXmp7I{Xc%CS=&n4+Oye#~wt9A`n^Ly!!XzXt$
z_S3Xu>$}AKwkrMMv+>RS&7%D}HKKhb@QvrLSw8+_+24%p6qNA?&-3dy`i*1q2dDfn
z`-77n&;H<q%i<5dqMu6(`F(bC#s_2k38Y_U&92w6_Ga%7VMn#@678+HpJnEbG6LVQ
zi)TMeDo-XqOTzc;XGyrsewL(%$<LDTnf)wDk7qwi!u9NDNw~~@mZZnCpC#cQlb<E&
z^Xz9yxJ-VQgwNz>N%)@qEH$oQKTE>(>}N^1On#Px&*W!G_)LD5gzwqUl5m;)ED4{<
z&yw(&{45Ed$<LDTnfxpXpUKaX@R|H937^T&lJGtISrRUjpC#cl`B@UaXFp5A_3UR!
zxJ-VQgzwqUl5joySrRUjpC#cl`B@S^lb<EwGy7SR9wt9a!uRZFNw`dYmW0pbXG!>;
z{VWNW$<LDTJ^NV_F0-E{>0$D-Bzz`6OTzc;XGyr8{VWOBv!5m5GWl5&K9ip%;d}P8
zBwQvxOTuUJvm|^sKMl)|$68p9-6Yn5J^NWwx;^_@60T=IOTuOLvm`xCewKvq+0T-2
zJ^NV_E|Z@n;d}P8BwQvxOTu^XTXFHT{7&FrW7t?7?L5CXg!5ZlZ9IcM?W6eRDDzzq
ziu$df+;^9h`<{|=KL~O~{Z=rYKLo+mZw2H3FodFhD=4=Ip{U;q%KeBb=jgYBaz6^8
zsNV|8{bvY8{Z>%!zi2sUzZI1G9-F6sDj25KO6AwJ6V+vuJzjqJYqj3$nY}2L^Y0Le
zZT^SouOrX-p>BV>JFSU7ML5o4+zxd*9xK0DrbA>R`M-J}jkb>L&BSjed?tP~;WP1@
z3ICY*&7|*`_|2q`iQi24%=~83!_03cJ<R-O(!<1WCVVD-GvPDwn+czp-%NU#_|1gR
z#BU~iW_~m2Vd6IvJ`=y0@R|9|q=$*$O!&vdZzg@7`OSpO#BV12W8ycHKF|DS!u85;
zZt8hxDL!p-zNx-R%yW;4PfK=U=F^fM&wN_KW#ZEkzGpry;TGq+sw%VauUh9Me9wGW
z!e!#S6251?E8#NpT}clU-<9y0`L3kLGvAePJ@Z`&mznQMdOY)83HO-zuB6X1-<5Eg
z_^yP{#CIip&wN*n>zD6JxSsj0gv-QtC445nE8#QoT?yYa-<5Eg_^yP{#CIipCcZ1-
zGx1#spNa2E_)L6P!e`>U5<U~(mGC|DT?v<o?@IVgd{@Hv%y%VR&wN+HW#YRMzGuEG
z;d<t~5-t<pmGGJPu7uCTcO`sgzANcr;=2;QXTB@pGVxsrpNa2E_@4Q$gv-QtC4A3(
zSHflHyOJIzzAND~@m&euGvAePJ@Z`&*E8RhaGCh7gwMoxC4A3(SHflDyAnPV-<9y0
z_^yQSneR%tp82kX>zVILxXgT4(!<1eC4A3(SHktocO_gVzANE-=DQLu6W^8aJ@H-N
z2z)gR;nsA}oo<XeC;F{vFP&JZ_^v4PlMssXT~Y48mz4YIl5%eXxuSemOy`>+xbj^w
z{?9-t%6CP%pM_AA?}~CiXUaM9T~Y4mAr$4iqTE{`6y>|3+%IT3XTB@SJ--0o)vT8j
zkh`?gg)<>W<H~a7@(8wWPWza0(~@#qb~>Z2qFwae06E;Eeexil`U1PAJM8a{cKHrF
zoqgB*eJ{v`qfvkP)bey=+--H1Po*W3_LE0_Kl2>Ro)<Q{?NmAO9(gC~Q&9GJdB?k2
z@7}ZC5GC^Pc_OVxXQRK_ykqbXs9nbX@7_W8?$Kzy-;LcmQ;>xnLY<z+%0HIr5t&K;
zFZ4CFJ|_M#mT6S3O#EZQXW}0d{xR{7N#8N?k4YaB|CsQZ`NyP(nSV@rnEA(~hlzho
z_)Pp`!e`<i6FxKlnDj95j|rcNe@yty{A1F?#6Ko{CjK$uGxLv04-@~G@Q;aqO!_?Y
zj|rEFe@ytt#6Ko|p83aw>zRK{xJ>+G!apYdG3jIGACn%>{A0pp;U914=YYLaKP8?P
zKHYj~i0!-k=&;v-vny9et#PN*ZI3$LtiwD3Njz^DdTK8edMZ!N(-SQ)^#<Mb=m9J1
z5LME%qVrRTPo2Jym3&@$`kSJJFImZtpI<rYt+zK?y<twOm3@qKd*)M9{bAx$6TW9Y
zHQ_SzsYwqLpPKNQ`P8JxGoPApJ@csvmzhsZdOY)~3HO-z)TGZdpPF!)_|$~Y#HS{F
z&wOf)>z7YWxSsjcgv-RICVVD7HQ_VysR`dRpPF!)_|$~Y#HS{FCO$RcGx4bjpNUUR
z_)L6i!e`=B6Fw84n(#gIsR@^fPfhqtd}_k?%%>(?&wOgaW#Us4zGpr);d<s%6D|{<
zn(&$U)P&E(rzU)6J~ioK;!_j8XFfIIGV!SipNUUR_@4RHgv-RICVbC)YQkmaQ<EMh
zJ~iPp@u>;lGoPApJ@csv*E64*aGChjgwMpMCVbC)YQkmWQxiTDpPKNQ_|$~&nNLl)
zp83>->zPkYxXgTN(!<23CVbC)YQpu*rzTt`J~iQc=2H_c6Q7#!J@Ki35%_T!x~*|L
z+Cz8}UD+>{j620YMVUE-qI_zUduvI#Uo9#3HjpdIr^a;tIs{ifHO7BCgra<ElzRt+
zqI_zU`%P2Mkxz|szXhQvpBm+U8$wY&HOl>tmUHG)queJUJUHo&m+xw|d&Bk0eWQGy
zKgtEb8!jVvOG&w~q}=tAaz6la=O;IZ?YnyY?lmBdJMgg4E_)#NaBr;_F}J(pz*X*-
zQQualH@Z67f(^!(tHHX_BiNT_|8VLlL2!B027dBrct7k*-tXRPM>g(Exzivg>)9Dd
zq_f-^EqAtv+*y#jdkicBMZ$+1rhUwG-U@Q}V$HlT8V<W{%x0Px@zb#!z8d828BK4D
z#+{4ZDF{03*N$>EOlL$wI3M;d^n2am)Jfl)f#M)|^rsb(-bwCfK<@7Dv~poI+U#{F
zV3lPjxt|3&A#-IkoIs7a(07vixwzb&Eho9RU^=0n*zUEvlK}KN%6$;z?%(W<Dx&Wk
ztp{%UK7#trKM=Vj1RI@9Il<f5iN@HdZwhPIqfFH=;!i<Pe?#;)o9DkaZVkFnUp8y2
zqtW!lsFhyu5vbyG>}tKuGv6EiwDcJw#?jNFzu9`xzu@8S>O;Nm4e4HB-8p*~sPu$7
zJ@wD|;V1zWksS4ZjOTNsySfd^+Z*H2ptm(>gh0k=Ot!*sG@c@-rKaTKe}&y&tM&aK
z-PheH|N0O8NR-yuQ*SZTtnv*OKWW+cWWTq1vNayy-<UPBNIfF|roG?&W0AgWzEDg<
z1ATP_wMv$PnP&4^=xb_wGx>918;aTylRpRHGx>86{xSJ;kiKK`=OBGd{v3qQ?9V}Z
znEg3O53@f9>0$EcAbci&4#H>h=OBD$e-6^a<j+C)O#U2%&+N}ZdYJq<2%pKHgYcRC
zIY<waKL_C-lRpRP^X$(-xJ>>Wgnvx_9Hh^)KL_D@_2<~o^TOTxej=JT?pf2{IB#8W
z?He27DY*f3|E$R_04C<2rTj)79h!4m^Exq~J|@2rDi3DA5z^z?Z-j7J{6>CE*Q@X@
z;m<LX^{OUTYSi=Xv~{vQ8k~?m9IatzJnD7i?e(o*dsD1?!zp?v+pYFS_hffxI)-PT
zoyMcB@#N%ocMJ<>-OkDOcr@%z<)7tKCm@DdO%m6l-mK_!7V-ya<<v*>d5gy%gv!se
zKM3J6`GXL?XMYgFW%dUlJxu-}gwN~`LV7&=gAlG~e-OfD_6H$7p8Y`x_n7=aNS|ka
z5W;2h2O)eWe-Og=><^-G{rZCtu4jJ`!e#OYA$%r(5W;8j2O)gV{vd?Q<PSplO#UE*
z&*Tq6_)PvFgwNy;LikMnAcW844?_4%{vd?!*&l>(nfyTrpUEGD@ICv35Uyu`5W;2h
z2O)gV{vd?w*&l>(nfyTrpUEGD@R|HU2%p&>g!C}^gAl%Fe-OfD@&_S&CVvpZ_v{Zs
zxJ>>agzwoOgm9VtK}ZjiKM3J7`GXL?XMYgF_3RHqxSst%2$#tpgz%aCK?vWoKM3J6
z`GXKXlRpUIGx>uMzGr_B!u9MALb#s&K?s-GAB6NU`GXL?XMYgF_3RHqxJ>>agzwoO
zgm9VsK?vWIKgdUcUxxu-mZ`U7!?kwey_Why@u5-X;}DAagP`2Mm6ZELNx8=ZpS`F*
z2&VH1Am{22g7KdS@r(L{pxl!{uBbl<%01bXbMyy6xlaYTqW&N#_Y{yT>JNf)Pt|hH
z{vas#4v>rd9v)~-HY?9P6{Nl$4Tx`#at9^l-dR%a_e#qBeo47^m6ZDk$O#tv^10gr
zcYA)+kh{Hr+&>#~=L*RE3&>p?Z4EnhI1HeG+`pP~lCH1%t@vNFANvaMvoPwJ)A<Nk
z&w8J2$(;!t&T&Aw>$cokSGk9uY3aK)OHS|*cA~x=bsq0I2ce<&5BDP5??2Zn0>yvd
z?hZSnaYT9t!u!JyU7Nze4+C(pnT|*O^Ywchmro%RDAoT#@pLecQ9gHn@C}ioCjO#7
zN*}W8H*TDSA+9lO_fD*~2dAsI-?0O{j<wcSKk_jsrth(yn=lF-^fk3TnRxbOKPH|%
z;WP2<3ICXQ_N4Eac=n`^iDysv%shM2!_2cMJ<L3N(!<2FCwwNJJ>fI)><OQlXHR;V
zc=m+P#Iq-SW}ZFiVdB{nJ`>NL@R@n`q=$)TPx!~gvnPF?dG>_M#Iq;-W8&G9KF>UR
z!u86tH|K>bf@fdTb6&hM=e;oZeaW>;moAJ3FtK*z*HgL=CH{OdzCDk>u{|h?Uy8qP
zr^UQWJQo}jf1m8d%-<(Hp85NP%fjC`>TC71;P2P);Z%QO^%b7emhm|a9s#pIqPz|K
z!{<x?fG1jlNql?`%y&2u_%r<+)|CDSyH61K`$CWMKj?4wHkXBG0XlO}Zo<9@gBtqR
z-?!GjuicY>oIUD={uQmikYB;ciDd-iCSkW3k6!`RE6;ufgv;btK=_{h3J90kuYmM0
z`4td8vtI$}@$6SXxSstA2$$Kffb@9wD<Irs@+%;Hp8X04m&vby@R|Gy2;Z|`fyVXg
zS3tO){R#+|$*+L$nfwX}pUJO)@ICt#5H6En0pT<G6%am?UjgAW`4td8lV1VhGx-$|
zK9gSo;WPOa5WZ)>0>WkTD<FI(zXHPd>{mdzp8X04m&vby@ICt#5Uyvx0>WkTD<FI(
zzXHN%@+%;GX1@Z`!{k>$_@4a=2$#vPfbg083JBk`UjgAV`4tepXTJi%W%er|JxqQD
zgwNzxK=_{h3JBM;UjgBI_A4M<Ccgs0XYwl`e9wLbgv;btK=@341%%J!S3vll{R#-z
zvtI$>diE<ITxP!l(!=CeK=_{h3JBM;UjgAV`4tepXTJi%W%4T^d{2G_PXjJ425>7F
zcRQ=V@;tHK8RYvFpv==D6!j}Wxz8yn_qiqIJ`d!I`W0Y0KOcgtUjfE{285!11t|AS
z2u1x0Q0@y%IY++&lzSG0qJ9M^_k|FO`W2wuv$b5VUx9efxf9h%ls#@fH0q4>K4!jf
z_I~i{eJ<%^;tLZ#6JMC{nfStle@uK~(sxXJVbaIM7bbjWzA))w<_nV^X1*}#Vd4uD
zJ`-P<@R|6+gwM<uCOu4iVZvwP3llywUzqeT@r4PWi7!m}%zR<e!^9UR{A1z^lRnRU
zVZvqN3lsh^@r6mBXTC7udgTl6>iO^PD+OP8_UVERcnD6A@X6;d-alwv9JHg;sA|Tw
zGm}xMOUzSC@qb&PKui8F@I#&7W8(i(xiRy9Nsnj#FX6KAe^+#Q6ymRTPb5p&tVgfa
zxXs7CDf(qsN*sv4+4WkVw{^We?)5j|0JIaZ4|uKJZ%roMN$#%SdOv!yUvVBS@PpUJ
zGS!JcqCOk;^UR~AbTjd23Ewl1mT;MQw4{fLM@#t3JX+G@nMX^wo_Vx{%gm!CJ)U{A
zgnLXpTGHp4M@zU&JX*qM;?WYmXCAG_^~<9rT+cjO!e!#o5<U};mhhQ)w1n@OM@zU&
zJX*qM;?WX56OWegnRv8>&%~o8d?p?(;WP1Q37?5aOZc97w1msVqa}PM9xdT}=Ft+a
zXC5u#GVy2$-!qSva6R*A373gSOZZGYTEb`I(Gos0kCyZ>@n{L(Gmn;VnRv8>&%~o8
ze9t^u!e!#o62501E#WfrXh{zfkCyP6c(jD?nMX^wo_Vx{>zPMOxJ*1+!e`>q62501
zE#WfpXbGQ*M@#rjJX*r{%%de-&pcYf^~|FsTxK3E>0#p062501E#Z3R(Go5bkCyN~
z^Joc|iAPKLo_MtX4tRqY^zPi@2AoKnct51RQ2W}V%$Gta%A-ZOFDohc<t62+AXk(}
zi|ITC!Iejg@lQi2%A-ZOGZ2dMXi@I0Dd)(eMY&rc6y?#P+-(qw@@P@+1zIkbM{Cxv
z?*_T6_g=mR<nHdc8Vp7b`*Wkd?-O!YyX|fd4qC3d?CXtkZ-sENeGhC?-|vnc_jg9Q
zKZbDkWN@L|@83BdwL0xq>UK!9k2uQxiIBT@xQd%mUmHyBX{lzG_-oqbPeIO9Hg%Ny
z-ze7^v<!s_J?aZn-@B#UweEPk*X~|uP2Kv3_k!HT_O%<mX?x?^6r`@W<?sC<ckSj-
zmBey2aFhEpkdyWEOwb)W%l!q&8T)ge3LN!4@zVlOgC;p~X{X!XnvPOmuUqB*B#?U;
zj{m;W8n)KE<G@w!i$M;IUwNS0?_w`~v*K3Io(pnUd;Kfj$prLW?6yZ8Rm_RMX1RZf
z)OT-tG^|{PiVbN^`<Qa~fSfFcvq1s5H)y$Ai^%;WP>ilkH!J7Eup;YdS~3H{bJ&T-
zJZyu<%hR7}z10`LAxfm$M|>Ys=E9GHoYo+e;zNa6|6}zNkou!UFZfT`xvBLr`3Ybd
zM&-!lCqVd2egcGlOnw5S@0k1qNFS4*0O2$H36LIUKLOIi>?c5anEV6?pUF>v@R|Gs
z2%p(cfb=l=2@pP$p8(-A`w5U9CO-kfXYvyud}coZ(!=B@K={YxCqVi<`w0*(lb-<L
zACsQ|>GSL-K)7E01org2FkBaY0(-Z}S)_Q9$mUar<KFf%ZgxzMLiO=zy9W;_$#05H
zloRvTQhozr>VuNNH|F8T<TpU&$m};jdOZ6L5H5?~z^<;3wF_cj?_GEp#m~&eZ^f#Q
z@)0zuiSjy82ipQX`M;<iD>^-e{2220;U+s4_a8_m*7zooZqNP$lx`;f0mAp}KR~$5
z{sW|k$$x<Gnf(Vyk7xe@!u9MwK)B5Q1Ej~Z{{Z10lm7te^XxxBxJ>>7gwNzZK=_{h
z2Q;o<{{h1F>_0%bO#TCe&*VQq_)Pu-gzwpZfN+`o2MC|Ze}M3r{09i1$$x<GnfwO`
zpUHoK@R|Gv2%pJ+fbc#04-hVs{{Z1L`414jXa51h_3S@DxJ>>7gzwpZfN(wg4-hVs
z{{Z1L`4132lm7tWGy4ya9wz?*!uRYyK)6i)1BB1yKS21N{Raq_$$x<GJ^K$3F0=mt
z>0$C8AbckO0mAp}KR~#i{Rarwv;P3$GWib>K9m0d;d}NUAY3N@0m5hUA0T`t{{h1H
z>_0%bp8W?1*R%fs;WGOVkRB%g0mAp}KR~#i{Raq_$$x<GJ^K$3E|dQN;d}BQIFH;}
z2;J*jz4qp$+ZwkwR!2L=n<4vB@kCMP0)(Re11NW~q}-*Fa#umFsQ&<_^BM$K{{f8u
z0ED9c11R?(grfcfDEE*l=jcCxat}i&>OX*TD-eqM51`!3w4Ag50Lpzognnyl*xmp#
zc;Ah`jB;;+VDZ5nc+V&|x8+U)Ioz)N#+}&?J^*reUjjdeh)X^J-nyIIpM%`h$T>ne
zE4ayh*iPq}z)|1d*>Y!H<^JB5yVX_hK6nLh+U1mEI`0R$GIpt#lzT}@xvM4R1|VnJ
z<+P(+z82*!SGK}VYYJ6!*;Vd`L5}<?3dp?@s1s$%;nkmQ=kJVT{<_b!<<2_FeM?O4
z)(knpbJ&T-JZ$qpSi2rI>-t6fDG2Isi2i2tm-K#+tE24w_9IOAPw3sydJli{2cqAO
zE~qHcUv>WcHuMXl@yUK~6~m;x+&Z(fgU8$tx;IAS&6*`-+z34@T2J-I|C9LnGmKc^
zryx$8R|-~PBTGcj;k7h1?$WRSPz1OndO`&r!@YX#LbwHEB4THLM7j<9`a1;vf#Q`3
z@dW-wpptdRj`)WCgV_&9h_M}F6~1Br?t1?ugvr+G`C(@~>UFY|CGt`EexavoXJ6@&
z1$@1;HSP7IA`p7)*!nJkA3EU=x`S4~KWbyrqkL#Y`%2)yR+n@2%w7~@{v9G>^FKs?
zv)c#psUGU~x4YAt_>*8!3B-l}i*$rK9go%DMW$n+GWarKS0;ZK>~o@ihsocC@R|Hw
z2>+P;T}a<C`MZ!lCVv;gXZCj?J<R?tq=(txh4e7_yAVE;zYF0r`MVH4v%d@JVe)q&
zd?tSv!e{n(Aw5j~E`-nI??U*j{w~IR?C9NZjK=1SdD6y>lj~zKjTuY^=kB=uY}QOn
zjP!|dy@X#4>dBrr81s~4@~ffp@$6SaxJ-UEgnvwaHKfn8Uk%}U^{X+Se@gkSq}5V2
zzcuRVG5M{KotXVrNRMZ~6~bllTQQ!~3;BuUop)i>BPKr)vWsUw5yEBi6Cr%hej<d+
z>?cBcnEXTtpV?1@^mz6YAzaUXB81EACqjBW`-u?lG5Lv*KF@w4gv;b7LikL6B82bR
zPekMT^%Egn&we6=%j73Q_)LBxgwNzBLinEjL<pD3PlWK9{6q+!$xnpvnfycupUF>z
z@R|HX2%pJMgz%aCL<rxrp9tYH`H2udlb;CTd-f9{T+e<Ygv;b7LinEjL<rZjp9tYH
z`H2udlb;CTGx>=SKC_<)>0$B{A$-q%B81E2Cqnp4ej<eL*-wOUnfycu-?N_x;WGP)
zkRB#K5yEHk6Cr%hej<eH*-wOUJ^P6eE|Z@K;WPP(5WZ(W5yEBi6Cr#iKM}%b@)IF^
z&we6=>)B6)a6S8p5H7Qy2<c(+6Cr%hej<eH*-wOUnfycu-?N_x;WGJ&5WXirk!Jvh
z7{eg!blbg2FKaJ<d<&`g@hJ1ml5$^AQtnwL<tioRo>Nlpc?IMYk3p3~P<!W_qqn_F
z_B-DguXNa*b{g$|uREM(b0re^v)>o^l}!At;f>y~vm8#xE!agrgXEjQpG*9?13m&5
z#Si{iq(6n<D|xr8t@b9RJwN>`Q5(QA2zDj@9CM~WG5Ze?6K$ho*jK_X2JY-nMY?yN
zWJQeOMnv91xRnnG+=EZa#C_iLFvSJZ+x(Egty{2hetCbiUJ&;{;;Q}iC49^d#G1CX
z>$^m~tAALecVEZBs~9dE1|jL#cC^G@qWpG`1b$_4y;$uHfpb6H1pf^|_f8;+FA})H
z-wWKPEuhkkxJKWc%C;A{bzP4g#s|c;wdy<7&tHWz958fFgyT^gPO3OD=yrN79Wi!g
z$~^>fMg0g-*TW^{URqM_Wgu77j}X)O2n1I@LX7`%2u1w}QSKEGiuw_v+$&8vM?XT8
zYd|RKM~HGw2u1w}QEpAkIr|Z!+!loC#@1kUQkiayyRG!oQ}nzA<vs!7;^@W@T@U49
zM6p_|Z_WC=1+F&aZzT>f(h*}<rrdp>MRI3@0&;H$x%)SJqlzfI(Rz^DTxnhw<qzbp
zOhfcrgzl)5DJS}kov4kY?D6_dg<9`p^#jTA*An?`YJE(8AZWwLj!b?agwNy$Lioqz
z2SWOe$q$6|G5LWIKC>SP>0$N*AwA4~Af$)M4}|cU{6Gkw$q$6^nf*XW50f7V;WPPx
z5I(aX2<c(+10j4SKM=xa^#d`++Y<g6=m-*<R?)2(&yD%RG5KeZ-8}ne5H6E{2H_u*
ze+KFE?4Lonp8Ycjm&rea@Q=wqgY+@`XOJGx{uzYJ;-9gnp96MZB+eDte}d>+_Qm>~
zqaVC_jHF|3;$IZ;jmHFte(ig8`ob5B^c~6l5@zDb(lLEkaIuCGXWb=IHaXGhrfv`=
z(zT+~RmiU;|NIjwZzjJM!uRagLbyzRErjpcuZ3`#{aQ#5lV1zrGyAoW9?yO)gzMR_
zg>aeuT1by)zZSwhCchTa=h?4?aGCsC2%pKXh44N5wP;+wel3LS*{_9gnfzJ^pUJO<
z@R|Ht2;Z|`3*j>PwGcj&Ukl+g`Lz%}lV1zrGx@a;K9gSy;WPQQ5I&P%3*meAYav`F
zzZSx0@@pY{&wee0>)Ee`aGCsC2;Z|`3*mb9Yav`FzZSx0@@pY{CchTKXZC9$JxqQr
zgzwp}g>aetS_q%XuZ8eE`?U}*lV1zrd-iJ~TxP!((!=D}LikL6ErjpcuZ3_u`?V0R
zXTKK0W%6qwd?vpZ!uRagLbyzRErieH*FyMAel3LW*{_9gJ^Qr~u4lg%!e#brAw5if
zErjpcuZ3_u`?U}*lV1zrd-iJ~TqeI3!gt^;x5BVNM1a@@@h*X@c@@GY?yBA$pR7Lr
zR4k@_tK=R684O}WaL_b45%#xIw}~X)CCa=MLQ%dm%Dt?l+#@CBUI}tV`OcWm1_W2W
zGsbU1D9U$6xfX<?d}owfHRT-n&M4Q0P?YbCa$N{T`OYY}q2-+U&L}sA5cb-wNozUW
z7)?jZVg9)yDEE^nHyZVqPcI9e^m2MzFx$a9;hc!OC-U@@0Ql98a-Rgb3mfCnptm)+
zuR9G~<(~Ld;AIad7e>Ri-nuw-#crg=ote%jfn0Amn)cRiHjoCMalDJwUOx@wAbr?F
zRPO5ayOjqv3=Q_BsqfPbxeF~g#isIr9oe`u<(5G1T5k~cyOGqxpx20LUz&1vf}C~k
zjicNvZ8<nr#7$op<cQ~9d9JhE8tNOi`ZuS&_T=(teLbTf%=}#hzWUwg<ykoe<n9K!
z*5=LSJHgp&eLUJ4cHGM0{m+5=vb8+9IczTvTEmuWIzIq%5ryIb@X&%mrLwwZ7n*S=
z_!2wOSb}ZvczN|Rt+)EU;+&A#ml~-9zbH6srgaj=x0CJB;Kcf9wBGNYXvuRhXxLjm
z6&)nf8V~SqdprWa!z^z)&0oPhNBQ2b>_v)ee<k!+e=qu*!e7Bu)j)kMJ5{yS)&!Cp
zZr0jxz{#YWNnMHbiSh`wT^_5yfwY#$RPukJuc`Gh`5Ta(nfwh1pUK~V@Q=ygfb<=c
zzX9oE@;4xSW`6_H!|ZQBdYJtUNDq_00pT<G8xTH|zX9Ph`x}rRCVvCMXYw~7d}e<G
z(!=C$K=@4l287S-Z$NsO{0#{InEVY$pJ#sq!e#O|ApB$UHz0kU{S64$v%dl1GWi=2
z{xSI*kUnOA1JdK!-+*vg{0(;Xb3kyH;PW3ye}mx3S<ge_G{>4gmvX^#(Vzv3l#jN?
zPR~N(xnxDB$1{(g?8wC9Cw$L5e!^wq@e{sh9zWqS^Y}>*6OW(pnR)!A$1{(ga6R+*
z37472PkKD__zCxzc>JW#GmoEenRxt!&&1;=e9t_7jq8`kPq?0W{DjNI<0pJ39zWqT
z@%RbfGmoEenRxt!&&1;=d?p@0;WP3037?6_Pxwqce!^$s@e@81kDu^8^Y{suiN{a)
zOgw(V_srubT+cjy!e!#|6TW92KjC`j@e?i+kDu_Fc>ILV#N#J?W*$H3VdC)<zGogk
z;WF{~37?6_PxzjB{DjNI<0pL2JbuDu=JAsrCLTZGGx7Kd-!qS&a6R+*3D+}^pKzIY
z{DjZM<0pL2JbuDu;_(wc6OW(pnRxt!@0rI>xSo0ZgzK5dPq@rHe$vCl<0pL2JbuFU
z%;P6qCLTZGd*<;IE)$QR@ICSPyH5k2HH1;Gb7FmPqPx@HXbso%_d!OPM<EpD<D=YW
zNx6PWxdF%(<>N;-0XbJbKE}Tep(r08<t7k{^6^n_YRWnC@lkFILQy_G%56g^%Ew2!
z9WCd~$49x>K(Kh(!z2$>eWUo!DEF-pB0m19d_KP75u+T2<K+?mSfn%3Tb;cj%FEIh
zi7d^&GWwgs<CX8Nk;z*hcUQN1{plsybkE!!k&V;7FU0CqeB)53^Re=JWjaMBlm9DT
zFO>%qub1$dc)f(r#Oo#eW8(FazGLF`l0GJ0FX1!udPxs6ub1>N^Lj}S6R(%>nRvZ~
z&&2B`d}dxR>0#pa5<U~Jm++Z+y`+bU*Gu?Jyk5d*=Jk>uCSEV$9}};a^m*p>5-t<3
zm++5?*Gu|5^Lh!_Gq0C$nRvZ~e@why(#Oo}B|V;by@boc>s`^$9ff$b-4n?t3-L|z
z`QqtsihjvH4|395hlP>eFxxp3fCRpgZqGbgvNsctmhe6EXbG2@M@xE`c(jDi%%dee
zo_Vx{>zPMOxXe6S(&L#&OSs3xqa}Twd9;Mf#G@sACLS%}d*;z<T)#Y8!u8CfC0r&R
zE#WiqXbGQ*M@#sgd9;Mf#G@sACLS%}Gx2B%pNU6H_)I)n!e`>q5<U};mhhQ)w1n@O
zM@zU&JX*qM;?WYmXC5u#dgjp*E)$QI@ICWr3D+}^mT;MPw1m&Zqa}PM9xdTB^JqyA
z6OWegJ@aS@mx)J9_)I)n!uQOhC0r&RE#Z6S(Go5*kCyZ>@n{L3iAPKLo_Vx{>zPMO
zxSn~mgv-REC443xE#Z6S(Go5bkCyP6c(jDi#G@sA&pcYf^~|FsT+cjO!e!>sk{%`=
zE#d$F%$*6GP38Z`FOemc?PrNl)+~duOB%{9yDZtRnTyGonP$coX|j$&l**EwLP7{_
zOlXrW$(Aid*_A!<KhHh)`QG#S){J}op6~tr=k+?q%)Gy!=X;*>oabzx@41G3w4`g;
zM@zawK3dW@?4u=JAs;R28}iY9WqAkH681u5LUc^O#NJ8$V`DurX+4Ib_vEUW&DIjE
zk5<Kff0uDv?lNwx6&I|JR^_?PS_1XaDt^1Q1nZ+!aX(l~us&K9x6>IHppRC?{b()0
z`e;?$E^7(aN2}s~^2Y`2qg8Rc{c%-XZco3s0DQD6ZjZIJj%*Vh)5a6&i5`&7+lE~*
zp7-jwww_q^vgowmqOG5o4)X3hs?E^)Z{z*#{<pr?xVWUSICoN7JG_4Gtk%)Ho<hD>
z(iifzlD?3ymGnd8Yo+!=<ZGq&gnX@}FYIfjc7%Pc)Q+&PmD&;VwUWM&ua)$Le66G}
z>}#cVgnX@}FXU?_ePLfKwIk$fC4C`ZE9ndSTB#i&Un}W{$k$5k8TPf3u8^;l^h4xp
zrS=T_T1nTiua$I#e66G(B3~=DC+usbb`1MkNmt0%O8Q29trPv%Gw~U0Uu&}OiX_$k
ze&>2ZynzvcKL%Vq_|NN|pnbNUe%2?I__F`UH|?{fel+Z}C0!w(E$JKf*^;iX&z9N|
z^4XHUu+Ns-G3>J?UBf<G(iQgEQagrywxk;(pDnd#*k?<+LOxs47xLMXzG0uOU)QY9
zmUIpKY)MzhXG{7*K3mck^4XHUVV^DO3i)hFU&v=m`a(Wi(iigClD?47mh^>uwxloQ
zvn72YpDpPd_SurIkk6L%g?zT8Z`fx`x`utWq$}jJC4Iv_ThcY`vn5?2pDpPN`D{sF
z$Y)FX!aiGSN62SO`i6bBq$}jJC4C{EE$JKf*^;i1&zAHJ`)o;9*k?=a2>EPDU&v=m
z`i6bBq-)q`OS*=AwxlcMvn72YpDpPd_SurIkk6L%g?zT8FXXc&eZxLm(lzX}C0)Zl
zThbNw*-|?~K3mc^?6W0Z!#-Qm74q4VzG0s&=?eL5N#Bsq_L}vc7Pa&p7?;r3lTfjL
z?MnZ6Hst(;elO^<TrQVdbX=u?;wrh$<aT)%cT~?Pr!N1$-Hy$lwPJ$duLQ|o4U#XJ
z|IYc?&(m7b`nr;RYdBkfj;8%{#l)V`u@${*SJ8U=Xm{QZ`saV>-EsT7($&-3@tM3X
zms)zo^iS+lp>mB{0d2>cuD<!KZLb#JxUsf>W1Z{2eb?>%WyPpP$MvsW`QLE*ogN1z
ztUgyuyeFX-{qbM^qo0#%-gRW}YA<GuapzY>`;D&^W1@SiCDxM^)jcvM+7p|U{ws;}
zb5hbT_Oq>@s{Z2tV*34*s?zrp_`iSX<~(TYPP`XDrW+Zw?(*Zd?vAYK>Xs{~l!M5(
z$2nWK*uVFK8s#z3vDOsh3Ql*&d0RK${@huewC)F`>m3sT>9+EYA+_yXciew`y1GI3
zU60FBmX=xq9haJy8keMRcwCaM;c-d2hQ}r88XlLVYj|9eu90zB)AdjRmv@OuP;a7-
z@+9_+jERfv%SN&PM?F8QxMJ24Z2gRid*m+T9=*%B;#OR+^)o8Z64nxE{fy#ET1&9?
zGb*l>wFFx~qvA?C;{vRoQE_FgCD{5I6<5|;f~}uXaTWY=cdVbWk8gu$T!ywTWs1Mu
zi6iECNB#1L?7^REf4{Sj>uGBrdP?m>zW2eip96Ms+0EMh5%16Izpa<?<>lX_@qc!E
zJ^bwn)yt@Hp%#}=y$tCK)yt56i0Wmiy%5#QP<ul4GNdnDFGKAJ*UL~l!u2xLj!?Y}
z=?m4%kiJm84CxEk%TPN)^)jR{R4+sN!u2xLj!?Y}=?m4%kiKxe47DRvFGKnvs+Xbm
z4A;w$u28)U>4&IZhT1b+FGIS9>t#q+s9uKjLsTzA?FrY*P&<a}Wk^@3UWW9I*2_4r
zFM_U5!3!4llYRZt(SQA7xITsYL#RH5^bOaikgjlj3bi9tpF;Y=^(oYj;rbNPHC&%U
zy2AA-)Q;i$6w(b*eG0W_xITq+h3ZpCU#LEX^bOai_;t<Jr;x7U`V`U?s!t((q52fk
z7phMoeZ%!Bq$^aPLi$4WDWoq{pF;XV^(mw;RG&inLiH)6FI1mG`a<<7q;I%Bg>;4L
zQ%GN^K85rR*Qb!K;rbNP6{=4meZ%!Bq-(f7g>;4LQ%GN^K85s!>QhKxxITs25vori
zeZ%!Bq$^aPLi$4WDWq?>K819J>QhMHaD58t3fHGlJ3{p-q%TyTLi&d5Q%KiveG2Is
zu1_Idq52fk7phMoeZ%!Bq$^aPLi$4WDWoq{pF;YE>r+VAaD58t8m><vUE%r^YDcI(
zh4c;Ar;x7U`V`U?s!t((!}TeoD^#CC`T_V@)2nyTe$-zJx?F1UgvBSsMS2nw!+Kj`
ziR|f+|3_!sDJw2mAFFEX^j*fCxy!h-R$Q<?R+Z;DYYEiHs`&HP60DC^#a*zLV12AA
z?xHg;Kp(4$`@>p-^|7kBKdmKLAFGPH=8wChkJUN8{<7j4C3+GDL|X&X71(>=ReLwB
z#o7+7`+NF(I(W;jBK!lG{m<Fn-_V{a*9t7|)?K!Dzh#Z}^=B1V5P3E!<m{Kg^ZeF|
z^R-vi<qAA5cVUXF7ED|>D=t1RE~Y}23Q2tuJnpCpY1bk-w?qCS)LwO05OD?kaW#U8
zYi-4~>>C|d%-)CMdb<M4bIButk2CxE`XKLItHx+({n^R>c8@fh>fHs7<byrI_GepD
zf5phSeqp`i;(Et;!rZZTc|-4hi50@VrCjcWe(JmRi^#YHPx_@?UVVGLC;Hp3RD7oQ
z52*(-dcPO@(!1%?@P|jalib!@HRB`F$||C#JJCuszHdZij5{&WlW5gq41zVoAMAV<
z`tzCi+8i&j+$vI3U$ec%ORhBXv8&o5;uE3=R8VQzUiG%VIjUiTyProD?4|Ylz!SCe
zjQ8jH-}=|p2DS3ESMs0#+U@o5w<qLZS7YBh{)PPOq%Y)OC;brl*Qvb_`PZpEA^$q*
z3;Wlp9bx}EwIl3br*?$=>!dH_UnhMb|2pXl``4)*A^$q*3;EYcU)aA+?FjkTNngmn
zPWr<Bb!tb*zfSrg@~=~ShW+cLE974%{Sf)rsXfE~b<#EJUw51@FLy8Xo;~*Pz26|`
zecm6_KVSBrDnAt$o8*p6N^CngHnLunJ3h&}$hJ?S|K%@%pDw%pasGN&KKnbpzu$2_
z9wMJTZBJpJJ+))lXHU8!KKm5^^@^*?O7B2quh$9gx;8Q{HZd|`aC}mC-xY56=VPPO
zy~?%6-4uTw6McCU^Je36McCid-#>cMg`>L8)tBA<JW<i^umtPISCaL=#P}HZ;IQZ2
z2?1T{{v)qeRqg)q<>Q)o_jy@G+U}(2xL9?|ctEuEiHZNnD(x$9JFkxZ{tBu-qGFmi
zrvI`3C(G1F(0DdnA3?f8^%10RxITh(h3g}z9ijRN(ig6epmq$`N06@J`Uuh$u8*L0
z4A)1HZiwn5s6E5=5u__rA3^#;^%10RxIV(KYqmaubPd->kgiaD1nCRaN07cyeFW(n
zu8$yHq525Y7pjjSeWCgY(if_aAbp|w2+|j-k05=a`Uuh&s*fOj!}SrQD^wpr`a<;)
zq;I%Bf^-enN06>ieFW(nu8$yH!}SrQD^wpr`a<;)q%Tw-LHfe=5!8-QeFW(nu8$yH
zq525Y7pjjSeZ%z;q$^Y(LHdU4BS=@cK7!g2s*fOjq525YH(Vb<x`yi`NY`+E1nCOZ
zN07cyeFW(nu8$yHq525Y7pjjSeWCgY(l=ZmLAr+PBS_b9eFW(W*GEu0LiG`(Z@4~!
zbPd->kgiaD1nC>Dk04#4`UuiDR3A~!@=UA6R~(@qec2Ds{^eioV^%ShtR>j`2o+cP
zF5|-QGOmgh7i@im%CoAq1X>@V_-fV?Y<+}^t8Oj9)<>wg8qT-?>myWLO=}6ZK0?LS
zvX)@$BUD^%e_X)z5h|{(wFFxqq2dy)rD05bJFh1{z`6<**WX&GULlCMF;<-I@o4UQ
za@_V`_8j|H&i&^NE3QLyujpsovF_fMbvZ6Ju(&r>d!D#np4doFLfa&FlINL#+WXv!
zvpc0im0DF?0mpsejH?=W+&X7mwZP-nJL9Sc9+zsxweTb<gSy@j0rksvD^3UatnLBD
z?Xcn+)zibwTgDSm+z(b<KaV@Hzh!-}J}}0r8cFkGU0lxbvfGMl7@ZVrRk8WfY#2~`
z2d%i+nD`3rM9Y*^!TW(b0mWUl;;5b`h`8(ixN5E-;u5WTntCe7cJ9Q!#fn#U^$o0F
zhG1NHpmC$DIOWRn3`+9tf(-)dm$6n{`$SKI6`N>nKNTBL+^bfcS~V3H7ZYvOe#8Y7
zH^GYY)*00Zyv|6?XRljvj{dCT3ZOno#l4AfRRfJ1Y1J7y+OxL(o$HKLdvzb7d8um6
zO0Iz8o^-}l4m>Wx85bUSTs>!8mB8cbJL9Sb9@ol>3$|`c_2>L1E>{z4SjQ&$riteo
zr8&+rSbxdr8st3(RI#D0+nVTTch?MWlK<1Xsd#@r|7|^zuevO)j<@^0hrd0cdL*??
zz1vl&9*OjY>XAr4MD<A2UWn?Es6C;2B+?hIN1}Fw>yfA(;d&%$N2nf&^o8n?NMEQP
ziS&i*k*FP^dL+^psz)My;d&%$N2nf&^o8n?NME=fiP{mWM<V?Y)gw`RhU<|?SEwF|
z^g~pSMC}=_M<QLL^+?J7^TG?Q?0Te-zR$pMUV2w`M*Z$k$KW{64pE&EZ71P6BWlNR
zoe}AZ)ERa3kGG)eRXkzoU*DwobzQEHz3l&}eu?@o)t5&xU*-|^_y1M>66Li#gWW&A
zeEzrfOOE|N_&Os`zldIUcn^nTycw=DqW%=BGa`M%bw;EsTxUe>2-O*pzHprpwPU!>
zh;$9t8Ii7Voe{NTxXy@lLsVx(?HR5!B3+?6BhnYDGa`M%bw++&vvo$KYq-vcbcO1S
zNMESVi1dZ(j7Z;boe}8@)fth#P@NI!3)LBszEGVJ=?m2vk-ku!5$Oxn8IitFoe}99
zt}`NCp*kbd7pgNNeZzG|q-(g&h;)VOj7Z;boe}98t}`NCp*kbd7pgNNeW5xd(ig5X
zqIQJpj7Z;boe}8@)fth#P@NI!8?G}VU7<Q7(l=aZM7qLtM%0c_oe}8^)fth#;W{JI
zHC$&zx`ykFNLQ%Ni1dZ(j7Z;boe}8@)fth#P@NI!3)LBszTr9}(luOXM7oCSj7V3w
z&WPF(sxu;e!*xcaYq-vcbcO1SNZ)Xs5$Oum8IiuBI-}N>4^b`bwfnw@aR2<KeeWu!
zowWp8XQblV-(_5fyNv5(#RXeur1I=+ErHe<DgHTY3AWBi#dWooVC#%jTsLQ2fOSSH
zuDi7aTW6%=dRR-abw(<#r#~*>IwKV~&{`T<pKOrW%J;s<4tMtDtGJ;m&Z+~jKflF#
zPh@~`Z&`5;pL}IkfN_g3E<Dh<FRi#Hk<qceE7+eFQ-M8$ckX@8{ca=0wNjsQQppuy
z+!ia&Tdz<#@OlN+pIfoL%7N4msJLs^LUmg)R?$HKbq6Xg%&K#+`^CF{;ep0g#JGU!
zDpY&jt+-b8S`@SP-2_i!pJLY5aCSZX-?<%nT5--gu|VTutT?P62&}yXE6%(9!h_p>
zr5=WH9dN&FvFaS`@j?Rz`oj5xvtPFAxN5=WxlPAauBii^O~C)1?QOryxE*&H_rqPr
z?bLC!dUvkFQR8!$73ZrDtXjR6E1=IaQgJ^y;%Zb1JZ`r$u5#dUdz^9BOdrVSE~z~C
zI^(SR$3WwXmxOU0P(74tZ^z>h7f@Z3ip%j7&1Y3z#fk?UH_|He@om3qRcfVQXOzJj
z<*M#SwWpR)*Zokt$+stYceqyVV87FTtR#0DAJ|l}S9FXgQGHlbz4-X2t&dS^>v1PU
z_GvIEsk`+dP9As9=<Wk*xYK>NwQA7rhh%?0^!UpD{HS8SbRz8Ucg`o$9offI(H)go
zp>p+FRjSmeR=t+@vzqLDd}{yr_K)^2{BF0O)A#;)UxeMh^`7}Ox&uGI3c5t~L7Ih>
zcKZ|k>mUFBqYjJ4M~LdMs6C-NEYcUM!y<j5IxNx;Q5_bw7os{WYEP&Ri}Z!-u&5p3
zIxK2OxDJcj5vs!?eW5xm(if`3B7NaHENVxn4vX}K>aa*(xDJcj5vs!?eW5xm(ig46
za-47NIPszP6eq;>Ewr9@Q3n=geR#@0PUL*Qu+OLB{pV95ssr<{Pd&R{DA~Sp)p=I5
zKiSj!A*a?kb6kA?M0H-+TmPMZx7VYGe?5fiz$ot!)qzoahU>sc*JvG>v;QNOd$&<e
z+)`}2S|8`rJHZ{_Cpyx*d69Mg^p9~GqB<<<C*e9QYR7OL7U_!AVWs%@x17~idbbz5
z=NjB~;N5=SQ%8RuLDhrBMmfir^Z)jEo8s5~e^!S@+x7oh9Tw#!REI_ShU>6MSEvq)
z^bOZxk*;tZ7PTW(hei6rby(Dn;W{kRHC%^9y25o>)Q;ggEYb~89Tv4`xDJbSh3c?K
zU#Jd?^bOZx`E||KVUe!kIxNx^s>33Ep*k$m7plV|eZzHFq$^a1MfyT@Sfnphhei5A
zby%b?REI_SLUmZAFI0y``a*SBq;I$mi*$wRut;C14vX{+*I|*a;W{kR6{^D`eZzHF
zq-(eii*$wRut;C14vX}K>aa*(xDJcj5vs!?eZzHFq$^a1MfyT@Sfp>b4vTb!>aa-P
za2*!u3fEy#J3@6>q%Ty5Mf!&8ut?W%9Tw>tuEQc-p*k$m7plV|eZzHFq$^a1MfyT@
zSfnphhei5^>##`Ia2*!u8m_}4UEw+`YDcIJi}VfGVUe!kIxNx^s>33E!*y7sD^!O?
z`iAPTrdnQKwM0iL7em-U%QWlm8Iz_xls<n%#mumlVC%3{+^oBdn|+sYbF8>v>#$Uw
zbFC%NIxNM{vzB1%uvFZ9YYDavOT{g4#syf1rQ+VRmSF3!RNVX45^Nooid*Q93%CwT
z#ci?{e?66_UtFy72{Qg)*JY@<oz~L9H;^sobMv^~Y1&#~JnvI+?xe^*QE|N+yJMqb
ztj}Od>&w~R5f$h7+@?U|E?IF;#l-cGY7rOZsTbvrPYP_myKKc-<E(XmPk)bH!4;8K
zny`L1RGz+m@qH3VKyiQFW!z1*etq1rv7Q+HkyZh<_nTF3MD<(tM`5KIXZr{SdFL>-
z?L%F+pxU(C{r};Ur+h->lc)BCeDb6(<dY|TA)h?yhsY;S?S;rEPwff$<Vj!HCr|AN
z`{bz|VV^v;Bjl4OeIcJb=?nSfNnh9}Pwfc#<Vj!1Cr|pqK6z?K$R|(wLOyxY7xl^a
z@So@0g-^X!jjDHeKYzSmKSVxt>NmrmS3<f%K6TO$kx!l4Gwf3*U86qrWdAt&AAMd4
zt(WU=eDZg$=OFzM`Q)iRVV^v;W7sE8x<WpA(sxxg;FH(4!73zrVmy&aaR~v|jd%2q
zd!s)26u<8O_;XXJpZ}lv^(n9aXMTOkOUSQJ`iA}bq$}jtCw;?yebN>7>r*>Ietpsx
z_UltShW+}aYuK+(y25^aYR9l&pL9dy*QfRj`}Ijz$gfZOLVkVHH|*E<>zeiJldfUE
zKIsbi^+{jIuTT0yetpt6?AIq<A-_K93;Fd)U&yad`a*tv(iigUlfIB&pY(<N`lK)9
z*C&0$etpsv^6QhnkYAtl4g2*;*RWrobcOu-q;J@-Pr8Qv`lKu5*C%};zdq>;`SnR(
z*so9R2>JC%->_ewbcOu-q%Y*xCw;?yebN>3>yy4=zdq>-`}L_EA-_K93;Fd)->_ew
zbPfCUN!PGnpLB)%`lK)9*C&0$etpsv^6QhnkYAtlh5Y)YZ`iL-x`zGwq-)r(PrAZ>
zeQHO@uTT1h{raS9*so8zLVkVHH|*CZT_L|d=^OIvpKa)JsU<clA<pvbTQ7i44C@`4
z=IaN^|EpsDu$Ex``YP_vyNtVZmvNV^xM2PID$gs{5~yEa@mH-SSiioCyJjuH`t?=Z
zb!S|Feti{p!&-v%>#MlGtR+~#zKZ+X9~ZD+U&Up!-ZvktUth&#x8j2Jv#YrKtT_FC
z`<m5VeLV>gY5K&qUth)LaK_aLJnnvHT+P7a9&pCh3Op{SBd%7Zz~h!Sq3vG9`iz!<
z`(>FwuIioQwC`T^r&>bmyHEDE>20^z;5punUd;MX2K5zD%KJ^fpFd_mbl(cTSMewG
z^SvE2B0eE{Km}{=jA-;!TeVp8Xy1s)7<Xc#C(-+oey_&A{bR3pyubbb)@Sc)|KHkD
zzq8xx;crjKXHVNv$Y)RbLOy%a50THF+6$4-p4t=g*^|Do&z{;5_SsWA!ajRyN62SS
z`a(W?(iigClfJOep4t)e*^|DI&z|&!efHFjkk6j<g?#p;FYL3Yc7%NPq#q)mJ+)`p
zXHU99K6}y+k<XsmGwib`U86pG$9dsh`P|bw>(u9+j`Q3Q`P`|WgnjPRj$xlW>5BN=
zJNmB!g7TMp?ojvR7)QbTl+zwWbp7JU+ptfW`di4SO!|g>%A_moQ>J!=e9ELR>{F(8
z4EvNx*RW5SbcKD&)Q(}FGU<lMr%de`_9>IDkWZQPg?!4SZ`h~o*EQ=?CSAimWzrS$
zDU-gCPnq<Ee9EM6*r!aoLOx~E7xF2SzK~Cu^o4xNq%Y)CCVe5FGU*HXlu2L6r%d{W
zeafUO<WnYnA)hko8}=!au3?`t=?eLjN#C$fnRE^Nlu1{}r%d`nK4sDu@+p(PuuqxV
z5%MXMzG0s-=?eLjNngmPO!|g>%A_mgQzm`GK4sDs_9;_4LOx~E7xF2SzG0s-=^FMa
zldfT(GU*EWlu2L6r%d{WeafUO<WnYnA)hko3;C2u->^@abPfBIN!PGXnRJDH%G8dK
zPnq-$`;<x7uuqwEg?!4SZ`h|yx<Wo>(l_K&9&ULF)e_?gv)-ia^(rU1WBR7~tVsJa
zRm>P`3D&2q;!^H1ZtPvgy<x=#>r+;FzGE$c`jizv#ae>(DXX}t))K5wS;b9r#s%n8
zR&mp<C0L)bihI{ug7qn@xEcPqfPKm;Zh^G~>r+;7KUzzCTwF|r@Cr$N5<Kpx3YF6w
z&)OfW;?xpaf9ynWo8EShoSW@UvXZYxAhn<O#{m7Y)@#sv$MsK2jL`oH+$rmA#^+y+
z_viE9`el9j*y{iMSNmnD--Z0Lq%Y)`C4C{kEa`{HFH7x($S+In3HfD7U)V28?Fjp2
zsU2azEVU!#mnD56zbxqs`DIC8*e^@%2>E46U&t>@`oex$YDdT~OZq~7S<)Bw%ThZ+
zep%8FkzbbDGwhcoT_L|L>4(TKOYIr<%aX2Pzbxqr`DIBzM1EOnPuMR@?HKmUlCFqf
zc97$`qk;Wi=wf)y;HwC%s4D_1>I<EUG0{CMx~-By>w9E^JJGt}i;qi4^4#H7(DwDm
zY=67SP3(4as=ruYsrL8uufKXFxchkq#wA!qiE;hHddJ1}cHBql=ZT7Thk1JSvffOc
z81}q7A+X9tyLmgmj{f|D@)1`|v(Vhu?cvuI@)6T`G3+BIT_GPa=^OSDldiCjnA#EY
z5tF{KkC@sq>?0;!!#-lt74{KRJBEG4q#Gh1F|}vdM@+gxK4Q`r@)481VIQ$y*Q}42
zbPfB6Nms~6O!`7TV$v7#5tF`QA2I0)`G`qh$VW{2LOx>B7xEF4zL1ZY^o4xHq%Y(n
zCVe3vG3guj5tFWvkC^m@e8i-0*hfsdhJD1OE94_4eZxLt(lzWOCS4&PG3g8Wh)G|_
zM@;&{K4NM|$VW{2hJD1OE94_4eIXw)=^OSDldh1DnDh<%h)Gx2M@;Pq`G`qh$VW{2
zhJD1OYuHCjx`utkq$}hjCVe3vG3guj5tFWvkC^m@e8i+L<Rd11!#-ltHS8lMUBf<N
z(iQd*Q#(RFV$wJ4BPLzLK4Q`p@)481VIMK+3i*gh-;j^^TgyAC7HuLP;E9cjj_qwf
z%=(vqwU1cEY_XPLeZ(qm+g-+OzstBEthiu(#4697))J_XSn<28C0HM^iu=i0g7p!r
zxZTdU0DZ(NZjZGD>myci`>Z8cAF+zt?~e=EN37xwT1&7#VikADTIwYZj*V>RPV8H(
zcx6}YzYJvGubkugh!q#?dy-XqzuaZqQ7g{(e&y<w0(@_=YVVjMu5y6yA69Y4opF@|
zdvCFdJ7FzRaRXyx;w(#cKX<IVw<paGb@t~;E3SnnNj+z8-QOJ(oiw<0KyklWad)#F
zez)Rue^w6gebs9HPC4TOd|$PSJMD}M@O{-P?u;`oi0yvX5f>iBc0XsuwTf{MZeUIB
zNzLPW_x2<Nv>nb{aY<H)J1KgAr$X<@3JLuKio0ONS+0%*cS5u$(YEpj6nD{zbL_X_
zE{{8)xJwvUCD6F5R-7I$;niIM$Blj&@~j$Ydns0&x4xnBo$DK%`_T)TpuK9Y0O}&t
zI8#fg>msP#<v-2#ZoK$7dmH8);r*VzFGstCB3ku{i}fV-9ZdhZ+qwwK=fACs@a1E#
z%s>Ct{v2vgs4jx^h3X<mU#KpE^g~n^LG6X8E`r(<s*50f;kpQFN4PG6+7Ygcpmv1n
zB1m7TE`s!h>LN&AxGsX)5vq$IeWAJt(ig6apmv1nB1m7TE`s!h>msNfp}Gjt4^dqN
zwP(04f^>!IB1k_(brIB_;kpRYHCz`#x<Yjkq#vTX2x?EbE`r)ITo*yQB6SfRz1Lo<
z4OdY9|2w}&obnd(|C7F9|3B#p`Tt4Zu>YTQh5i53j*$PK^o9NZ)Q(~QKj|9w|C6q;
z|DW11?Efd-5c&V9J;VNg(iQUmlfIDupY#p;|NXjV{r{wE*#A$uLjHf!7xMp;zL5W)
z^bPy}Nmt1KPx?asf6^E7|C7Fu|DW`Q{Qsmc<o_pqA^$(=3;F*^-?0CmbcOu?q%Y+E
zCw;^If6_JV|0i7`|3B#)_WzTvVgEnr3i<y@U&#MY`a=GH(iissQ#(Tbf6_PX|0i7`
z|3B#q`Tt4Zu>YTQh5Y}dZ`l7&y2Ac{YDdWbPx?asf6_PX|0i9;{(sUn?EfcSA^$(=
z3;F*^-?0CmbcOu?q%Y+ECw(FRKj|Cx|C6p^|3B#(_WzTvu>YUh5%T|&zG44A=^FO`
zldh2epY#p;|4CQK|4;gc{Qr-&aJkgtdxv<WJH{#iaNpS<s$#;dC0PHzimP~+ah2{e
zuCf&utp8u-8E!3s`u`PQ#ae>(|EsvF))K7$U&U2(#s%pAS8>&?C0PHzimPEQ!TSGI
zTupym!2W*~SKC^=e&E*qJqd$5ST^!I`_5I|<JRJ@8wfnEj*6>iJAz%Vz~egVJaxT6
zfO&SZ;)3-9tM%)w;{te3y7m#PxE|I5{_1pm#LhUkii`0iB(?EGdMqn=La{shvQ>M%
zvArs;0OPh=o7s_P)j;Fgm4~=$>BZT8-9g^DPvsg~pY&{hyGN?evE9Vg>~G5>yx-IJ
zNxS3YBcAe2)s4JwFKm_I>DfOzCMk_y2W+3V`z79=-+$|yPO$T{SMHzx+U@o5w<qMA
zR@>OSorQeUq%Y)~CjAikrm4LU`KGBoA>TCV3;U+29bw-zwIl4CrgnsU)1)utn<jlB
z-!$n9`=+TKA>TCV3;Cu=U)VQI?Fjj%Nngk}P5Q#VX=+EvH%<B>@=a5FhJDkdE99Fd
z{Sf)4sXfEKY0@?9n<iZ$-!$om$Tv;x3Hzq09mBq9(iQSelfGf!H0cWYrb*whZ<=(4
zeAA?F*f&kO!oF#0N60r#`og|xYR9l|nsg2Orb$=WH%;vr_Dz#+h<wx3o?+iK=?eL#
zNngk}P5Op?(|%pEzG>1m?3*TCA>TCV3;Cu=U&uF2`i6beq$}i`CVe5_H0cZZrb%DO
zH%<CNzG>1I@=cSzkZ+pwg?!VbZ`e0Yx<bBb(iieglfGf!H0c`lO_Q#WZ<_QC`=&|P
zuy2}lg?!VbFXWpheIeg8=?nX&sU0ETH0c}mO_Q#WZ<_RleAA?F*f&kOLcVFzH|(1x
zU18rewIk%4CVe5_H0c}mO_Q!+-!$nO_Dz$nkZ+pwg?!VbZ`e0Yx<bBb(iieglfIB|
zn)D6(rb*YZZ<=%s`=&`(*f&k>2>GT-->`3*bPfBaNms}>P5Op?)1)ipn<jljzUju6
zpG++SqN6+siD3czrd7-{D%RtUFP3C|=&?JhnB@Wer!mg=8|}kXaV_pLuH{|EwX))Z
z^-ZfhTU$$@zG=m`QH!USC&3dN>9M@N{XI_y)E{lFxL|$Ls=ap3xBz|ADz3e?1nZkt
zanD*yu)b*(*TEkbuy0z$b@#_rak)MH;$qY6PM7w<syMZT)(0E!ZPVNCf9o@ii%SZN
zb0?*>rrKvp>nY?jC4C{EDd`LOOi4dPK2vHhL_Sk$PsnFV`oca_YDd^-O6>^yOsO3q
zpDF1J`AkV)$Y)CW!ah@KN62SN`a(Wa(iirbQaeIEQ_>gmnUcP+&y?B`@|lu;h<v8h
zo?)LU=?eKwNk2qBQ)<t!&y;ix`%Fn!$Y)CWA@Z40d%`|bYR9n8lypUWrnCLm9kU}=
zdaoJc@3k)-E@bt7Prv?-KBq(%;k8PL^WF)d@;m*De-z$%62qcAgVMT8@m-Hi^ye4f
z)XuM1MmwgJeMcbu{CXw0`+3yoE=B0ibxZOjCWR&RkB#*tggx(0h=`1FCnoxGQ9q=W
zkbT|M(VtIHzTAq5>Ff6J>k9dDX&f2$<&v(DFPHQU`*KNF*q2M~2>EhJU)YyR?HKmu
zlCEK2F6j#Ua;Y7|zFg7`kuR6pGwjPHT_ImC=?nRCN#C$9*RN~VmrJ^aeYvD7<jW;}
zAzv=(3;A+M->@&2bcKAmq%Y*lC4C`ZF6j&Ta!FsvmrMFWzFg85^5v4gkS~|?4f}FQ
zSIC!3`a-^3(l_kOC0)b5T+$Wt<&wT(UoPny_T`eUkS~|?g?zcBFXYQ5ePLfNwIk%q
zC4IxbT+$Wt<&wUTFPHQU`*KNF$d^m{hJCrDE9}dqc7%Mnq%Y*lC4IxbT+%h{%OzdI
zzFg83^5v4gkS~|?4f}FQSIC!3`a-^3(iigOlD=VIF6kQf<&v&pUoPni`*NurAzv=(
z8}{Xru3=v;=?eLBN#C$9mvn`ExukE%ms>H)dcUx>^i@y4JP8#m)vnw)t!Gf`_u5~(
zz<TGXT4Fq5`jJ^*k0(COP-om?D=t_+uWIXqyNp|MmvJ9jal!g|Rh~<&B~U-F;+I)V
zuzp?@x7=ES_4BH@kDPG<`gv8{3Tp}0&#U5AT1&8gUKO{>9~ZEnSH*3x7RUQ=E4$M1
z^E$`nMk~($9^~Qy$8E;;!UJvZdyK1+UYzzFtMyY$Xnn^My={8iJ<@rOcPH=hl)bMX
zY3}`={_}P9{$2gX-DcJ_0YCiXk-shc@BiBU5bw|Dzx6>U+4=l?Yc8L^pohObAs;kt
zS0NuX=?nRwNk2qBXlgG+K4@xB$OldO!aitfN7x5V?FjpzsU0C7H0cZZph;iI2Tl6I
zK4@x3$OldOLOy8H7xqC@J3>Ba(iieUlfJMIn%WWaL6d%ne9+XMVIMT<3i+T(KSVxg
zYR|9_nsg2Oph;KA2Tl4R@<CI3!aitf$FL8YbVYp79sSn<LHT+;VS!&?<o(#o=ER7K
ziGvf9JpC%hME6unVs!7wKJMt)u*9@Wp}hjyk4*hy*w;(CLcU(oH|*;rU147@wIk%~
zC4FIEFSTRX*GsyFeZ8bB?CYg=4EuUXH$=W(YR|B*mvn`Ey`(SX>m_}|zFxnsSzj;d
z8us;)u8^;n^o4xAq%Y*_C4IxbUeXov^^(4jub1?Ne7&SE<m)AUAzv@)3;B9UU&z->
z`a-^5(l_kuC0!w3FX;>UdP(1~ua|TU`+7-N$k$8yhJC%HYuMLIx<bBQ(iigelD?3y
zm-K~wz0{77ub1=<`+7-N$k$8yLcU(oH|*;rT_ImD=^OU-lCH3?m)a5X^^(4jub1=<
z`+7;&u&<YN4f}dYSIE~(`a-^5(l_kuC0!w3FX;>UdP!f%*Gu|_eZ8b>*w;(ChJC%H
zE9~o~c7%Mrq;J^QOS*=Ay`(GT>m_}|zFyK5^7WFwAzyE=1eZ%KasB#*B}Mo1Bzh7C
zL`N#);J<%qAEb(jww7T1xhn4YyNv65mvOOHT(JIJZ=YCkf%<b5A8#$e`g2v>3)T{>
zKUc*iIO78J=c>3wYYEn$tKyQZC0Kv1itF!>yQ4o>`&U(*T0-kzjrX?cZTG+Riw5}K
zTv|^dzbNSo`9(=z$S+FzA@Yk-dm-|RQhP#vQPLOoi&8tneo<;i*e^=$2>C@xU&t>?
z`a*tD(iirNQaeI^QPLOki;}*uUzFMr@{5wbkYAMah5e$`j*wrJ^h4wqrS=T_MM+o4
zFG~6$@{3Y?hW(<XYuGPJx<Y<Y(hreel-d*ai&8s={i38R<QFA<qkhpoj_a8W>H0+n
zcw(dC60~hp-3jR4+Y=kttJfWzqxSWhqn+en+G%IC)7HM@5Kuc4{p)jtwNuQ#UvcO9
zLPwhsj{gT$UFfg(qwN;_dv-njBHU>fLTf)R=^OUrlCF>+m-G$$aY<L$k4x<c`Ef~K
z*pEx?8200mu3<ke=?eRCsU5?9T+$7ZAD7xQ?8hZtAwMqZ3;A(L->@IouWQziOS*>r
zxTGuO$0dCsKQ8GD`Eg0#upgInh5WdrFXYE1eIY+C=?nRBNngm1OZq~7T+$cv<C4CR
zAD8qE`*BHE$d60<LVjG*H|)nHUBiA{(iQUKlD=U-F6kQf<C3nBAD8rn{J5kq<i{m_
zVLvXlBjm>=eZziS(iQUKlD?21m-G$$aY<Lmk4yT7{kWtn?8l{cg#5UqFXYE1eZziS
z(lzYIC0)aQT+$Wt<C4CRAD8qE`*BHE$d60<LVjG*7xLqhzF|Ku=^FOqlCEJtF6j#U
zaj6|4KQ8GT_T!SSVLvYE3i)wK->@H-bcOu5q;JTN+rjz>OSSmlvl|}Jdv=Epak<o@
z<NDVQ|91ng@3+~k?-^W`T${G#OLc;C&zxR2z<yPy_t)w<l={;AyK4%jdVk^j=cO!X
zg5oO`434i{5_#XJiKdy)txCw3_2rpX{_#&DzsR@3Y4P=%BR?m%-GJsd-8(;3{YLqu
z)iPl@@=HHafA#lgfy47s)z78!+smkl7ok57$7WG~_PtNJ5^;%ryuYTOYfbnA;_T;#
zt?2KrBR5uiBYOBg@6--=>GuWojE=3SG<6=ol>PHx^g7btUGdj#y?8xBY(b}9OmwXE
zs%Xr!&Q{db{dVAox~YoP?T;RO4ccEa|3R;iy<UzyQqS9Y?8xf<yZ%S#;d>8KWVv$o
z17@wiHurVV|A%g|-)!B9dc@hvTvtD~*1EA<Z=|nV>4dGD`tSYb%eNobeI@oL=<0r3
zc&c=&%1pOkw90MZCe*O|P4OA6{k_t7d%J1AMoQ-O&i#Er*9VlGcmMh~{=k^~fFJwz
z{lJGa{lj&00l(<?9KhFR{OaZTfUn%v&#U=rN4esuN<imd@?;_43+}kjt8Z`59>lpW
z9JBj9{r6?XdXl2LN5({ZVv}&Zcv=>Lc69$w%#Hi+j0?qpJJHR~NAt&jO7P~d-={uf
zXG!3@{+->MzvjE#c-YJ9^*#7)Mc}KiRiuA=mAd~g?|N$f!TGg-4@>g%sz2A>Tg<EP
z6|w#)@Kt@_-~GhiuXH{~YM1izTEBOLX21`Az~=2)tEMZ=H?QgM7jL%k@;ZKg#+DGT
z+nM}w323K9-nPK?8DzJh`H0_bzM|EhT3itx;NQDs@5h=y^NT&-6tud#oVC2Zbv^KB
zha<1&b<H39{VU*G9Lj7p>fa8jgLZqj!&lbtDqHz1y}tcB=YAGf7WvuVRr7ux_5IdC
zqrA1$F8UMjf1S?c)wlnx=~B8{Tj?ic+3V%??@Hcp|LhI2{z)rtT>*@%SP0{Ef93em
z9*0_QP}BYYnxE#o_>O~mJLfEL&tJ~<AHUJgNb|>M<V;oCnol{A1^6!0ZC;P7aBH0v
ztG}1~!RB@RwksH~+sWG`7qqkE;~f9mj^<Y-*?FC@j`LTnrAMz^z!!N5*CS$sJs&Gx
zEju1B41AyN$Zx4r%A1cKS7Um02EJzlKd<KFE}f2e$Cc*48qf{+eP`5JhyVN{=h32G
zef3+l9LUoX_)7z9UiWJit54M#g8p7R<rOcley5g;6YQU@|9Zc4Kk@aRynQ&db0`k;
z;`7ehxY598^5v!Vr<8s(RW+#l^{w|N0AC?5>g(}W)mk65WIHwq_^t&RKdQJ_U-M&6
zP6oclakcjT{X6RV8Si$`{K%W{0RPz~Kd<K5h;b!Be_grhz%NugzE5BAJpUX6X99n$
z1oC<u>3nkRngjgSntoo5qqno1_2#eUWwnf}zX13GO_1;PE3WV0bqj%is)L_b`Rn~m
z=d-KP65zW=BA;BOB=pbC1IvIP*bn(0<8gakcxff@McMe_*Ey9ctpWbYmu!7|Z>#AY
zGdg$m{evMkuYY&r6^u_SuGBb;tMWR=>G93;d-k_aA;0z`aQ!(yx#xP|Cyr*kZ$8%N
z9hGPQ34F>}<n?u)`mI{}U48U#=los&4dnU$yz%1az_%-de4Re!z1v&QW8HE-d&{Xm
zaTD%8J${)7e2W$xfj>|hdDpgDz{fY}4E(g?_W3vUzpsC+RrP+=j_U&a><3U^pATsM
zt4U{pAJ`oEq@VEkxp>RNu7Qs0>{%nz=Zk&68u)V6k)NI6$yAk#?#~(%TV`<TH@$%C
z%lorjr`Eu4TZ#OUmr(!J-`W7bVi@w@vV30ps2%VHK1RNIF8e%G&+lIsS$vN({|7VS
z`s)7IeEgeBfbaYa<Jo<VqyZnL%O|fH<?T<c-(<&X;O7rOeLY`av#u}Hvhi}0OwRlx
zJjn0JRvWfg`%cY)Z`jh$tND6L$v@z@KVm=&;G1Oe^UmXk+UwMkaa}9mQ!60vx`Eqw
z{JjmcIP?FW<*(0+^mr?~zA^A|Q&FFf|B8c}rOW5^jR&p&T+Mpfo%uw6hWZzd;`#j8
zYEJ{7;}G(E{#^IulKY(coY&`3YCNd(z@crH0l(lX>PM{ekDsd+AN%&|ba_3V_4vto
zxc2?dd?FuIThV`B_w)_>yiWJeh$Bw`|I-o7htJP#PDiB67hYQ`Rkf$}Pd-v3r!$|H
zH&8!E_s4;s*P%A>^>btXe0?{3QYnv9pYtV{{_d+)fUj5*^`la9dGk@fRZG3PHPYqv
zc-GtZmo<xkZ(alSoxIw<69#_-{QZrQ*YmAD{w5`U2mH9B*q^$8)b-qN)-v|@)_I-%
z(`}K>>+^QSsim5AuA=yNTekJ`IzC@J`)BJ<-Y<3BQ}arubvwQDijLh_vmLaP>c+hE
zJg51l1D*x`gZ#+55_6`i1{Hsg)g{X}b_71-Q+{6MbLQYKZ$A1uxMip3fIrpW=JolO
z($%@Bb#JtwtC!cmdu*}&v&unzr4{$bDvWz)4aVv7gd_LQPgOcfUwv(Vv>W8N%(q=M
z&*z!=s2ji!+38<@=e(`wfrW3B%jewg^XK?^)nA`~dl-%j$Iey&{$<B;MCo6659j$2
z?JA|q^XvXXt}4KP_mV#!rLV`Wo;Ma`C{xgx{|ifyANo}3RMn4~&-`au;7k61Jnzq)
zdBf7>m;2@c)rR`Y^~jgNmpg;{t}pF;^l|^C&*v6$=6`EB@_K*J^Tz7h3xF@w6?vY2
z=Qlr0mv`!WbGot&`1eMkzMf}vfBv@W(ZbIBcXdL3?F(g6RljI{WxJBVe>xiZ9k=b{
zj+))n((S#{z)!B}=hgU(|K=c!&%bUJF6zu@MMpoc#?Sl~I3Ct7EDF4PEb@GOx;j3Z
zCa>~Y@;c_T^;G^xo%uw3i27&Pd2fwF4*~z@4&)0Q!~SvYcsN~t*IFEJO~$`j+?mhJ
z)2PqK&xe&}0zW7V9(VZod9&l3G<nrOjoaY;rAs;UmUQOx?01+?az;Gve{^4d;4>aT
zUe6C|%&D(7+3zpo)aU%TW~EXUr^n}`kK_ct>=o4K=b3-i%9AdiH9MY%XX%=)oHL(_
z?7mFI*LYpId_fN2n-)*M|8KiqPM7D~_mh<2z)!A%`Zw3(_=$b)HQ*<(@u~Y?pNBMT
zHV61m_h5f&UbU*0qho88clOT{<B*Sk68GQpd+rHy^2Zw^pWF%W18h5&8TgqQkRQs%
z+b@~3rpvnu7EZO&_U5kgFZOJ9;9shN`pNrBczHeEHch!*$(jF{7m!cAiR=4L*Nl~&
zeAs;C`FwS~T;_E7U3=$w^U=o__s*CqPW=(=J_#Q`L)-KRzR+>ZhtCfmK0PR1Uf*Zb
z{gWf*2Jq!SLj8yprJz3};{FD{{buC(@%s4;uBy)UU6hD?rSW(^^Tq3zt2_BJY<wPQ
zhTCgy)HUFztVDg@pL;v}l_u{!AFFZGd%V;4Rp;!9so~704m;mV&1cU)nt$U^9Ppie
z=O_9+zq)mft62TLUh)fGUdN9aY5(l<ed+ViE^#Hi+d*?R$0tBLmnY$R>-#aP9ksmI
zra$oc-bdc$dw#F^8xezmzsk0A>Op&4YrfhuLx7*j&dc&nxBE%+V+RZaK36uJ7gzb7
z^Jw0^?iJuiJi>V2a~{nXD=-T94AqgJpDU-gKQ+H$cna{JHT3gpTzuQdzJIRy-D6${
z{&={bcU}i*{*_B_q|0CGSqSp^J^S0hhi5{4eV(ZGGe0>M_}sqx4f=XXbNYLkN8k1G
z`seJW?Vo+aj;^!x-}U#Ml`-yvsu-uotG>?CanaL}%UKH7=S(mAJXVkIGQZD)^=VxT
z`7*xe*qT4SaUSqB8zIk+gS+EO)pYLHtJ(7pJ+Ep%*LzFX0l)1Q?mzsvaD3vkwVe9l
zt&p!Y1LwV25$A!=niYAyzv+2<ebI}+Fa9=zchl+qPd$zEWVO^kfWK!F@>?>`_l`fU
zA2;<9@QIs{zf{0JF6;5~{Dv#Y=fwPVe|~EPWVfWYM|Q34?4Q-oBG2!4Wow)QeD;aR
z>-*bU|M-Aez}LJNc|9I9pFd#^@YTM@^>yZ-&HB>=%kn?&%)kD0<i};S?}w{VsFuvn
z76bn9X5{&Cs>c^KfzQ?3&#U=p#kC*3$EjS_fkiEo&esC|`ZIpsIUlLh;m55(^5&zD
z1HYlHpI7?TGd6iaZClMpt*Qh3w4ul!8rWi$laE|h7x)9mkZ*qDS>m6wtQv<i)C0bD
zZU6RC`Hak2kMdFc@F`CLe|0GGH`lZP{^33ifuFt%`3RQJf}Tx)e{wJKbD4gNq0NE+
z@|vGl{Xb>9eY{cqsq(MBye04ndDJNJKcB9;#rBy!Z?S6m`JT4GKT_7ud-cD|pQ_?D
z-?-<qzz=`I&#V5NaHW~I|MmD;{8K03k2m-8N`KY+_VG#QpS4|A;6Lq*yxw1QK80(z
zfv?dE`NH|^`Cse1KZ^qX-gx9)uiEpc<}YRM1N@bK$n$(UU+xQh(m>=#cC`Cbowupw
zXs0;fi>CN_)t@)J4kZ7N+P+Cy5`phN3i$%v?fqBh-|5={!1sOA&#V4V^&KzNe5K}}
zX`^2Re%L$6SN+L;o}&A|S)*aVkDQu5KQ8ld;MY!1pYO7D6!4R0q|X<cG#2<tv;4g3
z&r6N${YPClsr&N--Q$7ZJRA9%H*r46S#=Wd+2{Is)t`F)*T?r8+dlz5iSfKYe`~uH
z`1bu#pYsh~-T{2BT<P;0y8j4#kqtPXaQ(?`cLTrW$MpG!Jo|vJbrE^pKYILRoO%HG
zFLPl2njdP7Pqn0;I1GG$=6BJ&)~{dp81TQd=QVo&wWPgYJ68Q($9ep{hdr;Ulxcpd
z0`>V!^q@1qZ=Z|nn_Q<9@cR#+1AaNX55Mbzef^_)K`r<7xd?p07}PKEsqMSheD4(_
zo^a;>0DIob&j&8ljIZnDXS4elx_@;4C-r&(_(@0o$6q!6cli28^X`0!z}I@;&#V3M
z+fuflT5qr2E&Br>_ppC`6`%a|NbmWHn%|aK^WoLQ1A*U{;OA97dp)+lLhCOIn-2WJ
z#mMXNqwj;cA6W(bZ@U=J`~#C$CO_%y&*o1u-sdOL{qx;x!+}4%(ceER|4NSy@QxqN
zmw0F-@CoCP*Vk_^T4P5oUtAmoe3dVe*XyhGM_+pj__?_;|09oegnXXsI|caMoss{1
zJD$&f`TlX>KPiTM0d`-v-j)-<zs~#&u3M$O`RM)e`r_Y!KlB~0Z*pJcU-{$|@b6tg
zp6@T&r*w^QZr@$(J|XYVbIIL-AD4vdt9iY>TE5{1eo7hSlP4!a|BrXS0DSg-$iM5G
zPxSU(Q6UNVZ<iv^ua7DW8V3A(Okd}(_m>4nmezCj&o92?t-gNL^NBSyy<bZ&HmvXD
zbI!#6Pwj5s2iDI$zeqg{e8(sKyqX`{J$lGHKj`sLeA5x&OJA|u)%mnz<7e`FzW`rm
zFY^3)`Rlz$fnWKkKOeRKCRZw#suXlS?~XVQ{LZP!^ZES9f)l`pXUFZ;v2Bu9e~8tF
zT2|gS_$g<9R_=y8AJ2I&PX|8one_Sbk1hm$US>b9`hRC>dwsmmB(3wSIX^D~KEoDV
zU!G5)X8RjB^M8LS^2rTKdDmC>XOlmEPM42h$Lq(J9ZZ*>!p6hKFAf7A&gKWczg&Fe
zDDaUH{{B(pq2_b;@ksA4QCkulI@dSPFywjv<QY2v_#Hiv-*VkPf6)7Tvzn`b|2QA=
zdVkb>*;iKsf4ma%dVkma)pyqdU-Ud~uf5xF{!i^Xzmao&KTRVaYbblaD(|b)*vUV3
zhw<}rvwFa<?1}mC_1)F9KJYKrKtA>QL#Zkey}pNEdkXj~m67ND^NObd@V93muaDPS
z|K6+3fM3LpcM%ip>r>7D)TIUR^P02m#m-NzEbIyV)(VVg=O-_%i30vQyPwAUv+4C-
zz*l_8udn8Z0Z-#|<ZFF*17EMLpI7_KxTdAN{jc};m$vK${+7chr1*Dzb#Iz4bYws9
zfBlX9U*<FW{)6t%xep%%{?!tgkM=)n{`1L)fj`H59ejT1+xjT*h2KPd-k)=h-v+*V
zD)RjPaE)^rn>hEE-ONA6^=FKE6!>0mpgx~}9(<`J@B`jQp6h>Fv>fo?bwQr*FMoef
z0r-XNe4g|9@>c@BGxM=<{()JIfd7=ww`}}B^g>hM4=-W)v;Aw?`2oO}Wd2y5&#RjU
z0bhzAe_1}iZhH~<AG2XT$!F~OU(H$S>z?MbnmWhB))vU?d~DjPNjq7inUjD0Chjl#
z{=YuH*X=Y4_{C!w&wL2sn??hFzJs4v^FzZw?fmp}?M<!};B!{=^J;(R<Fi(W*MTn_
zhrAx2I{%B+CILTvJM#Mezn)LJ{`CX!udPO2`x-Uh{;MC;<$L^${^YV9e**sUaMah&
zNA&f6l~Q|vkNyOCy?r$wH7vThbNe1(#}_@n>GR1owK6{A<k#k4<A;s^!x=LHzkV{y
zhw&dgnHBh$$n^QV@eP4L`4;k1_SpTY=jUJVZw&mdiOB2z(fs)(O@QC#MqZ!)>+7}k
z;mv?w$ByrMyy^XGO`U1Lk99o1@E*U|dlW`(4R7J>{|mP<AJ@C3QkAwIZ(--Z2fl6^
z_XjlpK=@YRo3ZnmEp1DKeuk#ofX|l$^Wna@aSOKtzpW+mW!UxjWBq>szVuq;`TpL&
zQLdKG{%PYl-%$M-^&h-n(QiW@;8(Euc|JSe%Xa-gz`yCZAEorKvFC9=E{FpD@%n6k
zVe@%R^|ygv6OO!VgMEKbkIy_0PXT`OdDcHn|E0@Qfq#e1SA2XHDD_q=XMYYq%k<g)
zJO8yQz}Hy8c$UwFXQl$b$??2T^{389uW#9F(}17H=0kn{tjF`wiQlw#=HIRz_Gg68
zkD~dfmwpHQaCUvYcP9G!ZjSpN_$=&sD?i^mGJh-ZKU__}f65oh-Nu=JsalwStMz!k
zI_bT<z)w#^p6@T^J5~ig<uT-W|K}T99r(6)xV}i;RulO7_oc7DxMgGDOV&Z2&(9q$
zH3j~54D!7H>+kCh{2;b}^@+3ZpXl-Sakfa{zhU!9yT9=IIx&L>_|MpU&insDvp&GT
z!}ed^|9!rT27dk>w%5%3F~BdZiv7d&bF3Z({3iDNg7^QB)hWQ|*`L0C+|Dn7?=ud0
z-apyC+64S)mJiRr$@AX>zn5J<^89~zcpLCvMyH?8=|$z+I`_vz%%{rr_oRdYpLB=&
zC(XxH0=_n%Z`u5rb#g=Co3iV7*I68&a|<^C{sh}!c>fpuv@P&!%VYoW@gH-lJ@6OV
z^DM4k^6UP<zsBzW^X>aV_#ohO-(mYsihU9Isk!|5tLuwT+uJ|u^Z!d*Qh<Mp-_K{q
zyDf3A0skEvKQ5ntQ9u8k@Y_V-b657~qmFmlPpR{{QshnGcN9XN_h;RC543ZR&#vrz
zp7-bT_v8e=M|IR+b=1B;sn2hZWy}ryR~Omwi}g>X---i2tUK!Se3niv1^j=QFPg9K
z;GZi3|Bf5=liT5Z{#M0s;4eLaJkKXv*Q&sOlP7)tot4#rPp*snmNuo~{JGKM4ZzoA
z&x82+OsAq>0Y9??>g($feLhpG{x`s{=Jn}pd;K~gPkZP1DOCma`TVwU%zuDy^L+Yz
z@mcwSKf(5QuAgIMA>c=_``dhbZLD7e_;RyYK5Tu9mw5#E0W%oS=G$%+O95YKUHbg2
z`yT`T*goVVeAf&5d?WT?Ip7a(M4qp2hCjl9Fa8ViuCn;NxJAZr;ICy+cLMzN!o2@$
z)UO8o9|e%t`RMxtGjnzZzItWkZ(g#GNBVik)=IBE>l|-aZeafWe&(SA#XC6p(+>Zt
zn$N43#`^a)*}ee281thRC|?}*$3L5_1Kw2)=eLe)O98*pvmW@45BhnP&&ZirciHdz
zRNx1-^Yd!{*Zr^e-%c|(0DtZ?#<TG}Bl{KLvlqtx)cSh74a<HF_)pmNZ;AFee;$4E
z2JowjpnmEBJl_~mHbY0}_WI>H<as{X@6QDMH|+ki9zWKQ^?nsS+aCD+{ZL<zPrbf1
z>TLzSSp($rUbF8H=;Ph%t+oSyuM2s8JSs5fN8odB!0pA4N4IY70)7oUp7Q)3aqR(q
z^eNQm{aJe0KH!V7`{7)FR-046k9!x_H~E8<RMqjiKg+i`3;e!sk>~xB|Am{tC*9$G
z$nILVfS=8tH|4me801r~ovV{`ye(qmljl=#;27XP>x=pG{+WJa67b)$@toYKlQ$nd
zes<qG8Tf?UsL%6xIsYQyd;XUG_Pw-!G4Oi|FnxCX8v6SZ;E(^p^x1rJviAF(o&EW1
z>Gbty6<h@T{yQAsf8M?r_{|3~A71Abxp*n?`}p}VTi^ZFKLY+}EatE8*Xix`__~$A
z=XUUFJ|A5e=kw!#tO0(-WYo_&3+pd-kN6b$ADF)`zIG|^_|fzKUwOX({vCFHm6{Ll
zXFjrGJ@DCB{X)%yct3o|s~dnnzXtPnd2s$8{n}T+A2^IW-(SA&z6JQYx6|j(ez+a@
zqWt}9Z2SKC;ZESYo<)7vjfY@<==04_z^DF&yq-VxczEUBeZYVGA3UEq{#}32zue*g
z@T1Bjug9C7Kg)JG1$=|L$m@Lc`PHKPT0Q67AIr5wUiZJgeq8v|NZ^xF+4{2m{p)v9
zfM3Pt!_QaS<5TPRzBnHEy~R;qKR<H$zD}0;4ftE^dAiPDpC7hu{7M(+`sUt)^8=qh
zoBU@a@ca5Aul05R@1KqQD-Qpd^L$M6Ne_$${atC)zi7VsfE3`nG{OGi`6SeT4fs|Y
zk>~4MZo~xOOI<}i`O>p6J{vWD6Zlzd|I*`4kN?l#eH-}iSUm{Oe}{V(@Wb=r_~iFv
zdoGv@{2}JwjyQw)w{N);_$+5|eXIKFE%kVdn^Lf=bNp;$`#aA+sqApzli2k*@1F+!
zMgsp6^Jnty)w)*-@bymM_>5rp>mtHl1^&UDxV}99x7v*ZKK_2>`Te@RyCwkNsw49H
z{(~ORX9rILK82m1^Yy)6WdZPCeS!M?eE#sh_kmAgb?CbPbv~uuUJU%<si@EMdE?e{
z;3u=|_vE(to`HgORs#PtyS|P&YG3c@<Mrn|KL$Qx2<D^j&*=Q8ELaQtLo1Qz>wETt
z&w&5)XXJC7!u{pvFV+E{<tFl4U+?deZ+!`THg>$zyw1Nxv#)@^!j5;Gzt~_G@Gr6B
z9Usp%SMC9RZ3~=FxW238A>jAi;e6x0Ccgl`KRfF4d<N%f(#<)a<UWS|dE_cyKUS^W
z9QZv~kmuv`^!XOR*NsA+=X3dX8{pgd-g~9}%)EbU&u<U>%{Nh>=QAUrBk-3dFrJ-{
zx%WK>d`mW-dH$>CcLToLPSkIn)xN&d^ZE2beSq(95P7}6dOR0=sxR<A+(Mq`^KOY)
z;HQ0syw=y_|Bv7M17Foqzp2h2TqEuCf1S_1-GhK%eK~#o9_5DvKaAy*)u*rXIa6p9
z@I#NFex-{zKU6tB2KZcyk)Its0L~xQ-TyA|3GDoY_h<7*W&z*s4)gihY;%Es<_`1u
zw$HM5ckYi*eTez<<6Ts-`+#5iHu8M@|1{=);LkQhp0DqSqIrN%NkBfC`H_A+_#fb_
z%toH)6EU<G@Gp*HJlh{Dwdw=>{R`6P%Y6Sl@UiXE=TnBp0Y8Z8^Zv<FI|2CIKmNPE
zKL0;baVYSmHvBuU$A8p;5x~c?`}yM<wukW?-C{KGTiNqF-v1wLO9B2myMM*k_m}ri
z0zZ~rPx1L=c9&DY*I@S(KKI=}*X#R9qYJ>_(*XO2-;XNy%^$$e?1?;I-_d{M?cv<N
zhBZQ-uW#1oZGj(J5qW*Sr{}{XP1*zBmEHg3`P{Rj6Y#Dzc>c`uIe)q{@Qr>)p3l!8
z9_s@91ML17*H7-(9r%OYaeX=8x>Qf#E546B9}mwo@&JG72jsbaYH}>_HQD)w=5_x+
z{{9QVUts4yy#M2#Nd|r|%ST`D>+!i~-EiQKu=!v6S9LwteZ@WmK9bFc`g%m4Z@2$p
z8StH7$Nq_Vy0mwH*Zf-*Rsg@_Y2^9yrpC)x0be!}`NF;N{@Afsegyu<NyzK|*ZtG3
z`)=Uh`aFF;UyB34{~U)rA3sm!JPiEUvB>j$UXT0*_zBD(GVymje^~VCao}seiuyVq
zJ>E7>KM8yjcKyZkxjEt#@EbOxep1~I-tDXJkDcp!$nBi3_Mb$4FY^PWbZXJl$-nGD
zzG^S~e!kvbg(kED{vPHB<NM3Gtyv<S`cJU>Q{6vWziw*Qba{S06XwYdd?WUJljqZD
zQx4!8K8EYd^U2ye7w{8DBG0$iQz!EPKa}-ngs+}gkB2S|^8ugv4$r6l3NHivjG>qh
z&wuT$vcT78=Z6!SA2?}51>k>joDZn`|4V%5fBOFCduPT2e`6HOhuvSTk~|ssH<vNq
zcmAgI)%z%3-98=oY+aFW+^`hPZ#zF)1pEp1d@!N`&WB&F`XF6i->=Z~=Y69;1itq=
zJf8A;)xNJS1O6%Y`2u`=ex0d)lyiR>QWe*?{B8VPtX-#G@HqLW%OU^nw}rj^<MMrF
zIxx4FlTUpF^LP3Dw0b`I^5i_=BW~G3`ubXbE}!n7vb*L3fB2A}SL5f>SbVQ+{T%NB
zU;Z)7r#Y)v?fmKcz%P3j`K*5xO;s)GeC8fp1pLVC*gyP!?1F?Pz`w%A8{b~ti#*ZW
z*`G(IF#TqBeY)KX)_XPIm=W#d7sexB=fuO1fAr{Cz+YhJW4s=4^w2r!^7?)3x_?@H
zG!OW~g)tw#zVR`I`a1I;@*MJfKAeAVXW)mj`=y-!b8VOO`64sD{iEm4&3U^6AI{GI
z`|O_q{Ow6@;P<fe|ME<KQN1YOue0-+GrrGL(D^)c@AJTSoQD0w^?&*#CS88M?|mIw
z|Mm89z?UC}`V;fo@4wRT_h^?t0r+Dxkw5;NeSb#tdHzZQe%@DpUhTgr^NxGpC!qO#
z_Y4C5mg9Uw@pTt%0lrN6A;2%r?7!cr_?pvD|D}GzfFEAO&#U`Ozcm}}-M%`XU0=Tf
zd=tlefR+BlM^8dNL&8S^f9z?$zT($CbOrcd-b(>~SljgZ?&Ze;f1*3`^O=6+C$9s4
z<#|7^)_02U`J;Z{%grut0-q_#&#U}h7eAiivc8_RJ{~gj11?vMjPC$nbSUykN%rUQ
zZL(rcTbusc(rLhF8jk#-o(<^zZyl`n&%D}YCh+%<K|W=$|8onvT7MdsV=nMxUPHdl
zJ{%7#HZ1^t?d!;oJl%-$QSZa)Fnkg4F^>0rss6dP7~lVPuFi+R4}aUQulirlS9-kl
z{d+m^lc)H3Z~y;{@AH|yaTV~j+55hJ`@XbyJnQXyd+b`^A7k(P>f*LP?@i~^t>x#y
z$Iirjj-ItY&rI|4A4&y&i{t%ZYJK&4#dSVOM>hih2YWwQ{2#c!qd)ux_|!T6e3ZUE
zU)A|6ed&AP-*>zpO!a5aMYz3AG}sRO(0P7+#jpJt$HUazKLX#E@tc1{{lf=$1K)i<
z>K~bp<1^!j`++~k_$jP^M!k3l_`wVO`p*8*{lBl>QQ#LazI;s_4^ah90DsSWetp$H
z1&ZQ)c>2Wez#nzwuktCdBPWc{_dY%ge4ImH@u{zl27cP8i@@(^e2Ks9@vq0j#dep0
zKkMLC{!8{_{}(KI9eCIKxW3&^<M>~6`6loM89($l<g*-d#W>G@!X3O?--!QU|5RL>
z3HU~g=krOUH?jgh)6xHGeV4QG)4fp+;MXvI^9CHx_vgt8{F7||%6<U%m+Zgh0e&7E
zZ+!plx-viTwb}Mct$i7er%RFx0bh^trP%nK-m)n0Egby6?Jrv^6bJqj2e0~b%8YLG
zepGe5XmP$2@TVQTS3d&BXXY=;0^iEfKT5yPIUGOX6T*Nm;TR8!FU8)Ex;HW$_yLS>
zQ5oOAy0LO~;QKN@rXIfEb@1(4z~968nNKvN<EeVz=KdW|0N<GLo0-06c0J%<bnvP_
zqmu3OPc^?O{qgY)fFHy7)Xei~K2iLyPc{L5IO9w7wC6*uKRnMfz`yR`RsW|Z;Czzp
zXe;2CG5*MU+`q;xYX|%w#;3CV_siiOfuF?qWXAv8vJ3F%8PE0SKhgvE?-}3mBEHXa
z%=Jj%|7LvS;W!=+ecK!O><e+e-NELcC#UrV-Z_7&{x8GMmwt<i1HK!}C;olhUVEz~
z0w2M6e*E2$X&~^M7$3pTH)ia45%>#?Z+a$<<`XqO=YB8@_|pzvjsHHaOTu`bHgq`f
z3mv@bpOoTm*dH^s8V&p~#@DQa^X+RzUIo4v<NNHw{v390Jn&Z?^P$Sem5B3O$F-Ay
zZ^HBou<=~%)wh7J>)@U9xxOFOW8hTaGdRYZ;tR9)m6d5S1NgZPeU*Pa+rAebm;-z_
z$MIC@7f7+|W%PXV!NK{!w{`GJe@6lT`?}S5`0>Mqz`x=+UMPM2d3;*`)geoO|J1=N
z{r&9xXGOE+z<<N|nyENny`FCs@a5R{jbPVbhmNfQz8K^A_0-%|p8>y{@mbmal9aL@
z_^OWWrTS-KKHOibbleDhaR;yZr_STCus>cc^9}Hs8K3hN9RKI9Zw9^q;|oL~AN%z-
z;Lox3<@58Tw{`-5%)zVm9Te|BpH$=LO7GpkCp+>{yner~9zUyV>`#+d{d4G1oKK49
zI0XE&On+!{E|{<8?)?S$Xb0~dpI7|nlPdpSi+%;Z*d6#QgMSBp2IJ2a901#QQJb^C
zPjT?7fAsmb?w>IaUj#nM!K?g_9DD}!>z}y<{0ztTQhc%c&%pd#`-^M9*Jk=W|7{a)
z0w2Tptd8?@)t_&6clC2#kGL7%<1*%dDl8N5PcVMzeNnK!OK)cZz9!>W<?aCMJ7e2@
z!1Lp^i=E&0ob_P3{FYyE{_Gr|2l!W6J|mxP;k~}l+xOA>`GFtB_!d{~_w#FhSnfi=
z^Yc~xdF`6dezXYi&hu3@9y(US{O?`$DDYibJ`wwOK>oc)l>+`H#!tEaGw|!$l}(qg
z`g}{+UM)(70q-22YJbVw-G0A{z8(+H77lz5mQR%9ev2BPxsFr=-oyBXCvbh&e^3kf
z|FGlN<QU9<-=HUePhrR3s4-n&JbN0~1O89O^W(*td<}r_%JSK86z8|)CmRDlg7Jk5
zwS{~(tY{AWXN<2uuM_a6hPML#B;zlg!ujWk*6o1r#^$S$i=Kt?Fu7Pq;QKP3e}2bX
ze?ABNYR1>UjQ#V-#_quL^MOi?KQJj0__a*G&gOp5KULkmfnUk^szd$vpVj#65#AU0
zUm2hE2JT;{GsFR(pN(feKC|yg0G?m(^Zv{-cL4Ct<FEI4dI;z9nn^DLAIb9J`&XNK
z!+@{F_?!FicseZiaNwQiV=ABdWh0^g-#a=A_(Y~36NY^Cm1BYL$@s6&<9L2!#CYK2
z7{9cm2l6@Bb`tPI8K2Dd-xDR?0)8OlUB1tA(er=(%Ts{o*I$M2ISu>Q&ad7Dp7&4I
zUN}CdzcU+n=lP!Me^(jo&k4Qf13!f2--q$nYA*zyACFwUd&2Q0f3_vSKhN|#vh(ft
z_bmfHg7Kx^=nvZ~%Lglg=jT5Mp2qRe?Zq{~_h$MNGu!p5dV9Ur>@(o`_35dMxV=^u
zS`R!QZ<Ak)g8pfCZUgWsET33*KC@)~*TD1sbd|&Hdw$Ml;9ubS9vnaIlC}X~f$@jt
z;PGX5y`8{cX2-|oO#k8oyMbTF__}}L{iS(7?*l#`JANJLkK6a14-Nu9#=)!e6YXcv
z+qd-4Ux2^n;MM+8q7U}Z6ODfb{ysMU@A`Wnj8Av|-+`~e_&Uw;{ImVZGr+&a_?evt
zz~>qLy5<7#UoxKWUyD*M0q=aCqSkj^3g*9~<F$18<|pxd>{98Qz;9>yG#-QFbM3X;
zz#nCN1Up_I|L&ex=k<&8{8QzhGX=NT^mnoVpN)-YemtreeIM}GSU!WopIYv+zV!H+
zSo=ZXTQU7}%i6+xzBo%B;Q95@u0weK6T3Gb@DDlk)p*`g0q-wWS@aO_{Q9Nv_uXOs
zdGp00!1Ln;zh3Cj>`~zRJMvNezod)*`Mx?|I$5X`@ceuuxh0;T=Q;Zr@cepkLPZ=u
zgVt9_mrw11`^z`uDg*xv%fI$o?EleSssUez@%;0`&R47j{A9-0X7l+2x9R}@I^*|F
z>H^zq&-Mu5`T1D#X8ioJ8grfoek9XRx(|<Eug5nAo?ox=>))dFngidG>96XK$BSdR
zS^>|GkJ-;)|Ia+qHeG(A8|Tk^R(432=jTf`M?VMr9G3sW3O!*yFW#;@@Xq6}+8_1v
zO<j-keyvF0`SCX?JKjHWRqF*jAOC|`|8&{j8~Cj3`1SdgNSJ?W42cH*#wL9JlFH`)
zhvWMKAKlmf<XYwDRQvmeDhFVEMy~D${CCANtLf6E{h!BI*!KtY{P|Yhc;IJ!?&p<$
z`3KuW{$(>H0)MiWHOct&6+bQWQ@}4e+aLJ%W+Kn$x1P5L0sqc<<ns=}^S7#DLxEos
zu0EB}|9O$y*!{+sq?ds&-q+8o@ss*0-Y?y<eK_!&ruuoczBQNQ@u=04qk;eZOXT_S
zZs`|ef!}xx`Q_QMKeII&5B#j#$S-Y=*HfqWOa#7U{;beHb^7A`Uwgo0;D?t(etr);
z-<$u?6yVoCfqa+Y5ilM~Y?==I1I>{y(X1hi=XVFr0=_~g<e%Px`)|&&^MKzJiTu#%
zxW3OHeGm9YVvy(ebL!4o4E)<k$QNPvOE<Zf0zYsF@)_CvqTIz-0H5m><oW&8A5MG>
zeD+buzxWoeZ`6`cfIl%7`P3iq_&z1^3*h^XN1k6F{qXpgz!#f{e2K5{_|h!PSHOSs
z2J#W?`u)O=Z-FoI7V=5#dUoc!TY!J)9po2x!}F6>eRcr<+7#rgSHb%&Ni}x?e|9SJ
zsr!*Hm3c4l;nR_iI*Ip-9{TBL;1@E!F}we;WzJ#XSG<e*u2ei;w~Idpe2p2%C$+=*
z<f$i50>6*({CPoK&eOnmn~C~0&*S;hn}^Q<e~j_<+4GLoOaB0VE#vuo_`*w9fFCmp
z^GVHz&)3E^y#f5+jE{P&6`Y?;c<dJNjb@`hzu#Wxa)vnP^;87w&j}lGdu`m98TcpI
zc<c5oUO)Dqm<{+@(=eY1mjB<~?gzde8*iU)#(WA_$OU|7Hr|e0$NLFS{hb&1bByQr
zKRbU{0QiZlf2Oeg{iP{|f#1*gD2Ja}T^}uqE(Ux?wteTa{k>YP62M0@{(07)Yws-s
zd>6*^^XCG4%K`r)<Fj_h{!dz15%}J0ybWUcd_S-X@I@J)?|VF+mTyu6_%OzYe}m&~
zM1jYFe~a<1-gtjt;BR$--@y0+?0M6+HT8i%&-jk)`s@3#4S_$(_-&DRy*#>OQ{W$;
zgZoRb_PD++%eDYMjPbWF;`}!7Mr+_VFn(Gy+`iksYY%*1#$Q^5_kX%g>jZpp#`E*f
zNBedKekkJ$m%-!piO1dP^2vMf{>I`Q9^iX0{af{My#0KrPr7^w_B^QDk{IBhX8QA2
zB*6W;&cot?Z_9Z8JaJ6RB;Y?|d~ydI4-XU>1blnO_bHF(S3h4E0{n2s^XvEU)R%!@
z$M_=b{`?=Wj{yEb#`F6LMciY6@56Y0d^}qDHQ?tnKAGL`n&EmK_`!_7!LHY~?R*3H
zUl_mS2G%FWtauyv3yeQ91m~ai$<u(3Vf?Bh?0lf@OyFm;<4f}Qu`u4IJv<lqQ;grq
z#{b*r7XaUz@h?7x`MkP*5%B+E$BVC*;e2v%{D;6VW9Lf~SK@efb^QqVQ;aXL5%+g@
z*vG&RWBE+{7_XPd-dYR%CB~0t&-<R<`Z@3?8GoiM>ffH83VdcZ|JQt|30$AP9<vGf
zmW+>Z{|5Z&I^P2CV&liP8Rxh9Iko`*6Vo4h6X)CTpSJ`5C*%43<lakv1pYae&%)1f
zd;Rg!9^h9o{=f<x55rsh4Ez<A51+3V7dZ@kOQz57-^QLl3j7+zZ(EAvIXv|Q@Lx0j
z#^v5{e%^WFDd1Z>cy<4$&XG~6>IRAS&wS=SmnN_7|BSpB_s5Ra{s4ZuLtpV#ujBSz
zmH7(r6Bs`~)35&fA=a(JAAh_K{1`|7tNh<B==WQydwj3X`5X9E4qoN6@HhMVE|+y1
zshG8NACMv5c|Fp>k&n{vlE1dMe-y8lrcY-E{<MQv`Z2rP(EifOx^+1>Pd4EB@nwtS
zd|vU1CvyPL$Mb-`cKw=KSH*YxI4AIYJUj14DgK#}d4ccB@-OmJQ^-G8`vSm!#dzoO
zROt^XQyBR2bMbs~X=VTUfZ{7(DGGc}#;5MWeA<6i9QZaYpX3ivztq&yz-MCmWgLDF
zl~2At<$&+Y_!k}bs}-Npq$2RIuza*Xr(7YIOD*jSR{?%A<CA@UKg}ndst)|q?D*Jg
zNlWkkuK91))&~A8yWTvW)qeh>`Fx}60^gqL@9>>pX+FALec<`^=7!RC|7-rS5)FYr
z&W@)e&)W3}ns5GR6X5yvW~$F$r}><lo&kOXJ3jLDojtiV@HyE0koAB)-n4%CsP@3$
zX8Os0+V`(CpHj6`y1d>WHJ_NVEAY!%J{Jz7{^PrP0KcB`nMT;pzqJ0F^P+$+z{XpQ
zZ~oEzsf0ejmu9>^-f4d2(=osoWPIu%`}|Y$L-NG~pTPJ`H|_f;n$P%aBJh0w%Ez`>
zw~q$`zmfINmWOeF89s6d@Xq;P&F8KL_WggI&xj5$1K*3~|GDq}q2}|H83FuO#?Nhq
z`n|4<2L5rz-&oNP_V-d>zY2U&#z&09@vv^n1mOAg__MzI&pQ9%(Qg2Mi|KQIajmz3
z|B>;hF57-)t=}u_G~oI94A1}8{u#jk$@I5`^@9GH@WCA5GqU;IwcPeg=zN;KxB&Qg
zroYMOKh*r8W{cA0C;Fa`Xuf)(4}rhT^ryUV!F&Fr`S7#LfnUP-4K?liv6^4^`6}Qu
zv-M5-1;@kc@oUrNukEw_;aY!0kI#Yso#iut9WQo=r2@~#zkWWh^*7(z2z&*m|9PHz
zbbg}lXRbK*4e&b{pUj?5^;q^j@O*sUoAC!a{~VCr<r*<;JMdT8@l+ol_4(oPmOlbN
zl^su4Wtm0!m$S~{Y82T6{DbWHnBsUIr1;jS_XD4i@$(($hl<~|_7LzZ86V*||5SYR
zt4D!f%8qx=^F76Tx|{&MKAUgrANBh&6rWJ)6!52+eqP7<r{eSebr$$}jGsNye}6;q
z+rPUAe0??^N-+JK(=G%5ILrUHw)Xz0&bO8RiaytY|H#3s>xKDC{O`w5{Ic4A13%xv
ztK-Wc-}uzyr}+aJUT|KIe8KWhYW#<H{Am7-eVKqC!T8ln?DH|rM}C+U_}5rIW&XDP
z8=4<8Gzakfe%Fx{)PJB^PT=dZe3~ym@7=$&{+_~lfq#_oeSH2U&Hs2VKk%y=|EbUa
zqxrwq6#|}Lzv%06%?}@66!`8;f62la@9{<RN4pgVzAEG6zwZp|`(UNgz%ORJ%XdDb
z_2*?M2mBt!>+?y?U)df8JU?E{?QK6F*L<7V;lTgR#)Gcs()`i*>cI2ynY!wC7@t2p
zSsVB*j{MdB($QC6to6fl)dhaJgID{DeqOKnD#z;qUz#27;(f<!&7b<H0q|#;{$k(t
zh~^Kz(gb)uo(K5mPt9j<`wZ~+vwZaPKFv=n-WvGYjF0kN4{Cn;m3F{C$oN#YzyI-7
z$8`A{8SLvpt$*t6F2M8W7rOpJ^Erq00R9u!pZfT#`FEN}0Y8=VPc()7YjA-+z<<P_
z&-V1+&rxlB^J`z=&oExs<LG<}t%?JlKaWoK`581nU}PfjkF(=x{f}|{Pis36`0b2O
zVdL%WBSU~c#Q0R7e^2LA<kB$UKV-+pjDzg+H_bQLG#vQf7{AJQ|5@`h-W;7S->o3(
zpXu=`@K>3BPIf+AxXJ|J?`8APk%IR9Kz)ALB-0zf^ZUsgTH^Io)?IG_Ki;9Q=AYDw
zwx3z+e>Qt6@NFHuntw9-j*pr@`N9m~UtoOJ_wjo3aQ!*JA7kS`m0gdA=UM>#Hx6Fq
zuiv+(^SOO&A@J24yvo1vRr~p@=3n?^3GjOvU)5J%ruj7^mjnMH<Bu<M!}UwuwyS{W
z<AL8Fh%31k_(4pc^WR_o4ERE9KKyhK-p^^XX+7{CGyO{M+0P5~`VN14Bk&6u|MVH;
zAL#WB@D*4-DUIysBU*oE_3wdqZeO*%9$2{(`ZF&3cHna{{k7HcdT_$toxt<^pI!L%
z{=(hB*JSIf{Ukd7l`rlG{u<-I{Rzka&rJ^jpM~XLzG{D1-z<fX0)K<)^ZljD*<XQQ
z!T81%FrN;e{|@{Z#uxV8@73$OV%%Baxj%tl&%WIKBJlir^U>Qqyyr_=|M9TP>GIk?
ztobe3uLIwT<=^xGuJ51wZvsD;@yR)DKdRP0x!9H9ydEjSjz@cI;CS0TI1}(q8DECo
zf9upJEARstU+f{<PpI=*S1<?gXBgiqll^>3^NUVC2>fPtJbJgX?YGzb4{P!O--z+4
z4RL)hjm{5z7B>Iu>kF;FwnHJ{OEP|~3-e!6x+w6A8PDh2npYnMegflj?#J;^`s-4_
zZ)W_ZB-?+k^KbcfS>UfS{%K!5qvrGX2?M?#8*gWN*v~gLA6FwB_}3Uew4nX`TJ!H@
zsSZ59{#wnBr+@6J1^jrXKigMtsP)e;dII<l7@u)B_GkVV>jD2M;|GnmuLre$p5_gJ
zk7WFQc0V(&a1-F2_s`Y&fPR07*8l!YbKr9@{Zw|mDE&n%;D<AQ=P^8gczIkq;L9<-
zj;~%%=kr0=j=<MuyzBR8VE&H_>jM0njL*lOcT~L99eDn{Rp0N@`HbEg2|Rz^n&hjO
z)O^#Ky@7v+<x|u5ehke&5Z4!Ye*b*o)dXDMh&bSnGW~UhalFmSotQ44d}H2X^?YCF
zbM==2z+YtgXV&BXIQ*j*fiKDU=4EXEiPk^#$}r%EF@D_Nc)Uw&I~;g^f8+Bmc>cD%
z_~>+b?Z?ykl=^cl@H1FG7kvIG&9DDzJn+u*CAEL?&o>#hbQ17anf`1xA5MSqE#Mn6
z{@NGVpPx3K3Vb(qJzMx5JYM83Fa!8wjOXV+*N)EyeiXaEeXs9+sqUYbSI!6i5aW~T
z;`WLgz7Y7U?0$IX9eDmctKAadhqB{)JD-15=ksx~<-liP$7@|5q51w7Rs#Pk)1O@s
z_phnz*8snf>Gxst&v%nP1HLRfKI(dWolkrBdf+{b-+QYa%nwH@Z3O-z%csoQ2EfO-
zz5%`y)93z#9y>MzKZ@}$`uxT^|4VbW0l%H``hJDx56A5U{wCw~{UXgjS#LM++|Q%^
ztD67o!TrD|vHeRwztDW?Uk(C4hw)MM?E6ugAGZ7#;MX(0Od~u$%rpE~;3qSFe)g`j
zo%8eKZGH#-5aYF<P3Lp_(X+tw`|~w(;C%l2pBI4N!1Vd{n)vl4;Q94(VK$#1n|v)@
zen3OK{(awb6Zmc{AAY=^Ro#{7ydGJ@_>9|defwn11U&br#rWQzp!>7@zAV6Ve_Hd*
zjp2H&!jk)dFT?W5+G;=SkN-#6T|iZpwSOE(vBhr19PGj_RIIVE3l$r?yHGJOQBhG*
zv9SxgP_JFsg^dn2Dt7DNE1tji_jTsDUe@BBHShYcXP<qZv!7k(-VKA3nELVmM4xXr
z>T{)f3i0Fdyg2<lZ*2IZY14@3`GoMH8lO`ir#JOHFOhk7Ch<3My@@e?+w7Z7{8)Hn
zf5fQ&mF79b&xEhNPW$JZW%7tG2S0vG^!Y=h{A2M8h#wE1Z<CJCYhEcNK0or;fuHZ!
z80E)VUQGOFc;oZ#4F7dNDe>2kkGS6DQ>Co<R_OnY{Y0bu!Ko^UuMcmB{%Y~P%HprU
zb3SX?Tur<^;?u9K&KKN9yNNFdU$<-IkLRU88aq4d@7jiS#h?G_zc2NF|0!u#;-@qI
zIca}`AKv);_(!Av{RjX4KgN6EMcYNc7jC$)><#6=lNfQa_UGr=8ST3GT@&#yaUGlo
zyg$-h{84!CK<&52&u%3?5I*V8&mA%9Q>jBc@w?y|N0m!;H1!W(w3L2pQT(pr%cFga
z_uh>9OuEuTydUZlZ;C!=8CLcY9|z^LpN<$jKs@(pc}{I!)gh+db-VT}@6rr6^{p|_
zd;fT(_)DmNW#nPs5Fhao@RpzNg&6I5eZmCsJon0e>q_&<;v>=i?AJTyn<oA$>N6MX
zC`~^3i|-2`kwoVu4^9S{dJD$gI~E3te~j`uPF&k_k*ObFTk~++vO(hc9z){iJ>?u(
zwnQt%*Fb#+VO>A-?KR>*!}EC=y>Wy1+*lXq{YpD}v-pE3e-_5+h3jq?-wmGQ%4S)1
zi!TfxwMN%zp1;^DK88*Gt@CEP+|m1N)_&UhyZ_t)@tNskm9bd+Y{S=Dd_??loBG(!
z%ME|C_X+VmZ1S+}I+@`;T~CWY3h$OIi_~XalJnv(!+TB3CVs%JOX8pZ%=6!mkbnP)
z&SOShtp7|K8SRb#Z^ASE`~Uj83$OI=`n}P=Gd@Sf_?#=Fe<`!!s?_fS#v!?|4>-^J
zrucjqCmagaeZX|J?ud7X56`6Q9-Y$P6VG}5d#nSOdiGF!LiBgRKR*Z0xZdM?BgHe{
za9urkQk3}VC_i5nUB_73{Iz(V)2>@Z$KgQ*-it406W`W-zysLVX#M4r_y+K4muq|G
zI`d6D&!Nr2xH`pr`+m0btlTJnrSCu)AC%}8S3KWS_6yf@q@P?8il2`1{V(>G@&l44
z5&s1K?9ca1jr(f}Pj2ds_lONYW@BpcJ}5sP#>v5>(u*$(ACB=;Q2k8ev%+)U9m^@3
z_!RKoIQKs8MRxIp;BR4FZuG(2;vXTNV@=iZS^4St#b355-`bzL{_G!(_H=Du=s&$R
zo|(_S6)h(Io=y2yA2}gN*0GPpDJ7ooDcty~>&!JTx`^la#<EPG-=WK0#d9Bo=gi9w
ztStTm>c0i?U|+48_%ZM~uuqpat(*9P@W$sT8tuRRK^^g3;6G#CVBq!!;-ACU&7kAs
zBomv6zX0!6L-&!dc5E)5=hnCmP_A?<@efh{fKxhO${)X-_(aHG#^(SS?Njw~2k{kb
z^0zhKUgyzu>@v%{h);_0BQc*TIG~64Aoycl`bqz`t#TjnXW=Kt()RD2Vu1M1@VU}!
z`=5^(EdD+6FV}&mZ5bv$HTs8`akTw2ju|OFKD_IE^}Xu*h|dWhXN=~@W!Wc)Zwvn#
z>!|K8eZ|K{{4gFO5BiC(it-EKy@o+E{KfN}<azAl^zsZ4&wa7A>oi~66$=#K8}+xt
zdp&=}S|ok}{Meu8mW}w&9kx_F&-rk^6tR4T`1LmBTl;_SpPwUVlz*n*8u8oEo(ni0
zsIoyk-+MAX7sV*wIo)RQpKR)5eSV+eoW|$}+r;xd5w4GT@7yJRFv|DCdrWc1?-kGa
z828!xc^nYm0_Eq+uIrY~a~~1UePQmaX83Sid=Zq-_Pl-klz7|xZf(zsIOi}Z@SOPM
zHuE>DzmI%3uj?i8d@qUX{CQojiuXhPhyOg6YsAAihnwR0UQ#oR4@cY#7k>lgb3UA6
zLxgyaKk1i_cqsl1%IA1Kux_My?&HKvul>J&)+q5@$1Zub!y@a<(%L?j@4q`fzY;$b
z^~q)PIYoKCzqeBF%scTM|KDg;Tgtx}_(^;Z<fBb()Zgp)O?;X^`0mB+``gY(cEPVk
z`K{x`6@M4`j`itsJ%M=cd$Rm$%M*+DNB<TO{_DM6Yx_SQl3aWi8~<bce591cdcUmi
z8D;%GNw49ST0G}djuWH5=gzpl<s8$CcSZS@n@fL`Z}{AgGm5{C_PKoP_K)$&|9=nr
zw29(v&$(Ia?-nn5eZ+bV)}Iaur-)x@^EsbZ|J(Q4Pue}e_WmY_`u=j?_a9@u-uRr`
z_esBh=kxd9n<K{zvh_P+Mehh0K3Csd7VF;|^>?^GR{X18zdrZXS|8)wRQ>PYLv8)d
zcW%T`+w$p){+#a^<)2G6N_@6FTK=)Q(Vrt>_$?k|Og-yUEO4Co(0N+E;jOJ;{XO}5
zg7|hRwLJ}QT<_FrQ^hwduKv*J)RynX{{PQqp8)aSHmNttH|kUQ$$atkdZ@QM5dGd<
zWO6$@>u>I5alCBXzv%m4*K5r$qeeu3@4MB${r)?oXnggSU*7iq8s#UcluZ0TiPanN
z_Wg0Rv;H1m6fFK=%YXMqd}eGmWVmhpE6j{uu`}W`-htW{YhxPm;F8r#e8xEH`Mf-S
zG0fCQwAc9Wo_D}V+xk?RtK~<O&+(%^#`Su64H6&Z^6%Gcv}di;vBubzPjAG7)xZ1x
zyE<DU@&2o{e4ev98PUts@93@9JGxX~@%^i6`H{n-zt`1h|2<o}j<c=*mmqB)%T#@S
z4?O8EzOucRpRz{ZAMI&;F87cfrzY5zPd_G4^m?~ZpSeRiO|<n9AGAL4_UZF-@7$M3
zW}eS)h0d{kZT+m4T0Z@JyF{km_?}#&{t+uZC)<{vCY^ct{VzB7v-KCRSR?UQ|6g>D
zwtvw}txUb^sp$4G>f@iI$qcjdJs0M%SpR#5f1RVbc)#;nAKQ4g#&r4KZ%lpNebM{P
z*8hg}r;z6d@ef1I%XiEY)8DrKwHvE<`IgyYE!X=0T7T=enjn5kef7Lw8`3wJWm|s0
z&FKEs=&$%Z`db=__Zp*~{b$Zr?xx-tpBU|LAEWjh+xpB{spa>(T+Z_SGXMX6jeJ^H
zeC#voS)UD$8<={#zDa+SZ@stH{Bqyx-aOm-OnZ#-kss4ucq+b4ENy?IK1ToP^*YMb
zdso(YUUR>Cply9poYnd`F4gB{-90z)eg08z)W^tQx0Y92Xj}g0iR#~DJQJr=74eRX
z)f?p-_jjaIHB%pPW2xL<-`8cA*w!ch0WF{LndytG_#P4JnNI`LRyOr+7VU4##5}gt
zwmxp3wS4xUrTU%|A1k@WL%;1l{~vGGn7Fd|;(vPU_$O`oa2cOxm{xk3ZGA>x(fZu@
zp!x3p+_K_ZKT>bpFC!irZ7j0VwtRa31{$9}=ZlM9A49K~?O)|fDN}FB72SUx{{GBA
z{QkQzqS-3j`s7X%U4HZ|proDES$|7@-%GW6{}a*P`1{45_3y3yoV8uU;$8aDu2yIN
zy~tT9TFHMWll4O#zW*5gqOmV*oww!t{#)Q<8}Z4HYP$w*PiOg2z|a5bo92u7>ig91
zXprxRH=dhhxt-V8UU$9y>XY_#62D-5Vet*RsyFVl^{TAD^~)AB^%3?#Kgu`yt@Vvg
ziGMX+%jbPg?s8WAw%zLa+_b%MMSPzQ>W%g{>XW|PHSrUMtM`tX<wyOS46?Jc{=S^w
zdaZ4HE@-UYzlFAcgRQyO+xlrP>MfP@Iq*81SA6_;F}}C5P5ji%VX^+Zaev#L&u{8^
zzv88F7XKvQuliWyd2Zb3?>{%rxi$0|x52jlA3FW=)_GER>FD|xesZ~q;>*of?|wHr
z4;%i#Ti<{6#&cQf`}1hE#y<;xp8Ufbe_t)e6#4uAe=hHT{_$KI?#7j=;_BeJxsg2k
zk9M{GcdWnruTK}>?5<viF`hI0n=doPxBBsP{JL-S@m=PKKa<Y-H2v~Melp5mJta_l
z>w@a-Y9^EVAAh+}e2WU|S)aSzmWn@DSAA5|=(slOQ~&vL@yT2M^42)Y;Tj!BhVSIP
zTKw)#zq~b$0(a(+`a7ptFFr}1U*1}N<=ZcR++U;o+&edl|1$WOx0cWLyx4lH_`BZG
zK6=(s@<$99Wn2I0vv2zkZ~T8n4n_a__gnVk=fD1L#%cY#lIQgAjJ)8NGO5K{kP)v7
zlI)cFd5_iW>GiX{3}5qLi1^Zz)U%&VnP$KE8dJ^v@bi;`ZTo?P)8XR;{iwf@|F^Do
z+Gy*`)KG6h{?F!~Q+$p|`n*}D>UgBs>fGW_mQm03#gJ_I#OG|L-eHI4*#gZPZL+Pu
zBgV7rR}1WWCVt5_lz$=PkM^<NW9!eE$Ky8JmLJ*rm$$~ZcdY1tH}X{W9yi2qNv%Gn
z*Dr6Ke{^qrOZ<dOnnxH9`JC^GA2DA&^JZ}32jcC|sdvEjR=f64yvug=Mt@|)Pm|?Y
zw%E2$k0|w#O*GH;UztsORr_D<V}1TPU(7w$N&QhR->b8(5Bbc>AwKU%^__ms*R4@*
z{jK4$Lwq^p{eG7;9(uQ{x7GG~BL`{yIW8*Z@mT!byy}hkG}e<|pBuH!w)|`lwf>BU
zWSP@%xAn(Hski*h<Hk5-N%IWimp4#9Xjcx)_h$M3aZCE?j^eB2QSbI7dVj+xf3{;L
z@udc-kC#B_uYHqb5g&3xJ+F77Pd4#;ifVgu9KJbE%^kMwQw{g4b(-k-sg?5kXDEOF
ztyE#yPFp|4UCa0ODEp&*4F5Ri2=Ud=X#FFOWD}poVWg>dt@@YvCV5AT{}^BE6JAW~
zQ*efl_^6udL+9s~^1l@sFMirs_0^WBcT6xz{LQWE-7*&aQT`-5J3H%djkr_9$Hw}T
z(Vu)DvfEjIpX8Y){ubunhBuy<jGq4D3;vuh8u^<2TajI}#m}}*?!NyRp7Az+-a_#i
z%ByGp5MxJ>`24li`|V9`vHtgr{gY0yR*Rp5`qNi*+91ByS8e|gcP-z!>=yC!u|Cvr
zpZeUrc8dRUQp-2m->82HzrErIBOcg3`_8==-+sZrmv6+w*j}H+e;9A>Zy)(0K5tob
zU!<npF5BnbtA+Y}^R&M@H7m9F>XX%5p5**-e~tdIcDHom+izEI^#9f<vHnhbpFw=H
zp8xKR_L*4ei1;EH|9Fj!o^KewX42#0mv7SY8^#LyQGdfHnRHTo#g^)edPVmShVPx}
zwD?Yg)f@e@;io)2D?UMx`m;al^Sx<){B(<RL;QqL^=_w^TCC70KZnz8@r$3T@7Jln
z__*C8#it5ZZ^XY*e#^Sg#kV}D-Y(aSALSe4!*b{E?Y51#=2%}h%C~y!_%NmKL-A*)
zY5DB08n%8e{-*0MZym1&{=DBtedh0dA^t1kzhv|1@sBayJC;1@9^3kl$9O5IbdDd_
zYsCNc8Og;vU|r%E_V?x-Nhv<L<FEQ#$A_O^N8ew&pFepsr4gU6yn4$QeICocPiV2N
zf3|+=xqni6cVh8HmZ|4>FU{O!rrvIz&W}bejeF3xK6ejm`HOCA|8snK0`X_C-eL47
zM*FmEaNE>-Plz6G81YuP>s|3{K52azZ^>ug7yop=`d+7_$A?C|`DKk1ziy*?BmRwb
zJg-b8581X)?bW}$HJ(rB(e?6v?lF$o`h;zMd29SQV88L>1bgv&(yD*B%~j&L$M)E!
z-e`ZLKQELcp7=x<j|F{7|D$~4yhf?A^Tcl*sr6yJ)jK&~{5f2&F`qKZfAVOd_~~i1
zeBR%T<$}cfmNfUL0+);L*;~DFe~tQ_j9M+;3H<|o^BWt)C!TFyelFLo;wvy;|C}Eg
z^%*~Or}zg${=Ix-{8PQsUhzBIspt6WUb=(gojugE{e4p(6CdTKp5xo|o4$XOp_}pa
z+u3<w{Ie*A_CKlneLiOE7kt(Ei}UU1{?_QvE7tfbKIMM(-p+aDd6|{b?znCF^c)`^
zD-%<E&=)O#(eCK}+~`l5ueov3w){C2wSC@C(f+N<-?zn2^it3E-y8RVsgJ^Wjiu`z
ziBGdc%Qx0HjrI(w@Ls&jK=t7`@ALHiNAY%Z)w4Zs^!_4#65{P_3q7Aw|MSb!w(S{X
zsFol3C3-$<)PKC?jrerS)hE51`A0k${o%9G?@c}1Cuh}X=WOe9<A|2;gz@>v+AqY9
zc&I)!r;f+cyPmsXTRy$(c#WUVoi2($^&k5O*7&rZhuX9LhN*vjHaeb-_B`_N!A0Bp
z{GH0$a?$fsYrb3kRL^hjj(99SakyTuk&le>-RD0Q-_qxox0avlsD2OOsSN*Iv8_+r
zdB40hpRT-K?#KN#%3uEBp7`((^+tV+c$k0dp{ciPr0sL+^sQ^Q^%;3h%O8aEp?4qM
z5nueBdOj~pO0T<aTRwfj-x?1?TLp`M;PC5yS=)#GNwWjn#b;Tk^$FUR<41cM{afzo
zyTrG`ei+*`GG@{nw)H>jujL!#0pos68F%%jt*?gpIQ^_=*Tt8st>t_F+=n&FZ{P5i
zsW<jh3_r<oA>6h;Ws!d^*f&2t?y~rGE44lxFAZ&e)zo{{(Eg$H+<E`l)@SB1EuZ(d
zZSTe6XFO1EjAxAd+oH`1Q{M^Kd$rsd@%?cQ!Mlz2=Wemji=VSX>%;bmJN%;fW6jj_
zd~|%b6ZdV~=j8zP{@4d^82^;`LyOh3K4;IJG4;MEzxvz5k8JDH8}o7Im*XFgi9d|>
zF=M^rdl&rUXLX9MPi)JlAN2E_fU)0~xL6PILq6;E8qb&E^VjeFuin^aFa3Rw(`t=>
zZmrknhd2KITjS_|H|lGwYZ`H9xRK-f$$#fcGVQnAJLa)i%P@S4KEuTy&iTt*^M*^|
zcR%)d3xBVh^*7XijQ9_w)mz|Ktsf`8h0VOvTK>aAT7H++6UA4(qV3Ah0UCbBPkcU`
zJZUX|$EN6gYNP&-PR}s)k*I(1pjqOZ@A*}qf2+U4oH^p}T~r@{@-M6l6z}j_y)*o#
z+Y80_OQP-X1^+4cQt^j#s85<++dtNX<>H&*{(7MNJ?~eEKV!4cY;B)V_&NjEiC^Qc
z^;wJi^&sX(@%=s3Tj0yh-XgwJ5B1)t&z_<?#77NK?*RWQY`6G?!`1V8xBBc8Uwn-E
zcqrde;-L6x6V&^{$BR57K76uzJ9w8BC&c?sQ_u1fwmU8UwZD4C^Pa!Xi}#tWp6%23
z-X-y|=BodUb<OFUuZoYHr=I2K8FEwn?)mB+GHCo)bGakF@`7L9I_?X{yl`^dd*a(I
z{N=6j?}+keoqZ@i<zn@`UoZS4#h-zHA5ZJQuyvI9;3Zl<<E?Rl*W%wTRUe7?x%Ba!
z_;Eq%UD2ORI`&EYZFt7p>RI2!H(sXYv;Udf-agVcZ?A`EK6+Xtu6VoUTE1J3Pm=F8
z#!4u@6g=zG>3m}Gec(gTp3Rpe7ry}B9lmDo)Z$OT+r`&-C|@DH_?z$!xZV><Gl@^K
zLfePW%al7=#XG_~q5hkKvx~0?{~qxZF*mpPvhZFge~)K=@r~h`FI);062BAi$??g=
zuSLaYM7%Lyr$19t{9JhUpQYxzh>wl?#s1-VcUM!-{^wzt%Hr#y{IqCK*M!x?*Mw*L
zx4TwT{Cs#m?~_*75q}V#*PF$wf%xa}tWSa(O~k*2XMGB!YcBp4ya(E6@1vIDb0gmP
zyxiZ}R(x}K)_?WH4&oWljJNa6x`=Ow^50u@Jp3U~5AiMOkzaOx>@B`GyfgZfjVJqy
z9|X_w=aBh>#ZQB0eD>)vO#E1Q#((~@BgM~vXaCbQv5)vs@GgjlbhpNfp9;_ZXVrRN
z@x$SRQT}poKk*CTIUZ<V*I)b`c*g&W%mL#2!?QgzzL+O|JUsL7P0K>@E8%&6FHKu2
zel|Sk3x(RQ5FZR5h4y??c#ZgF@VsC3>^F#C3(x+l_N7hYSHSc6y|rwc_$~0>sDJ1F
zyTp%%XZg9S>=i%J#{b*8Z^dE<#4ok+*6}Utli&V`c(y0+SIE)h;s+!DGM?AWIwgJ$
zJoEKe&vW8Kk$*$bo==Nh68|3F0lrs^tKv%_UnJeH{jKM@8{*r+J7E0QU{SdE{qXF6
zs`iQye+}La^N}mA55>p9{f)%+mPj5cJ{>&cZD06vQ_px9z44X!cqpIwvEs;g;;X{5
zed5&rB%b3>-rwn2zlm>z^68(wi22lZK2jIn5&3b`fjHuO!Mk8Qyum+#_<`{3Zx^&n
zEWQtXDDLm9qRGYAh7W_^X`fpB5cuE5KNr)Pdal=94az8fF3R^sea`pKDxUc_4C9#(
zRkDj;g7P_^eVID9c;=&$xWA7d<P#r+@*`3I8atiEGhg%h>NBCJ_$er#&)0GHlHv!z
zd!Rlqa=C~f2G96;_OZNp=8GVdpX@{>@yyr1UGKcA;yK>qe0EOPn&LO1{_IZ*m#ZV5
z@y7nMo<jri%<t^atKV!ap3gh;srRvF;<uvy9Iqak(NcUMJo|^Ft=o#fgnSx|`{h}n
zgZLbO$d9!@cNQNEACB_7pXe_BIXtiT_}t#&OC#SgKHqljFWv{9@iwT`VDZ!8IX(%D
zH_X&?zT+3>EuQN$tbd)AW5nCz{<8mEGibc{)bMubuS!(&6<-iO3is=1T0il{;rV<`
zeLO=v=d)~|5j$s#Z}Ern%T1Uk-V>hVfiBG!ith@~_HUVIsd&!U9MC?`J}x))TyIQ$
za<zD$Kh$UWy!GO};q6eLINdjipA66XA92|x-XEUhnP(2W#B)Bv{%!cpJ>qAfeCCU5
z>-LLhe&P6}^oYZzp8a8gI>*JYMtztcXJkDkemXq+lk`z%#dChd`NA#BMe#jQKKq|I
z)565BgJ-;*Xmdk6=i`xxp96)%#cx3Qtbcv`2=Q!B_9w|NJP^MS<+DFYvHXdtXMZ@i
z-*fRhP(J<hX0OC^J%s(q{2cGZ&qw*Jf7I)b;>#f4F+Q&!_$q!aJnvVB=`o+#&PQIr
zbG@Zm+c@GYA>Yxjb50<>Ej-7cf!`8|?+MTTq0qTx;<v!Fe8+{U#NUVK`sdo7>BOIg
z=Xmc-xs2ko;QmJZrTa%mlVmmZ7R*QL+;S5CH_GSr-d>-})cfN3y)q)7_z@`I6~1F#
zXYrih@qRVSQdB&jmxdT`jEX8Dp5tNGe}JWoc;=T-)PKpe^5Xq)z3k7wwy7kZ`GxC&
z2MSje&;FnJ@o~(W;yJ&guW_-qc;;VT@A9Df;uqt3nJ;4YZ!DheV~6&fUZt6M&VN~-
ziK$zP=Xy2cxyJoAralDq8L+**c&_KOJ-dwSEPgrKhx7fm?%l=DgYSiS&XK#fc;-{~
zpW8n4GxePBtUf+SJo8H=+UN3Ium8z+=;|##7}q-n<>zr3BR&A0`E-}Vc=62dY|ran
zlf-jA&hbOX)RV>kX+329_9^1)Y|;I0#&gdgKk+f$qd$4XdLGZZ9?tRJ+dI?6+a-@}
zJ%0D&y=1Gm!}{=(jx)vA-l(4aRR^a4@x==L`kYp4`M$VcD-+KXzhjnq=C3i13&e*!
zQqS`SwW==`pSnQw2}h%SxPSC;N|5+69o4hHTKi~)_yn`nb9^<a@fz`!_o-+9w(-Jx
z@lEciXaC=!*(UM!U)3{ye4cI<e?L_`jR&m%2Ta&0K6zgC><`=L-y?p5i+c9A^}{UU
z=hRfs{N8B%A@R-J)pI;ks_ZfGN!qDrJbS)9DZXwu^^CVOo6d;O-wz(~zqRiL@#lu9
z=kxNl$QAJuyw$Tm&;I_J_zz>$=feI=*1fmH2TV}U`b_Y-D?a07^*rA-z4m?aj(+O-
zyoaTGEPl&$^#N$lkr7YDU-nnu3Hi}8_=WgJv(z*H{_XWfe2f6~jL$hWK8SBOM?L$K
ze^P%DzjCg6UhnA$yXUs^sT%mcb_cZ2&P}nzd*l1p+5fB?6;He?zUSt1cAZ~@)^!m7
z0-o)^J9AR;`S7{?7S#XNvlQYZ;kiDuU~d}nZSgtvT;H2DHG}xw@NEB#Ei;RM3(x%W
z#N{vX*Wg*7FL85<-}s02ta>qz_&12RNVI2%B?ZJ+XZ)c5-`T6M_+E$~?yn7YEiOJQ
z>hFU3d`?ta{6Toer{z{z@n7M&-?3(G1@Si!Ka9@>URA`Of#-PsK+Wpn7vTPK{5jUK
zmiQ2Ojwcg6sVly)&G$6?7{8%CPwi?bK07?)*)q{x{AzfP4}F?@h`$HV{Ju7CYw^kP
zJtFK+E`Dk!p5MddjQwcO(2nB&Liy|ueFM9SuK*v6_N?2zr}(<??0?pl?JJ(&GtBsO
zNj%WhJ0X7s+!`Xj2kOIolxxFqQ_uc($B0qlhoO9qKf~*cHT7KYa>zQ-)N}q~_hPbm
zU(|>5!Cd>NiSGr^_>7!3Q~dlt_~5p4#IJ?#h4^tTGT+p5d=+TFSo}hi?~ZuLcQMG+
z^Lj&qR+{=S)Ze@RT2s&d#H(tsspt47UYaeYp5sZ+2iwKleh;Yi{21TE>wA3ne|l^G
z$^D2~0sF)={y9GE*Y2SBcgT;7=TC)>im!|O#ra5jyOZKGAYZuQe)TzXT6`(^wD5Bm
zo)`ZZp7Hsj$7S(F(f@P&ldk+V@vY%`UT$5|TjH6IIDR;H`;Pc4D4+e|p$+%Md&7sI
zeRhm^B>pWt=PzD$pNdb3=a>0tRn`~cnU8p$r_+nqrk?HTxBtEP)Tj^RVaK%3;_Jh+
zeYUi-i?W@Mu)k%#4l5i>{0NlK^~Oc9;)%}%ABy|scOjv8eh(b`pB+n+h|h!ax&M-)
zUkdSy;F;gUDyI>@7d{g8znD6M_*3v4f9AWN$<&8pf5);toA{<EpZllY<8p}K1kd<M
z>YhjZpg;JMxeAEi4A1s){!qx&b3WyJyqNd{DBlb1?>M)V_^t51@F}~NHTBHDL1ikK
zdbVdk!YbldqCULd_cyAUd#v|nS?4DH2+C*tq#a&Y{5*J$Pm(onD1IkA^Mzd=ckxr;
z`FuHjXfD1I=4%|^K0Mw^{A74L+}{hc+lhY-&-KOw9Xg7C0MGG2?c!a<uR#9wKz$O$
z=_x)5@)7&1Vwd}fZwk-x^R(py#Lt9h{MQ>WMEquW#`C(rhl@V|&*!mhno;7vz_UF)
zANYuOK>UQFJuTZOh|d7e`@3b_WbviwQT`zJY2vHFGatpvJyU!K_$ZX`{2{>9bN==E
zc%Z50{dJtXNIbuHobeOhB}jZH)SvMgugpsEW8oP;0SVWddd82(jSb>wqI~ANEbBIl
z=l7~|{GW2zcJbp;KKm2b+Plp?*53j%?GwKo<vSoA-ak7aej+@_!{hfI5kCi>^RF#_
zC&V)!vHknCK5go`o)D|hdGVZoF+PvQxGa7L>d*BVr}I}$J@40+B{#*dLHYER``!`1
z3!eQ?yvp~)uY<SX{(7c-Bt8V5<Nxu`BgJok=YH0}y;0&B|E&L+$*;v<N513wYK|7~
z#ivHT<NY0;@3Z*f@a#YPeEuf>7(B;Ir$g;u*v?<FBEPtx{hJ2H6<-TJ0Dfe*gyOrx
zhr_RONg{qLd<cB(L@C5yfam$@{5MmJe*w?-nXoRscss<8AL^5CcqZ{l;5i<4sGUuG
z{y+G@OgT(F^O4`P+~S*|e6G)D*_YqcbG~0~Y9aBQ@6fxpE+&2)>cjR4bS@=+7Cigg
zd@;(3p8(JPFyx%8sps>ac1dMZ&*wK~ziOtQ&u_^}ZsG$_f98v0De8(Z4DXHjbc$#o
zel9%wEAK5$Og-zL)Tg<4<|96jiyE~Oe-!m$JOt!uC!YBw7}xvyZ3pqkQ9j4dV~%za
z|64x7=N+XC=pml@i1iQZ)JHt?5$AVBOAQdu^^@25{H}ZnhKS$D>&5<&<@zx37I-JL
zXWBI*#dAFA0KaOSk9e*>@cC-pXo7gI|I=@Gnk+sB@*U&t`YS*2nc>-g7Cz`NzB4?Z
z_Z%|<#NURGMElfk7bw0Y@)7&ztA!Vd_k`zozL<TG_`dL*ALYKVLi`?h_9s3|*NDFk
z&+8rBcZ2v3@NQ_Ii<LHukB9i=^?Ih<F1`{x`#1N9UE;ak>x}2caqC|3RZu?fSGdms
z@qOSKKZ_b25#Ju3`_Y~`PMCU*uU@}BC4M@}--7lZbM&04XZ%zPxMb=%fA7`ls;TGr
z+^*D3@jj?O&vzY)e@FaMc*bYLYZ0cN{j=BVhvGRt;rp;*Ln2K*<Kb-0DDhiRf9@Cf
zJH9scjL)dZcj8x|eD<Gidp?Qh_<{K}>6CBcSD}37$8Ig{U)s(`IDQC4d^#75E1vVy
zFs%RkeoG*p;|K0H?KqoQ{BPp{)F*sVa`7Aw*ue+&PAz^K+K2tEUB&d`e;YsGeB<%V
znZz$a`JCTHL}nE~8=m70myqn@2V(xq@%fBNxy9dxXMMIc%P+np@+sqIb)G`vr@?bQ
zr^lzF;<^9J`sX=OQhXZZuMphdM{``nCxB->C+p%WegQn&r&Q_6;!nc!d|I0X)x<x7
z=lo*AwVLANA|BWuMy#$Qz9>BVw|+w#h-dy~ePX#a5#I*obNt`hvAL;dei<Lx($sT(
z!);GnQ}2LySUI_ac<%pleYIQ5F5)?UV7}|@+(Z0Gv=8^2e82TJ^=yB)GyTPLzkv5Q
z>7v2n`=LH;&x^f=iRXNW;|I?QBgM0SV}E5y=40wPpRId$ys77SEPRu%c+S80y!0CF
zC!Xt#9*Cc!4gJM)znJm=-YLM;yQ2IoZ{~^TdOP<c(jHkTp6lm)zFcQ56~7(v!1~AP
zxI#SlTiJj5mslg7`>ov13W>WxJkPVS{D)zi{?q^4`K#L7w~614>t+60Hg=bIp5I{q
z(4hWa@y~IditAkivmOxN1o@ZoT;}Cr@x72w**<SA$HiZP?}d1)?RQH233$#g{%&(l
zd>!O3_CM#GFNt3X&-LEJc2~s@gXi^TKYv5~Wq6LyYb^;EZ;yE3dA#1eBgF4U`EF=W
z=L!$SUxjD;yiOJ=z7Fcc{-^HU=i(>9b9|d}^DFV(&tiV*HTs=+o_BS|^#(NfB%bH5
z*q$Cv-^Bmve8rg8F<;rvM|eJ#<MV2V<CuE3PteQ+;@SUjzE-qDV)1`kAA4Usx%l;e
zxL+Z0Q=598zj6ypXX=?xSFX$`p6d^6pQ}T%ieHTSGaimr&n`X~-V5;)l`gk<7kK9D
zhmZ4#-vrP3#h~5J;?Kf!d~$J8QSqGbbG+o~QBpkT?`)r3`CY_sLw(r4?f6pO)N_5T
z+UZKBp8c)E!m8rAKEVClqCIPxdfwm3HR^~D#Pza0)244Ap3e){hg}{u7JrZV6!8|i
zvzd5%<U97yna8&j-vyq}%YY_rO}z#6iJ7y5_(aGT9G~oe+gW@Qc;2s!N4tw(4A1zi
zGP}3<8}J-|cJJ6<{6~0>AC8w8EIvNsf$f<+-Z1ew;hDd-hIxxG4$tddwQ`Jjt|xQ;
z9&7M;@eNTv$J?!|`-<oMk@?Xny`OlFKfUq(h1=s9rk?%7y^z`BN2C6X|M<T1#IyhR
zMm&FRzEC{ZhuNM^`IegcaFjph%X0C5T2Br?wOagsTrcAx-h%bwxt`4Ux9hn{{4$i!
z@q<VCZQ_|<*#D17vP(Sk3-?p1h3^snr~KlualiPBs6U^_SfdV$=lU@H`+CPsy#@ET
zVYXA^C!;<*&ye=jS@D0`U+#DCqN!(pa&|_Tc&;Zi-+lJHA^s%l&;H!KSh)B{@NAzg
zu_MHDeTMN<<?aJh&*#0<#wX%=e_e3Da*cd0J^=aG13pdNSK=?g^LZ?j`JMR0$iJ-5
zk!K&pkAaWG`{TRzeieTcp7(eCl$ft==Oe|D@7VrJTE-FI5T5n_S|EY=sqo%t&lg`4
zi4TEie^u*DGVxrm=6oU1!c^klqkN9fWA{oYp6k^dZ_jkiD84A-pW~ScNwbRQcpwVx
zGc4T6)bn{vv@w_XKjrsxBlC%8e&={Qe|=~1Tptcc{j+2%D!w1uCk#H_s}kaw-`St6
zI#@<L^E>;8QvT(|Gru$bTYFX#?~nR({1a8Qs;OuH?;X3Qc+Lmi&^}2o*EaP5@E4cY
z7ti%!=HK~)8k>5?o26<qQ_py)o3^F+a%fKn)W7<pHsU!xVgJx;XM6EmP(I_qZenNg
z0q|UZ^JvyxJjW-jfA)O6O+Cj~UZ47jKaBdYeAm!H;#<M<`3em563_g|=j-$kZ&T0m
zy{nE9&+}SbPwtg^y!f)nr|fS-?@toX_jw}`KMl4{6+a63k@2~D%nVb{cst*4ws?MC
z1l#k7(>(FRk&hS;+1@M=9|+I-3_rX?{4V%Vw9kN9%f*Mm2gA>4zgqkQcwhMa#ny{w
ze&_wl7-y6C!iZ<Ck8QlNReS|_Uhk#lJH^+9=lW#(fqTUB{FoiCw`tY=;(MWdUawEu
z!=|47ZMw(D#B)8F<Il1?L&Y;+v;U7V@vL~hpT+TsrRhcSe4m&7=gvG~<{sy5hJCs&
zp7RBcZ?B%bEuQ<Qe7=eX{v)3Gk?nb?+XM03KV>{jDEq|Jhai3;5<M5s{*&#0^VUo8
zeBYMqjiolcHT8^#<0C$b=l(3)ziHjC;<-P|`ajAN^NsC%WHp`_&SxvXh%KJ`v+NJ!
zABZoW`y+fF=S)u|{sij7cxcfsnfN{Mtbg`msZ4zU;vrSibmD_iKIc2JZ##<T_=@+-
zV|^C!(~*BU{!cT^N&G2zj)#}J<q}^E`Iq%C=$KD@AUxOK8b=ls{|27V``z6|#Ft0@
za!30o@GT*}8@w-kVUIH6SHQDBpOUY<_`~qbUn4(P6#oxA>yzx%-{NB+ez@LSYJLsz
znc+Qfy)(PlHuaqEG%Z(Od|8yw{;F2u#^T-J`MmeP)zs8;J-O6|7UH|0eAfTVh&JN+
zzADd?@2}fl{7{t7@yymNoyGTncS8GDdC^UL8~9G}m-hD(&;4t*Py6ZpOg+z&Ol~{K
z)N_1QuZWkaXFR8h<t?85Ieq_2qs4Q-o1a(QdD%Eq&-^%Zz$Eca(EhB?m?~4nPlspx
z4@*5m{3&=>+}}hGW|?}{fByEl;%&!E*7Hb*;sjZ&A8;F)+|KUp_us=a7W}8TejXJ2
zhsjNs{HM2;{~6!Moi*=r@wL#Ovpq+BUL~ISm;GC(<LkuRt}j{Z6FxP^kLyjBz|Jo3
z_uulXH;S*0_UCxdVc1sjui^Q8^{c#7d^pZu@%ai(u}Az6_(;UV^Sc)DebAm9pCsRO
zNIXAZk?nte<T3G1f5=B4>xGK<h3EasmhG(gqwpLrJ$`jTJU?HN<Iigcu84n)^4UM1
zntomUe0T@6|C_eA#iu|#c*FY?`A0m@Q}O<;vwtAICCaBSd-1XO?(iJH%?WxYp69ig
zA7>7DDSkN0XT0sK@>V?0SA?Q{s;B-aJ{QX8_;%U-FX9)#v;T~-J;qzx`3OCq_rv32
zi|6|tjE6?<@y$Ixzv5o5M5dnO+f^TuntJYclsb`8Jm>H1f4<C3YwCG_n|5_H^*n$6
zs7w~|GjP9{U#d7biRbxk-mhD?a+-R^&zyC6#oOk`fBSs?55o(J=lGe=i%;z$;<^6d
zi}=5jsf2irR~c`;pO+T@r}gkt`^t$wi1ugx`rud5)N?#Dq0Qgo&!c?Szkc}|;(306
z?Q_YYws^i@#{D?I>-EGJ#(Xvi=T#oAZX|v?JoDF;!A-^2ME+&GeXHI=d=NaxZ~M}<
z5uYCUi1X_jk37ZmePM6J+qIpY#Pj`Mu7|{#)J;6!|K<4qK+|5Pp7-~0?tbD&^Lp{V
zZH-R@#iv2Mx#D_Dofs;<GQ0&o|J)JcpQ1jY@DsX>7T*Wu2gBDYGfq6uQ}KO-n+Ye0
z=X{6f*)H9fBA)XR&aVrtn{MjaKG}!OGW9HfYpuDao}Z6bCDQ`&`_P^)XwOT}7K`5m
z&v+}eZ<(p*dd{1vt4uxHXJ_km;`gIIEPtKzMpMst?j2*Rc=rE+XrCD8cZg^I%<)Ex
zB_ZOuU&;5yp7yc)PySw|L*g%@eH_p~_fL7u)N?#@F5;y4qbNTN?Q?wV8B@>u)pYCy
z@t09P`}3^sSH$!EVvet><h*X`IiA1t?w0s=s1M`6&4s(-d47!j`JScs#dEyG{-<B>
z$Kp>SpE6&!bA2X$1H2vX*P&!D#q;y8n1BDd{YLyf<X`sZ34=d~-vu9u`kWZ?MSKh7
z3-(v7>cx0xJ0F<<&v;9pCAN63C-eEe_B@_=zOTgmQq1BYJ|^PlEY7DL_Dd?hAUxYM
zYnznfYr*sL4@VVFE8Z2J<CA4E9L00K%<*}Q^O?n`M)|zIhnM^%-WQ(xp;`OpH1&L+
zZdj$frrrVZmMCRG@qGW0&sXewg~k82ABXbiZYwUH`_aDeFMLXi=Xi$gGqQ0x@!XH*
zc<E-2isCt*;dr>zyDH)r<9>0!snD_N;<+Ek@&B8ETBe@u^Qcoj@&2d}<8xi9M&if8
zGycmaXeyrL0mjdqYaZqvpBK?$O>0xn{_5#aPgC!W_^IyJNj&F+EPqI*Zl<2?ANyHP
z@jTxZh5F>*+t<`{z2(J}f#SKI#`TcLU5AS2c`fFzWu-@m=YBo!@0a+a#d{#1vVC@h
zjTJu|p3mcr6%)mOgAYY}&Ko#Ie1GIqj+dHOoi6?cJon==q?si?2l6S~Gx38t;@iM8
zKNjCUUp&uivHkOmTP&XEwb=fdnk*B~^H*UwKQkofD)A}NKQKPay<aQ7Fg)9T?y+F;
z72sL_HvwBrJ^R~wop+de55&*9QX%47p*|cx$4_7p&;3@$L!oO2O+EYDH>;0|=Xf9l
z_1`)4q<H3Qwr480Gvc|Q>w@yHI$kjKd|o;~y)2&jo$Yye&o%MP@2vmR$+t{B=W82V
z-WAXF4F_Crg@X6RuSYyY!k_#0NIb^_oL}TW`&2x~1B{;ui(Z&|=J#5?--ze>2HQVb
z#Sf;Q*V{e$7x7#V;r#l1gx!1F`3ODp_5RJV#B+Uv>p71`#}i);_lxVvgBv=C=Xi$K
z8$Wwe@m$}wARaz^OJV9g;Ip1hBcAhjjt?s@%pjimk?k4SBeSVz{r8pqOT0VsBcHDk
ziE@fx0`H6K?Rzti__WB6%tsy86%gM5p806Xu)^X;!1MVURjau8weakp2V^WQ{seqd
ztS85LR#yBwc+RKV?yVp`72=uepN*ze5$^=g_OITuy7(gSyxv3wYl&|S&-j`Dt*-dt
z@SIN_KGRTqZ+MQ+8!d7-^$v))jlDd?Peu8j@ck>aHubDe?Bt%}xu47N&&<0W#dH6Z
z{llJ3T}?gXt=8zCrk?fh-=MGf4QL;JAI-Jw1I6!!=kxgG^$_u=;Ca3K4-Xe_f#-N5
z<E&App8e;#4r9ghJT~M1Qt^r6dA^$Y;#Axzrk<Z~x&O*E@!_~$7sTh&l{3X3f@l5j
z44NbUE<D#`6V;e6{s=su-*f2~i;sY3`T3s&i9ZG(g6rM0d!=~W&$F_gzY2BH^H=_X
zYsK?CHs24*+$~r<*Q+^Sn^}B|_?|dV#r0~(*gM1*#C(?Jm%q4Md^O}##zT>yed15S
zbN@YOzk}k7As>06{Wn!QDxULMK93txofJPA<<l>{cUt^0cs^fmH=h^Z8=n2)<I$JJ
z^Yblvy>}a46VLf<DB34M_FLjPf8>5j`!{#Q*GK$wJiq_&J@LKZneTjNJu>yKsQ<bS
zPsNWw`OFu$O1==^2cG?HkN9uI|7m`gJM6vqJShLS>s|TT)bswP8f^E$c0R)V%Xmv(
zGnRPfNBYj`<C%Jn&p$j)DBc~{Ylr)_XLl0u+%I#7ujQM<)Vsm2@<<~-2=(FhcF&)|
z)cd0RFJCf=XZ~e=d2uS6cz!;l1IpjJAcv{vc&19vJmQ&8*`D!T3z&M&ujeE!Z0fmx
zk^4?D@q8bO?dh|zlz8sH&<`6`Ry^N_azlGwtzW^^2f%kJSVcU~+q3<rf2$^*&sQkQ
zzjw+_{7B?e=9i0sb;WbPnDdv`-5QEdg?!5E-Co9B{3Lje$JQkD5Pu1t{X>cCt;82V
zzT@-KYE3)w&EXjjyN7lZzYLz^)%7*Iia!X?@lQF&p5o8{!FP!4BmNt_AL3z3$N*E%
z{p(DVhltOJ{w)mUuWvD2d_H(S?@RKJ5?=;B66JsW;$!NWPn(^dAin7z%CEn0viO02
z@I!h|GxgkGF6TN^d>53@_L-Y>j(ENg<$(6db0<*zP?XR7=(BN=_=)g*e(#J75<lz@
zep&sM;<?_=`V{+Xt$6m&d|nQ}+93W<=i9R$+HC5%zLb9Ec2m#z?B9O3spt4GcJY1U
zz0sb0KVoK_gW?y!vwv=O<%p?gK7G96gsJEFe8`~F;zyxAT>o5L?Y#JD@M#gx?bBTr
zKL(!X-}XPcDt-w(>%Z&BO;gW!=<R<;JkJC0d70Vnp7@T)zns5B7Jei?5}x^JP|T;|
z8z4W@cRL>?el2_y+W+0+*W%y8^Ll;zz89Yj`H1t26cs;<=lj2*s85;Xb{}o$BNI_R
z>(lnGz4-0$!8qTzcT-&Pm*BZRuxV66@vq<=Q2)dYl8BFq_;f;j7W|b$d_j2LuOqKg
zi|76h<2l=*^roKAZw>!U;yqBGU|w(gY~s7ZGd{Z%%OQROyfex_96OJAFL;jk8ePsW
zp65f@AEsYXNIc(nV1HF%U@=qA>pfSsl&NR=Gt-t8zY5pO`<wldtEuPr={(+9Sv>PK
zpWpQptC@P%=Tb8_@!U`6__=-Fx~87}!}QM$#B)EL_4f&FV(KFiZ>i=t7e5m1&-<Ia
zXDjjCPv>~MSh;qlp7GowaYykyzsLGNz12lL*K@ePvvETY@!Y@Q_+<UaKBnFS?OC|_
z0P$R(;rwn-o+09^qWxV^eyWed#J@y7<$8O!<0Hi<MZRPF918Fe&+i}P^BdV|g7^a{
zpY3zI<Ye&~kY5;YUE@s?UkW}H?K30HUwjAnaQLw+1H|+5qQl_t4hj^18s&$;m#e-=
zd?Y;cOW|}u;u9bqIG;N3XodK6@XUAHcCHa$0-p1izb9@m^?ZIWH`^@U6XkO}e<IIz
z@qOVLp9eneGW8rkj1Ao@p8W&ItLp;~i0}W0`XuOn#MHCDYG3w*_!%gl^Qp;+PK)RG
zpYw%Xx6X-Y|HJ*+R2wddx1c`!yo=r=u8QaSFrUX5b#IF2dN1QSca}Ti51>B0-mEVo
zOg;D4?(Kgl{v66@`}dz7DW2=Y9KRK78zr9Sff@g8io6!j@ekKaC)mFie-HI%|DW#S
zC-KMO8UHtfzKIWm=XhpufBR3i^OpzkY@b4Z#}$7Kp84ftnuOwcet`Yk<Clp|J;x^l
z4kQ=P^PDc|&*w}_Eq*idFQ2a$t<#G?2haGg=A21<9^_L#U;Sca6F(Z>7xh1SCcAi^
zf9Cxfw=lQ(jVQkt%HPm4zj%KBGuJDYmM<ip`?H+Cv`tb>{GUD_vUzw(@z;=l`MjqO
zb`j6>R}Q$|0p70S;~}0o9ynjOviQpId>-3ottP$!JmYiXi<+jM^}oNrj;W8r^;VqT
zKs?v?_`X$~c1=t@$J-~0G#5V=*US6WGIlFdAAtJTzSveg#~VC9kbGGO@p)07NR+>%
ze;4sQ56t$TS*3@m4@UV@Qui_SyxvR?`itjzU~iPae*0kYOL4t?-(>mtVWytt&vhRu
zp67wN9@R3pk9e+6a=-7{hw<WhzL(?GO(%R!J>%`#Tt8FK{(M1KfAIlmPuBlqnE>$|
zKltK)?R5wg&+!At1GR516wmjAI9|H7Zs~t|>-nq7eRIj@Uj<KIA$|?6m+g6``5N&&
zKgoQ0FXsmF>5)%4K3w#6lXy>f<`@4X+r+m*z6(YBXPLE2d;~n7$J_1qicgAs#QS@p
z*a7j);JF`nH1-kk<KUTJnp{3EehWP7pL+Qz@ps@^|2_lGiI0Nk^Vs3<OX9gdn-=Y#
zC(Tvy+@EFtIrhN~@!UV<eDm)1aPe-4XV$;Z_z3aM;TfMXn?4l(+x{u8cY5wf@q<x*
z7~bc~_VKx?_dxkIPP{VpPVmd;zBBc{SpP5H^^^G7sDC)hKT_tKc%J`>gm0DD{<H0T
zWDd&b^PB!=9PumR*<U4Imq0w<@1{RLEU|cBl+XB_RXe%(o$!3VUS>)yel0wo_fgN&
znR=H0w<V+a-6)^q`6Yf?#q<3sjt}Ry$!_XdexAa)O+D}L*qHgnb3EpZ_(^@i+0?Ut
zSiZEVc)rgShVqN|D{1PvK5(Lni>Z%9`Sr87ntI;fiq9*F=lp`>vGe<?ia&&W%JK8~
z$u-6E`;2(M!aeGkdiJ-A@-+~D8u^#!XFh*!EIudlQ54#<L1;7aZQ<FTLjzli_lD<q
zW@)#!;`u%iulJ-&2l0HLi1VrDiMoi7gXfp)A+>LI7heRP<J;BidW+8i&-jTmyuWzH
z8~e`!wFirDi}E@D&5?PS_}=hr&r#34#dE&N=PS8ojQCL~pYc%IZ@l<v@VsANTl<>&
zAjIdCLVn_Tev;4Q;~4(pxt`4S`TP8AQ_uD<w{)I(u0J#0PWN4C>bc&Sr}9$qTz_VK
z)=#-YJjWaKHSVnz&+!Jw!^^j>7ti%!j`xa>-6Wpl4bBH!Hr^)w2;ztNB3sT~rk>-y
z;qUf{zl8ER-X3slzo`$y__IsEVN=ibgjt=Bi|6=<@tLFaDe?DFfA;^|5}Xr%0^R}R
z)%DjentDF(UABdZ--GfwAD=buhIpQT<9MT1qj2&6Apf%ejOP>~ejdCX`jgME9*F1n
z|1y3;4n7edj{F;n@`GnQ7tj4)_P0ITy%Jyb5BYR<k$2)p!E-#k&;FD64e;zgGhF;C
z{suhTb6`-+FShfMkMNA2;{D=?kB|7_`IG6D6Npa>&-QGbDzW$~@Qk0~_mYWk2+#GC
zYg<#9dgi;H<I;)e`$T-+r#H?hp669q|6Mt<iZ6xwv;Bv^a}v+_0{h!*M{|ki`l<us
ze?dS#@m&98z9`VyS^WM#)c<9vqT;#!$?Hv@prom1Jg>f1M*IrYhxxI`n)2fLd5`RG
z+YYTHp6inwKR0u$YU+8vMmg3Le;M^>d=7b9TRitqdA*nS)E6Iy@_F97!<5G2`Ti;A
zr*B&}6Mqur^L{-m*wWN99=643Yw9Br&)3ej7tixlz2J*4?kt}BxxC(wy}O(GV3eP!
zR&P_!{5!z0zj&@cGhf7r93-CSuh{+{LcGLhLVo1@C}N_w_)hTdxL%iLW5m0`GoJ18
zju-EMe8lnI?hlj1w}<Eb`sesm@$T@<UrXoA5PuV%pPx{q%WUzV;2F<3O3xFY3(pJd
zvn|0w@jM^J@^4*RBHk0_bAGX8&2m#e2KV>G(ADC(Ul|Jjsn&Y&?NJ|=|JZSp_|fpc
z?FU6}6`us&0rk1Qcc*wCc;@%QQ}&2weq{R}Xt`fJ^CRa|y9yo_&-}=EzWeRi|KyjS
z4HX|?bG_F6GJZc!-1TS0GoNz2J*&^f|Mb@KJ#4;z$NC*Sp;f}f7e)WT`FN95H^lS&
z73U)f?%oz3%jSBm-*>?ND(2>Y#Mg%B{mnD_f%wEr;@Me$;(!0Ome2mSal<F#W59EK
zc;D%{_{{LU-T`l3ihqszv;5LW-kN$ozq4k2H1&*!W*xtZ=lLsdJdc@5#{6nKA9;)V
z^Lbn!FOGPg*JAyvJ&14WIexR>mPkC$A2MI(@JS{<Ddw|`=hO{TiEjpPLHjKJE1meW
z@Zs=>Upk8a8_yTV4=)a85$^}jcpfy}N&F*t=9gG)bBX8Yf$%(M>%#fO^YcBtu^y5+
zrnC4p$iIBwXXyDN;`w=%4rtG%OG=1;i}E=>Dblx$_}GYNwoj+O%ZvXDp6jdIQ&ckb
z?BCY>^SAhZs6U^t1)FP#uaEjL{!fmnEuNp(!SeSutS_GLk1*awWp6B=^J}h$40zL2
zJoo!taesRpX(68TYv${(v)YJ1jrL)Enssb1p5q6$&*KuE#V<qok*NROc-_VG^8nfZ
zC%D>6JkRqmzsz0LPdv}__@X}3hYS*b6!m9)veonw|J&ycqWs|*yv1{V#OF70<Y-gR
z^`eA($BF0sm;Gmf$&*Yy&jasmF;#qHv=7hEY%4HBJm<5XXrJWYW{Ky1M;O+_OP`r5
zp6Bbh{$sy*fq2_^wvP9FYv!<g9}3wS-#^&hdx`kp#>4o0Lcco8#q;xp_`EF7uv&Z&
zKL3jOck;t^;=jN%o`bh<6#pLim;F`PxUJ%2qQ7N)1~l0zz6(6(<F9k>5kDTD`KaLs
zi}<bZJkOBi*dg(U=n-#S1CEKG1J8Vvw^OKi&euXw{_~P&#pmbq0{>6Ei{hKXvpuU`
zzhde+KP|EPy7)mTpZPlPklW%pA7OvHyT(7_hoF46&xi~U#M{pAtn-mTv`>=A$KpA^
z<MS0W<eB)ns1Ki)PrffrJ;&RVTD%p%1LbqQWp}}k;(4Bv^N|5xznFTCXX2cR@y&KV
z!u1yBuUQLYi)X$Fz<Bj&@A%@mKhF5s=9)-6`+p1W@88Lii7$ipWcx3<lTtkM1<Rke
zDXn<UkGNj(c9f&|GpG;8|GOJx5x*Ip^-t~OWa=58*I(!SpM3GddBt=6f%(1Qtb*dV
zqW&B|H11GDJooFpaeqgbC?THv^^E6gDa(l8j{0!Ddfwe~;>W>9qCU+wRTR(fGh%;r
z*ZXhrdy!8aP=4&XHN<~_=YIOM%(cZ&#{87^AM?DP`1|l|&wG|e;+>K2*q$Y)HWlvy
z?~3bf-KvH7Lhvr|;|jJBe-WPX`Oh~`@h{<{P=5Kdox~?aJg|T0xTu@>%<#P4gS~p0
zdgk9JuKmQ9Mfq%>6v+mO=lN&$w^!~A7604$XN;dOY#t$==XqHE!BL~dPelD0pP3ts
z6Ym7i=c`WkN#dEW-Ee=CyqO}N^E)s2xJRaoFNXT?eifWGOMF{+j#npjm@B>!Jg;|i
z@de^N|KJD4T_T?Q7mWW4SC)zAc{$eq(~4E5p7W`FgVvdP=8HPjH;U)@f#apy>9&gJ
z`8xVIk9U}Q=HHXMLd0|Y!0T=0YZ3q3_yP05ZOspf=XikQvA^>j6F(U7z~?LBmy_bp
z!*jk+_|zFw&-v!mRTsn`M)|By>Ooh;bG#Rh=dpCv>*CiTKQcaZr@k$opC`%wJmdYl
z;=Pa`+5RiH-WSjJkJz7_^?59w?;kngdfzvCCcZQB7wbPJ`%CeB|A_G%{^pH%e*UC4
z>f>_cgZOaNhy7vbtS{o9!`q?!R~=&54RW)ts6_vKh5xO8C=pwHBE%cNuVi4{_~ISm
zIsPdV<{-W_JlC(<txPK39o_-gyKhiR@ipNY&rhnS72g@2=Q#(ab2Rnr4=+5*EWRAd
zXFh7T>o4)+;hA4@PRc2s;|KN+Pnzcy|EKf7De@H*KL_>UetN<$g~jvzAYa_Cj;D%?
zUybrv|9A6Ci=P6|{$X5?a;Bc&*O{h#Me*EU;CL)ylD|!TIIh<|yt=99dfL(8TH^V>
z67x%wk@dtcMEkJ(&Gj0Y`dC<hsFba#_~|I0{rQEL9^&~v5&Oe}2V0x^UTDvp{+_1Z
z1Ae<_C-FSrXo25Sv730VZ}a*6mbjOAf3y$ddDqRp;<^9J^G<iy4HTac`7{jmpYJtP
z{787-ufuL5#IJ*QK>1@FM~nXp`GwER+Q_luE5Nh;7llj|KM9`gf6RA^_*L-iAEG>_
zi$4nQi|b93f0p>y@NA!iU*?EUj(FgCE&J2+#XG}u|2OY~#o~GXgyWOlJ(h{Dfb!X%
zj;^c3*M;Zv)i=pH@vY$5{_}1Ji_Z?v`n=n)Mf`C1NZhY+-aEukhG+kore28nKzR1&
zE3#TlJ<kK%zdUH_IUXx`@TjTh`c;z|C&hDpo9+3a-5K#yalIjE&q_rvi0A$(ecaer
z#4kemtk20y*Ti#v%J0X_x%`%R&QG0D|0e_PntHBxRjqnoJm;qlDE~^D$Kr!<y{yl?
zhfhsC-xr&)^M$E*L4C$ecq5+ULl5{2%|D3$)A~~1JYU3fJ(=?t`%iW;Z094b(LPBr
ze|HXxC7$n3vHWo>;)&<^2kzIe8Q>tE=c(A9bE_m3KMwO{=C2&7Qi}fq&v<xzFOB&2
z%)jy9ZL`kg3a5$wjlU&>_zmzJpC22YSv<er&>Qg()!;Aj{Jui&_XYozQ~VU<M|YGT
z_9~BfeqSNWFM6ne_y;K83*~$G7Zx8I@y7mVv}bYgDdBm)ZWk>rzA$_g>a#R<Iq}S=
zZ2#GpDu`!3<@*;omsb&AAN7eueYOv%E`9_&=L<ut)-v^M|DI{;nR<R6;K>IK#rHvd
z*q+UIxQky1&-i&V-a|akcd<Vl+O)N)=Xyf<Jf5bW`C{J3j;1~s_v_t>uBM*XyL(<w
zQ*VdzM|A5ep6`3I{?}awis$@}<zGlNRQzxADeRBTxH(+>Cfr}<>q+ZJiJt|}`;}qD
zSn=oJIX=8yXQFuS&ochYWSL^>xnA@wYMOZFQ~HDZXNu?kEaUmfv^nB!*ITUTuPis0
zTCDlSIDa*{&;0-N*7G53|E(1li|2Vr&NrtzEE6Ay^HjWFHLkA|{|27tdl#=>D?Tss
zBkxz6A;IGJ!84wpR^K8%KJpR!+iK}|h-W_Kc?OrqyT$+M`+q%m?GryA^<n?uJMo}+
zeqIOHdmWn}75@<BhoC<hl=q}~e!d6$|8Ad7n|j9ojFacZr^55g`1~vIviOSd9DmmA
zc1=9TtD(5w>n^uUJ;$r|iSCN;iTbd=opJM?spsbrO<Mm*Jm<gkbw)fj^<0mtROf|w
zZ`7aTrLLLZi0A%kINGyd)O+!qKl;M&vwRlM`6J_D`!u_lw(}9rAGv;YyG<-p?~C=)
zq($S2pNaP2e7}gjgLuv#Isct{A&Gdd7x8&-5R^hZ*Z+CHhW1M%p81YGVU-NxxnIEg
zoJo~gJU<VF&)1Cm*-U*T;^FzW9O5~Dbc3%sE{}MA{utw}l6wJD&-l5JtFU;k=d=D(
z?Td@&cr^<3&v2oXc#f}F|2|8~ihqassRPO{+^2&0ILMF8?~N){5#Ixz`8`##>f%?y
zvp(_fxQXX^X(!a*Ke(>=vdCY29z(nviXQ~e{ra@^+{JH(XMS<b>LLCdd@$<Y=|wB?
z-2b(}`|WQhp8L6cez#BSC_XRxEBX{|yNc(2ZUE|YrEpL2zwPIu|LkbrSNs6fCo=md
zSr0jQVSxBf@LWG17c@jX&v!8%HuM`VelW`C^IN{kDDhq4e;W^^9xHwbJjbi8?oSXu
z0X`J%KW^J(@m}!Ek7LG96F&)_<FV^aW{T(eG4>Dkx#oy3it_pX-KY0~;<-N0@+Tc%
zB%bTxe7-Ww4HCZq^<jTismn@J&-TAkX055`eo(uF!Q#2z&gXH`_08hjqyFq4Mz7s2
zp67*p5kEtR?G}Fu<@0_eti4aX1)k?CI%Ya3p5q^m58pjIV(K{`8Mp6*c%BDi{71|?
zZR*)S#O-=sJm05ayuB-RSv=R1*?*>we@*-W<ZF)SmxtXHUlRG$8~3-+$~)qx!Sj0e
z47?})F+AUY99H#__@c;nuBcB~ny2E2!?XV{`Y=lTPI$(1t{tyUJ)d{S@$bbSL-~=Y
z{~-6z;$tEHJ>k3Mva`3Hj}(IE^XvS<Uc4(j`$OO3amBZUXMg@+PD1hZ;Mu<=>5@b|
z=d-NO!qO?kb3d2y+%91n@tn^FqCF>FPjBj(f9tHxWa_yeciStQc;+Ma&pm795I+^|
z$@8w?GUgG_e8ll*^Jn=@J^Sa(`wE$Qj+Zt}Ehe7%h~ty;txJjL{M`fhYo2piQ_tr&
zZ;T56lYf4$vZ-hMZ(dSOJl7MVQ2!)--NbV}fzQjrN_E9^eSpu)(G(5EGe5GwniSE*
z)U!XSv$eT+=110NjZZ66&-`_xNjve}kLG@pf1!@zxn9A1wB4?&`22Xj7@tYb_7ES&
ze2V*fVNoCP*^uve-t}dV0ph#Cb3LSbxgp~J^nDHS6Au^9^Uv%b3f&qhp68$0zqzmX
z5g&wn7l!tEIDCTm1MrNW8?`5k=lN$o@7*#_6VLfC%WwVMUwk6O1N+;MeF5Sf;n_ZJ
zeu3gS|8+t8^lQCHe07x1{`stPkf~?9wT`h;d`Fbe^@nli)`;i)n)UHsvcc5b;d)o}
z*({#tA=w{xtF&GGAk?4v^k|CR;<?|){N5yDuc;45{WotpVCo-Y{b8-o5mO(D^5Zr>
zA)e<|c)jg%oEFddKKuWi@6L(me1z>Y`sgL`e7~FhtyjQR@m%la`Lv~-Zi?srCdV5c
zOWhIA^W<#LgYoZ)x82|T@%dUfKhxmaLsQT56&qGZntIl!{Lm;<&;G&Q?X`HWS34no
zS~<Qq^}+CeJ^dt}>)UMql*hh_=X$jR%I`YcK9=qLWgebijyGC$j4M7I`Ir59?cxc=
zJ0PF>qCSb^BoWW~FZ-+0my(NLkMen*s_C-S;`w=2tbeWk>BT!CKXN>9vq~oMt>C$S
zQZ!XI@jNfh_V>G&UHn{>&-fX$HMjT(c=kUj$L1IR3ZCQbUX2Th&w}{j{$pUyV&V(J
zhaw(wy(?+z`F-nSj=G5F{GIuC;A~g%E&fm+mrj+%cZ28khL)@*p8YNR6OZ_A;@N-l
zeXGc;b;R>L7_YbL>IUNZJ`UsO%8(}FN8)<fe}1dcTs+Tr@%^2Aj;%~RpRaL|ZN+nc
zjq$u8q=WeBs6Tz*$z8<rJPh-@eajx=d7g^rky;h#BcAh3&Zl;N?QiNiKYDOxuy~$-
z4#4vjzG#?uuJ?Mv$L&2*Jm<3>@a-!2h#!ykXMJ8Jn;@R^M~>&W-}M#G{ces2s&4i(
z_3Zzbj`kOCJHGn2^H+)51^lP~F`n7~Que=26%G{7{LA>M`gNiBGdNGhe9`69Qt=6p
zuh~D$Tew1eVdPWh-)G&|h+hdGgm}1GW`p?b@Qj~Qi8hNr1|N>{_g~*8elYSE$4gt*
z>=M5Pp3i$yuf5{={e#?(DCu@U{5O=(@y}<+BjPjSd13uSB9DtN1JC}`d(SEH1>kwT
zHzuDG-yELftFtXGnR<8JuVV$SitmE*9pIh5-4M_IgzrynITJ2^D9Z1J@+&WjF!kK;
zyV&cYc)owZ`M76=Nb$o^A3k4}WKrTd9^m+4%-vVwe;W^E(DxC-H@y=-ANBd|eB<a(
z;{D(`-z?hjo2ln`&%?<+w(Wd`<A*5RuZC~ph-ZFh`vf0OAfEY};{n%MiN*WidYLcI
zc1SLs>n9vPw=R)dJkS4x;Cge#PjBkEUbH1Fqj;{jgrWSTtFnqOkL%_0Za+A?c&=Bx
zE~N2xw0dsww)xbWAKCv{(&ra{81-R$K7Hpbeg{0)4;LOPDxT*hcz^TymlVGl`IO_~
zQSDsBXF&d9du}M|D!v~)^Ihp!mBsV(mbspj{d`sNe4i*7@$hVEP4SVa5A${ZK6S+N
zJTu38ohmjE-w64U^JS0ZO~gNfXFQC#+f01wKg2`$rk3I>!LvVc8QoTVeR#HKK!XnA
z+rYDZ{G7UoXMfIkh<x4M)U*6*hkJ|fgZi-l37XkoJm-U6h#$KSgT*snaQykc_%KuN
zfb(YK<Bk;1e8Kp43mYSz`GWh`D_4#;_qg6}gMGy_U!;ZiukL5+nIGNL`<r@>_Z~i;
zEuQ%$4D}hbd!Bga3*O&&z6(t~<L7hprKX<GuO;7#|H(UkSuK7G;+gp+{M33=&;7Wd
z1)EGg$LDrEw~1%I^F{mnmEUFRd448K(!Juh;d)vB;PCyXp8bRC#>1wb^YH-R<EGvX
z*BjORl=xMsKcAP|dCrOF`ZKS$_{WRlx&F-O>%j3a@yx%xU)$!~5YPO}_m?Yl4i}#W
z`709b)45cH_)73x-^d;Rq4>%0oR8PL`b0dxPl4^TZq;+~_fbCUb8+x1@m!B(f8t!@
zo%j@phbXj<Z~9N-ZO>oXejknT{&m4mU&ZtM74O%#12N;+&PVE?J{Hs`aAF+sNp03=
zZ0lqFZXE0HxfTh;r$T%3e);83EI!d6zAq-lr)1*0qyC&P^gNkL{BQexxZZE`(usFL
zec0ay^vEc_COqR|ciF6_p82k3;_TwNAIJIW^;@~bXGMM3|6JIR&(wRMeP(+*i%*I2
z*`N5;D=Pjy?ibs~@>famPvD(UpQ<m*h(80*^~Qb&%Zu*}ABge;XH*jZ44(aSYtO3U
z&%?7lor={Ie+QoJ`7m}J@fYDaK8(0h-_-MYzqq`y_@gMF;~D3H&BSy3&-S-eZ7Kc=
z%4a+`&C%A>vwiNpX)pdD%IEy|;-SvsQ)2$h{`t_1?&1r>uSEQ8ZrfY@N_fV9`NI9h
z|MvZcD1TOr!Q#haKFj{3@i{N?XW_k3{-(v=;&Y=vXFgrsXN-7Hc(&)93ggA|`-K_L
zO_TYG?||~zKkvLdRXo36nCHVsZJ8lH4dRE_duh~c@%+9;u7|X5Fi-qg)Svys<i8e*
zPmlU=|J3`{5>wCkuY72^_^K$M{X@K&tHt+&XMXwYxn6un_;AFVd$CR8Yr+S^Ka9Oi
z{2+Mt&*7JMiXR8>iSpyE*kkHBp79*GUp(KR;`8NE?XY;Br(%D&BkghVT%TlrGV*b#
z_&==&R@r^l)bst{z=;>d7e#x9pgj*Y3p4eR@D20c5I-5^b9@`|>9+V?@XQzMPW>Z(
z-5-2l;Di6k=j;ANJfAN<FCk^0i{FF#aKFYa@hel$>rHz5?f>Lg@A+uzdB0{(`YN9L
z>0Cb#X&y7K?R=yu@?$9C;d<^k;s?U>`I`MczWAB&oZmG*mPkCme~|s>-Py^+hajIa
zA6@R4N_-sj|6H&8S|XkJy7XwD32`%u_kw5p47-v=JkMY8datf<5`P)xv%iWlD3^G9
z#52by)2ihYpB$d?Fea_DcxQN?KS}whh<NS?@%&Y?-6h2Hd=&G`xrt>=y#@CxSF`fs
z<DmZT@OAT45?=wH<L&T|e~X_B&wSDAWDW7$Z({xJ0&AOk?oau3t8eOA|Au87n|j8N
zSE6R7p3kG}trp_fpnV+B{(<Y;h-ZG``v0*J?Zq>{Fn-+Yb`~Fk`q-g96S8#|&-a`7
z`8Jhb^fLAAAG+=DCq5tQ<BR$POdlkk=e3yceA{}7=XotYzm7$`#WTMo#pgGM+m8`{
z4)y2wzt_ca;t#?9cD+H9Og*2kL;a`zr~h&Os!C4z{HwPOW{AIw`mjG7`PXdmd|!{}
zc|JXxE511LBgY$)_AL<K7M}gX>d8yQPegu<MEophvE0;0!ROAuT6`JgBj(e3U)G85
zNRRVu_fKyWzY(7Cuz3Df@n_(<pK`qWPVxMF59Z&=<@SjGg7P^Y-kNy7_zZ|2p6^X|
z`;e*U`Je6^j)^aY@_D`fBSOVjga5rhJS)BlJjWXuvtAV60iMre(ic}uJ^Rl^`>%^{
zit<0>eVk*{ZvP);cL9~<w(fr)S+<YZh}{Zecc6kDsMx63T_|>-VxwX!f~~07Vju=8
zc41**V;2@Gw!Yi-fA<*tzU%DCSbGf58E1^onR`C-zUI7U-8bT=!aE_J{klF9KMJ1X
zf6lVc#Pfb>0LmZv*DLXXD4+3s^~xLZyst$cur^NoQk2hpZ9gntJl~gzMExh%`6izC
zyJFz$+x{~8Sa{2`Bq<ZFN4B8;emJi$7naQE89!g9r4pam`F>0HwBorQ<o!TbhYaF*
zAB@lI&ezQ1599YTU-v(2C!Xi;oIjjilGEt<eBJxyHG0O+?y3cip5wz7i~Yay*Pc6y
z---75$9<l#lH&P3HQQ(Jw6fw~AfN6=eBNkP(dfBf`mJD9@%;P0oUgw5SY7;5<ZF)S
zqmS1Vp8@%Z@pgS-UGdf7dA`u4dqeU3d%<kaR^^(AUySmZAG0NEF8&HU_bbv~YbD+a
z@nD7Lb$MM|@qGV?`RK&34&w8oe9i~*)$L;RJTI$n+e3U~l+Wjt_E~T79`Njs%ftGM
z?+4HNdrTW7p5FuE_}0>WsL^vgd2ByYJlDVU8@`Sa&;3TW&!sct#gE7DW&c{ZWRlTy
z{TtqQns~n7#P;{8I@9PQ5TEHSbHp>>F+Nk?oiCpGD;DK<-|8>^ANSLcPrr^^V)R_U
zOm4D5{A9F0pKtBlYs5RjbN=b{cAa>R=bXPq9^NSa63S<P^q9L<JnwhKpgr?;*<tit
z&xVu^6(5ZHus=Fm?=yNn-%C;9Mjwv)FARz>dan1Mk3DYmjQ=~0PmAaI4&(n^&Peh6
z{v`K{3dCMCdOol12d;=8fPBjM4EDPr{v<r(^IN;y;`#jz*5^&p`{F;Md_J$8-ye!+
zKIQsi-MOdYk0YO25D!U~y)^pC@JIT+5&sb7^LgcRiWC1Hp7WVHmU!{p@8bBp`p#GJ
zRnfnAzHoZWPw`woGCpUGO_D0%dW4?yrRR;4i64Rbu>Wq&oyzFBpLX?)MLgHDe7@Ze
zrx(xlY&5>N|8Y)c@rzOaL5PRRo$bW){L~7*e(9Xzd49_J+_lbY^qf!jjw&FY?@#%l
zJ|1g|h%bxZ+Z{gd5J&M`k8?bXsaaAy*VpXt&Y8=K=lYuEUwT|Yd^GCMcqkTHMLhSz
znIFTaR5yCg&s|&B6wm#0KeT7<B6W?PzjxK=2IBcWE{@MXPBj+K_oF>fpNN2FM$h<h
z>(fd+_s?TceoW=I;<<m$`M~AO9mMl{T&$1%<Idt)KF6!wySj_#`j_p0V`6XdDUiQ7
z-Y#z5UwmhHZ?w;we1pXE{oH8yhwq1o{|otr`O)*p2=R^KnUBuQ8zY|UU+&Me?K)ok
zF_h2xWGgdCd=xy-?}k}V6VLaB>tjBDIckRZTo@m?Kl63XZ1K#$?7yvs%oor6%lj%j
zYWa(2K4tl9Gc6I{8}(;<E`PjSJo7K-=fy);i|6_x67kk@$~y6UUzq(jq}4{FXZ&v{
zyj48+lUe?<_z<J#dTrsU-Qt;l8UNvn_loEHAbegvy~D-x{R_r(`pOaFdEU+Qrd6qq
zi|2VUeW_cg#PhtE=WF(x&l$Z1@vwKyMWbi@WOltGp67!se^AaFM$h(-jJ+kE`JMYA
za}VAV&wS1Ke9PGnjh^}FamT0PnXl=GmV9aSjQ>hjZ^W<0_`rBRed)c?uf_Atx8;-3
z^LgDF{Z%~26V6Yp8vYc25c|)ZpUljbBz3~|h%NFd&pWcdNGg6TJnO$^Z%Xl};Q74#
zeJ$d-|IFtV=bm1?EAkzG?>PI+;(0#H^V6GOvWoXd`JA7WKa)fJWq6Ly4uN^Z^Lv$?
zFE#5^K>RP1&v<xHxrq3jh-dcSYpEQ?SApkzFUjo^;v2y8yxw7R8S%Z~S^p_xDu{0c
z&;FRjwTk#Y@NCa&Ijb8z*URT)UBr(>`H|@F_6O^T=l&Jr|Mjc}M$i5=wqs-Qd>@wQ
z`)NxyGkUhq^4~3up66v>F1i~%`%9tK9^$#)XMOCvI*aH2C*xtLOLy_!cwU^ZCe7Ge
zJkJ*xpQj)86VLex>pyGPK=GWP^hW&nOd2Ad>wV_atu050=X#&}Zz&6n5q|*f!{6Ke
z(>U=wFJQj2KRHo6zlX;9@AaQ*^c>GK_nPrP{onVmTIl_&Y4vCSPyhG#uh9ORv(6XK
z-^>2%`*4x?E(zYR{8K*Tv-XZa@tfhTP@juF%f<gje&_hp-fgw`$;iJP&zt65C;kGw
zE9!IW?FRAudxdNt>xeDlYa@Sg{S`kaL_GgqVGQb%yYp`G{QJL*=TW8hioc2aM5Fv`
zR^j6L_X;^bsStHod~)<JzE4zW^)c~T=uw}>UZ=#LNB!;K@4B25-yG$0{gN!>Me&2+
zIX^t}Fv{pH*iSgP^SXGRx3WH=lWrM3$CC{$?uqAkNPn&1L-BL@d(oahKRyx9@s066
z>%<H3|2RLz_k^eTzZTE+h#%^+wdZ@I4~O@v_(}Z2M1Jr26ko;jz7X?Whv*;TIX{U&
zeO_;{N|SIs!tYnpXB(YVJkMLX|2(W=O7WaOyhDAG<*<mKiT2_1?eZ#}c+MYqpQliG
zCh@$V!2PaJzpUc9U%~T>IvsL|=l%fm#p>dDjGp!H@hiX4b3Dv<v#@yXC-8f2SvD3G
z&+pZ6e7-cIg!pI3j~xH!)+=N5e7?JED~RXcU*PW@^0cz}VB}M-H-Cjz6Q2&_IqP$1
zii`M$@O-}6Th|f45T4&lsad#z_#^Nff1=`D#b1JF`*b+zCZ6}7IbVA1-_qz~(SIBC
zau;72{g>^tuA+x{-e<O;{J<2Q#q&P16TCxoH}O4DAGXiy4ZXxKfaiWfmQnr0^E{XF
zU#-Ewf91<(A0nRnQ5-)zyc{l`=S^IXyxu=rJol@azjn+VCq5MI!{?jUW1`V>e|vec
zsYcKBWAUHU#q)g==EwKvXNeC({TXksSI#qfKg8Qz&qd<7e&l&;r5b_aTcAEH|8%<L
z;?KZyec>LnN_;dt_oH6#SZnmm@3kjvFnZ3nuQuBvegf*l^=zs9A>v=avwc3s?Gk?*
zp63^nkA;bU2_K2)n|a{@@ps@^pPPdY8$IU_U#cGye*xulKHz3^N_;%>FUt?UdscjA
z<VV)O-?j_ldH;&}@vwK4_%M{u`F}&#>qgIbuAcLj_(sTg?C(or?}}dp&v=Uue;}TJ
z|A_15P`@YQx&Iu2_{q@Wg?Rq`BlgDu#b1l(elnj|@t^O+b3d8&Ie7k~_y&kK3+f-b
z;){6R7iGR1=J`WB&vSV{KUobcOTzU?U(|>B`e(YN;uph5qW*1TQW(7ze6t;C#Lqza
zZ2t@s(uog*XZx&fmPx!PyesO{BY#%$+|T5G@2t4&;<<j|{Nef0+(ys-`(QzS@%vGK
z?kC*sQCK|l7oYF>az(|5qkOJk<|Qj3zBT*?wCCPyrNu|Wv;48^%Zon@&-)23BPxr(
z3m<~|EU#BhJnug<-n!Vii0Aj3I6fD8QCoZz>cjCfbYFe({N6I3*WKx^;u)Xpj|1Ad
z89nRsvuI24*HM3Wv}eCG?&2A5oZmLM-d;TS=lOist?wj082icWkL`zc6aO9gn(aBh
zRxk0Xkxx0ls*$Om__OqApR*4=#XBQEay*>9Yq0n+@J@Jtyvd~D;=|xMpC8_0w9)hY
zt51P(;^R<0&lA6Xm>@n0;)naUt&UF-?*z~I%(iH{(Z{0wZ+4$0p69JxZ}uraPkc4h
zhwa%V`6BVmr)-~A*8_~6^Pe5-mx=Fy`tbJ-8?j0}^C{=ImFurHdgiY#b{oWxMSZw`
z{{H!9v&Zua-M3x*Kkg4B{-4g=C4MRD!~S)xU6}aU@SH!KDSAM>Jv{T*tnY`!bHAPO
z-z@T|c<#6J`94^7(&+8*_a?6OKP#U5?d)HH)h-x4$MX(0QR2Ct;(X@yy=&rkqCGjE
zd9wYc(K{i2hWXqzddBB+w+G_6pC66;|Hbn?F?v_j=ivM2;<^9N{*~=$ta$GKTTuSG
z<?oE1<6G$gAI0;$gZn4GPG7{|LO$jCaZ8#X;(1@1@n7-wZ}ByePnnM#H~*D3;reAG
zJm(K#qf?0g0MGfrriN+6=Rv+>ysgNdPCWl!a4C#e-(F@E&-+(=zWevvisyalNW_Ef
z%<STMUz+ids(o(pY0)3Ke;DYPUp&{#Y|l^M3yJ6Ym-Dw=kq$;5gWsEFd2#XXs6Wpm
zstqVDemFey#rbOG#kYg!?>&;XviOnkjGrm@oc@)6vfWuc$1C2Cy600{JjWkDw5MmY
z`r<j?;Q3vbe6HeM@OxSQ!S_wYyTS8*UE`xI#B=@5{<3j?8}Xc<_~7?e?$%yB=No*!
zi^_H~dUupRD`_{Q=Xm(yYEPr*dbZBGzT$b`fcYiWa8L1^|8Tr2U3akf<#=9f|0A};
zjXoCbGv(PR@mmrp|3TPTqjyF5>wG7O=Y1#U_atqnh)*~l`}_XYipui+tCf|ei|71`
z^Pd^XXNgbj{CZW?T=6kj|8hKRzj~qgp~%;a2j9T~;s+u>hNC@iJ1-N@_j8$FE~Z~4
z{tU|Jc|p6FAo2Z?fBF9Po{(Vif$$Ni|2?10;;+GT{7K$yyLf&d!w=<m&9_T@2E;S-
zOMKiO@g?EeAD<lAZ}gmxrJa9B{3rb0f6Rxw9u@C_`mp~NFMCq_X!roM&-A~}ik}Y8
z^~jSe=Z&8E-DT}%qv!a%eCRdtyg$S9oilZA8a>zh^RwO+zbBF38~QXx{1SNf$GdwT
zi?0RG`v$A0Jr~dYYWBy{?y=&z|IGcdS@!RYp7Zl5Uq6WF{TcS(2WLKu=YBQ&qt}w}
z;`x3J=QE!De~Uka_GEvVSM@KOgzFJ{&YxeWNg<x|VeUWdxRY8uzgNlmq{~(t@qFKw
z^NnQVG8#SOZBY|jqv!7}lqb7*-k0F-4Sk!-=y|_l-PwFb&+)v+l0xD);rX(C!uvRg
ze}H_-{hydh#l<JQ&-`cpU^lMb-}8s&7Avbi{~B0Ii+4wUWc!S}UrziEcz%y)+J;L1
z)BmZDNAk6Q*XO@~A18c_llXo3z06;k8##-gjQqm!zi8Il;vb{_-H|V*KC36b8p`*8
z9~IU}d{I2#<M{qzb>F7qc|Xbr<p;XA5I+p%GhaJ6v=QGMJ{sju`PxoA&vQASd~l|t
z(MO_uuO(f@^F9^(Z(!e^;(0&Hg7W>H`il3(?`8b7vUrN;{V2{ip4{;g-xTH3-`p}x
zyf-}WC-fORO8iWC=A#ph$BIwvJT5-Z1f%DCrt#a!;!mMId|n$5`-<m%c;@%ZbNs|}
zKEU&WMV;r0Pi#I=sPsbdJRkH%{N%C@5T96ne-O3Q=-D5=f>w(E$9w?y)dPnFiRbq*
z2BH3+Y6TlT$HUi|H;ZR}=lnCvlWpRe-+8~qD|DxLe(!?$rSh~r;*TQULhySpcHb|a
z->>HQJfrL(@ncXv=c^B`kBU!*e8k^-`SJ<zP2qWd7qRM$_&xAkFWU_|FP?w@i1T4*
z=gZ<3BHwYnb1vOA@vq@I{(rb1Ej}CaBiGA0Lhgv~2G8+)@c0<<6X?-jtlb`qUkT6o
zf5*Jf#q;kAGym>?_e%U1lpl%s93Amid<w)H%U?71gLqqb?iVfT@>x9BU+ll}rN4{s
zg7Vq^&8>fnZwb%wWLuPVx`gYIZt%=sse+P=9}Lg_8#pAj_zCcA&rh{%#PdAV56>$u
zOGcyT^Ud-ki+Jwuv3#%4Y~p!;p63ys({hRD{+=D`Kd*H@@gZm*_TTA63W;wB&;94I
zpY6r-{FMFO<#aLeJTGATTn;ED{ut`R_V3cCoOteU@b|v2TuJ;!l+XG!PVHp$mC*io
zZ`Bab`B)5m&8@Y>bAHABv_S8A;yM4}e50*vBk|ndVE)aOtEqU#GxJfNAI-({ew{0R
zZ>@8!#dE&R{(B;zo%qJckBt8py*i4|1kdruQn9P}_wa0=faE>JH$;BqeomX~eZ)t=
zbH6U@`T^ooBfl_y(hT<!Ujd%K_iUYE;=SORALFu&63_R4`F>OOr{3cE{xA1W?(Ojr
z{~7gR|4lw^viL0MzZ|dp+xQwi<0r0&pZJ0(pX1NY&vT4E9PvN=^aAl^Q9kP*6|h)5
z&mZYa^jT{3jGsf5R~kKk@5IzW;(5Nw`aHb7-srjh^4z@XU-@5Swu$HbhxISyx>Nit
zv_I$np*i;$y$_ymhS&SVFGKlO@YfC=6wmdq1-{4ZBjP#!bN=wD;|cK`|G9qISMrQ_
zj{jU=G_X2v^c){HUA|=WvG~0!R$n!GwttDi(c;^n{du3KRn0r%=fiV<V@JjqqmMxS
zhdp{Ep7S?X_{zJViRb){&#UX)S4PkM*!`W}is$|k+h=2m58_87Kk|7c`4umIJv`&H
z;Q4Rjb0R;wqkUYL{}SI5p5ytA{?_Reu1EO&jacl*o^whrJ{INk`OdVY7SH_ahx(7d
zlU6*}zXjp%Z_OZnEAk`v6E1jX5q}Gw&o|yRoA~+gjGx@Oa*0og{=$4W`gLCM<>A>r
z*AEsH&-W!QXrBwS?Tw!6$D<vKiT6T%LQsD5lBLAAg6ICEtyMYkL*P088GNat_=)h$
zr-7@giXR5g@z%kshIqcu6^Y+F#if?`1t_2O*_pAP(Q`dg^HD?b+;8Ol+o)Yl#Phs>
z@z8a0bMd24f0jSJWoz*~FNj9_G%3{1=oxRrK6Mb!^-gz`fB8fg@w`9J{kmWNJ;ZOo
z?`8Y6?bSzo7(C}ExhoA2&-?9M4~|OdW%L}MuSE|vdd~lQY#jNoyu)a3@%!+5xxRbT
z&__JyWAne=-DCBi|71&TW##yvf5#msi|2hR=DV!lrio|&;(lG*<1@v3;r<olEp*`=
z@g0$WIllGlx<LF0<U98F&!rcOp9=4Xc+O+JRD3Js7mlCxqE?8X2haLfS+hp`cKEfZ
zkN@EH;`#UPIiHNHxk>ytl+W>VXU1*fQz72iA8S6^A-)K_H|ig?D^xu9W7&VdP1<Ml
z>|b#$4;nrDOOrxJ#B=|a<JG25$Hn)+@8$Vmm6NB%4~6IN_4khyKM9`sD6Z!vqi4R}
zU+JpR^S(#jl+oh3z6i(j^^CqPzAEbf4!+FB`{Jj-^L>i=QIEt2!E=0$YxK<MIsbf^
z{grs`_p<+1fAvOuDb$DSP3!PD@yw^}kDq478$J71GmmdZ?}YYmQ2dwp<ETILd(B@-
zG9+A&T!H8K+2=ws@yyrUuPCuHm3ZDSVt=1LFs*pzNA73tan2zAANQqk9(ON&7V!u0
zdn3@Eo)7HAbN_+uv-D6-@dr^p{ft?8#RtH1y`RCOpm-1D(^%BMyraGN#qb{RAHO+@
zcSJtre0BHPlH&RONw%l+lCt8t{$+kI+qa^4et(kt)kUgQ72g8+k>h`k)HTHWzz3jx
z(%q^lp6g$ZSA93t70>mr1?A5l-B3Kwb9rCuO~WSQd7jJuI4(zX@r4j?k*Lq$SFOaC
zgJ=6&hqo2a{ZAj1Ki{u|c%J|Ac}?}`B7P9+!|`EU@g7Fc^DLWRy~Xo=5RT7%FZ37B
z^I!JIZz~3g=lp^7pD}Q#c;@SZXwRKBMv7<t<#~!tdT;Ry(Vm>IM#YR5zZ0J0iT{pC
zM$h(-n=noMx<tyK*nFnZ`=Nd67MNr7oR6jcIN#{G|5@g^ztOXOiY{6rp5wnezNgx}
z#|rVmXdixm)waSK@k`*N(LU>wuNTkrXm|L&H#QnQ%l{U<)#y2X<{!C3JkKvUo{Vc5
zYV?f%sQmlHuR{AUe|>r%E`AR3X#m>iaYTgpWXPu+|D)#~7oXVouS#`3E&dV8=lr2S
zsYvns{v^krMpl=^_eOqXf2nclig<qiDhBP-Yt;?$yHGyk=h&dz;`#R!I6l90zAv7C
zPl4^9F~cMAX%P?J=#QQco{D#b=lc<7cf1te0G{n%c;XxJ?(iH>nlz6S-wU4Yld(X&
z_~Gze|6c#_RXp<r=Z8Iy{}ewB<#T=#zc5M0gzFLdNW@R>9?6WJ?X#_XD)FOHAI?8h
zCr>M$<1^1AtZ$?@dX8`NgENc&$9Rt4yMKh8c#h|+&(8Wejh^Gfdb_;hIsS7$u)>Q1
z;yFHZJp8t=h<NU2GCmK@a1_t;W%{S>N{Z+CGTVQXV_Bn*Mf-dHs34yAu^G?)kyXU=
zel_E5_VViDdB2+Z?&W}*;(30-`fRIS*XTK)U!Sg_(X&66ebrceV)v^L?QbTY{hj$G
z`^;A27a;%gc~x%PR{RclKRjQ1`wrqG;MqRAKX(@24f&V*8_uV?i@yoa_UyH|xA+3c
zk1W4^um0k_;W?jqS80&=CGcE-jYu(6{9bt0r|*ps;-A2?J|~06h|ieF_&j6ec=6n?
zV?2zjKS_KIluvJyZJN=uf30{iLwtXf&++->zS&04_vsGJm~ZqvZ++U%Up(J0V7%El
zE)mcBT^v7Gd|xi!55Jf5?Gllz#dAN<5B)K2**c?V`#<f!(d_a4qD|GdisyPi1oiQ>
z*&&|$hy1<2?(H^uwtwO6d&O@<dousN93O7<EPtC@gm~^x@_Uu3^Bot@`#&td=lfIQ
zxu5TZ_KZJrPCWM$EbwpUUle}??Zfe>VYe$rZ-w%Qm%AaJ`wsz_|F1}TTl{X+#}DOq
zy>?GL=ack@);$!@`JprFv(4wJ(X;<1cY7(G&ub9s?~vz>_~*!v9M41Fycf^!KXbif
zIrK@qcOv;QVAfahC*gS>6w%?Q`1Hs}oKH3?o+MMk^+-E-##`{uq~fQ-v;CKzPbr??
ze`f!hv)m${-+!jxGa$Wq3*ys)=UcaWX7NSgJ>XNPvlCw*J^;SV{T$+XA2J+%_VzsD
zxnAb};hymY#B;sO_}u1JL_F8OY@h3S9mR8hmCyIryAt9@qJ4PZVD^zR;yEAY^UXcK
zf_RQs^rO305uez2HMneb@f?3RekM;=Q~U}1UY^%?yjn***PDD^Z`L*t&+`J#2gVI+
zES~E}`df9H89m2`zP7E5p8F>yp1B)+EaLxAn1|8xJhzE&XQQ_|68HCgp)y&mtp5DF
z=ic4u89$y5y^Y=p_4ohU&**tSq21YmM$h%~%Oyj^pGhR%w)Gn!p6hqUb9JXN;?E^0
z|Iha#%4Nv=_xB?Hd;iLkW4w5N|Agh2d^u4(*YAF4&%2>h#pg!;<$5h(@(l64;n|)A
zTh10g0r`~u#kJsk@yU_zSpPI17m0U+=lZDZ@j&sO@G)qgA`6#`-w4n8<mkRy{3&<~
z${$f~o%oON9IyH&-6)>xS*{mKUfUu*UxIl1^Y<nByz;LL5#I!!`_E5@?KXPGXU)2M
z#dAH&`!FkP!;PNn)1}W3i|6{3`J#2$F{9`AB6dzYC7$nR@jm2m_jBU8zsm7H%KoBw
z<}c0<{l7+uPi()m@Y(C)xnIh7-m~PE(X)Tu>wC}W`Fqz?eJGyyOJmVr%2=L?=Xgus
z?cNKc_dxkmx4st7{Z-D#Y{$J9&-o<JPj5B(B%b@R9B-}jd^LLRXO?*P!{|Al%!shc
zoNztDe8J~CZf;WXi!eTLKeJ|+l;XL6%kd$qv_(9>kHO#D)jGZSP}GP0eMVF!@x0H*
z{=RK%R`I-__73rLeQXZ#hfyDn4_zDQ5zoJW#P*qzvw+d_K4hKP!s4Bgf7#zJ9VjY(
z1H3bS@7$Rs#PhtE^U2BW%ZM+Ie8>17;aEXD&x@IlR(`K6p6g}KpF5qaCZ6ZT%%=sG
zxrpa^G28P|zdGW1{!1V1)WGQ3zm`}Ui?4!s3&Hd1bl1)3x&CdwwWWBjf7!om$GIDQ
zB<i!dsfT#3msy_+xjT#Rjo-`X8~>)8_!980s89ZgUgCMbm+fymx1V^ff4LsH)p?-!
z>8KCK+X|(Ji068l`ynN)M;JZl+pVKU8$IV&O@hXW=X@p>?OAikMDcs^dl{c=YEKo<
z`3(EZ*~~M<bG^p>y12))#Lq!}IKSExI!`?3C)__DJ#~?I&QHS8KG$0ZisyWT{i|n@
z<>EPi;Cw#*^D6Po?@p-C{?luXp7$}v1#U2U_7|JJTa2Fly<*)E@ti+!KAAuBZt;Bo
zi1G9AQJDBoSkGF}K9_eM5T6wJF%sT>;$iVk;MqPon;#Q@9G>;Rlkb#x8|2ey)Mx4Y
zv*H`T`@pw9azXqsc+Q9O%#RWu0?+4Fuj_U3vGB~l1IyeJe;=OnhsD<S#Pjb3vp#dK
zJP@A);{(UfNkLD<bHAG9ZyNGKd@+>I=bOCtYw-=?Ss(w*@5M7evi}}>{82pLKjnO~
zN$3}&Xa3DN^@n)&U(Ro@x3<cXa6LlL`S!2ENyRTl`@|xiXMav1eg?b;{L52m#0SE2
zy-+tGozX|2{K0)PiQj<o89!wzXBE%&2z`929O9Rv{K=@#{#&`lpN40?w%wfH==t|D
z){iMHp6A`{zbjme8a>C``8i7%J@b3(*QLete4PDp=fU#gBhfzen`T!Q&-Gv_{QVlw
zPSwQUMfn^L{Y$!t=lM0`t*})c@tm)6JlS@uzW8IP5BqPGO|Ig(e&_z)iBWFi3nJg~
zK76hQEyeTi895`K@7TGE_e1$SFYEohz4#~a{JzA;uukIhA|G)+lf$>0`1bH@|8(xX
z#IJ+*!SB6d-%mXMo{<H<(-%+i?@&Jb%YoB_jh^$*tbxPDbA37p^$G4X+UWUvFIFBW
zp6gStj~1k!X!OiqZ*NTz-wW~2_8Gr<y3xDi_tx^BW%MENeO>2?=X#mzg_AiKiEoGc
zGag#M4iL}tV#f2+gUiHoz0CDv&DpDr{vYoLbzCdn7xm|T;}Rt|i0AvW96t~J-fZ-|
zPm=x8cJbVA<n!9JYM0TozgO`J6VLrg=9gbC2aKNY_Z7}~*yuSQ*z@qHc+NLipNzXs
zia&|x6^nSjKIyFZYw#TZm$bZK^qj92Efi(+9IvK+x+b3UAO2q3lQ)e%9KZLL|6TDn
z@OwG`Svll^__OdF4_muD5x)hV`_Eg`zYsqT>tDv_<@>SXGa^4Szk6(dC%zxN1?}TD
z{-gLS@O)nBn|={r4EZY(<yXq{Lws9!{yq24Z+?qk2+#6c9RABT;reA~B7V%A6yo2&
zv;BiQr4i5dEb~j*Qt8B75D!*ppE*{U#PhyZH14~;x@0T9GRmi~w>rD{`tZ!B1HE#K
zZv)T%Shi+<@jc;rUT`d9Ve!M@**<w5Is7ZXeOGa#=l6tbOfD^cGU~(p+p}ePqmRJz
zjW1Z)=-D5ee{vGf{WQj>?MY{&=lXQ8e{J#H&t(6q(5t@Db3bi<MOUNe{iW6^-He|5
z^G~B&7(Me>&5dpTr~h;R$I5<z{Joed<J<pF|L6V&pI7asos6FG?3lBgct4Ck^k3fe
z6u%Un^S9v#`ikfLjr&niGd;y8L;SNo{vLzHKZ57{zg_X+;^PwdKke__porYRI&U*t
z{F4O!Py2KH*?VWKc-~h`iu={Sf+vXYi|=3gp#Q!eK1F<vMDlfpy3@rsM?Pi!E7{Hx
ze;S_s_sf&H;!7ePIRB3gT`0aWJm*V3(*nf%!gD^5qV+QI>*1ZS-%_&hD)If{nNQoq
z2Z?_V&-wrOlfmM1BYwEv%oMO$yi+1RsP}g9jo|rv7gyRP{xA3##M}N9VMfpSWW(tF
z;;W;4t}kkBJS2WGJjaK=qmGK_`i}Mg*5IUg?)Ngk%*cLL{07vA<L%Rz=Z)S8?YZf|
zWus?*tm1dg=p#`6S&y4W&;C-l_+6uCee(Q@F?zmVw*A6mqyNYJXXSIF=XvXuL9ybw
zzs>!<*)`r7J)dvx^dH5yKs+$s9>#nY&+}-ufAt;TjXo03x5C8V;(5Nz_2akZe`QU$
z9!YrL_)q?dMfrydq!51yznAm#rXN#_=lfg*QGU(iHsbky5chM^2W2#RAC%wC%T_$!
z*Jk_7bjdEhCGsi#@N~JwcY|kt47`_5`~-OByMtQ`iFZN%wZrfA9_t`}2|S<IpvJ|;
z^L-_bSKV`!7T*Z@j{9lH-;@(S5}y0#J_jp_=l(X^zs4*l@%>Of`){uf&f*`yvwwXq
zUR%5);@=AG-{yBc@x1@Z`ainR$mso0{*4t)#dH7p9sI?CEyQ!bm*sbIZX=%W6Y+d%
zTKe|l`=Nc9ud_brX!KmK1@Gu8p7*1;zjSdzPow92qiFNK;=NISKCk`xJ;iT?XZ$>j
z^D=tQ_ih~<X7t{8zSavzi9dz<Fg{OqA1j{UKV&@2C_h0w_dhMDPo5N0#P3Ia{xSYv
z_ceN+r`OovC%zlX=l+BLh`HjK@8}EHUnqVk%IEXlV;3Nv`Ef1UC*zBy;?JXe#@qFM
zE5-A?nDOvydXV@FD4+WqN81G(J)f^f<;~(_Q9j3io8;TY?}2B$mAST4yf5-2@9#}t
zyGQ(6c#c;MhVB<%ANi5z1^sIs62BUr@lY(&QSq<fIli@gbV7V><Rd;`?_FoakB8^@
zHfYj$@yp?v-@CQAEdBsI+w*XNYvP|L;-7tp7M}(2!1-{k<9Eatgy()vzlAa4Yr=DW
zc&htj@y+0)vA^A>{B!XG;d#GhSF%{~<KP)T_piSdKMS7mb7lPpv&Z|G-9~&C?}PHW
z{yJRmyLjG@W&aJc`)%|b|1-U?woAAkS%La+e?Dkma`E%v**+_0rWVid@3H=K+SwRA
z*PDBaW)xox_2K(IqrYbn&;4!A=Tk>!6VJat%l)N`%W@gL1^KAxfP6;J_<UQfkoaBr
zy_}EP+Bk^+$Nit3`o8e3d&R`_Je~8UzS~QQzk>R(Jx`7=C!YJUjE5O+mBjPDdMw&A
zET5Bj&d0d^y8ph0*<*h=#f4hpIX-ZFc3fUhJkNg_Kco6K62BMul<}XeN>lNV;iJ($
z^HQ}Ce-!zV<Imokt;JiAU+8OZY$v`oyff;vc63MaL*aS8bGkuS@rU49{<~~F#ZQK3
zygho+NBk>z_OCSi2Z&FF_-DK=o#7?E0zC8Ag7(A2w}fZ?-#U&mdbUs2AKv2Yp?nWK
zuOX2>M$h|B7ne;I-vi}yKHxaOS3KwcJij|o%}@L!l+XFwE}OaH=fhj!_olnQ;9vQm
zkj3JspnUfC@8g#mJ=Y5b+*XROhVr?d%8@TfJnw^Xe6IC=y?EY7<@bt*9NQ#50QF(~
zcbmUWJl7)}KR<NcDW2<nu6M%9?h(&?!TwS&>3*YU`~+P+D1I}3Zvf(F>AE9E&-`_4
z*a`7mzw`G_t9wQ~=WkrkKC(S8KC%7k`_C^KJ@*g$?Y(OBjL!wW(c*dkgzf*f`yKIo
zKa2hMe%ToD%)cDpE?7SnzZCg20?)T_)HCr<;Q7Aclhv=pH%9*D^Qz|cR{VN+j)y&5
zK8Sw+Z$bUtGkg|b1^JHs(eA-F@$T?3DBrT<m-s3098Y>ru+ElnJrV)W_4V9l$;H2h
z=X&H-zSQD>!26*7_2SZs&yN1i`N^GQ8N@rlv;5!lvxu(*&-1b(-Li@2{c!e|S7mdF
zcSre*hepZri60Kn{lI}&3ySXp&;Igzt-bh?@LZpM7+Op`&!gF2UezgO^o-|6w&le0
zelO=UHJ()z&+}-GZx_R=iXV&L%jb1$S`G0$Kjrv;z`d5yGv76Gs3)HL$&rZvbl)0^
z=lIF>;9qB(7(L_v`;zA3SE7BGUkdbVEj|*S_0QqdPCU;;8P6ju9mRA1wl~@*#oaFA
z`F%_F-^E*di0Au3Y@hby`WQX)S6Gt)M$h@!m^@zM6VCVk+`o!!uJ^BY{2KZ{{r~m-
zqKy|vis$@<<Il@LZ}G=)|BCfr-`hugPUK(CZ+}*tEWSMQBl~Zml)mEk!?XW--<T;r
z6Y>k!?}LKph%XIqg?O_Xxj_6Fc=mVu`isSHfam<d&2FjqF!*<<Px|L8#9xEw^Xj*E
zjrb4ntp5Vv_2T)x2(HK9x^FUiC)7Wy!#44*7*As1Gk@P9zArrI{}<1MiXR2f@uAa_
zed6=OvwaHmJ1Cy(FUHTasz;2T_nFgKPKck0`tZEq%AM0je+hs8y4%)B@k>yCB-+38
z_)A95-`ljwRin3{{QJ41#g|K@J_Fz07QYFe>-Teq?;AbabI#mHM(>0D$yc49iBIf&
zc}(e7;+fw$zrB&<t<iHnwlpeEJl`+oc;XloZ}c3`4-ENc^c>H#*8XMmjECEqt+OXw
zkMMnD-simWG?{pQf1CZQ<epUGIX_|j!{(+H-<I))cplRwgLvN0Wcyo}$|61`@*VqQ
z+%G%v7m<HCpV@ICr+EH71?JOKEAoox-&5fH{KtTT;xi+^Fg^=bw-?_L-Vg2RYEw*n
zAUyBOIo~TOp81sPon_m~if2A$e0~{MQM@(cf$N=?O{<E}03VLuTQ5%y@p<7H&p~f%
zis$-{?XxtZuK30%e=X{BY;HsG9`MZX@47S*-vplb8Mc>hF1|lJ_jA%%w-#Rpp8aKM
zR9o@9@5J_>v!;W1=HE&f|ECS<V)U#}*4jP9bH9}Hw;`GPh+l@^%Xs_iNq?hfzB?5<
zNIdsf>1R$IYV^!sE!{_o=Xts-;;mK@Z=+}b?e}@Sc&>NY{@+hcGJ4KuiUdv*&;47j
zXD9WUY4j{VQ<XX5dA{#~_6bV8Ks@(j*&oZ^_BVRg=kw+zM(>XLO!Ho0^c+vdxULb;
z_vsk_Lmk$O=luc3|M$-u#q<0kg7rVOReXQsQ^wD5{~hA5!n<L7u<jWuJ~#3^_m^gs
z-zR=5ydUbHEBQh3m*APNU9Lrl&yIY`{o!Tnj*EAIx1c`u!%mBz3(xzplj}r^UkT6o
z*p@7p#J_-NeoXoFiqZ3Z=kK96#M@%LWq)Zi^|tsz@Qj}vZSIS&1@D9Q++5_5_~!5|
zKgE});_JZkd7V1-QhZBzzTb2>;Ej0RM`eF++9yu@T$In}JEC&Dc%Cn_|6WP;O+5F{
z**@KF{S?0t^`S4aIZ2L$>k;lZvVTn)lT7?Nl<$Y<JH|DYc<v`~|LR80wBmzNKId1x
zUZ)qI*n0o-!OY@0esVrPZML1!Gha9Al+)-LpF>LK70>xkEZXzp?*c~8{i05niiqd=
zFQ3=kHI7El_3|#Sl19(@(ruTr;_Kr1GT*JtSW!IZC*05P_Na>Zb10wv@xY<#MxP$<
zlh&JEQ~YX_?~LbFp+jBq(a5Kq540=RP&~gE&GyXpqp|po$d4RPZk}r<{scV7=krTj
ziRa({<$j}IzqaBVB7b?KeV$kCAbvPJ=Z8bnbP*o}&)=K$PIvJ~;2Hm&xAYdz^IXQ8
zuXlg(X%G*LAJ@i%jGn(YO|GHhE1`T>v}dI^Bg8wxv;LnCjuGz;&;HV4_IUA5iTLdu
zCyD2IZY1iTrsOp7(@;Lgw~N1L7(Jiwf=jc-`=flW2Mes8Z}j1)|9CHd@uN{b>l5s<
zMErDk=DUg+SBPgm<$b?X4_AxdgYr2)KfG(5c;-irZ#gD!G<v>&alhqO@yvG?wCBJ=
zJH&JS&h}jVX}5T;ms$RY6MMyTeai7<l7F~(u20!MV|qo1=lemNPmZj7Ts-fGN8|m4
zr72H~UyJ9<{_A-2ocQYS>|fJ1UKG#$UY_@59eqVS?|ZYqY-w}D=-D3^7rHH;`Iqzg
zw;%6`UxEC~=T-OkL-FU}tq`9p7CaTt?^{lW|J3!R__4^p+&`aC=8gDMiFg<5IPv^m
z2mAZ7s88biB0q9|;<4td_}%dQ9?0IoKgIKVl|E>nn3_p)CR~sFM)_QiIAuyE-Uji^
z=N0fMrTAQl_%^#N;;X{5f905*UVKA%#&hOYnZ=KQ=lbGGK|Aq0FJ}4OKIJfajz1qx
z<Pq<S`fz@p!@q#hbG*&etB82szluaWT&dtFp5qVeb1p?m@qws6<E?#k8Sy9K`M%Gq
z4Hd-meAXTH-#)5}c%GkfyiL=vx_F+S^8JWj*=rg-=MSG>))CM1Q_de+9B3f^EZT?p
zw~=3Cqi6dM@n~lBv1reV#aoHzc_{mP$zSf`BT;|u*Uh}(Vf0+@G+o(QJkML%e>V^8
zE}rlIa(uf|qqlhO&#*p=)Atvj@IKg|`&S?D1<CiX7QGoL{u0`U@e_V%i1;0e_!Too
zh;M*=%6ORFc8vI5@XYVo9L9_HLVjdCtot%id^|koCp}J270>%rc8Je{0W-w&dsAHB
z`ShMGJ{b8f0_8ubJYW1Hc#h{uQ~8UJgXez2m*_z8d*PX1d^au^&+}Z44|bzhi|6?)
z^Xbrr>%@B?-dO*o**6+J<E`_nE#mv3e7>)G;6R9YuGcu8=bgP<`~Z~C@h#Y6uXt~G
zj#tqo!o{bAXaD{F^RW0?@T`BE3&+G4f#-ZR$I4UUXTx*;dE4`x_~r1tkGHbMMe#gu
z<@5cX?uz(ul+XF?%$Vy&&;HnS$1U;aP(Ihc^(NjEe+b?Q{XMApL!<YG|DFG-c%CP6
z{xIjm3-KJ!-BEs?<FAdL<J+T!?~R`K*@Am~GJ5XMUo8LC=-FSsC;us)>t*^jH>`3c
zT#p>Z^J4!RADmQtV)I+)Nh!s1e*2I7-rORd?+ZlYc^$}?Ui?wy)5-An-enTc?{9>_
z_l?LZzBTeG`^%>}Im91==Y4}0o$`qP3h#>g+$~u^d@bZJe((MA@5188!E?W~*rlT4
zH^Xy&l6O@J@n_(fPrV0~5&sOH{oUeHL3}dAC(nz^WvC)PGd#<;e^5<)0eIGb?+zF7
zyuZZ#@cI+$i0_2*`MtsD<_(OV<88SDjm3MSeCFRDAKi?e<JGHUEya&T`Rrfy7P^Zs
z4A1_XriX`k=4;NE%9igep8Km@Uwls1-RPO$TU_rYp8K(^zfW*Kqi22z9x>49{m|bp
z)*B+8^8x0gQ+6Z7Z$<m__r85TT0G|u%tyQSjT6uPVdj@wGbW1Xe1P-Y6z!*qXTE-p
z`|yh$XNc#1GRNokKW2&l$M-<+eUC|z^ThK$0LRbG%N7|u^Igz@K=Hfry#5jY)t8Hp
zf@eI~XJ0M;1U$#LtS{DzXZ!FzL-4*0;twJJS`g12r)?4cH4(q3b%@b3AGs9XEuP<h
z=K8UGe3<xr$VVJc98Mk(&+j*~J*W5|79W7}*`8Z^9uvO@p5sr-il@Y1O~jW<aZWtf
z%UmD%-MAn=3F3$A$LGOO;`6{W9@3AzF1`dj*E^N!-x6O9p8fHM-97Q#PiA|%zjz>i
z6v~f9JU`#}L_F_5b3M3a#tZQ?P(I_WU%S`hnSZTNpYD$D%|6HHJy!quPnoR$?_b3C
zkK(!C%l?%k@{4$`e>wl$yzGZ~u75e788pBucf$1u_lKEZ%2iKl^t?ac-X^7ZzCY`S
z_RM=fjrjR^UftnCwx<)%^E;OB?32mpd4K+rTUMiI|8>ll!{|95IPgBV(R2Rnb2Ptr
z?)UQf2G1`np81{mYgM<R;<=u+p#4jgD<PiiSw63sNy~`m`jqFtZr92iy&dWky}hz{
zo)>d{y?A^z@x0$y3gsVY;v$~+sW^Vt&0R-)GORb5zoK5(7ti}wA*fG>gRbH?pnTT9
z*(^8lNszyouj_PZDZUXr%THF^T|B?%%=uWcpY6r-d(IrsTb}PEJ__~Wco?$0n|Pl8
zvi@ra^b(&7;}82|@9O=Gp5x(Mn}OmRqI`~5zV`?JD<86bxOl#Q$N8<rXS8@%)Q8W@
z%59u@=6A;P@w^koGrx2E@qIr<e8T;%Kj%#z$=CjU-V~eB%IeR*`6s7~XMX4NYQ1=t
z(Q`iI)P0`#Nr*SjCo5N2Wb}-;7JmhbAB6Vj^V)u8nRt78j1NQBt`dI>p7B|6*jl6K
z{G?Nz4MxxSd7EX6`17a_+b74f?c!g-v%ic8+hz2;?=;9aOgz`KjGx8s2aKNMPkV>M
z;<>(Kz6<+$R6O%3=bvNFo-}%npF@|P6@MA+$^Lk$-v#l<;8~yL4Wq>KzCH8xyzJM-
zb3V-b7$MJZif@MXEbj~b4!tY>F22{n_{l%zf%w@dpZ&dV%O~PTBmX*~KMpAPLi|H`
zu1C6jj1^xM;}6R}c>JAs{=Gu}-X{w`il2(|IiBC_{zd#+c+P(!%l#046#gCB$3B@=
zo`ma>xA3e_&TD^(&x!a9LHS$Or4a839}AyycpCA%&&+s^teej0*<U`|W)j~E_2KyG
z``lK1J9y4-W5TkF9|<4H-|L%OJnu_0-Xh)ei|74h*8ih@VeuRv7!Q-bI*6Z%`g47n
z`D}6Vyl-s5?~Ptk+UPkxFY8y{=y@LcrD|pI+&^c&YiX%w^qdd4-gOqw{d4-ETWcFV
z<G<3l`r>*2nfuj0nz)MRemKW-_dIUmSK;}xeV)H<Vf2iLEfH<RbN`(2nQ~rxqv!K2
z)uoeoo{w`qZeOOGc&^9&5TBE+dx=jtKlw8swz{kLuf9L-E1vTW&IbyFdWvWJ@VwxI
z_h9iAkxv;9j~WdZKLMWY@0nw?cvs{{=9dz$#){|nqB*|hKQKW&zZcDT+d5;4_<G1k
zEI(EI>Ee69bA0<*be8z-@SG2{{XSPbzc1~M_<3<|p?H2Tn)_WFmIjDVh5pF#<Wj$7
zM$dd#zWOTh6;Qr6>hEB)R(wl%mTz}ASbPlHGX&)i-MU%)FL;hu%f@aOKNR(0{B&-z
zOFZ{8d4ByacbItYXR?2}zTGdL`&aD0cMcyCAB6gQpnWX!j~YGW?MLU6;&-C_$tb^I
z>9gYb{s`BbyOUfHzZ>QAzK8df%i_6yVS8R(bIs`4e<O$76wmXB0Q}y$weN~g?0j%<
z<_F^U;`g#Y)_?L?d}8x~=+Nil_oICFuVqtX#h-zX!0#>A=AC$+chkQs^3mwo{ytwm
z8$HL*JEy;kXTIZnZ&l!Lqi28rGW4&!3D++ypZ90nYNrs-@2OhQp23;Yh!4g3l=tn=
zJ+u-34n7v;x89jid;{cP?r&_HU@LwNJoDrAX4%DmPsIPsms@;GjL#vc|H1e9#1DpN
zJZC#vNIbv4;fL~X&T|kSiSilG%exjAe;a-f%0E%2w0K+eFV1hL|5aW*^EH3(jw_YK
z7eV>4xbG1i<Rm^jJo8255NGj~;8}nB+O@^EhG)F(&0JsnBzW!*ggj|v^sIk|u%<@O
z^?vWEEyNE;eK?;v-nxx=CwPtz?)L4)FM{WNX1gyPjh_9{a=NSd#wefjpQM33#V6dK
z|MPuaKHtuL`ikdy9OKiyil=zqM`e9>ryeXm4E495f2F@YOgzV1=F_X2M~UbDB>j&u
zW5x6REaopi*9qcJqyCJay}71{=lfR7M=`H`jXoCbv-Xgmc%Iis!&}XnD}Ed5&+<!m
zS!nbzD8FT?0PzP=KIflfEz88$hiCnl-C8N0@yz)7urWydE9BE~)W6ZFVDYJt@7RCW
z)ZZ+=D?H<2Nw)3cx4^UhvtR5KpA7kk^WiLe_lW2BCnNEDtNHF1UkK%Mf3mduA@Q5w
zIscz!e^mSpc#i)QzMK%B6!GAS`foUWMtmlCj&GF$&x<b&?}749_qi;-BRt#lUFB=y
z-QfLD{_fN_#dm_|{I>S(JK}ktIU3&wxVkyU=q;#EDeuQd&v<ipeQxwTuXM{5E1vhY
zc%Nb9>$l=L{&PPn<)IJa$0yRBrDlH?&-+)bzkR3gM$h@--jct?^S&0xhs;)g<x998
z;dst?i@ucnU-@#YQyV?o)5FWg=-FTL*32lL`Gxg=oY7W1^99>y=%Z{#&+(+v?p)&e
zelFLWohRoL&;1tG=UvM}|H}ImauA>J{oFtEF(>rL^zp^SC$@i*@>D7D+&|&>4}Y#H
zXY_ntZeEqdvp;e^Q^VOw{7>Xx=8JRboW)y^A9<fP|NUCxhr)BbvfW-!Jl{X!{C2oc
zBk@_0zqtM?)3mAhf4qN$=i4?<3-NX+pXV3Z-nJIczyHhef7s!6;`#S~nIHSi=_sCm
z|CjyiXXmcslViMP`LQK?iZ2V#`FVY-zT)qoeV8xSUK$|23(Dv7UAEdwJn!=`KOXlQ
zCZ73)<;S{=65kE=;ruEj<5=+%;5j~69{Gr$3(x*rZr5b-T#s|U@nw>)c<zUDeH7l(
zPdvw4uE*^P%{6*I^p_2v7KrEg%=k%qa<S2KJ+jb$sd(;(|6{%1Yo&OO=R7ZXUNJ~K
z$8+wV)J_>}^ju#Ly17X_&+C2Ao~1T!6Tb)X!}Cy&(L2R2foJ^hZMaALDR}0K`Z@NC
z=YBZ*qb2sB(TCvomJ2^3p8MyF=P!OI#Pd9z^MUXVXT)>=oc(uf<@4gX|IG83q$w|p
z=lqb*x5$mF;`br{ay;L)K3aT6<WtTMs}H{;p7*IZ{-3QABmOwb=YIH%ERV(ihG)EG
zfBH<kJMsnJC-n+_C4K=s<MaHKx8m2pM<CuDT7M9K4?X}sSK-g%`TfaQ_#L0WiBFSA
z|GIYamv{$w&Nq52w$7h$J;M84jA!>=$;ESjnB!H>N~y&+Kz-Q1o}{u7&;48GQ>U95
zjGoW8)W$60^PoQTA4g>q&-+@;UpX7*67P@l8P74<^NF7h&v;n-s-Sp||2$tV7j7^9
zALDr{eIM$$UooR+evkDiW%MzKXS)*RjGp8FhF=xMZ$$fWd`o(<s`y#(TrVtKS;OcV
zpYI0N63_c%oS(Ql*E4#?Tlx%*jGp63{|8OPGoNxk^J7PI@yvJZUl9{qi|73@4?N$=
zE!r79<7Z2Oj^cUWjQwlS$1dU*BzV4m-@kfQS-yWY;%X1^yx+z9S5?>b5g(YK{Qv9k
z6=ohdK>Q)xr}9DjRIKhLegQo1GtWsoOnhnNN48J)yCcO1!ZV%+Z}Ao%2Oo+0_w@D=
z?}U684u8~jvUuKS=HH{qmCINBE|kyl&GyYq@t5J*zg8cdBcAt>*q&WxEf9Yk<+DE?
z?66q84dRF6Pqq?E#aD%A`w#oILOkCmV*Qg{TqC|W%4fVSTDjirvH$ElaFfxq{q3B$
zi64RbaQ=`X!%p!$Z)JX|^dQvex!&oqbDwx$)Q9uQf)fvl=lK+W@9ySD#E(Jw%oh&|
zoDjbOp83w@(`oTMZ{_}WspFC2{ZKyN*XZJZNj%R_E$HuVJ+2x(*UOnJM2l~M`mlZ0
zCch*83_SBuxf}PzbG^p?QhMVfqi215M?N$90Q^0jkovF0b3MrQk#n}U;#cGMa(}hb
z%Q*2D67i?^$BXCw2KS5HXMPjU{f$_}LxY~bjGpVwRpqS<BwUYhKZ^PKc+%wJpJM&X
z@uB6lRN}e*4MF{H2c;E13i*-adCwsk#P^41ytS*9MSMEs7tWU^X38d>e}94BFRJ+{
zr}!x-KN7#U{I0y>gWx%ybeL37JlDT$|9vg&#dH13co<u-n0VfI;`z?Hk0r%BApWiJ
zdy||fYxI0x^A=SUUk~Lo9;WoDDxT|QwojG{HH@D36TFhw63_i!SN`4`b&a0!b|Sc;
zc=pGFD1YyWCPvTkIdlEy;-{cJIp2%6Yb`#p{o!RV+KT6XFY{@!{T;;fdkc(*@EKi<
zp7ZSq?RywK+w+cNAES>&`&atWUp(h0@8C~I4ieArKd^tfFCQwN_s2LsH}f1Rp8FM?
zk3FdFEq)K;f$@CR#z#E&H@M#(d4H18v;ThFK21FDdq<)@C;QA4&--cYUomcT#B+Yd
z_ur%QEf9Yi?Zf`%`P<*<ncqL1Um~9S1Kdw|yljQ|rO3b0XrDp-*BCwfd#9@F#b-c1
zWqamHvq^k=c#i*@ZfzBR44(6W<ePVh{{_$SIet{A`1;7Fd|u5P?i1e=p6iQI*$;|8
z56|`8fR_>C|MC72_5*+JKQ2BM;*I0O^ckncSAh3HJTz_}Y4mK*jgFVZd!c;BL)u?g
z#CL~h|6LS$L;MhU3+n%F*=_Oso=JCj*8%s%Pe%FdUw5iK5}$Ct>(71^*CYLHo{8uC
zkF5WXdoRUvf6N{Aci;X-e8Tr1|I}wKyqiy)_+5$o-r8>QM$dS-n)jP{exH!fx77Qe
z;-gR>_Q!}LNeU)hkI*yU#m-MA{sGEoePX(%5`Q%jZz-2nJo6Fr*RrG;#9vRO{9@NK
zi|6?%+sAjEozZi=^%<U1JnzeKf8b8tyy6d_{#-9yvMnf{=cloV&mYf<i0Az@j<*H(
zI*PxI`fxte+P|du!|;rsRb9)9=Y9_7t8+?M6z_uk%l6Naq^kJh$X^^Es$Z%uJ_w%s
zMZZ?o6#p7NC%(TIKd7$wy2xMNcwX6^8;YL@&*wEfeG~D+;Q4zm$21dv0iONKA*7Y~
zSa{aI@Wi&_zr!<Mk8RdLd>zCOpYOVSUBur<`K-_R_ua+w{UDC#4o7>7?}7R_;qPg_
zp5I?Q*Qcz{*lvT2p7G;SZm7|-J<BH@Y4og5@oQtm_rmWDM||d8H(vZgc-H61uu0;l
z!Lz?d*O?}s`HtgTvaB=32P9JdnP;=bpMd9mk3xIri|6?)*B7q7{^EIl%Kn?a?Go`k
z-;6~2uX0!+p81R8RjF^Qjou06JDgi5p68*QFHKpx(dfC}$<lwTc%Fyy{>D0|9pbs4
z%=ocN8!DdjL(b<<+}&&RJg;fBEnGb3lkC6Q#zz=^0NQ_J)8j_Z`1dS!T0Hl2=pDYF
z6VLNsj<-H%FN*Jn{LA&o+Q2K~`MxmAFWKjYcpKzXo}a$0bX)u|c=pF#sqTwE4A1c}
zdGtf^-{2W<B{n=2-varF=NI`$z7#(Pp5sHq`ftQ<g=hS%w~G^h3!eS){PR!ZzrgeN
z9@+a<d<u-8{JqVl{}f*cp5<?Co1{>}^+@wXe6^y<jGpn<<6BDcT~I#v)BGbXM(=_C
z+iYoi@#9fG=kr_pWfsr-Z(RRYbFvf9`_g`>Pm;7b#dEztKksgyf8}3qEg*hAey;`f
z89T0s(er%JrKzKM-p6MAC(Bz>JonG}d%L_VBi^6&$NA>_hzdqO8NYYJyedY|`F4h`
z)s3FNw{n@9;yGX9?=AgTUGbbRMWFt(t~3zO{cU&nTx%PP=YBQw>DHmm#B+Y-jPg^}
zX=U`x@8`3$HG2Nuc~3pWC)|JdbN?y=-@j^iyt8=D-=cA!<mrO$;%746@OwLV>Mg!N
zBKbE@$^PO8z;nE<^=qK`MaXx|kJcB4h`$8S`G3(BBg9ukeqs492aFNV?`iP<UdHO<
z#q)a_oR3wpnI!%o>Jy3f|9W?-cz#cV^^e~^Lwrg+U$*~~akIsjhi5zwYdT*%&!gEs
z%k%h)uZ!~8AB(>W6yFM-?KwSSxp?kBhoC*P&0B5s+#ep+Wu18LS2I5*E3?t)xqsEg
zdaL+(_`MuI-$#WQJ?Ebjf_57{=L2<y?iJ7V5ufkPI^jm|gZ3|-B|>~+`|X9E924(^
z_F;c%w&#?1-e;qKF!h{xet+14`g^sxD4yrJY@hQ*t{6S*Gw;iFqi6i*J9EqE{ZRjN
zEAJWo2Ka?u4~?GndFS#}Jii~v{yrwdOYyBS9v;W{d9K8~7SHbo{(z6){$BiKl+X5=
zIR2A(zR$vZUC-mI_&SJBj<+Ete~O<D&-(QGX;nDkdL$F_Dd%qwPA3)L8uy>MUbwp?
zrTB6vpYi;mr$xL6@-N>nzE>{2`26r3Z_^~tEWS6M7wc2vT2}E#;A0Taj=?#^`@>to
z?-`y){4aQ}XV=#$AU*(|{e4Z=BH|yyvpyZ378UP~_+fk&-djRE{~i<9%T0XCh#!IS
z8PB%uDu~Yu&-!>eR1setp5w!>uhqo!dri#0C(pTvcSiXZKHnvEjGptKyL}soe}U)4
z`rLAAEWQ)!!}BRmn`YwqeGkUZtUE2mXGQsT_`NT-xQpj}kIy&5SP${sPvCg6zDZ~C
zvr!+$b71c7;(1=l`J2PrUgA05WBW`w+)q5`S6nZ&SuoJ(qtTvqyABc0`BE%=lF}o@
z=R*5%e%K+&81cp6`Mlz<j1$lOVfL>lYbJ`1K=~YRHx8L9z65-4{NCzyW{BthFymoS
z=Go$TzmD-d>dQRwO;I0~-}%HM@$6sRKdC!EP<+U;lz;xbnN_O){QGksgY)O}otKL*
zjQq>>+VqmE#n(XoWqtBluM>Y9-Usc!>cR%`{Jtf9z{)M+_o9664~Gp15g&v6&hcS$
zwcX<R{xah^O}f3}dA`j4{`=km@qE9S&+E<B!{RyLVEgPGcTD_ijQ@<cjBcmIbAR>C
z2kXD%>A!#9XJ4Un;yK@Vhv%FA(*^N-e~S4iE+R_&K|C+!qd5z&i?4~_>x%kR>wHUm
zHS|ZWPk)xYC!XJ9;rES?SUnU!1LZT`rd)m^KC$!G>_IQYC)|JgzwU!o8~j>4_um-L
zNou_p-wpK-Kzn}8^hx|Vcnkc&$6v%Bg6H^?E%b+Yo>#Je*-o=6l5jo3^)<(b0j-l7
zJ^PoneM<3(%@1dNP9vWAg6;p}R66m@7mUwQ0hz?}ypru-txs0*e7}tI$>ddY7(L^;
zL+U)@m*V;IK1uwY{NiiF^ZxUW&4tA$HXoZjv#59r%IEV<)2@X0q3~P}ezPwl{tEJG
zEaJcUm-6CI!gD_9a;ma;rv&-#&wl&vq3I+34A3S1^Y={u{Cl>nn)pTkzfbY^C|=2`
z>i_Tl`@h{CUH<m}{r~qY_5c3wzxjXu$Det`pZ}i!{++k~y5Rom(qNoszx-CEj?|0$
z1U@)N8kwSj_|ge}_n&c&?ezPatN2`r)aP`toA^4&8@$IfX?RQVJeOu(-CoaKyaUR2
zMqDh(;vs$|JlFB@PdbSo3eRyae^@v1<q+50r+GH5mw28t^ZAZ&?<b!3zPXNHVLwnj
z=N(*UoclUhyaVdbywU#baHHqCVRXP~@%%fM{JR{>dyO-C3*xy;rHSH)q5eDvE0k)g
z_`C3o|InM$#b1JFp4qx-meF$^Gu(Tg_+yEb@7Z{fc%F;0e21KY;@wa_<Du}IW#Spn
z%u5Xpt`g7pX4rpSX0H|B0`=j0ke54d5YKzcoHz9>wM9Jd9k72L{Jq`ixo&QJX_xqe
zs6T)2&NX4;d5^#y<JD@f14hsB=cmhI@x@Uew&&JD$HeoV0>>+>k0-_RoS*UkEaI&A
zGgvoA;P<YddqI3WJj<WgF-p7@@)yUe(Bjv{SB3XMeJnq3ivJGJ_~{;bSG*VUBj+`K
z%N~e70MF<3y#EvNnURmU&Ku(NLVOu`Km6XMme=B4;Q4#!+<7N{COpT7S6e=c-w1C(
zea4UbBK|r&+oww7AL5_Dv;O|Mtn3r6V-j0;c6$4l`26T!Z2yUeQiv}N&+%c?>@-Ht
zdA(<+bmF<s&G!FQGL!g@s1N5qg{`uRZwAl)wdYcHqi6fvTa{b<K$Oq=tntck^sLW{
zT7|{WLivn`*%^z9_koW^eCB>sTzqzTo`Y@MRa*R9cs{S;Q_35?6Y68#s<P2@ygggE
zn)u4751&`z&(7i}!E;^P@MLZA+_&bwX5E1L;;W*3&TsqnauuK0zQvNtZsNHw&haNM
zWlQngx8}LQ#G7rzC)|hldmY)LSj3+-U$)d%R*wJqSK&~5@!ZGaKIP--oy506`!Ii%
zZPQJ>H}WZ;SL1@c#P`O!nZDYGzT&eXKeE4cKjtYuGx8nVzvcYF;>W;q{LIvKxOje-
zi~E{Y%ZwJ!?}D)Y-;<0J&+me;{~o(CK|J@B`FyjknIfLw1z~+|51uaG75T0p#)lNO
zXNi9c&wSc3(>(D!mySXC`yVY7ABOTdKYzA6Kzw?{Gv}W+Q<jO(1JC*4idL({{{_$Y
zY)%$hD?TH9Bz|xE&%s9T2S4uQX7Qy^KJ%T;;_c#}qdi&w6}@(ecSHHy*Zfv7%;*_!
zol+k#dgkAWHxG&Dxi`O~GkoJw@%&CXpKq1XC&hDLljFnLhG)flp?%)rdBtVFAig_1
z_f4C;x@`0ol%FyDn)rz*pY318@22>9@Zl)GLdUz}C&M$pe=G4oJo72<d38$iL_F{1
zvA?&t{9JrV)F%@4-@ZClJm=@U7k0zzo%m?<7iW~8((R-8XYh=-nYq4*{|xVk@@u~O
zE}nk}nCtf>2Y!psf_%#Q9GUT#L&EjTV|d0-<8~>;^E)3LZ&%r;5x)!hm%sP(XB+YB
z;rV>?oX#k|3fhzVA-e)?#q(U3?NhaPcJVt<KIb#%D&-d62cG+xaVhhQ{|V3bc^X~F
z=sA9F+UOuY2l@-!XT_-E;_JgRzjtj|+US|zTW2pXz9-7}LHuWbRY`nXcs{R92b{!D
zh39;!il4LiQSj_vXFX~gJ@aGX;`NQ5>$^Qa8yP+0?cs%{;(bwnw$H7VEyO2WU;JO+
z1z9q%jrjg3pZn)WYqS^7`2(Nt)byRi^BxWB|1hSjc%EDGyCb)D^fY?*mkJa68a?ZC
zvbm>t-c#dxvvq;NM$i7${L?U_=Xks6_$Z_2_!+futay7oU(OHD_Lv}k0(^RWS0JwZ
z6!F|YXZ!3)K3zQb2RPrz`NU8BYSd>C#*;L==Zg1+=X-mzCoB|y8|zulPoB61h#!Z1
zYK8h#%ezecM|j3(=eH}x^WHS`h40}Y@yw^3?>(OzEZzqBi2c{nd9(Op@T`BylH0|9
zKz^s6`Fp2$=F<qY=d+7@#2-zhKDAcu7tilf^LbqvbVxkEOU?K%>2g#&?_se&=Ff1_
z=vkj>kIslsi+JXI!)E7s@s9Aj(Vi71UKY>wIOp>xn_m;p`8@l3{sK3}w?lo{K2JZ~
zF?x;<!;i;^?}PGrf53CmWAPsFe6RXj_vhmK!LvU)R*V(Tdqe!a*^|E$&;332mwVSg
zh_^+37(Z)*Ka2N+=X$ox$nWCE!!tjAZ}40EV0c%=TkdRs6-~GvVSZuzjDC?^d{LCo
zcu2iJwRq+i*8jo`8}WQEocXtC`;11<{GPv<t@tUZKj)JTe`FKS@7AzC);ym}{796~
z@uBbXeB${YIoqe#m_p)5qkPVvb2o4h&+`$^H*RGuF1|DJBj3{sd{#>QEO@qm+pu!t
z`JHM0-uhE3iEoVjWkEa-YV9O`F+88|=|axp`FEE1U6}&$wZuCj-?9FUPSz98d(fN@
z4DoLyp6{{ozD=*5O~og+zHVQkh4_o8zYp5;Rq{6Cd2gEIVZ9se#PfWO{ns<NqtQp>
zJ@{TDyNc(1r&!egbN!y;>!H7}J)39iE1u_T%tzZ^3=q%rGVTvw-{&Qs=Vcskm&_O@
zz9H(*`w2zcj}qS-p7A-=ajf|E@O-`vfA|<Z$DhHGlg0N%`CMQ3UG8i2jL#CDe&V^G
zz<7wOK39AP)Q98qPMd{BAAxwYxxZMv3(Dts6}5e-c&^7?QGN-ZmEt*nm<u2079>8g
z`NPC~!Q#2T=6b(w+$QmyKQMmQ9NlL0>@Q^&>@<4rFU{_@$L#T)#r@^>8$IKBa>hgA
z=i>R=q5TKO91+j+U#@3QZa*QuF7jzK%6~cTjQH;GY|opG&x=0@AA<6K<h(4tAo3}{
z8|VJ|s`w@FY#+OW(c-O<j~LIES$D)|fM>q`?GYoM=dGNdd?@x<{796~@%h=0XX4kv
z^F5f&=U<8EeOf=X|CQx$#q&GL%%>$iKZuV*eHd?Ts(%)r9`VfkrQ>YAi_Zhk@^9Vy
zCB7Ow*9(2OTRSFPk1!uG|CaDcE}r>?`vZsEQX4(v^J!iiqv!J){yu|v<`?F#s3Td#
zk3sve|CX4a&FDE^#dXakeg?{C{hO4{Cq59~3h_BQX(92<UmX8EuiA@Wit?F%&#o;d
zp81RMaCBHH@yk&@^F{8u<-~7+kLB;Rtt6h~KihNgv#R1(qI~u*>%BFMp7Xb&zO}@2
zz0ALRzu&!{(X;%94voZzp#G6)pIcv>7(L@N>TL7>>HplnO8GsH+`p={vGxD-f6i0*
zygrX?C!Xi&tk1gI9mU%qKeGHTnYxNE2G9B7^hZ6!w?uyA{koW)eZ-%I=lFSb;sEjS
z@Z7KX(cDYCGx7!N^EUr5@%`aBer}H&DSie#=MQO)d5h=%C)W$T7Wjx~zKceD9_uz)
zd=kVn+p|SEU-8V3EPs1aKk>|uYw`ZekZW^{p5^yiw?I7K<L7+l^RUH6&+$BW-KFAP
z(LNj>9@?%ndXE3qpREzke9irtpndDbbAOoScl6yPp8I2rpEhl`iRb<>`};VDo#F?e
zec0b`eGL`Q``G-wE6(l{&->LOi05xh4vHU#`dHu(^*bV-_o;Z_GP~0W@!UW3K>3?2
zXT<ZnYdnweyc;Q=_o-q~{;#c<jGpV$cH^!ZJ=;Hb(`fO0AI%T-shj7Hc;**Auj=pa
ziywjK6^ZhfL_8AD_qMrzTXfzt@!SvL_^`jrEAhO~z<klt`K{6OenlFa58~M$eeip`
z-i;T37U#c=x7=I4iSLN~%lYKpF~7uz!SjB2`9{{o60S#_kWYD@<&Yz}_!01ox92ZY
ziRX7Q84pAErxpJL<ue{G&B!3WBJwZSN5|S_5kCRG6z&_mDw<6^zoW@~QSW<B@dr^p
z$Iqa1dBsP<$0B|fFD)qkB|OKsBK_^fe}(7ztEp2l@rBWUIsRlyTgvDeZ&mM>6<?m^
z<M;mFTG8k^A3HX#s(8M?*&XGFHK`%KF6zU-13V^AEu*)f{50?CisyY@jt{*e8j9zB
z8tXHAZWE*D^PSeExp>}}<NEPo>DJ;o{&Rg1Y~4;g_viV0`(5cEp810F^HV`x#B+Yd
z{joPgdWh$K1>>_t-9AR|isx&SWq^3@KUl#Jd^$)xzZ1{)FR^E+c<zUDygf8^r1<8D
zXV$+-8*lOd*bm<sx989ML1q5){fIyRHWl$PdX86VzD_dwf@q&!*QSZ*{s!ycJZPqP
z&TrqL{NaP=h+l~O$nhl5Wr6sM@O-|7GAtHvkNm~;U`Wgo@pIvs@0@q65Pu7v^)KbK
zMtnhx{}E^(cenLM?+3pt?<Vm}P(If$x8H3QzZahK=ZZ&mh(86-@u$<gQ1N`<mh(OP
zZu`W4MET68S<4(0pAr3w`_)6NkBC2j@;RTp7<F8HX_U|To@3By@qFKw<L$H|k>c53
zIRDIA`;vIRpBssI2+n*}JlBsg@YYXm7(JiwsnFX-&-q^dsrSY6ekRAyovj~<=lYcS
z^j6_#;<-L$JgoTq(&)K<FLC;f_+^L(_V+^papLE|Gk%)%i8p$VSNAG^`&ZsG^)I96
z{Q2yyB*hc1M_B)G#Lw)_$&7w2{50=W;#VZnJ`Y{fis$=H93KYf${?QWYmT?pZ!(ML
z{EGee)FC^g=lGm|PEMl_LHms9o7d<$o+qzTP(1q=&j;gE+Kb<XeCmYyOo(<Ae-xhm
z*JVRV@s*GtnNQ1)EGvE@JnwJ2*Q+R=-zj8&^vPOP{1=qZ=XK{<b@9!RFDz)EWnneN
zkA>&_dCs)DMjwmv^SCz@|Brl)`%7c&n}}!rWjqi3(#+`jdw-v9C7$oka(rta*j9W#
z^moR8Sf38!OTkB?ed<-|BEAMZ;~^+@5AjXltx*2O+r5pR_4&NHztMAltcCX=@nujS
zj-Oc@4;9b*Kg<_5a*h<=3FR|CR(vx?d@Xp!XQxBs#WVlXPn$hSJog7Uo;>V0O+5FL
zIiCzJIa56MlR2NMXf;PX^Bw2Ir~W_6?mMjK?~ng@$S!+iW@N7<2_a->OCd6nP4)^Q
zJ9|Y&w#@7mvVF*2k&(SZ_U8BXy?)={)#L8>JzZbd<-gl?uJb;x=Q+=_Uav0BG5Q3=
z&#{#YjGp;ubpORhAA<64)m$b%51tqE`{gVv#fQPOJ_{eN5x*6l@n39bxcIs7?2j!c
zY&Lq9Khk5H(KFuC7u_YE`yuq@lI;`E_YK)!4qS{B&;6xfJg>XUqr`_IpR)X({f>*@
z2haKN^y;U@7eu~e`!~)IExs2#&npMry&(PyJo{Jl<}2d){t^3c@zFQLS4BRJLwi1J
z94mevJfH8d{P&EW_jQ-QejuLrnOXj+Lr;vJ{rAm`7vg#Unfu{md|r#^_Zt~+1IxV=
z&-=_VXwMWDpNyXSV?GzZif@hn&hh6>*iWNpyp8FftZd@-NLQ2}jrzydOevm!2ZPV6
zQkJyhyP<qOuh2(U;)lSq{)cyD63_QRSf4yW*~Di~qWpWUY{YXvmhn)vNM7+gzvFsp
z;YVBXy-^?TSG+q>SUm5WaeZOCu$Xx6-v;9OX6aT+d{XzvYB-k@-xu}gdCG+}6~y!Y
z81I9Xy6Gg|ALa9X>I30bjQ%$MPEpPg)y0oN`E1XOjcOS^^GmNhb;Wc4nZ8_n1Mve;
zALf^02OEn|e1H4T{i~=t#pM2#U1)Rh{0_7`;vt}?hxkUQ594!=QycNuaQ@49c%7=f
z__D~quBeaowT|Ms{$+nWx7t^HJ>=79lpj2(yZ9IIoWHrd^%h?Q`H|1pHJiWqj_}Oy
zmX8OD4~36M{g3S&D*iM)>u)<@q|tk!{Hz{h#D7HjjL%g?#*4Q^`~;x<tDh%|=l(Fq
z|8^&*8a>wwFBi-Z&+}`(A6Kv29P!Oje?H$El@=I1pKrG`i^X?D`HbgdF-wh}?PD9h
z!st1F*gAZT_<pEQB%as6hT-D5KIMK?XztBM&v@{886lqQQ_dd_NA48Q^(OZR8U^na
z&-+Wv*RkG_;_IV*xV~OqCQAGqc=nerzm6F_pVzeWr^Ivq!}7;3KWp@C|E&HO#Pj`G
z&R6@nUJ=jtXE~n#&U8ckB(x8o@67wRjNStA*>d|`qxXj2I_`ndbHA}h%O~RbK6?!I
z54)6oA$|&eFUN<%zg~&w``4_0-E(inpGH3A{^8{%AI0B*XZ+0W{Z+g@@*~&FyQ=;a
zKLVcPr)&CT<r1$)cEMZWc{#>fiqDIDL_cd|8u6a+?7#6Nt;F+vUU$@IQ=?4c`93e7
zZ<@T>#PfSu^yT7nijPPAT~MFHk$J>_Pvrm159j@={O|eUpTC3j>0kfL&#@Js3-QVR
z^~|U6fAxRL|Igpo_|M;2+E%`p_@0UC^XL9Q$2b3ErNr}lBOK2?&zBWHC5iGIEprgR
z8=mJoBmJGkbG&7L>{X+R_*H06{@!kxtBWrOACKodEv}~cHSnAdG~HIm=(+xCG`@k+
zN1#6aS~M0Pg8Hz(|1Q*AJoo20Up@A|m3XdC`Fm}Tdl|hK>OXRxw|L%1V*Ib`+EF~$
zv+TbqoP5P^K>P4~{8Xy$;<-NM{jPQ~y~K098HnGzXMI2MiPw*R`Xk4;jKc<sUyk~7
zyuDI?sCdqoSpN&TM~Yv8@)-|@pN|&L`3d{i$J67)mqq#X?jaM!bN?h5?ODlhs`ymM
zryL&+InEHz?`3g(8*Mp9JomSm->+SnFTMcsDf8X@Rg1*8gXesv;J~Hgcfzwh$GWW$
z{|27lr%jV}jrhtKpLu@w<H36IUEw*OvD>jp{2X|GpP^Y$g!seoJkMI+a;Nw^@Z6tw
zw%aRyJ3RNReLfrz&;4qyzYZKfZ1n8EW9A<d&;4!2=en+^#5<#Zas0nf@vQh#@X_dB
z7HKYsZvfB!_~!a$@!Wsrc-v^*b@A`f{>+c-hTan21NDhV{ZrJxE1v5kuBX1+JP^<I
z5#wjt^T*=(JtFq6ru(0Z=ldOO&#cp489nDqtJ=LadiLM5r9O)9fcE70R_w<Yqi6ej
zo&O=8_jx!zj9hAApLjho4fSDuztP81d`@^f#6!30X~Z+Xv;0ySt;93GGae@0%V_kB
z=SC4(#dAKu_K6M5DSj4yFUP~|o$`q1dNvyEGp~%Tc;2_<{!E@9g~T_){xj!qYtI%H
zUkUk|@%d|UN%3dlS^t7P%ZksAe8=;P>{T4Z_l4(pdo8V#`0GjdpEoOu=l43|(EhE$
ztBJ3M@sPhaVt7sQ?ciB{OoKY&cfxZ#bj;mA{4sdGA2I8NyZHO?%tw3oHxtkAb#VTf
zby_Q<XaDWj&P#kg^cT*r&X)2PUmBk4opwKb#8-vq@3lSGMSMf}V8p}DW!;RP_mk82
z?Pc^VzgzWw;+cOL|1&cT6z`7uvwdvu4H4fCp7W)LTStiJc`oN;0|Q4Jy%pLswAncE
zNuB@t6r5=EoX;12H$^<xFKnMNN2iM)h4zU@{cF#iEuQDI?2pU4%oopm$9z=Iagou7
zpgx|KON~Ade*Cqt|H)@vyIMTo-?2dX{f4X;&wLsU|GVxc@jRd9{OVZF2=UCPe7;^E
zcNl#<&d0MI-y_}!@sNP}r<i*{{Bz`A&L7@&IxM~x@+sT%N%>>q_rk}aKIxL35?>bi
zk^Oi6#WUjD!gKue2s<zS2t1$fDF4gi(<2{oe(UdgU3^`5wogc=TjG7;*?&L8-4Q<<
zp7*u#Zo4mjD?Hn0*x1M755cqitIeN_=ij5@`23^bEAcOrC_ngJg7|OnJipj+^n-XC
z#6O>J?YUo!J_O$naq;~j-U;OgAfC%PT9i+`9-(La98YN}p5OE2dZE?z)Z*)*KD@t?
zaZP&hoG&q7Um2WHJiqtC@v2MRtm1iJGz#rgEN4!m4}u^6G`D!>cfP+?Z*P9_%-3As
z-I!cR{7AGXpYLz4qT>6)v;Ak5C~5Q&_`NN^l@T9|@`K?Yo+)qiR`3HuD;hob1AFzZ
zES~cL&S$>6R5N<c2MSx)6yF8E_pknb$Ia-uUsQWbeesF&`@g?`)u4*pzj`vm{lEJE
z-}kTjv~MP!@y79XNAXtTy^_ekYrlAkKM&9Gw*AR=;<F;(aldrJ0w3|~;F*6Pck3eF
z0^>9LOJ%2S;!DHxd3{OQOZ+3$hwGOD*ZYc}gz~wcR)6gP@ky;uR}UE?p6gT2_Z;hu
z5YO?}AN_Gw&e7sCApU*f_dXqK^c-&k_D&Gb^(^b3Y3da5T%R(Z{`Q(Kp64~pckN2d
z7VnPV%lNVVHcvd)gB-6$o(U1(6XnOFJ!^z65#Ju3`SC)pF!Ai~tbZw&)ke?x;Tx;<
z;yIsZ`8n@w6wiFb{j1o`TaBLYPgNSdLp;};tbe(td&G0S$@na6dq6z%%U|RFn?vH6
zFZjGNMjaK;{ZGbE>e(lap7Fo1(;4y05kH(Sy)S=WJlBJ>5TARJUp9K?m#kN=iBIZ2
zTl&>E#q+)de{blZJK~c%&z)Q6zIdLeaQvTL__5J5{v+N#6W<K&&-yQqiWgr9>r?t;
zGZVzS!n6KQI(!hn8$KA%cR<-M;`1TjF@DPb`YwI~ybH>Id+xXRyYP(vZA())BwoL8
z{mc5_?2}qN*T3<oPmk*9#q;}DY|jtY8O1M0e&_fQbT^C9bAFy_OAhg0P(JH_b#!i{
zXTF=;B)|9yh)<U9Wm`ymQTS-I=Z-f;#CL+{cwRfIg!oqQTyLhCT}C{|TgK=2j^&L$
z81+9~zM}ZnsE-$X)8v)KbNpoc+`H@|ehA9v__=D8tI-FdK4%BI89n#k+PT#i&-XDI
z{|VXM#dCel{o8tvn;JdyWBT1K#aBoBaJ;QB(Np|Fc%Jw9c(xPI{cYB#WicP|>rp<}
z%Ryf|i|71=@sRC|pZE<ZpXZ?|7WEX*{T!C>)1$A^v;Nbn3=qEw^<jT`nr?{r1Mn<=
zXzXzDod2-?;rm93=X{3!C3^B$@%(;>J^D+e=LGQ&v7Y7r%+R7!#OFsoW%*8@g2nUu
zTFj3}Ps|dZ3;8h~_0K(jo_Ky=n$K&CUx@f+D4+QvS;ZydKf`mp{hBgN{8o65SNX23
z65j&(j`?E!>UH9s;Mx9`gExv_3eWcGSZAyFPw<?dL}uS%^xk-0HcxhoPl^7*`V88=
zUwk(BXq0a`>5%xs^mxCZqvuiayid#Zeq^zeM$h$^`<H*j*F=5zdo%rWPW)f<XVky<
zqDw~4cst$Wn)uqNPdwVQaFv_lTflR_@mab%;yM4}e&ev%IPv}{pXVJen;wbh{D<dd
z<pQ1=J^Sx__jvJ~|FHgh^CgJq{AV@VGwbX3;`u!&j_0cmeHPF83GaJ!pZQ%pzn@tg
ze-CJ;&u{UZ&oDl1?Nd}pydL3x4)gUxi`3#L<M}e)23|^M^!&ZfD>E29<MZ@@EJn}y
zm0i;u;<>-X=UY2pZt-pLdzoKC<MWAcfPBj5_3l7H@rU8LAG>{85%D(2M=U>GyAtC2
z!*e|US+b1yP4Ll(|0&<>#ivAmVf#Ej<0#$%p5yJ{P-pQ0@N6H)UM}LN!86{xtGXIJ
z$CGC1-Nc_n`BrG3xY&B)AHj3IoMuxa@kxE3;m63PM$hpx*uABAzF))fs#!iy@!p94
zDE!_{ui6?t^Oygj4&s}le2!PqGdhds{aE^0K7Qi){xaivZ@Hf0lX@RHt3_Y&{N5DX
zbJfNE;`u%=<G;d+!Q%h=-W0xP?mKX}(R03MTWgfjb9{K1WvuvtcwW4}H1J`N_}TDm
zf9IW(#WVl1ee5R$8$IK}%VU;!?pLsV@)n&Zp7-1Nd^desD4zSVtk0E`q2l@eEb9}p
zaJkXPp+6SyzDoQQv_JiL=XK(FKb-S{`e`>BJ;&S4Pq&EYeRAe&i{0DBGv2tL6B)Ey
zJnu7eJiOO(zj*$=LdK_4;X~phk*}FAj=no0o_~Lk=SSm?o)A9@`PUWC_vY+>#Giua
z`Qy^g=fr15K4QFmEPqKn-&bY+eV*)^_$DZy{WsI)81d`ix!>Zv^0xQ~@PTNb9|PjV
zTOj`VdlPCs5}y&C^O?Y`&%`H(XFRNb_)<LcFV`c^JKq>R>)$cxz4*qck3I5*m&a$L
z=Y592BHzVxyyE`k?T^32CzapBP9}FuydL5E4vZh)g{j1Iyh=bk1b0g(z8~6$<4H5;
z4B|V(^Y7o;q{||n`I_;t`et_V9N#z|I&R1%z7*=i@om<KeB%A!xxZAPQ9<!s&vHDh
zpQnh?^Le?(7dLtrJg<w9rNz%h{ka}2J>6bB*UQYm-ad{-&-Zf!%Q}na`kH?qEz|F+
z;tQbu98c0*tRbHF@mT*K%WE6GMcloA|9yvC=`1Wt{p<hbz<T1j{<T8;&uH36Jm;$%
zPcGzYD!w=NpE*8Hebz$!ZuofAC&%8_;_D*calA@5xvls}c=nf{o*l%eLVn@+_O@7O
z@m$Zc{Kj9piuXbJ{Jqwvdx+<Hmh<y#i~5M?-)rD}z`J{Y@z;{5PrUPB@uT4xpAl(?
zi_e1iXFRyx3NZR;#6xs=pwY8`6(12Kp8M4tZ{r(I7SH^}c*~Y2SUlIKQK-NF%bDW2
zK4pG)jGQZ;`709Tm!7^*{Ajd4<0sxbR6P4T&#xbqSuWlK<+DB4|5_=Y=Vi>lOU|zq
z&-X#N9yz^ygVD1+z5KU`=Y1Y8wC7IO?c(`9HS^uD%)5=A`;BQH>=V!RDaQxj?FYsG
zwLZmsFKXNoqvw3SS<4gRxt`^C7+3fo@qAy~1?{=|L$uNJd38T=(dZffU*=yG&-c4y
zaQ;%jFGf7)pN!84r`tx)@o;<gIPqNn(*L;sP(1JN@qH!RZBNDL#QK!;z1o2<#c!lX
z{48$zMm+C7b3df5?R)Y3{uSeS+?!A0`Tgf;#81t`-^BC#&vx)VX8sb-`_de*O86wN
zn0P(X4f)Or<u@;vO8f+PKHts1(~6Hu!iQb37JnC>^Htxl%;Nw0{xj+y<)2+V-<M(e
zd28kpZ-w!n<DpyTeB$%KvpvJ^7Z6_(p6ff`?RMhp!?XQAj4LkQ6Q1{f^0q83z9Bs0
zXH#K&qi28g|4>0Z&j(o_ixZWMp83mrepT_j@6G-j-?fI(dn118JJlA?^F$YTtJL+3
zp6%m!qoH`NkD^h2>Ge&-bG^fOh#b~J{8T(&j{i0dT8roXaL$+3=W1*8eBa9QMSJnQ
zf5rNo-rvdSpW*%1;AvgO2jlm$J@b0^5YK!Rf%bPR-ADWYl+XI7`RQ-;>|eg;28ri<
zlJD=#-Y`r&&lfm9w;3KFp7RIB&y{+C;>#hQGX6j32ogUTp7-~5Kba)n8tYm1$056?
zi5~<Xi05^F!c6hJ@5FeR?lD(9zZcE*=B^?O#n(puVt>E$aj|%=H<@2noLnY;3Cd^v
zJ1tl#em{H++GmR2TBGN9`^ag7_@^kJ^AoGoTf}pH%KozC#y0W1PsQ_>FY9)RcR+vS
zdUo=#eMZmyANK|a#q)kt9NKezt|Lb83UB%1xOhj@pX;fP`%jCn4bS-Tniegd_noXz
zpTKq(jh^e%Or@`iuY>w9KCk|`A-+oz-u_&y(X)M`mfkaZ-X{s_`_Sn5KH#S6PmP}O
zoF?N-@w~6a@z5gfwfLm=2WCaQ6VLIV_tWA7KZ)mhpYagT{F~8py}Y{MFY#ROb3Wks
zE}2u}^$0!Nzx1(`;^!fLSf7NsX^o!!CD7MeJog9KKErEfHhPZ#z8SNNXMf~;)%LE9
zcst}%?kCjVoL78!5<dB;0^<2S4KIA(V1~P$`1#1cye}~>Z*lP#;rV;5<4cJzf&9Yp
zxng8F@%7+2e`p_EK|H^Y!THPt?@HqNeGHy=Z!TR`{5jNz<yZSzT|B>c5ry%2(YadU
z(<1(3u>TXaw61s?c#c=i`Zg3_44(0}sd^LfPDyx|j4i}7Uj*Ry`rh*}diLMq5pBe`
zLVcKzf&$x%XFg*8-PEj;c#h|RsDF5&uHreK2g6&w?=GI>IqN^`Xm9cP@O!zw4w~aH
zp68F8@73=zNIcIUIlo$6VVL;Us1L{U?v?@K7t-TC@RzG&#IJ?-$9R>nX1w@C@H|fm
z95Tu1nXlK^ohF{^S-u}(nRBLiu20#&IzF8vJ{0v2LHq>oT_An~Jjb7%lNXCW4R3?;
z-P$Y@zZ9PF8CGJY_)YL!U;BPrWAvOqBwPy@&-a@WQ2&TEo5k~dg#9t~;BDeJA)m6p
z%yru({s6o;>hm(|KJnR*9~lor9!84q03V6+m+goWzXv`Z{^Pjg;*%kN@%iR!d0M<J
zJlAW(3rC9|2G9Pr;{65j3*Z?KosL}*zXqP?L2u{Y5YO*>@b@<MjTQe3<<q-5-ZOgk
z-zAn0#apAlusy$AeImXJJ;u*gYhH+N0MGk85rbcg_kw5t9aQ(7c&;y)-!JC)B%bqs
z&JRmJ{VJa4gS<bJu;-_E&gWTw_sPjBC0>v4ye}C2<+fK!@!U^i{hdps6+Z>-$?^8|
zS1Y6E`|Mt4GKmjC`K(W~&}>G}cpKKs#^~99U0m{t=Y2NDn}u}&@rzM^_Lt&!3X7kf
zgpc1`Og!(iv3&wYmlD4W<+J`)P0Ja*J>qAHZ3UxeJRE=HB%b%rgHV2}s47O!_H>_J
zUHn%3-risD$o;F_{<Vyr`$g4i)D_SE#rnTY*HHWi+^1su#NKQyzB=+R$LGc2&Bgm6
zKXQFhX_SZfbMVa9uN$@zpC(bh`1jv)9F*z*{k@()e^ckUZF}+CP(JHFB)+5gnTg8(
z^ZhZdA4}}>6<-78b3WgEN_X)*U*>q|)~2`k#DAaYPkmf){%&2$Uwkga8{^ad+d%Pk
z;bRd0!Dohwf5Y~{dO2_CNbx*BWxm+dYm9i_M~z2){9VQyJ)c*I)g<w}zsmJ{@jFw+
zw?X^x{BG~&8REIV<Nj*>(Q}NR{l%*30;A`AwY%+Nqv!nL%bTU*dH&1&sOd*mi064L
z=ZEgI*BCwX-R(}{;>)A`S$}7T&Ek1KhvQ-C<lBs%^8vdnJH<2qa{c>k)n4)8sJ}Pj
zdDx&x@yx&MFKOyTiD&+eL-`@uj~hM5!w-*789n>g-rZ-7p3f^_(gpD|(LRBwe~jl9
z@%(#~jGraNZ-{4qXFmOvGFCjlrxA(z%(#A6Jnu6w9@ejVAU-qlX#&dcGT@2$C&<^#
zF9&MA5Pt>bd!hW1nO}?dLjGd@t?}Tkc;-|3vfDn2k4O1@zOBc86@L$&^TUSCe~R}&
zK4LtlEtt$X@p@z+ycOD~>sw3lVerB5(~qPP&+ju^z&D>`C7%1$Y@gh|nZ&0>e_?%A
zIAjz51NCQo{!DHop6h+ymuPb(kNC={5BKvu*4T>Yd>|g}Gkj2Cqi4Kbbt@+REq*WC
z-#2?H@ky=6Pdq6rp6hXr=goFI7(MqhH%)XBUk2^T{_f&gMLg#lj0eZ!)y4Du6t-va
zFEx#x>#v~Gb;NT#<nN7G)Ij_~{9cY%gL*a=&;4rF|6-Nq;zy!<j^`cIdx+=!f#-L2
zx4p!3KEQnUYO}Y|^ZDKm=qR4|$2dQ6ZtN>QCw^}<`qz(q-Np017RQGYZ+eO6el^d>
z^B(Rep7*b~zf>o5p!lw+Klc+Hdkz)P`48hKs`5zjqmUmt-fm4ZM*Jyw#(&kAapIFB
ze=&YeuA3-+7(DOO?jJf;{84zu|CV|)#9LuJWc>8aIY&JIo*>Kb^mM-Xt|*`F`F77D
z@yw^(AKNx*sd%3Maz0?~wL<(~`S-}XfA6<A<g~E(^M7gaHR731ZO~u7epxTx2Jy-E
znexvjqi6f)3ylz84CQnEW!-b9c%BzCU-zi8S3J*)nIFrfj})KO`ERS(!{T}V%l2u!
z>6mz)|8hPb9&k!L&wn|dST;T@p81{gjgI*)h-ZH1`YZC)W%1l^=X!tVq3h!3;rX(^
z+@5jE==r>?JKYsO4CS-__Vy3NFG#|Fuy`V#`|TW`gDyQcdd73Mm9NAzU%R3|t{(8#
z=-uHhYJW6(=Evh%zZyOFH>N!LA)fcc8E+9gEh;Bok8u7#KWKub(Q~}I=#fS|-zQ>z
zIZ@t9JkQ@5pZSty63_eFyg%l8F{}7~$fu0wa?5jy=il><!}ER9H;?!f$d6I*53AdX
z?*$(WzcNE%@w?zT|LJ_UsQCNvb|}B~mXhN0BA>E8qeqt&?+MTSjs8s>#E*w(`!CAx
zBz^_F73yE&O=a=t;kiC)ez=<Wc=%|Pzj<a&@%P|e;nQ}kBi;(*8~e-8at*}if#-d>
zj~0!^mxSm1B;TcG;<^4!K>hEpXeGWX%4a-W?e8U?`_)`uEUM)#-W}yLUzf<*Q9Sp1
z>5Dw>BEC1u=lD5lXE&o?kM_A4)JuFSl+XU&!=s;gA9(iPGDQc9=lYBBGv(6|qv!cT
z^V1{5^ZqLDV+>k2T0Fm>$#|&TeVq7Q_`O`ebab95p6e;rKOxOjqv!Jtyg6Mw_j@_t
zbK5Z6=s8|h8#!P6So~f-FW*Lsj6NRm_94$w@m!y}z~_w*6VLmHEWg1&tBu|Y<#%7W
zUOe+V$Dd%oP2$%u|EB#c>!Ym|Bg7wr=lZ2z%AMl#BHu-${@<_e5g!E4@#OXD1L6<E
zGv4YBIxOA>`GV`s>u$%y*MaBrI+N{`c%BzCzrTHS#^~8Tjdz_FABp+|qdmhXTo!)|
zp1-$;$93`i`wRSj(d;6(jGp;%%BMTxE1*Bp=Q?#?Jim9rc(z{nSbRm4&-U!m?YYtO
zes3A)SK|47Co8mnfi!Q$^ZOVauOebTi1$VPxqciJ{zW|Rt9YS4mLq-`J<qQfHL|FZ
zcs;`LisNUSJeEe!^<Ci0)Z#gxp&uTZUi<{Kk2`*E+UXg^bA8SEp>O-F;<;XCzWY!n
zr_r-LgMQ@}&-*!CFE_Z5-{|A<d#%F?89n1|MgOAWdB2YJpXFN8=z~$80-4K-FO26E
z2p@63y!b`%e7>&RD;hoLw-?7%{;&SeeWCcDh2-xKZuG78U;Ur^Hq0-T9BYc_ehBm9
zuwQQCyWu>S>v4;7^~E=WXZdeJ-NnZuUo#$>_Gu=*AM&Xcp4ZB%t;FAeXFQip?<IaF
zJoC|^*mmMwk-s>;ZQtl4ekwfcb8BQ5qv!fGnR_?!>rp=2vqaur;`zNS_Lm9qeZ}+d
zxpRJgKXQQh%t`c@YSV{^F96T-7quTDz8pOJSNpP~#aD-CzTWq1toX+8@rbtu7bb{z
zh3E6VxqOQFrtlnplKD?JdhTD%cAahXEWcpp`Qmw=$o~HLeu&ZA;Qo2|_9aHo_0*+t
zVd6U`(LSA8t`^@Cp5w#Y!t2Fz{=@nFzK<J?p7V_cC$}0s`&a)3JH+Qk{rSAk`Ry@!
z#&d~E2gEz0eAfR}>cise!84v4#2gjR^O0!u7whno;v1m+?(jW^pD}uVfBtKO^G45j
z_Q-u%JkMVkKe<0&GkV5P$`d!m^ZRn#KbbY}j(DE`a=kO%@4k4x|I2)ozQSYi?~#A`
zyt*WRZuD%QX_w>0??66f`!rmcAfD&Hk%)(M13ri^iG0U=;aBU6c%J_<KYq*lLp;xa
zxnI5O!Ef<=UpNHy58s}mYU1?^zsJS=m2!M)@!WrAeLA&FFP{5pd|&cl;f&&oqd&6#
z%|B)lUkRS`rSRi9#Mgxn#QU2|=j9g9{cy%Zr>^<MbNu0bhBi)x#B=@Vis!W}RZ;Og
zKaGOVe4~W;w)njqKUb_PBfbYbpVy*c<;8P77>xRStY6XSIUerIRav|@>SKrJwfVV=
z_+IerkJa|Ois$!5`MsTUQ{BXK|Ii)3_e8t;M(+z>u(Z3;b9{UJqpA3Q_`O{3)I8Tx
zJilMc@|Q046wmny+p|pHcH+4o&UkxU-A6q4x1-TMyE1k$dT01Laem@?|C#$m*CKj~
z=l$m(l>c>FU!%8ypU`fAc<x_uJvFH05b-?E<@$Qz*Wu##A)j)8rtm+b#Fs;U<nw(P
zGFJQoc+U6wcAp?V4xaPLGtN`Q=RrQ@eaJ&;ri*7j<@nI#<}C4pP(J5xx7N=S&+}Z?
zr{eGsqi6s6SbvFl-e=}`zAsmp_;08```4%!tHe8Te8BkGfB!o1CEytk$);@-pBJ9<
zhZ60!isyWr^Ra!Ub{IYTSN0#f#q&Or3;N^D=>0~|=hb8BA@R(=tpDsjM~yxJ_3@~F
zQatl-0{r6)XT)>Al;cCqd*{S+Ka<a^a>OO0=X(EV;5G465D#&v|G{QA#dE#?*Z5!X
zj(D!eIX}t#E>3(X>cjq$_Shrwyx+_C={onB_!%gl@o=O|ym+3s^7l4(OfY(mpZ6_4
zi0A!bmS64KXQSuyO}6&C(KA2J9`alKa<mWYQ?OnNm&EH4ejmdf@iVbVYNO}=e4lse
z#IyYw4<Dj3h;NB}>Wccf&&ncxKRnkj={x2S&-Y>3-+!0OEj|SKl>1lHe&-X<?>~E?
z{tYh_6#pCLbAEnnc@gmqkdOF#llzwtKLMWehod#h7`+ARzduuX@vBfi=RcX_9L4i{
z&iuVABAmq^MfvQH<;S{+=lv+oKc_c$HTp>W-h74JjQ%*jPn-E&J@HB1zq)p`k<kaE
zKIP{&70>TQGanu4(o#I{cX51}TG7+!y-}admhFt*4!-}j4&p5^URlAPThm!Qzb{SS
zeu$s=b|^m{<?pN8Q#{`fV*E77+1Kb<zV);I;(0%f{j0~`!A8&d;n&H-#q&O!J>JKk
z(q@$Sk!T-&zw2>{u}07Q8~!cG=-tu&DbG$8&-=;DkMl!=#q&Ne<Dp3JS>l87dzoJf
zR-b3|+^@)N9b)txpVQtA6<-wfiNJcnVgGXROW?VldNp~K_@VH8A0d<1I`M;$Pr1M0
zSZt&CL-3rxP5ZP(d{N{(&W9VF+%A4PJmYQPg5Bbuz%$+){Pv44i2TC-*w*Qg_!{&$
z{~DL-sQ3}^Z2t|{PlykJXMIww`$zolBz)(g=fq!4!h6)aB>o{h^Y!DL*Tlbr=kv9G
z79-vk@fnEmVd>u6M$h{>Unj?juZHqjpMq^389m$oafxT*-BCX4U-R2b@ysurKc|a+
zBfdS#k3#!&3Vko0<3Hp7V6V^Ov!i_e-mxy<#q+)~=aYA=ev40Pd|q)Ud9}pr5#Ar>
z`<_2HrxMTgqYc_;_Ly|y`928qUB0Fn#B=?^@`u}I5nmbYNuM?$yLg^QaC}=7l}r3z
z>ow$y60`FeJ>#u;r-DY$^PL6`MU0;FlRB0q#7CfgxPQ3xN@?-DFUS7-b(OvNvM8VR
z@fhSNKJk9epZixk|L^yj{`2<-XSQ+{zX0VkKRzw&B7QQwE8_F#n;PQB<33dkzF)NW
zP;K$&;JLoeG^3vQ8_3u3sLzG=jl?%bJ`IL1R;H==weWH9d49GK&-afwU&?T<wfHK?
zFRah9rESIg!3Ux~C;M~|KNp_!nTgdp8+|m&e_-t=ejCc?{=<N~J;d|;m*p?s(nmbM
z#}$D3lpNFF=y@NbdDFq-dA`i{-)uYF=&ewnY6$`2lR95s6cs3*=gS;#Kh6p=dhTaV
z=rmb8?{BcbH*g3R&+{fP{N6RmXBj=`hZV2P70>lM_giMKS}5KR;}6Hrf`dYhp8Jj4
z+?I>y`5pUv&Frg;p8E-x9<Mce#!vFS8;qXu|90XQqi25~>$zQgGPEbhtIWlBi|6`_
z@wwv5KBMRFE&tC!qv!hq9~T`ldX9(rdY&+P)_<JKKjJyR<@~K$`g7u$AL)}nyC^;-
z+MnMOD7gEoc;1)b-v@D<5F<Ve`H}H_vDIzyT>nO)zkA!oiRb#4{ddRvhvNN_Poq(O
z#^X=L?}rbDPciSM_^ilB+)wz_<&F6A@Z6tyQQ^J#_V8Rk-c9jY{787lf0e7>#Pj|$
z??)|I{Y!jO_n!|9N?twjdgKx6!}<ARw^ZVJUz+CyHM6G^&->C5cwS2%TZ`xYXXdX?
zyEBXD{bxR}gA=oh=ly4nZ;d^3iFZYRWPFAf%O{@qpV?n3e<@(}jOU-H?Zoqb5$jWA
zQE{VZ`OkZl7T+Adm-(ws6?^f#FU0wI+Vqa%`92r#f0mD}B%b$$IG%spSXDgdC%j)V
zA)tnM-sj=?kiBtj@thAZeysD?GkPz?f5q1gjh^lK^-vS>ZScIf{`HvILOk;|+kcc#
zYw^r?TrbzOZ!7+<{eP_A*Cy{Eej)15@ooO4PU5+L&Uh}eva9&iDF3hLJF16x?&rkd
zd985oBcAck_4t=O{l)WrUXHiTUJep}8Tr}*^%-_xnD|o2k1W62)By2(|CjCAu5F<B
zl_;O{=R75Y#Pj`M&Q~*hn<U;1`H17W)0t`F$G~$u{2e+|{3duluZcb9ia$e-^QIhC
z7m6PU?~dnnEnTSizv2^qaqKdqXM0ZHxKeyA#6R=zyHRV6p67#`-8YEm{Taqv+I(BY
zyP-Zd_`T;|Z4=LY!T9`maF_U`^2Mte`@}O}#GyXfeGZCezTkRxO}QiDxjtoosc3OR
zd=T1)>+$v%PaFMT<Nu0iqi6qm-2bBZm8cKTTWi+3Dt;n7<0oa-7^CO-JpW;=`1vTG
z>zy_`?}_L7%L>nTSI|SF=XhJk<EeO_M=(D76nQD0`HSPv&yTN-p7HbX<U8@}(LSty
z^M#*`J|69JzuPzQJYQye_ILgzp7-TApFf{1d5y&D5qkdKDGyVMXS@ZX{=>GX6+amH
zl=BVCan|C`!}EN+So6%{D<VH8pgvCvWEVdMp7EdYt&Mn||8jor5S3Rv&wsf;_I-8%
z@jU<K`z9|s+KFG6M83;XzPR{i@SLBoO<r33NqC;eow-y_JlC^~|EVh~h)<6G!u^We
z11gE<dY0qQ;96D1bA8JB{G}{4jGpyR{<xNSu4lRbaBxRm@qGV<>zA=X4aGl0`*S}k
zvquy0ynoB*Rk=tD@ti*}e|7rkVe}lYzMX0#p6{oy|K?lRUOexgaDKJ9TPN}95I@Y<
zX`Q=@=lLx2@1it4jGpaZ;%0C0JkO2B_%k8g-{_f-vX2;K^c?@K8x0fB`@`&CJ@N$n
zSO4d{(mU1ae}6Bcg_VWHpZ}@ej1kZ8k#c>y`sjG^Jdfu5<i+$!;uGKB`%@pgJw@g3
z-FSDICZ6LD*VlE+&lJ!7TlV+!zvqbO_mQ}teDM4N@!U^le|)iVv3TxxF(2I=u}nPY
zhm5!K4OfcyL_THw6v(w!{2X}BKjWT-i~k1C^-iU|o5goV{^fXBYVtPmOX2O%zg~Lo
z68{OFzc*{~ec}sayyf~R{ntqG9pKr2%bt!B9{|t!L+g;^;yc2-;P*c1ep>u#c#dy%
zt3-?c2+#GDQ`(D0&-grf^NRS*D4+3JXu}Qh{C*Dm%jglY;vF#lN1=UgHM}RjCOqT0
zXP$>f&;0W3<rDGEP(ItUVB`y<=lcD{^w&loh~GQ7{X6lzPvwmLz@=qAiFZW(IiETI
z`>Xg)N%*(te~RaQsyNht?DAx;iPs~%55W0bc)yh5nSX;(er4CR;+enLe|u)J7QX_&
zm%h#YOh(W7RqGwu#Fs(&{GP+`aW>+)9_M=DT8q5mIUi=cbuC;#JokrP(VidQ7Z$%3
z_2+my;dn8lXa5~Fzm(C(qdwMt<^HSxGk*vyR#?7&<zBCXc<v9deOz-^63_Vq<L&wV
zD&hy?J{9M;X(FnNuMf}h-#4(9c)qXXj`p!@R#!Z~|IG2KcK(J&&*y8E&{#b0Ycc*y
z9cnI~-*b*e{qxW85O0C}!ujop4sFEqeIkzM*UPpS&+jd>e23p1#lJ><5>WrP7ktJ4
zglBt>Ti#u~75W$FKXv_ki!TXpf%>d;^%q|sp1=23ra|JX!gGIP#{Hq<8^W`FUThmF
zp66@qk6Xr#F?z<&wHD*WcSn8rdlwg;B)%Oy_s2SXm@1y<aqRD}kIxX#{Y?JehV$o$
z_d$Kwzt(hJVDy=Ao^sh~v3SlOI3JjuYMFSR-*Ns~@Wu-9El_{X_wt9Y5kCW-{iWux
zaHD5DEUmv;d~uY|``evzZ4=M+HQT?#%bntvqkPt9*Z#fYc^{kind?l86ki(UbHDdm
zyD0Jez9{4Wa+%{s&v-ua<CJ*bujcP<7kgHG0o0%S!z02ki0A$i=Z8IpT@had>r?*T
z>Gf`iuMN-jLO_mK@%&y#JjPr9CwIjc#QHQ4-e=bX@eAR-;U`UaBK{aWpVvr_7vlN%
zkGLMcQRKCF=4-Z3g->tAk53}s6+QV;Jiph$`EZj3UyYvmC};Pd;`#R)tk9mzoRZZ{
zydL3wX_o&jRZ8)^FU|NYbR&&;jz1g^N3XLIUkUvs2KV{<56vXr1D@ma<@(vg^L&=$
z;Wrx_@v~7r<KN?X9`T;=!D#>7`)$SZ{tvzN)WYI<p3D1kDccnjKNR(ez<Rk%sZ!!s
z!*e~@_D5Oqli}IFc11gg|7-n)d_7{RllYM+pZR@7pDN<H-eG(GQ?0tub9`=-p_ceX
zs1N5e6YkX!zXzWC!<)A@FnX3>EwHh8o}Y5PQ?Yq-@f%PdmOs0ohxmQ)?7#codWq+J
zhW%yRQE%}}Q9j>KtU0%%_)YN9=wGq@eZ_Nr!uj6YYTd>2{FnJ<SBBo=dH<Q~udBEF
ziGP9oyA$>QvT>kzN8~%UXMupB;zz@C|KVPvk>Vf2bG~;a&lvG3kngykd^UcZ`0DUn
zAH6v+QG8GMIJD1}X;Z~FfoJ@r^PVAo7d`%7hC}H&;`#SyIiH#FW4`#r=R1GCH_q{=
z#kob|^CO-k@OyJCTPmLWX`G)_@4G@g=bs!OQn{`%dX|4QL%4X}ujYJUYTPFAF=&70
zuk8^L;@hKrcs`XbaHsfG@a(@`o9z{E2hZ{CV}VHVTn}2|dF_9DSUksPj#u}O95Z@%
zl)q-qDe>HYX1rDGa#lRYTjuN86)uRMiS}W>@UXmM^cJXp?rYb@FGKnCgV)>=&-E$C
z+mu7@is$((|31{2x(~#2eai7_M$RWj&-rtUXU~nE{bkGESK|3SH^%>fDQ}IQ=hutd
zd^CEF4;@N=70>U#albBqs-NN$zc2h}Jd8m++`MX0EAe`S_dWQ$ey*|<KMDDi=LPWt
z(ultV&%bY;t+ti;%E*uGUum*t62BFm@jUlIR`KWHS^lK$ImLg4cSU<{9hXOZZH%{E
zZ?0-#E508*<NtS|!s4gHN1;AN-xn3XAD;2q<XB1Z|G;y6t~Ix;_^0sfFX_8Fi06F<
zKCjM>PU3k!%lXDs%PQhyQ6J{h+}Em!=XoXl-8D7EbH9=GUpb_X(Z}O?`PFM6z7ED`
zj&DVCHWu#;&;GvqX*2Pq;2Cds_p}o42hVuuJK4+V`M&2bFK_W&Uvs_Cp=3v+=lz@(
z-?|t*=O+)&bQ90>1;%r_&|c!X-Vem{J>RRJ(c8n%aTzF{=d;YeudRlP=l%eH@8~-t
z#B;sR`AMxUqs4Q*p9%X3mq(8?dgkBGO(%-ye2@N+?Np;@d^Sm#ZuG2wmLs#pb3V!P
zdoG!8^l^B;pL#74&+n6Szam%FrQ+uzpK?6OY_&rCVR+tm{c&@(cpKz9&Ocj)uNVIV
z<#Rq$Z}=whktm<}H+6#u@!2t+vwxkk*(tszJo~Tb^F88upNjpZ(Y^!X_n>@^S8Jyn
zHhSJ)J>TY-c-}vBLHryoaY{Vj=k<oq|Lu%;-hbx&WXqZJ;(6bL`@PjeFN<%Ce8J~+
zzSni5XZ*}@xn=Z>&xuxdjXnhXu{rMC7ti~XjEA+GAB*Swng0B!=SFXZ=hdOfE2C%m
zg>2u7=ieh>|9bM~gVFPTa;>N@;(1=ic<VXqhj_lv#q+YVoh)i6UXKJKepvpy@|NPc
zp5^%5BzYR~JYQh@+`XJ$Jm)9$D_3O{KNt0<cNmn_=(#>BStqA>?w4|Wd!0Rx(X;%9
zPx6cJiTZPXGGKQh@!T(BzD_==sCdpd7|$m?ONviC-$;C){6F8n>h4_jzxqGxUycvs
zQ#yzrh~I02{@C?WMe)aRpNjL(0%4WKS3!Q{c(|!wHSsNxAEQy9uo^YR{{zqY{M?Ln
z#PfR^jGqJd>Wk<5L|k9g+v+a9H}WIf|HhbR;`#Rnx&Hdyw3T>%AJPi#)2@J*(R083
zWkNgg{61t9%CCFGM|?8G59jAAXLm7r-hX!J+)aEYl+XEUQHNgQZQ&WuyOZ}bdj8%K
zR|bf8NBP`O&bVfX(X+oh3>qQ62FmC7-_~uk_$Kh|FE6r<6VLIA^X&(ZCy3{G#rbpf
z-BXO7<DtXE>EeA*f3{~y&)MStx=)4k`iaHniw{Nl%<m1qgosaSfBV+yCE|Jh7=-?^
zY*Cna-mi{;cj&d+=sA8)t+HM`?_+cP*`98b_|j+}#%GQ@TgCIf6UW<Bn|6p_h4NXS
z&H;PG^Zdvi?bEjL0rC9aBj?Zg^B)$!2K8ZlZh3uFJpX<N_oHIZo)jN|@*`3I4vWr+
z?+qUe-?;mE@e`3xx&E?tzAXL-Jo8IP>g(bwA)m5+60YAAKLDQllM!q0i0As3`(yov
z+!xRFFUKqA`j5r){ant6Kj(ZdJ{bAh1?@lSS-kj)@bU2V_9lq;hiCaWCVwz`#@lbN
zFXES?e6BAJ7ylui-w&}u{hxgKEuP;GVLaFRCxu($^$Yj6+21cON-h4c_mxnevOUv_
z=YBZX?}w^nG<w#jN&2kfYob4Ld>ay*!|0<?|H~V58$IK}Z&ZHq%#R!&iZ(7Jp81je
zad*C=;)~+<TA==QUzZTy8J^=$-$P}Lp5xE28Rd<h{r9L(Me$rO2cZ7>?JFBS?_WKz
zs3xB4BbGnllB@V}XdmYH^DErM^FAKu4|4|8H+p;g-a@tA#V56X-=4LZc<$%3e`R>o
z(&*Vf%XWGiJ%4ZK3GKvlz0deB+{wr2UC};u?YoHg!t>(qUH02gd?4~E$LAyGdy3x#
z&-Qt=w6FM-$ftb1b@~ku-v^%GqwuXZMEo^)u75qPM~DxFk4Jkpx-&|=JMxh?eEQ8}
z#SepLeJ+feAbt(J70N%>c#8Nqc=pGa`KF7%0?+op`)ZbW3&aoOv+tpK;`76Ey?JIv
zi1<eEyua7hXNl3XKD*0>iRa(L<@tDBi`7QYe7f@DI`O=}!S&s*u#H9^jpzHR|5ovQ
ze~|Ol7d3Z?=lu}+2U+%r=lK-lq58x9;zRJfSiawmL*lt!;QH?DgrnlQzs>pcA&-;d
z!%-i`L&G9x#B)ACU+dF3@thAZ9-K~I63_c!+|T*8;F@@@m${!awcAbcTkv~1A8z7&
zNBjzS&Nqgnxo`B0=PEZJiRb$}oL~J4e<prA>ce=OF(O_(*R%958YYNme7c~2ZOQY&
z=y`ru<@0Cp>rnp)lz;N%ckw*0=YC-0`M<?SAfIx)s@XL~oy6-Ae*Y>4`$Zv+sl{{u
zIUe=5vrI3Z-@jt}Kf01Zd<^m_=L4>*vxqN*e8m1(VNee7{GK!OOEI_H;<;bV`ZUd!
zU;HA}hwZ=dQ9<$i{uSf@%FZI<dH&1#mzz*RJkNhw|JEL5#Pj@@^ZzGB%8TcI6vv+o
zpB%;WyqNRb%O{<Up63gl7rKb&_phQ6pNG1+if@Yk$o-Su&TdA}{j|Gj>WlAy@)@6f
zZ#EKN3!eGnS9nwL9pU5fd)tm^Y4nV@7Y#j)p6l5WdD@BR_i{PDRgdpr^z1Lm4|X<s
zEBxN0!G7YIe>tA#Z{O4C15tj%vVFz#J~sQ;tzZ4c^E{gI(DTAz@mybXK2SDnxY2u~
z{)hZW89m?U-R?S8ydUB%1m$nYJi+MMKB*o|7SHo>&Ns?#4;G))`gi8cSw_$CVMP0R
z;<>-g{<y4ki1_))zueF1{4-Si4tT~x<Fm`f=SF^H|INH)m3V7<yk8U2bDenJe`bFS
zuCh^l6v~f6Jd8=VReUStNBV)cwu=vh=lCDGVYhgG4~p?wYUF<Lw@^OgZBnB{;=jN%
zesbnLYV?f%8u2H@^Lx?kzm*RDBR&WEqYc{sQ}8+QMc~=~2iji}Zv!8P@^h5ECcX|l
z*LT%_#fW!?w?O&l&)*hb51#XrIm_e3cZFyBzwY<Q=ot^AU7v~fLiw!!txWOayTK>m
z_x8O1#_0LHPHuZIp6{n{|LxfL&qmMpJ94-DE`9>)&;Gcf@Ne<9@Eku=eMnw6@p@z!
zd?4EA%<)u4&-Q6MKb`nVD4+Go@0UUR2>3|UXM|H0qvw5(bg6TQ=lwt{l)v~!F7ezC
z;rjjPx_m~@`NQjB1&yBTwb2cVi06LGi+lHWTm0+af9_vBDpo@LXtXEihyI^Si|78>
zU(f59z4+_6f8~$%w4UQAz5wzs$8-Bm&f@w05%)Lj%Dad^g#5_!Cii5n;&URuxTF4q
zF4Y$Q*ZV~9OIFkq-wEY&y!za~k$C?71>Wx+U$d!rp11OO-OJokJkMK$QUBBrT8saL
z`t!cZ+3jt`r$oH5e4n5W;(6Z6{yV;9XYtIxoNsI_>?fYz17Z8be(WK>BI?ikMGKDi
z5#JJ?>)Chn`irj%&+%kj*TLd_;W<Cd;xt@5*DrB+zAICWGWuq?kL`CO(CFh){?T<o
zM$hx07Q-fs=lp^3^PqmPc-}AK{=k4-vy7hQJH41|^wIde-}f&xdXDFXriF^<`i}9x
zz1?#0{C*nSKSSwN;*&Z*?fGM^(Q~|AaBhQmt_Q8qK1G*p5zqIhIDdH4Z@YMYZ;kyu
zOO4&)c|OAPyLFlNi_eDs#rpiZcTha%1B{<zkw?TkqI}K=9!xzUp1+sl)#Wz-h;M{^
z%KEe~aZWt%U$OjMUoML0{VR?quBWexAB+5Jfq3X15+nW=JnQ4#{kC{J<Ri|v^E$_g
zuLaNbQSCI3#P@|~eR{<_6(0`I_0FmFFU6mNXZyS#{zm*`dW_GF8oU?(0X`b-KQPy4
z@qEA71wQooH}QoK&upJk`+tddh3ERQ#nj~W60b+Nf6MuQj&`Yxp8b75sdVDmf7w1x
zKdi;`{u1Xu9ilUf=lhcMg_dR)&;47@2O9RtC4M^Ell%D@s^=3Q2=9gGyDURN@!T)v
z`B&$AcH;T|4&$L{L~*0%dcR3vX`_!v{qHuj7ti}ejOQu^9mRA1lk4j<Zz~x+_vb$y
zttx&c+W$w9@Bdz}Ipnmk`13#i+!{u2h2LAZOKtJY?_4ibcdRF#`8OElpSNrzeh2E$
z{M+GL6Y&e-`Mmb8X<_uN&-Nj$|0kcmMO*P}Q6G-aWeau?&-?a_|A`5m#P3G_jYfNh
zAMPstA-p^M(wRNPyC6SuK33ePkNDN_9Dnkb>o5KyJolqA{T?JfH}Z=&>VNV4F!A-^
zneR$34-h{Pp8auBzd-R@=y9GtvPO{jgYb;!8yP2ykETcd{e5qm_^<E@XrE#cGsUMt
zd@?`o37jjwC_Km8jm;K{cZ276d!t~e(KEmNe!EOO-zVksoq2Sn_`0YM`^&gFYsGW@
z%k^E|E*p%V?*p!^utj|0{PpL3#(BAm{`-6K@mVY^{`?=CZo7DXPl@{jgKzB;KL@{;
z^UrB(_lf7<r{;PvVc0?OywAY>hw62Yi0A$u$J?qlC&Xt#{rP-PK0Pg-<1Kxmz0u-1
zKjip4dh$i_iQhl{^FArpQ?=S$6~74e=l<vA5;5Y}!*jo-^S4;>e4i@{{k`bfdq&Um
z-*KT2jh^pI*6saNJm-fTAFjK+G<ufrXZ^<L1Mz!9UcNJWj)yPzeG<?4GyD76$=}4k
z!2UDi`IqM}@g0$Wxn3w(EP4IJ>yhj591oj(Nh!V@@~JP{r_af>;`#k&=Jzl2t;LT-
z`J8_i@XIVdKk^axqjpxxF1|ZF^U>;5xx`O|Xa9=6o>x4-hspRkytaV&ohYBr_vsKj
z@t5Ik(Ebtii;Mpa&++q0&eG!ZVSHfzI`y=ic#hAEpTc`9h%bxsIetE!TuFR8c;=U(
zZK{gr_XIe;T`5t+=$Vf$e6MBntbeKKx<=3VZyMTAyd{1w^F^&*O~hw~=kL8-wS{<|
zKXU$X)~dDmbtpd`@iy~L8>6>^-@UoLc%JuhzMW-sC-FS*<NRb`)2`x|p#FSb7i@d{
zPrl3B-r_kwWdA)7<u9K56`Y^vm_11RU-ubs-)3#6Vd4|d_x{WunD2Ty1c(nq`|!ST
zij;vy&;0xO>Ui<oe{exOJXtkKd@|IB<4^su)5LQ;VLbe9GE+R~4;&9$=btNn5%MGR
z%a&IQ#Gim?Jfu9hSbTouJNmD|%ft_b=lVCud!=};f0>WmO0O0F1Lbo*<NPCBd|l)h
zj#odTH;W$&UjXrtuw<Kfu79oI-TUk^dhTxwthP@)*T2lCq1Fe*^LvkM&(C+F#B;qI
zhx)hNa$I~)#6Q=w4@aLC&-F6<d-|r);(7kd-+RIKqS5pB9(!{|d`r}y`E*j$4e?wr
zvp<fX6Dxio%IEwxw$nZFe(;>XRdRSJ-U6QOIXC%J@jS0&|9x}$h4}6$-vaS4X4Px)
z-2aS+A3Err_=zZ=>#yZ*pNyX6m&^W5Jm*)8=l73)is$<#Y@a>5lQl@Z9--%WTW?ZI
z@%&y2`+HT-wBmW*5smizUCi3(qu^(L$t3=-_44+2vLF8PbT;ub@Vxl<N^&l?F?x;<
z1AFEb&-cIBzfx2!Abvoi`uy21^7SqG@BO0x+`k%~-%dQ=7vuPl?sYNo{Qd^pKj+?3
z;+HQ;^RL@q78Ys$_5aU&hVy@?iRHu}gy;LkZ9OW8_eQ>Edp@?SB>p!%>(l>374d$^
zr}X8IR~H`vZ-scXn^#NxH+Y^G+xXTM&+lolKUz696yF*7n$OF^vWfT^@a!+guQnHd
z0G|E5z#0$n{QL5}|5k5s8}ZE7e7-m8v={#Z^|3(vhvn=fK24(j@+Us|ygEMhHTrmz
zAGxQy_^2f6^Kepc@vq=HpLc8HFa8HS=jWlt2Z_&(-^=l2=9i)3`93(?-}ax8;wz(k
z#?Qz_W5hGRv;Eig9B=fzuT`n)B=Lh$AD&-ZSWgq*5T55v2V!R!J?CQ&H_j2y_wU%A
z>jD;t=ly5)U#q5z#q;}4+)p@_Z<+X{-e>WAy+V8{v=8(3(?e^-bAN#2=f;`g|C3MM
zakJ6Kpg;b$-zJ{>4{Xn3$##k7dNUH`+g{!)KB@hLM_VGr^L;V)mkR+=;=R%SoS(mI
zbX<H8@*U6LALKqQp6?4Yp0B+)E1utf4n+HO+J8Yj-~aW7FF5sz`2EO_e1B?G+Z*C7
zF&^5Xe3z23;`zPGIC$T0cf~hB`P@J8I`cq0zgM{)<?melL_E*exZb(l^M&|ps1MsG
zMb+2h`MxmQe{TAB;*%rZxc_+|_M`X$^!UAdH-8n+^E>9#*npqnYoPo9l)t=jvWAJ*
zBlH}vPUTB!^o-{>uhNKjKz&$#qeE8Wo53^RWt^EwJl8wykEuIm6aUxwRG!bWepzU5
zBi<kNVLm-<kym^xc*eio6<eccyxm(-SbXC3%b)oe%TGO^nD{r0f5gMWTBXGEK6Wtt
z%&g_a&%y8Ie09%52czeBTW_b6c)p*-{fdDTs)(P5`mjAyw5~3m?>Eu=6s;wm_mepu
zzWG$g=-HlQPBjqE^9#;TGKMrZdKWye)IFLTeKdSX9S@`D{A5qoHsYJ2{W(9p^}t&^
zzdy;}>#)6}`0dEoT>l;#>nlDz@?!vgZ}#Th#rwkZ_g*W|Tl|(J{ON>#;!~qPTA)7D
zj|>#g`_EqR5wnJh?~C#oZ>u|wG<vp=Mfow}dH<RH-8<QM@x0H>^2cAAC_V+^#})Ur
z>aCnAp81i#x8Hyn;_XpB<85KBIpTR=n&lVEx<I@u%IA7&&%;IHd0(3ClXd4(qv!bF
zFKC7M=BN+jt%AoI@x0H>{fc8n!o_pF&>it<`)QMS&i^?-A9*su=>Ho37w!}vh~LZg
z<ArW}#dCeZ`P*FQNb%gC=YEuD+9>hkP#=ybV{RT3&-FOtGdBE`c<#4z{&Qu-S@GOI
zkH_=s(&&Qt`AO9OeV!}g`Th&zKTrI1qmM>?vL3u;^lZ<n)9;GseP(Zzf42Pt@!W6c
z{N!`lC*pZOjrDo?>$%Z0KC{KX63_W9`%Aa*x8nJH`S%2i4*w{AJo0H2+NWXtuj2Xl
zf7zbba{d%w1o@HU+x({%jS{a%g5f#dPT6BA{yIF*%SKH~BR(_oBjexS(@K0bcq_Dz
zeX&g9d(h)PL-6OU;upa4_dYw7Q~V`(#+zG69`W3t<bAW=-EGBly}<jKKb#AT|AqRn
zeLT|^6Q3933D;9&Zk9B9mS1~AS@ES%ejuJ#uMrO78^GIPzHzFdlXw^SAe8T!r;7Nt
z@XTLNUse;(`@PX9e`91#qvw7|>gjci-Wk7lVfzN+xu3@U@M2{fi|6`?{e91`W=7BX
zM%D|h#B+Vb`rKIVCB6^ZpY0jy?=3z6p7SN2njOV+z7&GzWt-Vod}ox;_{{mBn|Kd+
z#{a<Wy~NLgXZu$g-%mW(`>fBYmIKA}{ygVD)9i*CJ@*^Od>A2~>wV_m+9yVfXMb@)
z`=?$oPCWPjz2O}PP884m|0sB`T2sX{U$gzUW}YFwF!C?k-zjdk_@?meFEh5z7r!2!
z@&9=ABJquoPnlnCHd!iueiHs%{uSb1C*e!HSuLLLE3y7N53Lu^`&t|y*3Z}^-WU0c
z^XH2lBE*Nmvp<$Dw^RH%c;4SD@OzK=mr3}D3kSr1gXenCD(tZMVi+G7KNb9s89n3w
zv+F7GPAH%Iy|$UpisybQ=fmy~&Wo>$^0_`5xc#ztzJEmDZQOP7^^+*SRLfi9J>hx2
z(6aDd@j>vx7*85~xG$dfqZpq9k3SaA^%~p1(){P*xnAS^`Fqz_;<=t;zMJOsRy^PL
zVgG%a>Z8%KJ#B7&5zqa6#&hcRKg0*4{W(6I9cJO4cs*hR&-W?XHLw)V`%ZkmFLR|4
z&-+D@h=;8&(i=VVSB(Q1jh^k(ZCY0GoDXn6q?C6~@thAZ-X@jKBR=tY!JqqAaaD>&
z{p;$}|NH*cQ7c>V{C*nSKiBO-;u#MXXwT1Ui;AC!_m7x=a}Oyg{s=tRQ+?dZinl|)
zi^u!p^RqdK9|h0&^mtTJd;yIAye~a!XJzqxe~06Ve^52?!%;qcNUNIS7s9juez2<}
z{y0468_zz}7yp1Be=mF333u^t;W_^Fp5IJ-e)M<lU)lS$GJ5vMU?(r}jZi-OW3$xW
z;;X~+{$$(@AMuUhS^w1QyNKt0wF~-7^ssJ5&-Q#@zn6IKZ*zUUCs#kC=X@jJ#Q^bK
z-_hULKSaC_+K2JnZQ2O&E#SF+Y1eMF_)hR~XwR0V#~D5IZ_b|+#52FJztlK4Mf?EN
zhwnqBST^10nZM@toh_dEi}QiwuJgq+zi_@cCgUQb=YCYixFzB(@OxSRN)ch=|H?1;
z{y@30tBs!h{eAQG;#Z+QR)~kDg*J)jd2|qb*7sY*b3cUb+3(m6@ky;`FNN(9&;1bY
zCr|2oKs@i`vHi1FKP;a6&jI+o$*qrx=lv`0A0EAZQv5fpe_8&xO=raWBmeSwSqGdK
zzcC5FsL^HdACvGO^IR8ikNm~){MpN!;zz(opgr9p?}(oQ&+*VQ_`dkv@NEB%-jBtf
zfam!|Lh0w?*?&3TbN?AHJ|p@U$N%-`5{y0??PIy@gLuvd7(X5Rei6_8VGEQWS^bC6
zv;RKKV9_}7dW7=_*8lds6ymx6%y<rqNG+cIm-*#XV0!V~ALjG*Y@ShkQ#>!W=hK2&
z#WTP2_tt)w!|0i>uN=*7^xQvLI5)p|j)z<y74t1*^jt5*I~Ens{X@pXJ<F0t&v;vP
zt&GvL{kyF#FP`gVmj8K3Me+Rpl0V|VWxdMcc^`n~2ijCKdd@f2J#!V$`v5MePo;fs
z;<?}M4*z3Heet{x!1fGo>u&U1-?=+A6Yq!q!u|FumaW9|djj-6S3SjdLw;oc8n>#Q
z_$c@&w9l;pKH_sB-$lZAt<^<5zdy<Pw8_#<JikB5zh5@?K~M2^$VV)H@b<pq`S*W0
zf4($sfOy`&DvjTJyu}dlp{P#+e1XCv#BYH2g3tDTl=vI)@$mk~#)^Le&;4qPc@xBE
zMSOC;THJSvc;2Vtd?Uzly3zCew0_Fj;<=vX{9*OAc}5?M_HkSr@;~|GLzakVzGJ*i
zt`}zXoWBL+TrHmKYyMuVXY0iCJ{Z^I7x!)y&+|>jPsb@+jh^jk*LH{amWUsY|9eaA
z5zq5ej{ljy?>BnZztY)5;?uJ}NA&&HAE8IZ^L)Vy@l&|>N%6c7#`(rmmowrAqdwf<
z+hl!S{9Jgh7gFE7B%bSE`h{DriRb)~@81<0b5lImv(aduJx%WzJ@aWqf%`_!@#jXu
zBcr!ReH_m{6VLk$j32Kh@#1+N&3LZYD?z*;@@XLI)3eG4@pIrgpXre9i}*CizriSf
z_s#F(`@!?PY;gE*@f+Z|KT~mdiYAHIFDZ~;SbqBksl{`@dKT*c%qG3~o+zLB(d~H#
z@sr^>-*(=YMLfSx#r4sTDLKU7NBPWOc5QQu&w&2R{$f)yzxZVEF=!vxZw1BM!t?&N
z<=G<Q-QijOywDQj`TYcrCkegEh;NVb`8|g~m-0r>{t}R(qIkZKPak&2Sv>E5^80nC
zHoJ(=j{19}{ewrlis$-{`@MOax{2rdi}kN<Ti@tepVSGB#B;sI@y+5$Q}Ijjd#&($
zkI!yt^z2`)I(v%eelq)4fI~a+{Cg9;FXWoS$LN_~mR#v9KJj_wpZBdI@q0h7@)OVd
zOPpUN4C*PK`Iqg#vrb>}^U(gB?`6s{Ks@s`-^U4iGT7)DpT2vB8+{boCu-6tqi6d+
z>O59F^DpBqwZjDQyf4A>=O&vXehczxH0uB2VzBsFc+TI3gv}Dq`_Fv7J^km2AB}v<
z-}|vfi1^d+!KnZ9j7!9SfVY4TzqedG^Do;oWyC7+%)czZQ{X!BYmgr~pPbxmqj-K#
zlKCZ~z*h0cP(J5}F$vqnGhch7eL|vki|6+z>5I?aFTOPTFXN{`=R@M#z_WivI2<+l
zK-51b`APBBP(J4;y|4ab^jx2ITzyVF_oEU}pUHzRiRXR-<Hx4XHSt{UbA2=@`%Up&
zFLOWV;^W&!&+*~&t~l{Y?N{4PdL*9v$=t8Y>G@3jVmvR#&+TII;zz?rqW#0Zyb-?y
zp7(ivoPIBUCOq?9)S}Pg2g0-dJ9>N<KO5c^^{-v!w|L&K<Nm;vbSau9UXN@;`Hau#
z*i=T(`xxGv(iuJbZ+t)o@w~ss_>X9uMf_^ipYd;%KZp3l_xJwXzbZbkxZJ<0`zx1t
z-rwW+@bhdw@m%k7e5e;vQ2Ynnr(*s(?^i^8b>v^>qZv*m#PjbDvORaFDkGkMe~|mh
zgRk3*|C&TTUAop$JpW!H$CLI$oW-|5{^IyBp{|Q~|0MkV9IoOw!gIcT^+|2<{Ch);
zfBQZ4#K)j~o_7RKY9u}-;@JiL{h4P|@!8-xUJWbWQhZ@}dz2scrL}kmc+NL`|7mOV
ztWWTw4&wQ}3(ilP_3SLZHtItkSH({}?<4X2(La4p@vTrk`)^2WAEUQIdlui+-{@I>
ze86DwT~HtH7u9b(Ts-eP(Z}Q)C7$cYIMm<qb)b0OUt+#HekjQ3IbKbkIa&O8{9dkS
z13LyAJ@e@x`&r_-K4m<FC7UOn_XimNr!OrO&+(t@N4u4w;(337&+FNM<>GnYiT!t2
z?N#D=--+=VmUW$Y&c`@D+dtZ1^nr+<4?DMrPip@5cFuOAXZbNcyT!Bq{JrJM?HAAQ
zLo&Zl`gKtJG2~xw{NB6gj)>2T{K);`o=Z=N9}Lg&twW!G#Gi*}zJ6EzoOm1LBkrHn
zvA!hU4W98|`Oa1G{Ju2fXa43G@yk&@_s8Cjx-FjHbLM>;n<jDM6MrA_&wS52)#`uG
z_x}8CoKOGy?^EQF_!p=T@3-82`&2x?4;hSj=o<A>d>NE)kM~c1&3Pk!K0M2R<nvxU
z&+j;Ya4Y{=Jog_so^-ePE}r><@jvV0FY);>o^$>dAC|mX;`IpEFHvaEi2kX>uSEF?
z@at=(6VLSy_X96x$snHV3%2LHhndAsMt#_x2|KcjUklHCu`?)_cz$nz@i5FIpZN7C
zpZPjX(Sk<L_ZOl+*@+KD`HY9+r-~bW1fJL4g{8%Ff1dX(clNLs&->vVf2=Ayisybl
z$G0VEoyGJ0V*cLJx2hUF<3C|T4WoC#`yD$+))vqC64xV{-0O+w{AUT;KV|Vo;(4CS
zcqsj)iFkj+1J92ho@gOH0Qr>hS#^GE@%`W}Q2z^lZN>BN8QH<NaO@y{GV&?=R~F08
z;$7iGFrKHp+Esl1B*ybHt9yuV1JC$;HL#EPiSUfiQEvUk?||q0xqr67;`u!dmLKwH
zn9;|h{oC&f5O0n6q2D_pP<$zP)+bx*Ao0A<%>3d~bh7v|D4+c|`qMP=F7Ph+y~R(>
z6wmbq<1K#ST%(V{`x+757m8>9wL*QYDu;^yYdwPRLoP|XTs-f0vHr(zt`yJxXYSV(
z*s#{<xu0n>a)Wrz|2e<S<i17xG(0cHzh&O-;&~s8^VNCryTtQ;R{+{SA#$I1-q&S+
ze>VM~(MO~FO&yMi=YBQUQ!eFBi06Ja*B8FOPmAY$UGAp^Ux@ynd{Ed$@thyB{&D_S
z#dChh_E}vsM*Kv?1J@UhS#FExel_F2{G)r~IX~q7Sji&~jeZuMZ}yo_#oM6%jGv3`
zUy64?K4tx9m3bq+13dRDcKmoJ{vka3*ShFW;`#TIxL*Dh`c3>q<X?{eQ+xdqza5_Q
zhwW99H&47CNss)<=hZ)bD)Aoh>@VkH(~9Tc3+D4GvB_HeR+P{4y9oiA#UFxa`S;zk
zi|6+`xPD2SFPC_JuY>Ks^mSgNXMQ|#uz>iqh-cR4*>pScNAP=jUn^6G;^K>=d_J$R
zvZck>h3EdH@9%QreUtDXE>tjj{@$RlO5#0HKEDSW=U>(6`MmsV)-ZbJyO7Ma#dG{;
z|N8QvuF<nT1$HzP&+(t_6EVJtc>cWx##>Cw7UH|3JtHyRUbJg%^c>%QerzM2`GxNn
zB%Ek3p7#kk-r6kaB)$gf&;7&oeqF`$ejvyHnw5Kq=Xogm*SyqyjGpD&#rTU)jr!B)
z4Id<)`w#JWUYmvwGkV5DACCa>+<)Nwzf+Mw@r-}&9|nCGFTOwWBkNP+*d(K$h2ML2
z&NT5iQGNjY)Xp=-cR+sR?|o2yuK4xv%#Z1kFBJa}p7S?{%ZtUkU_57kf4gFt__pv|
zFXS4qQv5J@Z?w<gT5HAg{*?{<r7Ro7^S(6C7s@=`ES~qTIGz;QxlMcm>d*EWHGY?P
z-q+%OQB2Ey;vb^?X#8FayMyAn{^k1A`$LrYM(FR%7p+bl7ti%9<Jo4xY4N=O$@!$K
zU$l6xe>whGR=Oy@3F>c!_L-OZs(6mK5%38&Zix3``B;y;ua7l)_Aj^L_r&u)HrH#t
z8$1+03iXLX{ZHq5D*mtYckEXLzjz^@<1OR=)q&UIx!=q9iJSILJnvV>q5iAAKZ&o0
z-^+NgDDzD`&&N5Q&-(dOd^eQOc!)ojtVQDW2={Lp|Mi!pG<vp=Rll_2c^{j<*V5Hm
z{5;e@0qr?2Q)cmr&&U7${i~Tp<^EN-glyt_q5No+U+RdB`1VP7i>Z0VkH`Hh&SwsI
z6%c<2p5uR(;&$SjAm4Glmg-9}@mJuPPfwmIB|aa<XLq#EzJ=w)H-KmS-|tpId=R`p
z%1`TDN&Gf=_TNQms*1k=&+++VOm*@6`*)0oUF&NZJ^R<@;dRCH@8xm-Fm1zz;wvHE
zIDU4`-9&sIc<wKqc-dThNqDxWN2G`N%J5w8ZwqcCp7R0De`>aGZ}gnc^eEFwd<N8q
z@j3gauhFyoDd)S3=Y4Ya$8F1ci|2Z9HO^}W_wyHD7WL=zTH!iKygNMG|4YVUMjwy<
zRpkCi@mWwl^NY>4G2%IXa(`p}*zw|dpPcP!*<zA--uGtxe-@f%^c+v@-p>%v{e0%H
zXUFD<?}+xHcbm6BJnx6|eDJF8V(~oRWd8N7xJ*3fGaRozq+DtA+#lF`eT~uc{gG_z
z!i}EqKUN;MS$u!Arz_&qyZJWpoKJE-khkD2@oTU?<$8Hw!d~%l@QnYnha<)3K|Vc>
z?@vyh86|!YJllV}&vEhR;5lAZFLzpeQun2Q{W>eYDDq=4+P}z!3*veIc{P0F<yXY>
z{xk2N4DNSBJnug<{wur2ihqjwbN}jV#(Uy<|C#p(ro=rE|Apn__dehDM0^FrGxK}+
z*cWDx^~<#uuf=~weYjs*rqDa_j;Igkdz0UN6wm!|&IfFceHG8|MR0u1KL4k9_IG=<
zr=@SQmWkIR^da!29aD-=kKfDvrAW)P;<;X9{(5%JO8jz^&-3L>Ycq-G`>m}1)gjr$
zbNv;C-)mpbMm*O?R`5|d^NLTrKKk>%E%U{*r?%o3;P>)=PUHQBjh^*cJ*AlVok^7M
z*tV4T^6(rVikB=Wp8Ltcn2*JOb1?civ}eFsC-HkwAC4zhOR9+90MGS;WuNLs&-upb
zYPF1>_s_rOsVkoQ8=Oxzc-}xf?+<Xk8n(Bw_!h{gjGyC^nv0(f&wSU^)8qe8cGpo^
zHErDYu?xGfP!Say69WaiunQHt8#@u~LKG7f3lYU`L{Y&G?83$_MC{h*;(p%yUHra2
z_pmP3;=j+DHGB3kbIi=1y-)Ga;JF`or$~G8O^{DHAGrA0P5e@LUT=q!UBy3yXZe$t
z^c0^S<2lFM488k`ZwJr*)vwY(@l)VA{`;nM7tiOpEWhB*;o|u`m*ZQ*4Wq^Lc`onQ
z(9z?K-Ua<JNdr&uiRG_iR#U_mMSo;}34Jl$=s7-Q51lQ(F3U%LUq8#o=)G~h6+0{t
z-x}r9cPhTb=zn6q`tHXvqi6i@ja(_7?*}n{()+I!&;1AHy9xu>i|2W7&YzDv28(At
z<^7$Reye!q(-^eB)%_ht&+&7_wmstce3rhl=YFH-^OV!g!o>5u5a*wB3xtd3e1PYl
z^SwJ}^vu86kDe0G_lY<jR$p+==o!!FyI&N~^L~ss-||<*bG^^;wqWv`M(>4q@VItc
zJkRg3eKzg9Z}gEUf3fEy@qN(W`TTu<(`VvKAV0Ey4bS&V{91U9=YL|}h);uj$Nk9<
zVeiEIz_b7E^8O?~3ZCz?1i5_^pB4Fz@vyw)FY(Us93P7RvS^)fJu(oU@o94*x%g%9
z?C<ydQ;XjS&+|Vi23d;tfaiL!TlGxhlOlc?{}CCoi7x=p@|)bxDZUImpGS<`mPh<2
z)Svq~DLnIwcS8BBPq$`;#PfL#ec=K{jh^>wQe1KIeBR3P>qe9o-v#w&f4}ZqPCWO!
z95FtW?Ow^~W8gcLuPUC;PdWZiOIAZX_a_-Y*{{_U&-n@GOX~ycis$>t%wPRRHZ*#+
zzg^uXM$h^e%+W%8Tih>>=N`{mi}!_R|E(F~Dt;t9^J9vcZsK`9%?0<jn`>9`qftKl
z*E_qO;`_rhekOhEBc8u+#osT;e0G4*yP^JTmk%*|=C85?h8sQi0}Iz5ZT9#cY4#lB
z#q<0g*ZY;9P88n@`INukJ%7(+@!R1UpU<aE7oQXPk@J(`t!9ho?=NsX8DQ%p{tU|J
z`Oo+7eZ@2Xvi?nvEf(Ji<3HnP)WT)r`FjeCpH)3piuXhLtpB(2YsK^T7x=uUP4e~P
zuc3U_|LL`j;(6YQ<JGOeE#lv!e2zaANA56s?zi~X-6K9f`aAnqX!iZ$`Mi?#Y544*
z`06O1{Uv?K5%K(<74y-`8OMyC^H1M)r^Gi!eYk&H(C(bk^Lg&muNTCRNBNvTk34h5
z=-FSYEWaV1^8xOUb?blI=&dl`zN>m)Jm&)(uU@8mB;FI(%kg&X-KR#+c)PykrFhN<
zc)h(m-WWaO^HY;|;{V#O!0(9{F7V0d89xtWzZyNCmkmAgQ~YoAcRn9EKhL5~!u1H>
z&;4tEuWNFn_eMOtu}>|Y&o7u?o+hyrpYVKF{P`=3hWh=huTL_H=Y9+O?~C18#WVj#
zqW+yG<`jR@Kea{tUz&gZ<DYl1KkjhJBfc-rUxlIkYkBgEpM-qv2;b$kjd=cEA>;Y=
zfg<AhdxdT&f7I;a;!h!8b3Ccqv9$QiiNxE<;^oA5glGSq{=K63Ch(k3<~UbHJb&Mi
zzQ&5`;(7j=`MT_YnnwTEd9Z4A#q<0#-yd&b*-$+9Cwafd-gOb53F9Z@InCDQ;+d}*
zKV>~yi|2VE&i^BtxQcf|eI_8@UgmQX&-HZ}{KMETMsESX{zwn;%%|Lc?lrHE_%5hF
z$LCI62Z(P8&-G@g{SfhU;TfMENrsE(^J{Nh@2$(D#Pj(Y$E$t;<HYm*S>}sU!zYTL
zjQZ2hsy*50S)aYxri<r#mgCR8C$q$JJ<Iv?+P!nd^Lwpq&$82f#dH13^GI{sE*8)A
zZ#3>#8@pvjzXSg1SAX$bFEf6Io?au~2KS5QFY^mDdd|n%4Bsf8`&T@llfCv9@qFKb
z@iQ>X4)Kx5kIe61AMO_a3ZC_uvNJ?{1>`%{=Z@Dw@%;WX_h&9PKO&yrf9Ch|ix)g5
zz98})<J0=xN%72&tk3=Mv*HJ!{3yiRVBZVkx&DoVKiln!c>bOs<L7YM8%EFdU9P0J
z#dE#P^Ets+?uk!=_-8&{8Sqd%^Qj}Q_uH_iM$h<pSNo-Su4lP^Z<6hec;;W0AN(Xv
zygja$`S<dkkK&oHU2(mOr+pRA^)LHl;kG};b9`X?Pby;3HsN}N`Ipz5`AagR=X`SQ
zsZ`>*{$+kC>zB^xxt|cxH>1&WJ~^#QR-@;5^)O9NqyKCCznxn=*W;Xjp5J6Gp8NA0
zAAHB#{44*aaS`#Jh)?!+kG#c=p7ZTnF{O;&3h|uca9N{g`<L>mDBcJ4XZ*bDTtz(h
z9~l3+%2XFW3FS{k{nw|hDSiYz`%Br|b;Ps%Em3~!;0EHCA)j)*%{JCWd<Z<_C#qp{
z@%fQ|*`8l=wie$3p7m+=yq$QS*JAsO3h5~RcOvCin$bl(&r@-HSkSJA_>suJ96t{f
z?IV5%Jm&+AzV;V?1U?Gqg@R5G7Jm<(?SH{<n9;NRV*N&mk3sp7h_`7~#)(ghc-{g3
zFwI2qx!@Vk)o)J{&+lo(q5PCvrithKQ;eTZ<7bJlhx+*8yl9KYbH%?+q<tRd@fF_y
z<#T*U6SGJ>-}j%7>pdUlC!Xssw$F*V{^A#+K8)vro!5xx`6b4KN9jQETu*U4ulZ+#
zc&?AQ9#3&;v-p{b)c@C-?c%wg;EwieKXkWv&NsMUvA1T3c<v`Ko`W+V6wmz5{+s6U
zVe!oGjGr^Rj*4HINc%)gIVqm`&K2#`rp;OLt581U;i2sX@!Ws#M)~VMT^3&z<#T;>
z{={|h+)rS>{=D{<c<v7{A3b%yC!YH=d|$xP`Jwp4z9(5S<5TgW$iM8r&F;Stp9T4j
z`xT?N#fazkCwadHOpFsBhw`}|S=jWW_za1Rht}3##aD%A{AY>%A>I|9>(jx9|A-HO
zXZ@G>Bx{#&{lfQ!?Gc|vx}*|+ALVmCoU2Sa@o(UHe}n&I5YP9815uyL7qf^jhW^6+
z;cjbk7(Lfthum|Eug~(4A1BqcHhQj??`5_T&+|5%e^z-^SbRg)2j8zav#XeRo}c9S
zTzE<;qjyC6?`>7q=>6d9+Ex_L^U1tlX+Bjpdd5%L6OKk7gZg}0>@2<?+LQZTp}p&f
z=lNl_XG4bu;&~pJ{qa^R7x8@mm+_e-s+oA6@8$UByRnscp4at8`@9*`PCWPjIX-wa
z>}d2H-)iRWBHkbE&-<0)b$6p@ea;;0EuP=!<n^}q?k}GCn)P|<HrVJb(Vm+s4>Nif
z_+F_-iSLQ_VLZIMF;@IU<kK*epDoBk{AqZOR|7^)5?>Jck<Z_|)SV`N96Z~<RrXop
z`MnOd|EMS4;+cPWe)Y<p`Qn*>xgIP%ZISqe$X{G9$F}wp&+m0GU*{<7FFqXQv%d`c
zv|2p#DbG74J-JSNZp07IgB4q{!RR?2PV2qd=)Dkc6CJjTuZ;Teehp2vTRihG<ELWO
zKJisheo54))5Zhh+rcw`wHbTZ=oz0L4UdZF`jqXtKG#X{?NJ}D2m8G`BcAhlw$F(J
z=f!h9%in8gGv~6=^Zq{Vc-`o^e_ONUEu-i2?i9c7{wv?@e6;vLv}YvZq5Y~S;+Mkn
zeT|ocUl={tM`N90#B)8)@%DPgIHR{h{m(~#5I-CBXa6d;^NZ0lpN3BQA>IS!vpuu7
z{A2VS-)`9?b4|D&Vfo21->&!}rFicI^@%@!)%D@J@c8pjxzbu#l=$c0`C3}>iR~vB
zS(`z8!ub_{?<W2?Zwd|1BEAgHQ?Wm0sF_2273AL?xWBK{<re=gk@D}{&L@5+%IEmD
zWm`e<*^rOe-#d&eEPfEYCF;MgQ8Dp_;klnPDt9UIH{h91)5h3~e+tk2y(I@Li0Au0
z>|e#_Ru<3qeRzK-yE%&Ic?S9{rJTjzX8rMdB~^aa7SHc*aDG_oe0`(m{?FW1jm5V}
z(7)o(6LP+>cW^WDTwg>X9x^+%65k5t^Zu^Q*iL+Rc<w)xjqV_x=aJYxb9Zz$dX885
zCUrOZ%DCRGEqaURews6U8k_z`&-PjNevr}gel0mZ)ady>&YOiJjh^2}dfIcWc<#@z
zKh~`1A)f0m&Q~v|m?WOh3wYkC+l{H>IUkEe`_BrRY4nV@CZoNL-Ua2~t3O{npGVlj
z53*V$p7S?1_)4#qieHTWVhJA+x<WjkFK|Baa@K0`Wl=u!SN?wM#B=_``UF(kAfD@Y
zUT>!qo5klszT^DL>)JN)t>L}VKF)!=#NUGF^Y`Q<_lf848CjtGcC`<PpN;i0`)|&y
zhsE=}bSC7BbdMv%^ZauR>f^BIgm@R^BhJqcPd+1l3_RQaS<Ca{c^-`IU#rk%@%)}M
z>%Z#5HSzo&qZh9C`>`nT84%ChpKQD6uK0ZL>@U-MM~klp&-r=!icgH5`{Dgkybyn#
z?T_pIcKx;Z4ycbKe4C)R;<;bS@jTb)58`=#lKppN{Vzt({9DE9hj@OEk>k(e7r(`G
zKQ<EA+dedD`-JO}#P(zJ%}yyk;d<f!^}VUg9nu;-<2g-<4C1@uelebV{m3ky`?t*3
z#Uitd=X{Cr7V4i%JjZ9Qe;*FaCw@5U&;7Td)e9QECGJ<h428w}qWlT)zW42n{;&Ao
zUQ#@tw{pDo@U$1t{2qt;jBH*(Jo7uhCvdqyW%1nK2t)a)EF8uEmEVysVk4czbH2*)
z|K5t);;oP$x!$xGP+vTMuOS@u53kx-{BxAg{QD$LGx7XhG{@&LcUp?~L;hv_{0VL=
z{vAB~OS`ch#0SGq#q~C7*japajOTp6V_2^4;+Md4y>Q`WFY(9VIlt|Epr3f=U*<>a
z*@MLMeIoYXZ5@Uhy&KvmZHbZMOQ65AeUknhWAxrA|MR&C;;W*3=DX?sUgE9cS^vp{
zr;2Y3&-K@^>NAa=^*^89TRite7;l~K&lBGf_2K?N=(dI86Fcve-E*nYvpsJ$TOpq3
zqnPiK6j&{u;~U4HZ*c+QxgLo@JQR!w62A=X!+2}5V3T<6XI{eh$3}MFCVmCV=l!ix
zewTQjk7B%)OTJG$&jT|a+FuJ5&-1;kPrmhs#52EhJkK#ILOj>|ykFJpoe<CS!@S<}
zInIc8MSJpki#?AN&+`e)*P$VojD7;*C(q(*;uF3v96vwgd~9^DDDmuHEWca%yW%q=
zKiZ-`Es{oye}?^J-mkltABzt{`Iaa@dBAh=d6Dnfzvj5V7T+75^Q)ZBZ^ciAXMJvF
z{2<;6`Ht~(_2Fmn-Qitvy*@j>i(d)P_HXL-Tf752-v`XnB58+&>ya>c#zWPDDaC(<
zw?O^Ny-y>a->YPQKOB)>d>ZsG#!u4)nZ@(@HS^u3?%BmVpnTTnO1WG{?}h6vl`Nn5
zdMKaI_upSFAU?747)=6g#dADl{p*di6VLrju4ix5Eh(P+ncQ#rmEB%EpD#21=RPYh
zzAxH`^X=&&4&wPdn(M)>GpZRq+h>@olX%Wg7(dJGYK!Om!4mPX;9EWMeE%y7{>_<2
z;`zLl_4iobR6NgDb9}hfzomH2AGrSNSFNql^ZtHI*Wq9JLw7rgPx!nwK7X<NCR@81
zeKguL*rS(t{(c1GEud*Xqv!sAxe|lKb3cUZ!P(#4#k(Q?dA(cDj1cdL{K);=%YI|T
zcYu#X``GoJApR&k`<Iu4m-u4HkK9j7mujl`$?)tie{ReWe+QoJ^C4)Ccs~E-d6+z-
z=ZSBD{KfI@cD;q-J>Yr1WmV3l;#bh4{ZBq$F8(GxzMmEwvPwLE-+|*pqnQEX`TGuR
z|J$xX;`#dy%oi8zHi^%Mc;@=6^S7-=&+#z!%uew&Q9k?E#N~U9p5G%K)<4wf*`7(O
z9Wr{x|AKT8;yFGu-e%uDZuF6epWItd8$H{9lt-j^zF))jX4R&bjGp^5-L0>Q=leLk
zU+-gYif@hk%lzBq$Q|*+;8~w6^B?>xAJFx&c&<;mek@n^x%kA^k4KZdHhRX-^eeGO
z&+E;x?!D1-J}_+fXYoAG&-$FN{oUx9k2+=hEuQON&gX5OCh3@PJ(6%e8-G4(&xlNN
z{;KS$6#vu5&mTBH-@Pb}cs_5UkLa9Ud>gE1IX+A%m0A2Yc#fZ`e`OQzf_%sNlsRuD
z{xUqrlehkP#akl3IAc6{Jg|WH;`G?hzv*Zzz88Er%KvR?C*BvH@%-gp3Gw_r1%AJM
z-_|nX@1lIhbC!wa#q+%M1l0dZ69@5W6B&QbT30iAw$I_%8sh7sd_K>ee596mo`>On
zd%gMf#Pj_i3taEuu8qVuM19ykXYHGcF9py3(jiGp@qAv){gAd-+lXiXjYj?J1++K%
z82Er;ox~?Y{iE>yc<<WX#B)8!`Sa(jy~J}rnd`6VPx^}IelnlGG~GAQ=(*mxKi%Ev
zEzv%M+l>%!i}vAu{@J2qjGp!H@O8Y=^M36+?J2%I>ce>6<Tu6W`Mya&zZv3dp?tnS
zTdwLH@qC^hiS{gQIZu2ml<y5c`|bjxXZ{_xd5O_8AElkJTs+^GbVhypxULe<`55PK
zu|)#JbH9u2dGFJD@vX2v<@0Nc6T#xQz_b0s7i|@9gM7;Nx9Yi5{499(U#ALt#UF>~
z_5Mi~Dn1|b7vr<&wJ`D3;F<551%`_s1<&UN8AcozzX+b=^Qt<h#qWY=ye-HUDW3bc
zF^D&trx%T$>zy2XuZqu&{^f}B>(97p^n6}WsqG!{e4mK(vCc&vh`);V@j`uKKR*)B
z{LA*4c<PyW&gVJaX7GDu^vqwY`o<bP*LUA5zc+gJulH#_8$HW!di$Grt}j^sQJa2=
z=X`_lKX`l+w}k5vo;PEE|J^u+_!)?|NZenaylKSqyczp%+gMAZXFQKPl*#B>pBr<t
ziRXR}_dk1gwi3_z3FH5B>Ad0-+uxr4C%@6N{c~I@Wb~Xr2dyb;^vqwChL$jTUT^7I
zWsIKjJUdHyqv!b6Dz1`v?k{nCsByTe(K8=)n_ENtSFC3lKQBAh67PZh%lF+zl&B~E
z13bq=iysZe_d`ClLjQ6**F^kLc($kK@)qK`UgmnI!N4}+^I$w@z8Fxgy?Fkfpf~D&
zENv(8B~d=#U)XoMt9X8|gZ*XP=APnzp!_h@Ct!SE@wpNi-+nh9DBcpD_tz({yZGYp
zmZ;CGnBn59z;nKl<<MxOXa5bDJ6?PPl+W?-cPCHreBR3b=u>)%(ND$o?)yDmJfF|9
zKR&uR+vqFf{l^+>e8ey0_2PT}7u*+!=kr|dH-2_rBA(B48UNEWFE@H#Z;nSR#q<3X
z=F^~EYmJ`$rT>)mM$hvV-&+M6J=f#!ZMTZ&{s70T+@E%sJ@)Hro!BFu&!f4XTDf??
zc;;)4hi7|-iQkC$;rM*0Qn>gKc$ROS`nY&LFXsHVUeqb^p(vmEw?^<e@qC|`<4NhM
z7sanc`Fy|Lru9|v+`o!Kf4^sQQ~WmMM+^9s?{6DD_h-T*?u##v{K)#a_&yRp7@qyh
zsoOL0H{jWS`;>hpz5wzO?^nkpvEunY5$7{AuDlc9ALTRNMz8%Op1-HyhW4*C^qcsB
zD4*B6pyn^}kKj3fu*s67Q^NHK&jYjm6CWiP&;3~D-=JNojh^$3{!=W)J0kv>zrMH1
zB%bRpOXMRP+ic>Sp!~nC_hU|@=Y0P5@jT+W{&L6tU9~vB_;IKY=MSZO7ZN`U-Vf!!
zuT)e#-}hnvZJMft(OaVYO*cy$y(4_pjpdA<{r&8iO5&H}dO05YG^{F~=V!uEAM4yT
zjGp;%+^d@6`MyaE%CB*-uF>=P)bcqE#q)h7##?c>CgOQMnfnh1O12Qs_m6mg8~ti+
z^c+8f&bt~t+rR%RH?!aMeqa3eG0NrqzyBu(cNM<|@eqjiKkU>~Jm;V6UsLk-6(4}|
z8P5T)28d_>Wq&^rIz)T`@-O4L#jN4t!{K?qHoA@$Z-@NI{^f5sUi>ilIJD=-FB8R|
zgJ*wvermG#FZAJhfA1`vF1|VP7w2Qi`py>r*Lf<eFS=Cr5x)uLvpr{|ULgK7Jm;U=
zq85wi`76f%jg8C1^Y?b6(f+;1t`wgY@yYXJpBt_f&-dRspJ|zUz0rH2KI2|(G<vRg
zZXDPm-Wm00{_Q<yhxpF$96yhC+#`MvJo~$K$^Ay}jqA<v>!5h%Q{La8^GC$bL49_h
z{0l3OiRbr8*ggvepECLwlz*VcIq}SoJg+q|<3;hzcNQo=L-ZB#t8l%XpY-2xLp<{l
z<G=f)+eROW`W$X?Up(^#>z~`^k@&yz1<K#_{;AQkK7)_F6wmx}7w=n@TlB{0`TWkO
z=R5J-ukb?stt);K&;0>D|9zC=oA{-;za0P5-uU@Hef;^W@VQ0g{8hsci_QtxBitWg
z|4lwUxp=;h=7Q_3+dQ@SUD$tS`H|L^;v?YMf5T%lif@5@$9Qu&oK^f&c%CnH^2sSa
z8S)X^e?{j!;`#jw_V<pZ^NSyg@)-|Pe%pwj3D5b)g9}B(^L<|K=cig-Ts+_B^~U|}
zF{HG3zR%0}KkQUad<Mib``5FKmBjOV8kVTfrsyi-OQL*x_~E;%i*E$a^=$V^HN{t_
z$M=?Jx2P-r8SWRytG9(3is$<U+;7bC!9_gh!;Jr`$C``(g8DFi92U10-v!sp=W#wg
zUB&bL6khME3U1<aqI|Bu#-->gp6|Ev{-(XrLp=8bdA_c9P#>e`_bNM&9$@tBFE$N^
zi1)$uvcEL48ZMsabE0sbEyK%E;(MWdXT*R1&~f7V`?-vt@3SU~=kt257iM>uEI#3R
z;P~^sykEIXOgDPwi%~yj8NC~>w`$~EqYs1s?e8mo5!#dEmCvBX;(2}`9OXZ6uuMGr
zFV_phtX7KekNU8`lzXv8{93GMxt=N*5-5HLJmdN4jE&-7!}EE>nzmcScSHW={W@NF
zhxpd;tWV6R-QsV-bA6QUWQh2hiHwJ-mK+q{1)lw-Oz$J&xnAb=7OHeiJlD&NAJ3Gh
z#B;sO@h#)cv*Nk_W&PJ}yda+IU+$k2AAQB>dA|<SzagIQFI%F&<gmIezB%IG5q{W<
zdq&UeO&a=8Jo6p*^H0utDxT*zI3C8fe`)rp|E}V1#PfZeNcf=dapIZp7;mf2eH739
z!u(#^|Eu`bXn*>{1AmHVeu+W-Cs()Vl5jmj&-SmEA-U0eq5OdRsl+pXalHDyEuDBi
z@0)<~k9uYl&+}%SzgaiWDxUd*>x*#(a*AiZ;QXz|yWHaW{DSdwA;Ma`AMP*Xr}F|E
zqv!J@n;u2PbAN{W$-BxIH+qh5wUU<>&-aCSz11F;HF}nRYDY!!j0d*QKF=!Rt&tx&
zpSj(%x_G`X%;!gCt!s+kh4Q&ycj!$W@wt#6*<TtQY9OBb)vQnIxh~?vP(I)H`RUeN
zd`jd~uE!6SY%QMon)9XYKii2P#PTtJb~@itd@#H>`uiXMF5>w;YK{*b2lX&|&WA&)
z_Yt2N{gL@=dxinx3&1;~{_E}!7GDOQ_v`nzVd6O-utfPjo}<Kb|C#d#>*nLcH$#1T
zqWp0MCK^4*!y9pvjGouqJ7Su6?uT=HJL)@2Jom$+QU5|c<{CZ6|3~F~#dANL?O!9=
zV(}Hwo*W;NUh@;r@ssgiJkVb}_qQ4U2S%(B&;4!gcQvXTD4zS<tk3Q28;zd(Z~dQb
zHhNp!uhJpgjh^}I@QmF?&-r0)*AVgCpJ)9y*&Q@`#!uC6hsAS$p5xEiGe?b{`L4+F
zlSUtj_6#3$_FwrMbuNhKet0;_FO}_zcz#cV*W2Rpb@8#tr_7HVcij?SANh{^t9>Wm
z6Tc0f`R;4WhvHKqAF=<&6?!VZ7Cg_pK6w8^Jin*G@nrSU81Y3=KHLA)f;jR1@LVsn
z>+w;16g=lkp5?!a{|wLjRXh1l@hLDKay&_P?T`4s-lsskoeE6WHR1Y&p79?$B9(Z4
zAA|3|?5>+mJjZkH=iJVoQG82WFXN~Gvn=BI{xbcakR0NBpnS%|hZ(tzp5uRRS8MTk
zP(JIk$<9W619;9iu6!*lp69)pzq+3(_OJZ=Wu?SVMSb}DHT(LPHF}O$S*leuddBmO
zbXCNUMt#_x<?cF)pPs<SKTiw`FZ!S7iSfU66aVkL%US$i?^C0{RGCso{9n&Q;U_k2
zAiigU{{Elmn@6-hFABPdFOk5<?>}>XnC@LO@!X$}Lw$}OZY92Tg7%3opZV8%UOS^_
zem~f~qxiEZKN|HJX5U5pEqIQ%7cF~;9}e$=@(<tXEuQDGxgN~DrN8)%$frDyI%wQr
z@sHsd&nFrV6aOBb>%r!^Mu}gH{LAsG&daglW8pbIuL<=KUpbL@>oRMS_=NHN|9U<$
zqy04T!%;rJPx!dlEb-gmIo_uG?kzqN-U9JZ{_K45ci=fcEV_J=_;2uDC_n!IKk<A%
z$nmOvHGlDS5YMd7x^!#A+rh`6J}d676JHOW{j1Ej4dUCtN1}XdkImwlzc~JnYqDMZ
zJG3X`f4KE-@qE9S{cCybKJnZy<$i4OBL~EH!1Z!|(sJHm@!T)v{d&~psL?Z?Z`+>~
zzXbK+e7k>=vqsN+@%{37@!XGPJhTnCZ1gNY_wegRzXS2JsrD`L-0x-k56*T^Joghg
zo}YaZZS>4{9rivE&*vj-f9vTl#Pj?B%iq>E#^||T7+y5a=y{&=!j})?c|MTwx$yKC
z@!b(`i((%9=X~{le}6Dw(+}}O;hA3+kNYE@{fpzt@Vd#mC0vjE@lXBF>23>)H2?g^
z=NFEjN3*07{~n&_VV*urE4~f#FQ2Cj-I+l=-&f-Nyw{{G;#VO5vV7YXImGjP7xR}@
z!QA3AWBlZJo9TT%@qAy2<7b74g5t*{QhrC@!s6ZFC!oJK>sCxW&v!9CN0%)np69jL
zU#=!8D?S6_GYs|VaixNIp1<OL+L3_D;;W&2KChoL+|lSc-ae@9ES~4P*x##Vt0SK0
zyEy)wds1J#3+m7I@3^<I_>S<5&)3tM89n>s_O`8zp7p<3q@B?-zpVJuL3~rxKMwKm
z<y2?!1L4Ert^K--=ks^Y54ZL0EuQ&>_1{pXzj$xdhtFq|r5$Ya9G_3!9x9&a(>OjC
z+B{NxV$bWJj~^?Z&+9o}ZFcbx&+lP!Jh_^8lK2s5A7|XJrEjK+=X{d+z3AbY;&~p7
z<7bGEw|LGE89(<s&o_F;e^j+aM$h(Hn$Ax==fjNu8Mjx6FM<5Xc&-(^T6|S_*1y-7
zb>ewmi}ByS!3Oaakxw~ZHL=<(ekHsk;vwq!Ht}cR8UK+XyTpHj=lmpm#y;^*$d56o
z&x>{k#1DYCgs)?FSo|z_#+$>}2=V*idA+AjpAdfnp6&nE?~M5O@NA#P{mvV`1+KS2
zwael&p}%uJkSy(W@%iD|U%uRm5+92CbG(|d>8|)1D4*|F<{Td_p6~zq;d<{heq!{z
zUk-U+7=0MZUl{XRJf9cydXF7`E1u7bdB2{|{UDy}HMalg&R@i*MtidStEGR4Pi(zY
z`p<8pXL}aCl(c)o^$4FY^Lgl$H7UjO`7+lF_ubQq=X#3yXmHI8;`ux}2KTp5mMr4u
zp*`7Ox;)Nq^z6SgcIOh${a8!XC+F0B;@hD<oX^x~T~Iu~Kf~+2U|ZPe*`A$0*@<6>
z`mlWpT`6hwe4f62t-W~8XP6(;4XYr&F7he&TRuBg7T*J&@tiB8qxfO)9DmY3a1vh*
z`HuOe*S6Z?m&5aXn(f5;;!nay;k=Vo)5hZSCo(=q<!dIs13cr+Kena##qezZd57DI
zKMK$N#{Ba-h~EqEj{Z`=OK0)?UI(AQtSi&q=o$Y@|MU`Xf%s?q6us0>d`5Womyk7s
z#5=<C{L%yWp+?XCzOLp-qmM>=md`R)Jolq`zvexfAifFe?}+mA@Afi!_OJ0%riyn%
z`K*7s)-#Qs`E-S?w|LGsIR2FQG|%X{AA9h`LZhFG_G!FisnIjP*Y2~z=-K`b4y%ox
z`)><VtrOo2?a${CN1}qnb3WsZ>)pL^lX#vVrmsDAoA|D%58vmy+HjY6&NsYJpL4nQ
z89n!-KD-M3S3cz6A@Q7_aC{i=9bxpGZ$$MyVf1{SQo`Yk_)cg~KF@8M^1OH#<VV(j
z==DqDcf&J&&IDc)Ukv$<@i1#dlz9H05#zr>ox9@sdq!-})Y+oN=RiIRNBs1B@>o32
zUon1c_dFNxjq>AAzUS1};#a_1!ry8ARy@x$GhaIt{ve*eC(HTC!cU*Ye?)ya-o8EY
zU3@ac8}p0jlHcO9z;pcE&^u|5gzJ%l@VsAvl~Wo$`^%|RX~jFCe766=o9V^hLi;eD
zA8*Jkp6AE*;QnqHlU+RbOBw$T4ReX-eku3QovrhU=YA&pyMJr}qmM-WyB@I>&*v$8
zUa;TCPCTEda6I49rKI>PXnzaTXN0}I(K9~%{*)J=7xBRP=Zp&u;yFL$co?^~n$a^p
zH@iED=YA~rE2`D3EuQl|jt@UF)i-*6Z?oOQM&h~u!}BfAcQzHz^Jc97@JTJjA4B`I
z{=HkY70-Of`&*=72k}=?KI1e0?@r=R!gGJ)#l>#oKf`l;a9Z6<d?@lM$DgHx`-xu(
z&wMn=agg{)@ElLlTMiX}8=m!Fc4vh6VB~k+U+>Lh#6N*&|9$5%L40ZScaA@~ntF-v
z2hVt@oOi1Do2U=hFN<Pki0Ai4xc@mbY>xOK)Q9sEtGV;UbG^**IbElP;<;Ytd}Cng
zrAE*EKJV9Z@z#iEwtxN$tHdWZKdHYeKs?72wr587Afsozm3P`Cp6gBauVWdviRb!}
z<8!O%okq|8vVF&1qv!auVN$5kv%e>6c}P6ZJ8?a`&?Z8BXWZWy<kJryj*I7hIP3rV
z_-UhO`Slk^iZ74)FrL%(z9gRWAI8Iv3fGLD`Q=E8D5G~n`^>m`M?Am3#QXJl!vpc0
zk1;+|jeacN2kjG$`mAX1T)YE3=i480z81d<p1=1x<wdOcw(!g^^+Vr_-=4t7pAY})
zW)~iR{^`HxuRi;K{+~Ynd=&Serw{rrp6BZrZ;Kp$i$9C=RP@`DC+(SVJu)1g>#0gt
zQ;5%ue9H5C-`AxP{~JCW_jm8G^x_vFe=%Q-td&{(G<fch_05u9d|Ko$=Er_dt;E-b
z_eT9=cI6d644&g{^yC8Ki^KDJQ@64ezXqQ3jWUJo#Gi*}`^@=JLi}rZ)<4hjGUC%D
zi2wL_=6+Z0Mdig?!E--(L~jSPNBj4!R84#(l<x{ZFQt>wbG&_iy_R^sf5G?fY6sO5
zZ;ASFe&RHyk@#Nl9M1<fY$~4TXXs1hYAHSg%IEWi886$2e~frw{BI9!FP_iqccA?@
z%<d$<H0l!xf3ZV1@h<Qj&r6i(CEgyM{l)HAU-3=hIp4?`IZ!;;YrMZ3{N2U#duYse
zsRoY_&-n@a@51V1jGp7$hYS<MbAH16)%d=rcn`D>`|q7?Q^ePX=l7%5dCd^-56^fg
z(|nH6GycO%&J)k~4Y?oE_~!!gJYUE8VXAXW#5YI2<NWIAvgP6j!!zD;^;;#Lzkd{m
z{_?15fcTEcj~t)Rrw$T-44%(h!=r-5KZIxeObgyBJ}<@-#&f2zJH@w4#5*?HYxK;g
zU#&vLFGTsgU#_ph#P@}dLHmyn4HwVfE98Dlra8yO??(9?uhw)tEuQbIa{MV;JW@P=
zPmuj3<oiYOJTJ}i>z}(SzAySO%Xjj>Y4qGr=riz+(eruGF~<kunJ;*MTcv+2p5MD;
zf8T!ZnRxC8dLbU1w!JcXmVa?#toWH|PmYIOn!PuAd(`JcfzL+o0`D33&FI76Ge-Op
z?~M9e!e8}G(ktP5WHvnGtw;A1M$i88p<EiHXMSv!EWOclKHT_vCh^RVjQ@3k*~D|b
z&-$kxZ6&@4+K2gfUfsOnxgO{BzRq4i{7;NOykGU76%s!m_2KnKA1^9?H9X_z+=3F~
z7r?VVGrE-#e+}Pr=Jzu<*_RjJ7x|atLnR9b@o(UHzvf=7D!vW!qc`Gz@9G-jSHm-(
zjvP`;{7ZP2U%{!K`0R<?-}xCEiRbS%@cuS`&_q0+7iYrni*4E7LOh=r^SsA3&o<(@
z9~+ML?Ag4%cs?)Yeo?yuoy7C`FUQY3@4EggUpu0wc&<m{Q2(pGeZ?0-{5!(;=sr+9
zpU*O%9x3N;^wB6kPqGn4&*x=XuZ<Sp9Q9{^xfwWKd>8mg)aTC#Pw`w|u>5&-r-<kN
zfERvGDkS?1@m%k-{l`C>ZS)-9(uMel=leAiaJ_wIED+EA0ay4Eu1k!b<3lUE<>I-Y
z!0XNVZKZg=kHh;l{LEVMeE!Sv#9{e*@q8c08~5u+|6uX_z9si3k5t<#p3fK9-*>0m
zDgLkZIDYSD^xZw;c^-_{TW#xp@jMU4`YiPb6VLNn+@CM&7A}4``j;i*XKL}|;yIsZ
z`A*+XiRb%7JU`I=^f~eTUM1td<<g7d*CGG%`To7$SH-7Aeq?;EtaMYn7d-dFJEgoM
z{wzH2Z|IHt;!`01a(*%<=#hA5c<!GJ9Q90mXL!cX&w8)K&w*#Yw#^wUem^|lr*L`x
z&gk6`ZyQ5CiD!Oi|4lygn|Pk@`fESX^_O_&_b}9_m0gnF3D+Y$-^KGtIlm<r&-~8y
z!tgVx#dE(g2K8C7%u+n_JL_|*e<tzFzua#rR4to$=3n-A&vaJenSYs&?%c^Ez9q&V
z&QAtx$uGVeye-<Nj7K5y?(m$SbZlDG=s7+#vo0Z?^8vR1gV@sI>!Uu5hapGGiD&+0
z|2;Ral6dA{jz34bR5f~@-wUy?A$}C<&wMdHNiFf~;JMy(x>8p>^EK<gBA}so=4<Xx
zb{XD8Jo7cz%WrG95YO}Bj33WzZNv}3^>Tl2%sW@3XMQYm#7#V(FR=Yv`g9dv0Qr%A
zQ>UKd_rP<%v{I?Q;`1Qid80pm`Z+-S2zcJ#Ns&XuABN}nkbTu~@!#NCpGyNri?5CR
z#rAP?954O{%IExKs->rRFO<*qNVa>E#h-=ec_H_$)5X7lXT0_Fm~Hf|&&MV{;`w}v
z`;*PA7l<#1_~-rF9J^S2VR$RV&(*`r#8-f4`;?itQatk!ulGoowc?py98sS<_Upwn
zzc|Bhwg@(Q&X=lP-Xfm+b&R)jYj+qu$E$h6_85IQ>ffsNexr|rAD=Z$JlC_#*Xf=d
zF?uhQzhciZ@skh_?7t<ZoicjPXWq6sXY_nt*0{(;qi4Kr_<Th?^Lr$&cfhF|;-}zx
zS^pnPZ;M|5&+)un-}~aZ9%uXKsq#qtB9zbhWY)CL%pU9IYPVmC=X`+mS-R<s_=NL;
z`14mUTK?bfbN=`I)uNg2#Pd8A+cV7dlX!klmE&8g!r#R6`x_ijj(+%Q^c-)S9JA<?
za6M84`Dh2?r{==s;{D+n&lP*57XJ*M`LtMhOYvEdk2qi5lQfg~8u0ADb*^R=&)+NL
z_)~dZPVqc%?1uLFIxLUTv;T(G&M%(lli5B`vKA7b5B-JlJmN_a@tNS+J{R{C7tixE
ztbdnjrH!8TKiH<6`0A(++w*bZN=DE7wc&FW@q9kZ_5SKp)y4DqEa&qJm(~=|`7`Gm
zh5FVN&-FFqd3WW8;s>LBxE|S@risyWK3wf~bEDsZcrLT4wRo<tIX;)1;A-^YC_kjJ
zn|RJo7@wQ-bQRC}0Lxz&)5GZbJ^2-f`iP&8_Gf#3nL9u{^Do=;VCNy?T~R*!OJ4io
z;<+B@`MPL}(c(Lxe2)LgE{zjk0G|5^CDu$ddOrU;=ssCI&l_<5xx40c@k>!3`YqP8
zjouN@2b0In70>&{d_5=3SG)t(vy6wF-iyWady>4rgF7x0{}SZ~qQCeSUn!p7pX7Kl
z?fV+>-pIe4ztue(DE<RH`(u^m8^!beBc5OF+JB39et&~LqS_Ae(-X<>PtxuYADD=b
zx*a0EKfE*AzryB&;`x3h+jIW-BjW#{e2!Q98y^#&0rAiAWJ2Ck;yE8+e+i5^E1u`C
z82^95E{NxRfbDa9?iKOOzl{Iaoo<Nli0ftltzY`K_@?lT&vbw8i600bjr-f@;zRM{
z;bY*tta&P)`PvJ9hWktL9w`5>^P)B1i06I+*9&(tzZ1`V%KAGz`Y4|Hl+SC*?EY%>
zEPu|FpW^>oU*maev(^@U6Rt=2JevENqivIm=XlQb$dFH|#P>$~b3FfZBAs}y*Lb}}
zmt+*r=bQBT`(!nG_TTXiImJ&${W+f8OqEAG=eNw)E26B$^ZX&_dv<$l#52G1`KITT
zBI5adY3?`PY*}3V1ms7?!}o%v#RtRl{<eHqR(w+AyEydUd*Kzu_lIZur0}gGp68#r
z9`Ws3U3_}v3y#mt?Q4op?Ds*&Skx6i66JHgckNOG@jKw7@I5ZSwJzc>!1Mmv4s9;}
z9(*L)e^1TU;x8rQGi7lVpBw!prtpvde9ydGP790p|H_X#8a?y->0MpK7eo1shqse^
zh_4LK_HW#(kNEoVjGqmK28ieQ`Pcma<6!X|KRN#VI6h1~_Yc{>3N0Qbp8JQ4=iR-=
ziRbe{*5^*eiQ*TbeOUh0l#`9#4e{3F<}~rU5|kgmALx>~z<=Jy{O|7vrP(@5Jog(p
z{-^YuD}G6W^5frkV|$Ko=qr9+g7}ZGk5$P+QlANV7mMfbvvB;s_r_2BCe(-VQ}lqp
z_@eO4N6luh5&s}T{o}8f>zAw@1I0(O{9W&*|E?>sQT!`-jwgM7ZWezJ-V*WfC33sb
zv;Kuv?G}Ft<ue{U2ZtEF1?uy%$wBe!QN9cOpIk@8Cw#v+zWp8H-@Z61{v^&nb9}3}
z|D^Z_$iHl#sx!}uuZMif=S?TuT@cUn%&bqoqF2P9L;2jVtNZ1;c%En8f%X}6>X!Jy
zh-b#nnWgu{^E`7T$`9-FQ2Zv8&-uSg<)`9L!}I*}#?&vxKZED_vE;X6jGp!H8XPD7
z6Uyg)rtP?o;*%quz0p1s8h#a@6`uLRGWSpMDdE|_{9pYM&+|)s-um@GvVIBIFZ3MG
z<L0C?dY*5wa!V(k>rFnt&QvO+_?Ea{u8#tLXA$oX&+~yL&gT%{8lLONw<~jtw}j_@
zrsrU5@oV524|SYu#B;vEd^aFt5u@k*{qdlfcs}2xx7%4tJkKwAA)ezVmo<8hpPO4$
z6wmX_jOQUXRm2xWdvbnz?!BY<Ab4Ky*JIA&{orG8y)zfp5x)UG4t{^{2IBuZPnGA3
z%m+qPbTRt7nEzi)(Oi6C)Q9(L+2dB?z2W)%sQJ!z;<^9B_;>Q^D1IRFDev#OW?jVl
z!LvWw<nJLq1M(xsliYE=#rJ{d{BZ5z{^EDSGhd&WJ6L>Tzi(Ku^DyznkY5<j*-MWS
zKN+6wpZfP$@%%mp*B6&BdWh%uF&O{fR!<WD9rX!E{I_wRCVm|~*5ebLXNix1XFRxP
znk$~`Yv$|7==tJfQ9j4#`8yYh&x8KL`&D4FpZMbN%%=@n`Wrp#6KJzWJonEz-uC^l
zPCWO|ZE?TmAKM_l5$ezTJ9E)y@zvqoQT~&j+r@MLoa4`kio3--p?r?F{wYGlcY^2q
zv+Iom;+w-W{=<R}i|2fX^>G<}R6O^?nU6NsKWX%A|AAI##dH3{_rXuUI4?f2{dU*T
z%i@QjeK;P@oO4|~_s`irV>;Y2dd?@W6~8AwJ?gUq@#gm<T0HlE=<On(i06Ea<Ly-c
z7vdAnuj2PNoLlMntD_z<|I^2>XW5=}n#GCd{x-*lu2vt#_rm&@=kq<EeGy+0p5xn%
zy+6bsM80PE-KYH#KM?tp?LWIsvi=FzBm3alANLhWCEfz#xh3M^`p2~5t>M|8Wlv-f
z&*#hYQGUeYEaLe*m+KL)UOB|`dlz0P|8B+H;*X;KjL+mLt;N5E=X!I|je_ETC*tFR
z3X9K+{uqe*yNoVo^t@kp>z5K=0_F30%|NTN;;X{*{@TB+@UOggXl0{keO}CRG<vpw
zoes`MZ-Mq)Q@oD&hPYm~|IhFB#q&H5_m{lSH5T6o<@0{MSkX*8_rvMO3~Xie%-0)h
zv=g6jyp10}Ip3?0p`+0=9**DdEWRJEm(M#|Z|^SN4W7^Yc6jzS`WW2bsAm0*p7*Ol
zfx+VWy;HVN$#+A=^E@#9%!rZVxnAb^G^+(;#dG}|iR;bO!$bTWv?qW6abWpLM$h}3
zB=a=!d|!$8YybV3;`^gMykAaRy~QU*e&qdHI$^%}CGcFY9ca8rd~xJQUhktke&VOV
zbNxH$^$PK?;d#A_53UxU2KmAg_xI48b>dsWv;I#zZV*2-5kIozX7LH1H^q++m2rN<
z;^#K;TTwpe+isD&jNTd7TVUlr@qfKf1V3TW0rA}L<@(XR`eE^3QGe#6$n;0Wr$Rh)
zK4y3Sg!l^ZJyHLdZD+*ShUfdp6Fkq0=YB8a&9eDrqi6lE7rZXMF6zVfIUW~f^z1J&
z;djMzKY{b%2ENhad!jxZA1u2+5kDE8<3rzaFU0%8^Lg3Vq%q=oUWoHa+iP!)p6%lj
z_(A+a)Q9uoyCc4c=Xs>5h_``te~9P#BDSYrjz31vcng1)bU?!O2+Oxeee#B+6wmz)
zjwjJG(u(K$E)wMjx@Hj1^GjjyeT!ugKOXJx1%LcocJbWb;Pn<bo6G1q|J=JFpV4!C
z3mjGOU-{E@3yV*Qe9HXtI$JUEHQ|{rYCkC{p69jv(4Nb8+l$YPe9Hamqf;t~=Xov8
zKcBU%ES~4JxV}hV$Wi=T)Q7&`2Pg3jkYCt;iyf;izBfGg6Y?#rFP`VSIG@bbtFd^V
z@8Wp4rhGH;Jg>!kbUIlp@uN|Hw!iJQw&MA{IM&B2u!DG>zhZkvkL)bIGWsva!!>og
zi?0vQ__xo|TRivEc-}1hSwHbyZ(1P!r-lqNdgkjbGlm*H&jUERjx>6XCw_Kg#dH13
z`}^_h1f%Em?my!tp6g}4FOY5dRPkIdb3D&9aHe>!Pq}|+QO#TY7{mj;Te|t;v%oVS
zwZ6MhJoAwy;$g>@rQ-R%49^ETd#n&Y8})HR`N^BEHhR`)k@Y&Gw?+AJu|eYbJe2qM
z#gR=$&-#p+zfC-!&vJZN({-14?*B8Mt2*s7dY)g}pYDKo#*Zu7XZY<y;%{O<nekSB
zQ-t_q$iJL#v>kgwd==y`&aWCZJR_dp-{AS)47tyXzl-vtaJ^+;UJ{=g`N9$Y(Ee-U
z`8^HJx1Y|865k!=v%jQoe^>k#_-NGUa<ORf{Qd^xbN;u-;`#jz?icMp^W5m!f1{VZ
z7M~sco%buM|6B3=emlqiL5?59w?O&qU-Q#_5nmCW@z(n8ck!+0`Mi6}Z=;`p`!&KN
z>A-~Rk$NaU65hW_O7UE8a=iMQFRl0nDBmCD&x}nkzBfGM+2u%P@%%k>&Id-!%Wm|H
z&*WWmiRb!}>+zrV`NVU57lZ4yO;S+&Vq7ohOM5Qcis$|z=Wlfa?8GyldZ9kohLtpW
z3wXcU_D0Y7xm~sjM$h&2{wEINx!#OJeH!eoX7t|hfzzCfp4WS+ZEd4x{4BGpFP`%a
zj&C!+G!oDAlgxK7uQe5)8u60}@BfYrY$<*qJm0^wAKq4c)<p7YT&)h`ZQwcHKFHiz
z{04Z&XVQn=#6N<M#QpWz(M!B5@-O%6CVTZ0e*~WEyPC}hiRXSb<E>wTq2endpSq*|
zo#IA_cZX;FTZE4h?*q^C%v<MA5PuM!`z>j@d5LGf=J?#J>{RjGuV(v%Cz&ZeCE}C&
zA$hON5zqY2@nK8AJn^<DpZR*tu!Z6|A7DQHS!?OP@*lIV5TDrhY^Oe1C7#cl*ngw<
z1c>MSf#ZYYv>>Brd`7m}B%bdxvOl^N*(QD{+MnZX%;%lr`8{5ahuKc;6+ay1bADp!
z7i#pZf8V}`#B)EK`!ioFM~LVA#2)>9W||Y?xqt2q|K!$bqh~(dxGB=;+5VNsUlP9%
z?aAvs-T0b#&VTs)-8OHO(KDX+#N07@)+f`U2jV%uV*97|dHg?p{Q0X2|KIy=|NZ{e
z=E2X!2cmtr9=TBcwRo<t8E+X=zZLI>^)G$t8}G#j!80CW*MAmY3HgrgxozZk@z3FT
zy@Trh7M~UQh3ly^*^>@RxE^T=?~V9B^fZO|+3>u-JNKp$zYL!3lYV-7@h9QgU#h!i
z7XJaB_5W5RyZEGtpD3*F+I+DR&;0I)_StbNulTGepZha`OACm%fe%Odef!#qFALB6
zYggG$d^32C=LOP~H2Nsi=gF-y;yK^u_+z=Lym&sJib46w$2*AU`CIOvlx$p0JkQ56
zKEv`jiSL2-@k4!FVrq%!`B=8+h_HG_&-u*2xs8mT^GW;8O~tQ9{n=l_OScry^R%qb
zp5JZ6bAOxbi#iwE8$HVpUfW6hI@G@>+TYK;o6)ns+tutPp5L3|enL#<e&Q2*KYGHW
zfkq#P`djXH7tixr?7zvUjxc&&@1oXYjGpTk+rksX|Mh)o)c<7?FQaFD?p>ZDp8HE2
zAF2e*5MK=IO-s~g=8!o?&+#Fv(>(E&Q9kSMkYS;C+eGqj=le^<4~A#|-M4kQ_$Tmu
zzu>;dD)BteY>D$xE1Lv}cR_w+ynV|TB%a@=qHhx$EItV3N8*0%JiJx>UU-fV>wR{L
zKMv3Gmv!DN{wh50?};*@;w>=#a6bIzPnh^p@Z5j%xD+m)^9_!l>(?9?&+&@u{YdxI
zM$h(~Uo%pC6V%@g_bVpzCGk8T%Y2&c(N*zHQ9k22YS&HieBX!TbKfa<#B)E5^Ch=d
z4~#w<*BfU0*yuTbd-Cy_c+P*kQ2vM$uf%h|k@1{-NvwE2ujKt&)cd`7K7Zu+@9OYb
zJm*WC&+JL{-RN2WI#IvG^Zg@7w2xzOlEDerBb;CHd1%kEDU6=+=GG{U_+E%lu1EIg
zPA{JGC5|T(US|@|^8?&}jyjl4Jm*)8w-n2)jGpZu);q8G&bVH-Pqs=0#P>sfWIQ;e
zuoWK&&;6fy*NTe&1<&zw#`+TCdm%qE{%;R2Bc8v%!1}MMQ(k-k%4dAG&*~t)F7gZ8
z|K;PV;w!^*d<foML;N9l)<4D6T1L<P#%`_aiRXD^w*Mj9M&fzinB(WP&rQVVK)f-Z
zI-h7EzA!xJhnE(&5q|;g6NB;OYp?d=xgX2^8&|25(N946Ua7i?=YA~5+l@DSis$z$
z7!PYU_BDFOTfcDw#dEy1MEzYGx{Gg%_P57;@<px@;{W=-D87%h<<)5M+>doZeNrDB
zZ}eP`_nhNt^xUtobDLuHe1Exp=^5g=KkSbBH~2MM{Ajc%>+g8pM|?7P-rowV7KrD0
zWA^vsgO`X8Livn`nNG{ab3ViGqgrKJW%R6%bM#vAoX_yQX!4!wjh@eszIp|VUxDl8
zdN8iVR`EXYZ2yL(c8Wg;Z-IDl{Iy3s=VRXRiz4@n=kFOYpEg?&CZ6Z7SpN<E!^NjZ
zzGHiqt9o4g0(g$kMbe%Y&-ah`e!;U_=fv~*EZ3VgH(eCp4dXxO14+hR74Hwv`Iv8`
zo8mXavpqv|-x2>Dp8G!!U)?wQzn=ddd?Y>v;*IOCWpkd1F9gr$3*H@HiLVLI`9|}S
zvEuo?1?I0UKi`SxelPFut@EG6cSU`ee=Syh6VK<fj0d~Hzr@!;`7Y>>hn$iONw^+i
zeh-IlkTHe$c_^RtcYlytJkN)-JuP-vil2<~Io`T?WfH#zp7Z|#EwULs-*>RGu@b)>
z<+Hzxc%Mgn06g0#`LX=s`FxZ0U$n50_{5$+#`P#_^o;)(6-pRAf6sSIiZbF8dtQ0%
zdO7ilogeENR7pI~Yq5WQ9932PGPFPEtIg}zF!~t8e>SUHM(+)8`LeF~ji?WOk`oQZ
zGrzOH%v{(+JjWmU=<Y4VkHz|w`S)VkHsY_qGd?>eX)nG6@+sF}O)tBNUklIqOs%zD
z#WVl1J(CXYDc%bC%M$l1!nv>bI`AyNMdpFxJ>l(fUas!LA>t3fv-~PMhZ{Y|t22{E
zi)X&(d9%VT$BWN~_~iZCYvXD3JTH3h{bcdX*O6%dLC2;WJ?9T+7S0yW{LXw)xTlZN
zb3E~?us}TL1AO0SY>Fk~x&O)a*Y)em#IyfepnZA;trXAqk=dT%qt=S=hWktZqTYI=
z=lp6*&S3F8f5Q2v<BKigxgOzsFLM75@!T(E{&JhO$LQG~3v}3T^z4rfiiiCxANBo+
zc%C2Q{MrB9G4VVP#{SsV|CG`5dgBJ36VLU&E#hr&^@~Q&_Ro~zs(9}Aa{YV#{tcsN
z{M&E8ZS?H#;hy)!Cww0*{`^(fhwJ|HeeeICzgpV$k$ApO#QtJk=9zf*UrV&-*RL<d
zcfffn?w^F5ej}dGi#h+#==V-MpU*PhdiVJxJ{b8o9Q8ly@J&3Q&vJZtmFk!H#GcP?
zx@qB_a6Qry`H}U%ydk-G{{A5Qi|^>v;`uz+3fJ4Ffu;Dwp11C_$|OD`##`<W+<K8!
zd{THmA4w9LQ+#Il9jO0_S$V|Qfam<JV2AwT`TR5t<?k$BNW3%4$Np;iA4SABgXjMF
z%5%kyp8c_#e`%v<{6q{YC!WubIR59VUdia$UxL$D70>4d?7vm+R~J77?ZbFJv#qAl
zvwaGC)-`&LKVHom8a>-5Q-LPpC!+rRKGK@F=HlnVb3Cz+X#KDJCtp{iXZttr?q>8H
zAF`M4D&7nA=X&#2vYtlI{#)@{AEW1Zaw2emc+NMNPiKuBBL1)amI(blh^KXj8+|m!
z2j?84jh^wA<o!6K=XlsYVxo9H-{*Q^!u-kN=U_d{{xzV>bnzkZmbl(7WoC=dk9^AY
z+UwtQ#q;~jjJNw2e8oqgeD<$Zs}_q-hkVNZwP5fv@qC`k{(hjwO7X){KF@<~&9GKH
zzyIute39lsp!mZm-v#a8Yx_p=ui-ggjquzep5KeMNBJ+C?GT>^{hjSox4<6pR`7ft
zk>*{9_)74Mw_Xtk#V7oJRQ&w*c*?;4|MzP?XR)yOyz+>6?#FWdYuW#pcz&-V2JQ2(
z+$r%B(O(!3+ftkpzZCJz>pgwtg7|r8AKqWvbyvjaf#>)1@{YJ6{xCf6Z?1Z`#h-^~
zdtS?SU;IvZ?kDtn_E3Cdc&>Nc_B|DU37+e(nCUOYb3c~xzt{DR_`NJ2@nC89&gdCG
zDZYIae>{=$7oYhmK7>Av{(eE><v+!9f0gs$m;Eh<CR~ruGaj~9OK$Ys9~+rIwRrA_
zxS%~R-%BT+`yq_CPFpjIFOK%%_+P?1tN1GLyk9k4bBgDA0Je``(LCa<F+Om9^6`tc
z_y~B$f7X*W;&Wp>@j`n#EG{Cx7(DA=yjOAYx8XUTd{v>e_?pN^T#sZ)QBM2>cuUm3
z>h+4^gW(x(OV(Ere+r(zU-NEcb@5N(84t1bYl{B}&-w@Fs4Jf5L-_o?-?IkdSE790
z-*5X|#M>aAqwqe|tQpP4^Smzm*VA^bjh^FYu$`;XbADUpTSxIc56t=VnKNC)bN`w1
ztM<!#7(Kri@v?s(qi6mdTWx^RGk&UD4l#Pp&r{wXX7pTtecCcgJonFe{=9|9IPpIa
zZ|v{cn@$uz6!FIW@LSfC#dH10_*waOns~17*uQ*_%o5M{Q#k*e>pNF`d(@xzD|=U8
z@qazP#(e&k{bKP2P(JIkGRZRWd*E50Zdd%p`z7KJ1*|dp9T;z$3=b5~?>|p~zgK&s
z_~ob%$N!wRTZ}#u<zINWUHlZ3&-X7{9N8`Y8up(VKO22Q#J`6RLwzDU9Ta~F`Pvb_
zP^ly0nSVLnHvV-~{CwnJ-mi4$Pl|sD&+9$we^z`d^mkrwkwF*4*MjGG+qC)>@gDG8
z?~h7<LwsVtZ@B8-E%E$)L&lHq)_dYlqdv^P1t&ff{|uh*XL&SzDn2XXllwF4tzQ~F
z>$CE0jCkgE#{Y>UapJjO&GO&O`zYQP_2+(d_O4&Ww}9V>_`hZUQ+!wW<QPBuC9xQm
za6R(Z{wm5ZbtRd2<|AJ3p@39I&-qfW;pxQpMEyBGxmP=*(K9};XUi&{`HuPh*OMIL
zneW)YzVFK|p81aJkrvaf#rMVa^8C!!wl+r3>rGR%i1>~upX;4vUy6zE56}5S#Hmu^
z$HH^|7V1~l>~X#&d%ud}`Tb0e=R>Ph5kDUF;e6?G+UnwYew*`$Qg@uiFGKmf-nJoi
z#B=`4@qgls2I4!Qe71juHZJ1ZC6XU)ZJUd)2G9CG{?JN%TI4%#j1TFKw-fIL&-g5}
zu%q~c@T`wbk1pbG!S_Uc8kO%M-WmCY?Kv!2AMpd>xt>~nwZC|NuY>Eyqw5BX--z<L
zUuQjHn0S8QgX@>fbw-JQg7RI^K5Mg$6VLB~aQ^e_iHCU3x7|>F;k}cLp5x)mY171)
zLHtiZ`D5G863^$$e4cf^$XxNv*On-M*_Zi7&+#GR)FSbG9vzMHUoQ0%UklgE_#fNX
zUp(_W^JAJSYs53Zv;8Zk4K#X=pPz1RFnZ?4&`q1gx5D+Z{td@(7oXUEW_p+1;uG7?
zyqq`0=((T&E#`pH$Kn1SI&@e(-=Agw-8uKDc&@(~|Mxnd6wmWf&Zy7YGH1oFL;E|z
zpZRlMJkKw&zqG$}+2}d`=UaPS{0!8G?Xz|0Eu&vF{oa3mU--Z0ueLY8Cw?5t=YDm%
zf)B-WzGsW}@p}D4{0XdQz2Th?z7QV*&++retQhf?k?+{Q^0$u@-xHqapX(R<D4y$C
z#!uC6U&J>@e&KlA{mc*XgA?(Gm;DjH0-pElS-)h%6RuxE;W?krP&Ji!u1~qX>z_8A
zc&<;waDRPoXAqwp@y7Y~n@w57b3M!Yc#O{>p6gRSZ(83tw|M3|FVw$ZUTdRg`QKs+
zitmi;<$8A3p~B+1p5=VQV{S2{XFQMWT*~N~U#gTTEB>$ZQD~oTe=3OYj_YOo&$?Jy
zd>eSKUnZ?_6wmc3{XKVQ@xCaZ`Qm!bI^y|$G3TFUvotVz&VN2VYAl}X*%-8E+da+1
z^LZcp`@<=%#B+U0KeTl_@%CsR#>08rj^ddw_&lrFr_M&t@w4E`?&A49E6(?JF6k|v
z`_DZ8pT19j@%;Tk#^+^+!A8$`E0ubfc<xtoe)#^$Nb#J1GCwxjGuG%iK3t#TA)dcy
z#OIaATTT)`2<u;-XJ~FSO+3$QF@83_n<>5&@-MHqPlUJl(eS+95A)}XzXTtS{*|ZO
zBJn)0#rWJ_&QE+B<WtU1E?D@B=XoveUlqT+T6_tV&-wQBwd=&+g}1=<<`}j?JkM(}
z|K6{?Sv=2c@%dfvEZdEq^(p>%m-uz4KkL(W&pz=E7_XRr$4)sQp64<C8vk1z7M}s-
zb9_ir_^5b(pNHd>@23;uxgO#3i#I3Ei064E=9lbC&Ktcw;^9{B%i_78#`fvwa9upt
zJM_M(Ziyej_ROQ_h1x{jHF}N@xq_p`GhcAOJ$URB@f`n|zp6BPAwIGB&*I!MMjwav
zZ~ywO(KCJ~9sD4k`GWbbuJ;$SM}4ll{SeRd;g;~fO8yb=h5O6#D&kkt5ee5L^vtI%
zE~FH{3gt82vae1np7TA9w`s>`FnZSKTf;2k8PD`Dt#XL(i+t*a_O$%xgE$G>XBT`V
zykAH@@pi~}93KkJC@7xKbGe>s+^(>Ap1<-!eVmFG6K{+0ocF8Gmy+W7JeSw&bIM*k
z*UMq3&%UJ<#PfMB<N1D{%HsJvm*Z#E%8uf>UgrF&bZTeuTrb<>`A)&8+TuT<J-u<g
zxr6JA=la(LzUJ7*;<+Eo@AFh`)J%MN^hd@|x7@A7b3M!Wob{@$_=+f>@sR6a2l3o5
zr5`z`v-qJXpX;MRZrzQZ<u5MTTRg`%uJ<E;^%KwMxh((X`9b0*qyEfaTUQMg-wvMn
zCC!kL;<^51`;>JWE1v6F_LtI`J;d|;QVimATC|t=#i&2WlZHE|iZ27t`P;2YGsW{f
zHpk~AExpC_`KdeVU#if2qxXiN^<klSK0l>za(t<Hz7NasIe5_u@%&yE?{Ae}tHtwu
zbGGNNitEJl{UGjFm&m%o=vklKk2Z<t{xjDLLw9Zyp9lHW5$#{fYnS-8@T^bXX8Xi%
zhi8A!l>dPE3dq-t=VWgWiQfdz@uB142=O=IIscsEb3%Ml<QMwQozIBp`@)=mRw{j7
zJl_}Q_;B*~CGks9AC7NrFJ2S>5T5%jyH-aTJ?j%R<gU>(9+o>ri|6+YneV=5dLlj_
z#w+^i(a*&<g6DX?b;oP*nc#W7X(qiD&-Eb3pCm0mh)--i*vaOLcs|eKcsuR=ck!HW
zbNtDE?6-LCPx5`J^$U}ZOgP`>{vrEUlAbAzp8fYkg|tS`_?eX=gZK@&U%bD$Ze$j}
z9G>+V8I;}V84p!P=MvBLAltKSgM8xsQ6Ju~xmE?m&x4P{_&n)_t$6PLGrwdGwG+?z
z64!&(XO|Se9rfY&e3o^v7asu6_V+DOK|JR_Jg*q~!$CafKU^;~jI1V}^BMYD!A|0N
zevJKn`Iy?`r{Q|J{+(67zW4^nk2`RGx8`UpzBfGglPf=KD*i4!>tnaKrTE&&k1YTB
z)VAX1!t?%SY|}w}GUOxHXN7HN@ipK%{v7?-O}raC`-}C7UgCq`xgYyzaX<0=eS{d?
zufe?riRbq^I3HV5aj5tcs82Y`?~rn&_>71*`ldI=h%W`t{ozeP6T}yQ=Xh9kw3m3E
zr{eg0w*FM{{JjINm*3@_Y4mLWS1;xmJ<ns*3!NvP`H}to#;k?n`TUya2Y$6*Dt-{!
zljVOdzQX9)U#9<9C4LUd=Xl;IGC=$gcs{?l?H^?HTu)URw8`ir5zpVNZxi1g_2GJ<
zV1`}dxnIHYXXpLB;<=yTiu$DA9x9&sF%15)=OLr#^YJCkBgAt*wldD!A1ZJ{JkNJ=
zKds5T)8hF&h3$VYB2xS!v_Hp(Dhn=&=Xo$Uw9l{Z*TgSLP=5UP0mAR;_pbu$M2TOY
zz$g93b3AXC`L1}z1IMc>_a2C!h4WM#Kkc?W7M~CKl=X2L|6DwOe=r8^<J9=I_$|n%
zoS&4>^HzKc<O|N9=e>R}zFZ<c&%w{)JHs;`M$h>!eh@szt5qF;iw}Y4`1!p=(oqT5
zBY&M|MtjEoNFko*nVDZEMy3(Z^UPeo2l=NL&-}>wQqn=0jh^}OWcBRgYasrealJMf
za*1dDWqz4>Kd*Ral+XH%+Fn3>Gk8nXr@yDIc;-j8|L^8@;%lLN)~9WOlH&i$U*Y<_
zpq+7L#1~DZ{QD8*#dE)!<6G4Q4&vvbe2zb7yH^vRSU&1d-bp;ycg%M!lh-zS3*4`9
z*XkKP%OAGBk$CQ(GavOH*;G9D&)Ghm>$Mcm_o3Lo4&-Pnel*&j<5i>Q?Zxvv7~7{_
zXeaS}Ux|Lz%x*@{>pkh(OMF(;pY8v~uAg|mkI(&tXWs^jpN;Z4AGm$pUHnFP_V;dq
zBgAumoB8q0@G;`~{VNy5XQtW{#6Lm)W&JN@@e*Ge`IPtT_@gP}m%w|YKFxN`5Pun-
z=PO1}o+JJjJj-`zIZu3j<VRlbLYsx+d%?S-{xjY$5zp^maeUi$bh-HLD4+GOv2c}m
zp1)%Km-h$|&+}AK_&&zb@<B$=@y9y(Ch>`VFYD2@t>T$4_<gfs>vxK;g#O})_P;Q4
zulQo{Y@g!wLXDp7e;~&p@s&}2AnKF*MY#C-@cezE+abq|p7Eb_=4tWiQ9j4>;;xb6
znP29k{;_tK#Q*jD3*QfH^zEwnsi;pF%D;W)rg-L;zvj2g?}+DqrWeZZKH$N>@`tNE
zHhRvla$7zZ&wR)I;Vk!FiD$m!^#*K>70>-uj<@|i--~Ddib4DMH2wUqymkKX;`ux}
z8s(3B`^)IrziNah8J%!F!t%NQzkGfQ@qB*G@u9?^G~)R@+7k88?U-IXpEq$oXKmWd
z;$4wXIo@`=olSfIJnJ(x*h+j+<U5WJna1W7-yMDjt~Xi30^-lYb3B=6Wh*`#@)yUG
z*Ds2S=lj2mhpeF`#Lq_gT#v7sSw=kH=MBg8es?V|p6g}KZ)X>C5T69&8~bmgZ&k(T
zhv)k;`_I=9pCu7LdSxx~T%R%@Wpb}4ei+)5*IS}`Bk||pIlj%y*i<}!pONwD`mlxg
z!nj`U=Wp27M*I=fhwbm+*<L(<Z;|oVr$s06oS!iM59IG=^ju$m{LoW;1nSTC*=vON
z70>ml72-Lm??CZ!D4*>!pr^Zd=4)G&KfUY-@qGTs`*qJ^jCjUB^ViBt<Ha9EJaGQG
zJit@@FL>6c;Ls`Jdj_Poi2qCT&wu>>C+D9HYt9h=8|8C77@TE}_!20e^Z%eHKH?j~
zyP*Bg>|P)~BRuCP5mT3l4@Uht{(Nq?TzqDfABpvXN0C+HKcRe{hbfmXK)eGy^If)^
z>%~8SXMX7(7%cvizusStKeI<{6~7ew)f^AE)!r$7D)O~G?$@%+d&Q?gKIMF%)1&=H
z&;A>_D@^<uluuu0a=7>~c*bYtmdC~OJU07py8@@hXUF)%^ZC2u&WY#uGg<!);TOff
zNBNA;q`p_hGhg$2-G92@6ki(g#`x@5{*L(S@a$i&lRXg6^VKYW*p)}(U*LL~U#bN@
zGkR~tXZew@#Pj_WjwkQy#ENIW=KQ=-w)f(>KfwGI^yHKHI%rSMH<IrCCVnM6$LEvN
zeu>`#&-R(!Hp!TT>yd--Jg;tTmqPqDc*gVnFR8_^g=hZ?IBhAO`?rjT-pewH=krI-
z|3CN3CVmF$!}Eb3s#zI5^Y!y|dByWQ0IzrZz5L?&`(?b|Ra**)uZjBe`B!O=qT*kn
ze@#Gtv1w95d{>mu=ZU$k%NRYcw{cuK@pDmr6zWs;NG0)nKFjgE?wYFN`Fw=;cizAn
z;wzv&tp60pTH>E0|FVCjO;=AmzgNlm!}nVa#akf%a=bdcsfqYS@SM*Fk7*&E-`8UN
z^li{a{4bQx{NiTSUi=~C-)P)l&*yI9`MpZE|AvsR;tM05xn90Hv#0pE@SM-|Xx~@-
zW_YeQ^V<y+&-ahQalQ4w4iWE#^4T8)P7fEK0`bZIxcZ;zZNl-q5Ipa1hkoP5mxJf^
z?yKTy^gK_#E$tNX%~8H1+ULgY>EgS<yTg~;JX?Hic;;W9@jl|a!E?NA>9RmP-`8M#
zHp;g|yeG=14|=mq{4n@PT<?WLE5)~kXFM<PSu4I5JkLiR=)7J$&kMz%K9lW(#q+!n
z>ystPR`JZ&9M3OY+##OxPmZ?>*6cBQ*5796e(_w7^ZVhuYKDp5i}vLBlOapE(er#)
zjVH&9p4VG$&nfZ8Q6I+h;VI|Dvp<I6{>HYsDBdGM`SItkY@LgS$L}xv_xo4hDqR(S
zDuIvRe_;Nto$RJ~-e1=L=*8ROeXyRTue0*LcpKy|u9q(jd?Y>t@)ySwJI80@W8j&u
z<I=wpUlikiB-(%U-8bTyFF1b~u;rcjVkn>M{e=@gi9bY-`pjwaO+4q5tWV>7zr?3T
zJa9ko&Krxd3G-JB>cjSTIGkKO_cQtZhXp>V#V35;%HJD``RDhB+6}N2Ul;Xfet%mw
zlhJcLtol2v_zj3p_IIo6ImL5*%KKY<O&;-Cu;0b{Pj}BReg@i~zR~}o?5?A_T-v_>
zqhg>a*xlXOsHoV5iU|rf3N|JNDk>JBVuKyng$gDrcA?l}V;3rR>vMTOzvs93y!U;L
zYwxw(f4$bM`OZ0W98>2>-NNFxp?%o?H!~I&e-NJWIn~2b;<v+dKjh5Laz@Yc-%YA0
zp69Jx&%S6^)#$k%&s4OAc)oAK@qX=NE%7`*ErRjb`$S#w3(-Ez@1+(t6wmuS>~B*%
zn;JdWzgw%d5T7(({E7c8e{Gu9;)76swtv+d?Zj_{Xa790!BzZBc$PnFjJwfWp#57m
z?`HITzV&i@i0A$=eX0ac@jM^l{Ncjse&Sc)_p<%nLI;WGdYnF+*HG~Rh*!?If1a$W
zkNBeSJimBrIY#_Ocs{R3SH_9&%lwP|{IIZz;^W~NKSPF15pRun$ojZ82oTTvSL{FI
zv&<CF?^$uZX7hNq_^qf9%dZwWUwjNa``c&#P^0I5@6`57#eYTlaTqTTi>?%34E>Ys
zU*}Vp(ewS36erh<uY&Tqf7^B8X7SvQWjvqi87`jVm-oG!+ee6Rg!*uNtxK~<Jom2>
z(Vo?A>=*BX@_8Pyc+(;Az2W^({-M!Fjh^xUW%HBbAEG}nf8ES=Ry_B6**?o&o)^#a
zR?h!>L|qd9xBPoB=$d%mM`HQ8I^Q&U_WzA#?;1USZ;fB~#WTNieOfX0vC%W0bXxxW
zU-`m=Uy0}aCC0<?b>E8T{Uy#%>Sy{Wp7;5!(LXOg_#(bF`ZM>V7DxOL&+*RZduWoy
z=%nirdhXXbce51#3jLq!%|YeTi06GvuE%@)N+*60@*~INgcuv~GvN8WZY<6$ejhy7
z?{@vNi|>bg%JwNzGq?C-@QnXX>GF%ui}qwb%6Yet_@?k|&)*x1iT8x({kP&{N{KHA
z&)?gsc{%YH;hA4H<*q3H4LpBu>Vzudc|Vr<;`{#U;`3m<gkXHR1l1B>8lL+btvc5g
z?+VZQY%1GOyeB;8hnIdf5#Jo1`)@tYJBjZE&-OpK%vn6|LnfeoCJt(6^x^QC99_lp
z{E_D=buzk(=X#Lw{8xNeqv!KFvc0GHmTVu?|HTAP@mxQ0f97f1e&TulZin*I79J#?
z-{0W;w&uqnM$h~*=h%pU<qORpEuQn$7}UR6uW{nJ|IhhYy{Z$9p7D8Eswv`^;(0ls
zKHsiQ7e4`>`SkPp8RD12JEHttBWD{u<H^P*^Tk(3`CQM|$Qdf0_Xn6ymwZ}c^lZ=f
z$5)8w`*(c4Tjzy|FOK}k`w{~^){Aco&;7B^l{SlygXiy!Odc*iGxI5)*M>_w#ZQN4
zeDGSeTl@of_MZ|%_KVMe{Kfq4T<?&0=4%hsKRokM@%}6y`w#sdoDjbX-U;Q;-El^|
z7d-o?%cS$-Ip2#$`8(TQ5}ywJpYhG6$Tji5P#;&6U+u#U@thCD!Jj;KM?B{P3GgoS
z?~AX2`ZNBI@AcT|nZN2+eQxy3@BLD}63_Vt+w=RiMDd(IaQ+s!?t}O~_`U28Pkp`^
zJ?meu$q%FFeXyE2Eyg5Wk8pm%`D%~nDa3QW!FV`#e`@jl@OxSR-2v&uPlxCHt+AVp
z_^j}}&v3nTX7QXqu>F61&t~*IpE?qg%jh|N+bqo|p7Rr~za9)IB%b@*jGsel7c=@8
zjK_X9rHtMYzI=RHqi4Q$39lfY_aB%q+RdyYz9*h9>p#e?x_G|NWr6RRcPUj%ye0DE
zg`(g8=kGC9%x+=v=U?PkNAWygV|=@Ds)6{t$aid?WT8#OkAU|>`@4EMiN6c)1@C9?
zEdB>P|9-^nH0{Lm?<w%S%qz}CJolfyQJ-1s-Na8sKH~UoJF2UA?mx5rGdJxip6AO!
zsL%DBp5p)ZzHp@%eZ}WM|77{I_6-!ze9ibXDPV~Bk|;k0_0Q}!!sxkQy}I;h@qfGj
zQ|ZT8qi20)#Y`}IYt%pg(#b~8`fnRBT|Dn2vHx7JHN)t+AC=m6_P_F_@68j>`%cWi
z`?rONx54veJbW;IiFn?R;(p^T=M_fJd|Itwn0Vf&;&}i5cAa?6A9#Kdcx01!&L22l
zp3d23^o-~CdhQfIn(c}6yFrzAi|2fU^Pk_A`^67H`RqS#R}UI}82bOqHAjq|&$sc2
z6XH3a;rOc4_{@Lxf9|UUH7_Rjue^(%7axe<n}GUX{B%(~??ZAtjz4l${2koC;(l7_
ztQ+FP;5q;N*!7P11IX_|Sl@-0yD$DE@+0?u9DY4A`gpWY^$X9$J0ah3za@HEg7^jS
zoKNN%lqlW~p8fe&?GNJlJxPwo<u+f$^Lvsp_`P%QeHYL8#{K6K+kYE9*LM%cr|?a>
zekqIo$@%I!=hWgKqkXu47+WBncz&<oAHVl)2JxLyAMV$^Ih;v6&%aoor*pE2ABggK
z|IManF7doSlZfZFyiz{#9KTWUu_+6Q|Hu9${$9qRD@Bc->%rV>N{Z)v$sP6CG`y^M
z?oV>RXmz6s;)Bti?Eh!8RWW+*SIl~9FMb%xXS`~=$3grY_;CE*?9&~^Plji_UDvUJ
zc;;))KU0)yBA)Aa*1zkw=0<Occ>Cr|EAh<NtpE7MZN)QRGd|Ss?_%`Kzn2}{jNTgU
zUp{?T@yx%>*DiN@7(L@j_PxEuGyifvc70l3@e9x&_<YN`4iwMtX|VrKDLzDeH1eqv
z+UL%v;o|vz5aUU*6QjfrM*ih|`0IkP;`hTd|2p@cAifadKkIK>b+Y(W@O-}ZsiuqX
z3eWSnZr6guFM?<OYP&XA{2qA5pJzVv#9xEw^R3f3M0^VLAMQtaW?v${AiOX7!{?{V
z#b<$M{qyfxEuQZaasOn@v~@<$d|IdDCh>fK!2<PPTymTEuBg8s{O7Mb#J7Rx`fKW$
zUE-O4nIE$+-Y1^>Y3x5X{SO*FfA8vAM~t55M{})Dh;N7A8;$lUeCM=yYk21OR$I@B
zp9s(K>oe}6(ewAFZgo{W@4qqL#um6CemLsG^4$_|8$IXeyQAa9=R^5ikK7A>B;E_2
z<8gKOXX1U}xqe?<F+n`<zcHSCPM#>9_uuH-UVbm0`?p*#WDol+p7UpG^f#N~-^KI3
z0iV~E*1yGb{!D);e~Ph5*CS47PqzQo*Qvx$LOx~vFC9oLekDBPTge$2#Aio-j6wUf
z?wm>dIC!3SWGtIa{B?NlcP;smQ~XExIPA{^$K(}X2l<QpfqRw|6h9iC?Vn{pQSs~G
zIp21uRZ{$M_;|Eu`SfMQUxDZTM&KPg@%&x~`@_>MmBr^re`EZtKh9o!Ie5mOnynnf
z*Mbki@9ml2(dZN5izn6>Z-?@k-zP;k7SH=dTwiYrZZ5v=U&^o9y_I;*2iTqqE3_5Q
z^*Hl;@#HQ>&-UDXsgwA>#h-1fyBK{m+W-2{9!Bp6zqmnf@tkk)`5w*ES3LIz7$2rS
z9w46YFSGvHcMTRFjOXiw`mdWZTs-&ZIiHX1Fv{pT|LIzM?7#AEU;V_dME&`Dcb@VW
z&;5DE2b<7o;yHeK-nYC@ka(^i*`D942a8{W`ZFH|rk!W>{Jl?~EEFGs@?-FP2SqLx
z&-P?}PWUeuAB=p;_*|&{YVptES)bvB*NLx(e8=at^20{)t>L+T|8Qih_z&<FXrH}v
zcZlcruj1jydh8P45BbXx-m=m@@%(!YZ2vMT4vKG$@;ScRUOp_I`?qZWF{_V@|A6xS
zQ2+JAPKz&y{>Jzg+u)q|I`G`T`kdvWc&>jrKWY2;ig>PnIexcA#))VC;`;s8l-uID
zo^?R`q;QEB&wQ5vKezZJ@%7O@oKH^u{8W5*c;?gbr(PO8`;SfN8}TzyKF3SHKJUdd
zAMt)>rJA439_{l!?RW7LSRbp;a{r{&tzY6x!E=8g^XBB^lCDSieiq-a9ORoyJlC^a
z|NeGLE1v63#<y8{Gl=JUlkqnH>x@Rv@%8XvR-<S996Bqf(Q`hTqFY|^JP+djRcX6|
zM$i58Hx@;Wp5>3fSVBD4*F5j2zp9LQu9vwV?mgbl=sDg$x2P<>2l^-9pUR!rUVL`s
zQ~I?DHN|_wJ7IkN+FwUJ?>{r&6%4E|z5?=T9Lmq?)>wQ1Jma}l>E_}e!t*}Eyl*YV
z+aP~2A5A;cMtn_p{yncpi#mv(4A1x+*SC}S9q>GViK)>=Jip(|{Og{shxi{TpW|iH
ztzP1Dp}#TT-P_bhJnvJ5<N2oc9U$Hw<@5P2bQ&z4_o=?%KA~IQ;o^CJiSe`5tC2>}
z_Q`zESG+6g&-*H?XZnffd7?Mk=WG{$@jOpt{B$cn&FEuLetwG}@m!Da`EI)~%joS;
ze!7)&jh^$3enS?D=lLW3$$E>$hoJqr-{O*axp>|$V*Q^!TxIm`_`UTb*8VHM+<&9d
zN27eN4qL_ZJe2u5u;>o)Jm2L0z|)VB;wz&)IUYBi*eiYsJpZ0Z&4mZVZ-QsMs^oQ8
z{4#j%&%4<l|F8ak`}>1sbDS1G8|5=Tym}fVp8MOZPq`fz#IMACDhoW{d=svSKL^kG
z=N;!b@tu+H*q@gcxGkRV^K!g@O}r=mH_GRH(m(p4_!`JB9KZ3wPsQ_nBF3u~-Cl~H
zi}E=iv#an%Jl`i`{0vI=Ui=-D&-@#4@srUrU))~#O?(2%=ls)t$S?6}(LY)K+<M8!
zCtZ(JgAYP~bIqK}=;PtXKeQ6h?_==1pngPpqi28a=bur0d(@xfv1j|N;v2)WKL-}g
zDW3Cz1pMCIpYn)rit_oq?wu$g-V@#d<qr!fV)Xp}|5?ux;ya;y?pK_uUPe6U4~+jW
z)7Xjs+kK?QH!6uwiTW@<rrTIeJo7KdujlBR;+gNbpX}DGj`%^S593eU-1WtegXi<g
zp3q1<^B2eC(5PnO`MxUSNwpa*#q<1~{rP0)HsYDT*q(vqI*9kj?`3=_V9`nZTzHO0
zpV-dgx&Of5n`U!&@#RrI=QH!h^b*hcGxwt=HR~h33D&c$zfG<I;(NoheSSUj7JnPw
z8~5=J?inV&81gCmbJl4i#V>(pf3D@~E1u`YVTeB!O8ANAeP-_GBz~SGz9sS(^J&DX
zsp5HF%=zuGkU;UfP(J4~mVIW4=igW2eDaw6T=D#S!3k)e0#*x+-U+_RjYZ;lUd-p^
zxN({Ia_Ikz|6Ze4iRb+XeqZZov$f*wP<|rnpFj6T@h#z*ueZJ2BEB;`=ZEQ{wu|Te
z6ZZeuph%++NBz5Y-YcH_Z|o2I%N`KV{dNnKKmJ$rzw-5CkBR5`GV?{X<)_5+{Fm+1
zbx@3W?gz5{-_*Gvp81ILnVq&*#Bag#<$cTg_pcj0fA8|`x5P7laXqzg;yv;FULxyX
zyzN8r+fe@~Jl~gvpNeO`WBh6S;f2vNzg$1|TKp8$Cl2>>7SDetp7+7nACC6=Wb~Ym
zwX63{JomS`e{#$Am-soTKl8=n_+)-b*CRuaADK^&hNl#N7M}Bmt>di3r$T;=!Sk)&
zGQIdB@Eq?y^JNr&6`t|))vGMx`MoLj|11Y{h%bnI$MVz6%p-mwJnL`KwSf3Yc((tC
zaz(^Hfam@2h+oCUpMYn+8yQ<#{Cjx*-Yd(?i)VghJpVDMlK4#MpZvYij@867Kl-Bo
z?8#VDJoBSB{K)&Y#n(lBI3B%s)DvG6p7oEJ*hoD8{!0StQ=)A%@%%m>=WhvxTZ(Us
z`tbQ?{?J<dKk^akV|~26c&_*Pd#^0$D4yTf<@{t;ug>CKP=DTc-Cd=-cnf&;w{59<
ziRXHR{`xg9@vBije{YKQ{l)WrUas#>jr1132IX^o^rp!$@q9ms@uYdqkw(w@+q@Vf
zp8NUqm-me~dOP%=?*WsHp7H9C+f?zKAF}*bWdg<XdzhR*-1{+8d=T27>-V@DbBsP7
zzt>~K0`Y%)Uin8Z5?>zql=G`wjh2abgXekWqHL?gUxa7Ae)o8d_zuXY^p7Jqh@TD5
z{#kd*7V$6OnSXn=-!8r=@=-Y2|8UVr@s;77;GcioBc6ZHi2dL8M3i{`JtNL<?H5Fg
zKaKh@e|779O#D-L2h=~R>M8M`;Mt#@Qpbqr{VV3XVb^2D7shy@zp(DI_<!8j!hXva
zpX=h8e;x6A6Pw%;&--2MKM!-<6VLS{$JhGj55)8S74uh$eNV*melO#H>3|nT&;C}}
z?X}T!{~=GAcjA}gd2v74=Eq0z!SGyP^o#i_ei(c-o>$1ypW?Y5iGhDVAlZbZ>yecx
z-x_{T?Udq2z_b5nwy_e=`2fe`?RabP+@EJYI=jtQJm&*!&-dfAi0Ay4?fKF<hxoPl
zy}UoOtzaJU$KZMYA>F(D;@88oJw1;UHu`_`|GCADp6$P9U}^EYQJ)a>hx)b4i=PM2
z=e0O}CGk<nk6gdMyIoa$()I73^K181VgK{}kpK6+tm+Xp#B)9Chj<t?v9|cJ$dCNJ
zy`1Wazn0`Y`cHj6<jC_s_4)I+cRu~+U$p{_#1BLHjGqCon~HCP{6g=&zlHc%l+XSd
z64+XNHI&bI812?xJpaC}9lp2VT&AP=ROk=f{~!6oU3?LEmhW(`o6&Rr6SCApd_9!U
z`ji;xW%SIy&b9j+J-=@spTXPcxgH6-H&i^=vr!n2mBW3Ep5xKoZ;W`ZXA@C=f!5=V
zp6%~jaFY1JXn)4rxVKZpd%!bZEjbb(p6g%s=WcUnisyME>p!jM9PzxL%=MI0<poBc
zfc6|}xk$V}elPbE`d?itp67{-|3B8O6wm!t*8hvo8u9#IH}?nHHQ8YFoS#3+u|<4l
z{9ZmU>*wL(3&H!LJ(ui_Fnac%W7GGDcSQM|uTJX}CB79r=Z85;M~m;0#Q(_`C5D!e
z?_V9VJ|@0(694D#Ple(4wz_jtJkP&4-zc*7toS@h^4Fj8olt)LVX@+`;O_-H!l!O{
zS$qugJI7bC%-6*aLjK}>AlJj2;(Nebqdw_(-W8u2`7Q=N*`x>J`Tj4@cRIIyBECP$
zXZ*}t_=WgT_&C&O)caTB|8}0c;^<rP{QET=Uw!6(6wmj6S^pr9ui|adKY709SNW&-
zz4*P14`Wj$o0xPx!ut;_f5lZx@hwmvj+c3B(un7JpZV8ygtd5%cb@MgG`1Db`#kK=
zw%M~7J>&nCr`g4GKb-Sbk3G4?bN`L~A!u5D@mybXyyWRv*yuUlo0KXpp6g}Kufo2S
zGJ3Y>ikNcZhoC=jKdsD?isC20v;NciR~4Tdp6ks=4mHI0g6H$voT0XOzAqe&_;BG)
zU9-peX_>7J#g{>S*x!nbZz_H+JfBxYs}|x{!E-)uTcEXg&QI7suOzlJdd4fe!>;20
zab6t#PTqH$zua9s&wsi8YSO=(c<xs)UiGW#A-);%BhQ<PrS%fe?_c?$KRmh7Pkc_~
z$8h+y8wQDA2G8-;Yt&HjH{jX+Gn)E{&w}{R`DA3yG2&anGe6#WK2H1qcx(LLrF$oe
z4}^Du?;bEk{04a5FY4$PAfETBSpP?*W*R-8Z``-p;+anwf0mq`FFpmvBlF#{#i8Q4
zKgRpC?fNej&;4rV3txwo;<^9K@ot@d&A;+qch-yN`^9#6zGb#<HhSLQo;EIAJomTb
z5N~s|iV)BJZLUX#<=-RT8_$dJ$3Aht(KCNlKYB<!^E=~1k=aMZGoNyQ(y#kT@kcRU
z*gtJ6o)yo0=YZ$sXc;S>``iCm|6aOe^lVSp)z`%H`&XP#IuE-kel?yK<4=}`cg633
z=Xr;B)(7JGJ{rrf{N%BCo-ea~j_rCbp6`osJhq$q%INvL{9NCP=lfRdpLHvL6wmwT
zjE8n9zKZAlf0jS>(hu>&kbgNpytmR~QquLvHuxCy&#Hqh#iv1jjE3*zm_~eec#fBe
zw$|eJ!E?R8G2TWzzdy<KY@hJV;vF%5d7jnTFS~fIe;IElJLeY9^=}l~=YE0w;(4En
z<zGoGB%b+~{khMPV&ZxKYCY=XI=htk0vNwV;3K-16Ca26WdF3SSW!IhQ*phpB6(Hu
zyl>2S;&HjU`2MIr_XDF>*D`wEe~1`b*XR?_J|i16G<rTS@2pM5^Zp6@f5>Aeqi6fO
z?{XH;{LcRGKc$^`uCJZ&dz-kpif8`yfVVE;E}rXU&QH9)bQRC_EbIT}R8OPld?09%
zr}$v>AFdxC_33Bye7?hK3=-c2<y)hDEYl4YzY;zMe%`GSM$h?Jk<FuxJ^|%N_>MDr
z_P3EOCK^4*dzySxjGp~J=Jj;(JfCI#YsAhldgd?R(Ana7zQgZ7^z)i8{sQ)&**>4E
zg^It4{LAmpPfWd3yfgBnJD%6Z>np?u{>3L>7bc$fpLt#|$7j9xWQ_m#-cH`eo5eSW
zXa8@QJ^Ww!luvhxpO5l6A1=FlxA>j#{Jqns?iU{qACLAAcR3_JJ;pEln`4Qi;`6}!
zq5LIZPKd7o?*-rO^ckaPexDY4UOeB2<^I5<K9|Hhpgx?>IM%o(p7UGg_X}xnitoen
zab7>~)*bQOzY0S8ByPHI^z1*+d>@PF`?HKc4O%=G&-<KgfBU?z#B;x$@$<*4M5AZ?
z|8Vew_(f<>#;fVUU&POV=X`r}*B{~;KmF1E4t5s)N!KGKQ9kPvVqqzMHaz$Df-j~v
zdI!{J&&qV-SD<{xE8ihD;(6Z9^{I9J%;LG9%=Wa*l3hIads+Umhq;WN^=}uEPdv}Z
z8GoE67ZM+V_K8P(HtbQ%=s8|~lrJTo?a6#M^><nEn~_f$&wb8U5YO*fMWg;zmsJs8
z2>F!j>rVr!iw}X1LHQGF)e?Uhp6x$8eO>YVd%moHpF0i2yCQ!Dp+2*>G!gF)&-MGO
zu}<Q*!}EOPehX*uvG9DpR{7eAzYEXuLtndyPlx`={$DoQO+4cd=bz5Ax|%)Ob92|8
z;_svWIq>&1)7W{6XZ~eA^|0tC-W9)>`?nu13>44rSFk@juN)$t_hZ@LnhY6X^z3hG
z>Wvo9`?S`$-)NC}oOsR$qR{^C4=0G{ek0GP3Pem6KOODK{u%B+T|D<2`S--F+s_cs
z{lf&*zjD#pM$h&v^J$)V=69Y?MV$x{zvnN%H^;&y;`u!&&S!3Wt}uG8-}~E#iQk0!
zFrJ@EvtIl%c*f758=H)t^H1lE+r)1{`5ce&qj!qu{DJdH@8-M3^E{gU!6MK8|LXtT
zzZ!}ASINI0{ICAc{V0y#QfH5d|Hu7voCi59I3fNC*1wFOM?KCMy)XLz%gX1)*Fb(`
z{~uv_N&I<u_P69$u8L29XZx25yCJ?R;yL5z^PzXd4~A#?85`UeKMS7wlhw047Jn9=
z^TX4Ro{4`B&-r=L$OQ4J(f`?>CrnN>dOokLE+52aL;2R|4+DyQ5zqTVjOX1xeHYK~
zeQ|%U<H_IRtD-*fsE^aa6qA##UwXpFz}tGI7T*}2`DKNDI`Mp8#scNrS=ksp?{9y&
zkx4w~1FXOQ#%xB<{E}r%F7X}ld)Ys|o98on#@m?Og^Zr@-#wwIcrVn4_Ziw9C@G%z
zli5B^W|TF0u217SR}k-p`mld`m8&A2_jwY~AIki;H+r^zRIG#1GyXWOa1_t?ZP`Ay
zgBut<+y6@4CgOR1VU6Ewm&wWK!{CD+v=ZM9?a%WF=bdfE4}$0Z%$8X$M$hqnwX2)>
zr1z`;<ZHhF5?rpU_}W<ia(xu>vxoQ!@NCcPF}=m_f@k~mT+&y3UgXnow0~g#f#N5_
zGoNm)IYd0)4`Th-T8|L_9pwk1KJ#yl65kH_F#&%1rm^Df;W@v`={rIER(Q^T(mPES
ze+%9f_34vmy3up~b37qPd>Zs;_P2rug2iWt=le%lX3P^`44(PxM&}UmRp5j9d&?~m
z-xi+nE%?`R@jc)<eh*(*ZS*myPx$h6;<^9H{uVcAllY%_zPyj^<+x4!P}HC6qcRzH
zisyc5BI+M?f0xm7|Ho;^KJnbIWB*@2@u1N&zgxCFV)VT4cdGCS@mx>QC%!)|p8K&J
zFA>MiiRXSSf3NNQi{f|UdGY<4E4{9YUklIv7E<+w(KCLQNPWlXS^l2u@#1+uf&F3g
zx<^LO{_i;InfUeiz4S|(CWt=)&-G^6Vu|8;|0)Oizte~J;`u#N`naQ?#qUIZ<o%Pm
zbH0n`_cXYkn%d*H_}s`}94{Lyq?nR)J+cDc8^5=2vee>Z;FrM9xtLZwzmE|Pzi(v*
z@q-ZGI3Ak~$t0fN(_sI!s+Udt-@d02nkkpjbNzDsVP5fkzlQaBzN4VgbA5VeVo~u?
zXdef(=YX~)#TP;UXMZ?dxUBfr@Qha-KiC<46zbFZcxCaNKXX5A)O>rRXaBF&+d+H-
z)_;e-?+{wmQ9ScI<9W%{4aB!c`D{<;>y5>Gz;k`Kd0lg(XMMs(wh})P<#T>$(X_32
z=6BX7IH!yF;V7TuH{p3F@yzdBUxe@LV)Wc!at!Ptp81;V-z9Fn#q<3dj^8q6`Wn3l
z`g7us0pgk8IY0C}H`wTzziuxbE}rXm#)lOHM;Sfy-H+O1#V^G3<^2s;n+f9i_YPS9
zJn{bGIUnHot-F7kc;<KZACG__@qVa3`*V>_!Qyu#|1y4#DLGI4J9y^z%U>3XFN^%h
z`A?Tqi^WfY=ih@43|%h%9=tXB=V-6h;!7f5u>A+xuM_V9&-1nUX*P);3LlU9Opn_t
zeg(V*{NwdI#2<ub{cnuiCH^HmpI4Qp`^0~PXZ)O<^Pu?R=x=QQ_Ad^L=l(G3-*n$`
z@eNVFE86Eqz-jUJ@QiPL+|G&T`<T2>Qnt)Rqi6hY_v4Dub3Eoe7bl+Q(eC)Yj!SQg
z=l(PIA1nvP8+{_mKVAEgc%CmazC~qtCZ7Af+)s$O_fkCno*jR$ZTK7UjL%%Zr=R#<
zJoi_*ehh8>Sv=!8pI1=9@8UV1Oh9`+d;3c~_hUKU<Buetnshy~82y>^Lx;Jk#BYRW
zezfpND}E+C`%iG?4B~nJobA&tWhU{wAI|xq@71hE&+<2{%_*MqJ<c~Qee#Ou`7-<S
z*ER*kbH2xT6;ZILc;;W`)40SE;)9S+S^w{c%80)P&->4BX4#3ah5X3%OQWup#jk<q
zc&t(0Ui?LP&Odwnt|`70@(cgoVxibN;$7%5zMd?vFMc>Y`&+F+jm3xm#h<Iw-00aK
zO4_y(&wR@EZyn#p?6F?Uy1j#VD~w-0uUZp2iD$lM{|s&2MSL!l?}zp;S*VA2=3nN=
zz3+O7Z;bL8&$AxwWAxlFS~GWm(er)$J|2U`cR+pEf4){8ZuE>-uPjH2=lwL+|M68{
z@thAtq5adZ^%Kwe0L#BP!e4wR{9eA_{k73F@gw1RKKM3!ka*trX8&*TY?gT5A7eah
zxOc92-uLG7tv-FBc<xU!{{QT_SUmS<xIcWj)N=8>@6Gz;{k}>(^9ARtTh6W(&+`k$
z+rdjVif4Z0{)tEbt>T&Qe9_-J*V<w994`ek>=M5!N&oqC|Ek;l)$;wT;;;9L=Y9p_
z!`7$+;=PiT|L6Rd@!5UaVevC@|BCC=haHZK{|L``c)i$Z@jTCEf9v@vM*J$|Q_i0Y
zowy*L_q7;*nk~2@J_quhHJ<N~-f`mF!gD=dvFdH{f4i?WGgZ8J-q(u5eYqFc9*RGM
z`fxp%aotn#H{cl$2l%`c&+l8tpnVoKc_Tg*`Wx?i6wUEod{%gtANlN)_!p=@<3q!}
z-^3R~`5cecr~eXP1)lx?bjRe=lCDSS|M7cEr4ru*<#WFJ{F{~0b9`+%n_fK6i~lkI
zS&~sa_n+CGq5c2!7si|{{{R2znZIV&$|>FjznAfOa{9dDd&4unHN9Ivd^33VpTS#;
zi068o?UQVL3GrNy$D{urZ&gM-_hY#~*}j0C(ewVp<HSnhxqfGV8-BQ&(R04EbaqXn
zXM3LRQOD@{d*4>9FP{6ojL(rN8jI)t0Ot>PE;kd;_stXWyat4|6wmj~d7fC-uZ{S>
zt@kIl>L8x`MI65k@^=zH8|zutr}FF0;`u$v2>jl_1Kq`^Mn1KMA3vj)_<`^|e;L}j
zkNA`DoNx3lJ3##VzxYl+y~XE8{O5cu*STTh`MxmgKVs=f@gq@w0@|m_0AKNZ|CjOP
zcr8EiM^HZ7r+o&0@x0H&@|)hBYV;g0R$BwbTO)ol-kuvbOMEGKj^C24=8ETjat^fT
ztNaVabA8A4)Y!yD;<>(Kd!|3UOgz_jj8}bTuQGb}pRe858a?N$1uJe8-v{l<{?^)Z
zt9W;K3$*9`E8E3${mApXi>o8Wb3VrSS$5c7qYuIRR&N^|5YP9Oxc}TD>tXSH|A_f$
z*yCg3x!z>|tiJ1%c)owc{P=T9jQD+MfA+V-E*He}eV=eVue>F$i06JR=T}?4TsL~w
z-|F-&qi1~Z2)$?YtpDu355;do`!Ij)t?^X+L3r+OjLP;>JkR$zep5bqEuQal@p+Yq
zd?$V*@-N4WpZ_QEr{MWMX1aFY#M>d?v455?{7d|F_#pJ34)2pqPdY#6`@g>MJC3Fl
zUjzAw^OLo6t;Bo&#aHZ^-soBXnUyk%pNsOj|5hkvR`Glvhwa($N)GV}EFbMtJuHv-
zFnGq>?!yX*Plx`@{Png$5%Js~=6pUfYYFk(kLCI_<CD@x&;73IyUH6q?}t>GR>|nu
z{vBPaiRb%A9Pbl~*A$-t?aBT#>Pv0$BmUyAo~kFF-~VC#dxbU<&;4G$5B0H6Gx1YV
zAD-_VsM*r!*&nu~ZDaJDA8xqaUOc~F%Jb7cn>&hMi~6&DI{S7O?+9;)@wL~fyLhf=
z**}}+?IoV~e>fh~zxEQpJ4t>1?5`%K{J(!6=l}gZn*7K6|5yKKzm)rF1Lt^)=lL@G
z^UVIk#Pj<D^p&cP6yGjM{r}X5`PBRO81a>nkC?ARV#kZ;dW6sG>*h(~i>*rYKYKw|
z|M~x)`f$HuvhP&!dEp(<AJ#Vy6d#HDb3I~_dzSdi@cg}pUd$0+6Zw?$$?W?Uh@S_~
z{+}*jk@&mtoWEUmTPD5)@(bfzr&6oL^L--T&&l;|jrgCa5A$igGaJOuMtu_Sy!tNM
zB0dJ5^NnwPw~OcgE#ptYnvvqup#O8e`oemz(Q`hN=}we*?ho_%Cfgh>J{G^1`Tf_}
zW8z=I^ZD*|IwhX(|1$nJ%^M@0>vzV(8?R!;^Zbjycj>{)M$h(N6nx$2Ip1#I^_J0d
zKA+R>p7=cI4{Xmn77xYqd&un111>%h&;2^a=hG`+i06EO<GtgM*GA9h70}?Fc+MZJ
zF&?*M{$%u=A6h;7Dn2vXGalvliufs>`8o#vqkpo1r0bCYl+XQ;z3o$q=l(FC@7Q8i
zM$i0m<CC>`?hiBmEInx}p8La`UmahVMLh41u|3;+<q*&Bk<yQAkVpJ-v?u+>tOdmL
zJc7Ts*Q3JXCnKNod@y2raq;EgbD%$@n^0PO7<?l9S?BWNgOR^@UKUuOlKAKFPAEV3
z+p6M=AU;RK-;AyyzAHV>XOqvaZS;IzpSsl(zZm6nKGUW`Bk`x;c^~6JvS#9+z;pbj
zz0^YdM|kdkR#??qye0alHQIB=koMvke-hveHRve50?Oy}YM8mRc&<m7kFGxKCjJY4
zFWcwmP7m?jP#?Z;JHy{gJm2?cJj~m^zj(fHXo2==TFl$%`Fq!V8v3t%uM<Av+v4}$
zF8W>mUd+b@W5n~ko9m0cp5w*ye2w>Yo7zt@dag&-q?sz7_ix!gOK$`iJ^S<V4Ku|v
zJ~Lhw96d)o=O?Vs_GSyj^Lx(xy&3Z?GJ5vs0SQaRhvWHjeEp1CDW3Z+jBg!htP#)s
z7Uqk*T{ej4{D<?IE#<a|U+|auTm23fpY(j>&;CI4kK)mP7PvXnT3D3+&%bB)BmS%Z
zv;Jj%OdY<*=y~3eb4--@Ik->7^{-{qXz`x#L5L5*IgW|nkNnH^%hRVP#g9QgjYIiE
zcb^r19G>-$of<3N2Jx2hVW!Jv@g3pWA6gc_F5ZhCf8T23=bPfW-^=lm>eOBF_fS6j
zbMMdx;$OpaJr&^fL_E)bc|T{n{R{E@`!a0*;a0E3^E{X9_lq~)if@AP#rRxy<45r|
z;2BTakNzsYDLm)%Et>xn&+}r&=MA}&1twjOFkZ3#DHANk^Sqe(cYahF@jTDv`y(A^
zSc~WSk?Zm2oo$Vt>yc6AvWVw>W44dg@9akJf$<(1o7?Ewo*$RzH+p{mr?q!sqvv?p
zRj;`C(da+Sr;Rd~7N0c!|8M)fOCOXI&+~E4-%9SND4zRQw)oz7!AVucd!zo0hmYIV
z5Wk5Y<=-h%Tl_3|_P3ND>x$=oksta)_u~!44@dcoS49^z70>hB5R^Y|a0{bnzO$;^
zTKqrS6YW#hw!Qce<VTK|XLnu2^Lth?sQ>M)?&5j>ndL7Y*G)X{KPRI6_boic^Zql>
z?<VE*5^sfk#CTHgbwBYv;JIIS>EIxvXFTsRbEx=bD4+dvUl$*vXZtrRKSn(7Gc!Ka
z{yk3oXViz|aZ&6<qh~zqvSNyO#uLVe$=(6tD`9-GK3g1Tis$||^Y7q{bHq3JOZmwj
z%ooq~9ov8Qj!^OKQ9k4UtBFgEp8a!d+m%Mo_1BuhYsB+DGsok_59^JdzqkAG&EkjR
z_ws%D1M|bh^S(6qb0+kTFnZ?44ORDu=lyD)FAPW>W%Ry?KR>S@63_V0`BKOAN5y-g
zeR!S~F#4o;-rwf>YfIC!M$hqXl`B?!3e<<=x5A4{;yJ(K`E1Gk*Ti#v!u8AKz?<Sj
zP#=!pvF>-p^L;Mn>-1$Ghz~^hMeuxUq<tcu`&V(;|D1mPxp+5}&-m7K-7E3Ek$>5L
z`j2=k{t!I-b8y3t;;pbgjl%D3mG!Im9`NjM^&kHbe;S_clOob0DCv5{68VMkq|{_f
z@pkZxhxyv45#JA<@oi@@Yw^?J*`BLD+KAr;&;ESocxLef;W>XUwjjIsNAPT)UA=RQ
zPmcb^_SsN1zxa&sJRhl^y0FnR|IWW&OnhyW&;5ap>q{9u@54lnEGNDN%IAJy!=@F*
z*MVpK2jr|Oz9l^8^QWIzH+t5;<Gxzr`=fm3m&ky+;(7i^-_Wh0(X;)n$}|<v^Ge>A
zNcPi7{8-dK2=U}_jI+_RKCPFw6W<->$D#cD16;-PJ~Q)I`a14LACB_-*mN^`j<2%u
zJ;n2VG`3Isa8L1m_`Qr*kNx_I=lqKC`A+LW;%B3L_Mhs7h8jKVGymNP@tpr~zR~gM
zXz~8259_~c`8e@hFEd`HA2d-s=S!TQ%&#>?Jo7J~m%nv@__@fx{Jjls&k$c6`H|(P
z*gRYOEO_o`ejYPl{0(?Muiec<#b-f&Vf)|9y;OWf_$Z8*R0%7@4}fR9Ef*CgJ`kSq
zwouS|@f+Y>QJ)>|o5i1m=lH!@CS3dn_!yL*{O3;boIkVtlIM1d&xHQZ{_}e2e(`qj
zoF9%Gct||+7w5Mb>Kqkc7v(cPSFt%M-Wi_xV)nf=;_Jh+ecFeg7ti?5@v`0Tl6dZS
zaXpy6^)>OlZ^rSGw(w2yLs0(^^oO$V?uefN&v<p<$bF;tM)@t~J~n#(-r+r;8$H(}
zD=WV;dhU14w|py}=f9l)yuI>4JnzGEeHXdri};mjPyXJ9BYubvhv$4?aAS)ZN!KIv
zd|th>TZ&(e^0{Bv`B`f5JnwM8^WD2Ao%l5<pYz-8({03az0Ccex}7qMUx)I!9?4Q8
zyLhgb`Fy8a<`&QU8|-gcujCW|4d=POXrKP83yFV%{LA_T4=E<T4)P<P@5_3n#PjbD
zvVZzyDkuIe%4dE0J*Xg_=fAAar|nh5H$y&hz<z#l|LWpLz%#y$Zc|G<@Aoo3r!8Dp
z{NL`+_kQ0%{2SDV>+6|En;1Rk54+|%iBFII%zV1l!&yA<({lW-s@zUI&vTi77o~I+
zpAYrnc<*@CO?-2B_Md!fyNc)fn!k64PfzjOuVenI-Plun7u1LQv7y=fiO&Yl@muoQ
zK=Hgk#`d4QXNY*l6UMiu(?=LR``e9<qs7la{n_7=l^Q3W>ovaLbo|={qh~xRb#AhF
zo>%huwp=n@JkKi~@jmkK{xih0|1-Z=uQgjd_s`j%yQiNop6fM^m!fw=#B;soi1;75
zb&2@-cwW4JIBNU~@w^Yr`D$(FFr(-CE409R@!a3$c=?#PN&J8$_5XAKYI8fie`RrL
zn|SVTC!l?ft=cJ`?HLchwEu4L_Q=0c@I`Cx7oP{7<2^j>A@Tc=uQ{K0xOqf;OXO3Y
zkDT0aLOk;|@1IN^bw>OHlpllNyRGSY@nw*|I38E$yd<9Q3&-HR;P>;Z;wPhg&TkLy
zy&--FJkPr)2HX*U7@qxSM5p`WdH;%kkM&Zi$Kn%FzB}4;!S`q4^Cs#4f9{`H!@oP5
zAifN|KYYt2iQ@CaJ0l*B=>I`{Ie5;;YS;cEz7{<D|C#hZ#Pd9e`RL%C-{N_nocXck
z))X_7u3xy`r*Gz$T0HlY+24jZr!#tvm+OUWj6Mj@tK7Rx;wzy&nSb{k&L*DUYh`>G
zHz${PE0oXmPQ9M_#J7cK`}D0;NPHvsMEu@gmc@*o<2T?+N%6ct!2OwVVP(a0KFs!S
zG@^od7u28QcUi+K;<<mzeAgpeb@63UKI=dIiGz6Fmu7#PxZ6=Y*Vj&H|GQHgi06H2
z&L`{iY9gNbo$d3fqLX;;7coBMOztdx5b`7Qi^IjX;`hRHel>4}i}-@bcdlrk=)rE{
zN5ixKXLjr=p5Nc#^QvjvQ~Y|A&;8!=@x8_KdseKEOL$-LeUOjn$NLQwzW_cC?Q_$4
zi1-NjF!-tkM~J@!9}ZvY?I`j5d-seFQx1<6{~P7A|1_I3K|J#><JH<8lf^UtCZPVw
zD@_;A{LA{Ev78~E`Ir6Y_2ppk%)i#C&$zI8;`#m;`@@i7A>x@&qfma;hD(f|^*@ny
zg?Q#)=A(m8R*Ub7_!)%yJlVBQ{6P2w_-xZRiEjhXcy-BTn|SWe^ZAx5vD4_IQJ;5T
zc8MR4`p~~Py-)m1c;=V8p$Eltf1dp(ZNDSp`8_wzPb$_tA$|_(!|_$h`iyu_c-|-3
zcl(@p-sk6fw%L}8;(0%x^TQ!yuNpnur)tX^M$hj@&B=F1Jl}8Pe0$%wc=61?%olf0
zKN8RO;dnV0@=W|t<WtUPW_TrtUrwL<v%C-Zs9K`<tjKqaCt;~Si0=yTj`8yS+Gp{5
z;JKgUvhKThet(kBYukw5;%gzlaQ;xIaf(?<*CTH5j3>);q!zyhp8FNEo~9Mg{LA{c
z+?_#uf0Q4C_RKIfllTYl+>gEFl1)7KdpRDz70)HUBgZ@T2ReMoE8Yp7@#o2@g5vwa
zv;S-iEh>H#JlCf+`j#|$w&#KxWySNp6U%>>wt~@fJnp(xSv>P8pV#Qk_TqWpiSZ%r
zSO=qL{OsMrQT$l6C;gGU4UC@WWm8@^HhRX-2M3#r4?=x-o_KRsEAh;~%%^?3wH43&
zn}G3Eu7Znr=3n-o4$0h%p1*g;#V+D`zRdgQ^;Y!|KMC#Qhx(@)+FLyHJL})0eqZrC
zzvg`AVCI41x&CE*+x2L$c%DbIKBFUt8+|x_Z=E@##4}%WebJ-)Sn-@Mas0L@KS6v$
z<Wsi)jbHxa2g7qe@W;7n;tL@^^1NW$(jf7C|CjTPF$03dUqSiYe_mZ{p7?yoFMM7-
z(}#%X`7hTCE_W7-=lj2WUOTre7rz?yp}#qHwfGD0%y)fTt`pDqg&7Y^<=Z6Q8sm}c
z@z<}nivNZB1ff4?JG4VQ&vUsRTsv!*c<x^@pC<3NPdv|aLr|Ymb_b1~>#5fkN5peJ
z&;B#+;&JiZA7lG8T76nP&x;vv`wlrLp7ZlK%x6y2yC|OTpK^ZqI@497=kML|Fit%0
z!|?aki?}VG_hINS`NxZ2g#O9-#@BX_jNTgkp;)nJM$h@)u1_z;??HVyzDA#XBYp-v
z<89iI_y5YD_xdcJ=i|J8TdMkZ@jUP5@7-thTl`SepYzFVH<Je^U61g5ob7*eV=D2y
zFU|Acs$<fMUxE5CpMGneK|J@*IlkHy&m?{o%4h#<^f{||jz_lV(i1twZ%01m`fkSj
zyyE#iEB60zkAmWVqI`OX%0<NwMLuQyzo#fE{uVsjzwnhZ;)^0*aJ@V}%uakac<%Ss
z8CF^RIQSTh_r(qD#m|6e`y9>UAfDg9V)?rs)e(Ok<ukuGimWf5-@kG|{jW`KEWQx>
zC!g1^_RWo+_s?e*Yi0Btzb`(u5$}ll*yH@S(a8=*&-l4&VJGpeP(JhB8P6`_d7p~;
z?udO4@dHpk+drRGZ}EZfT(3R2(MLSrXJq-cHx3Zb`&Y~t=SL3~&-Y(Aznas0xOnCZ
z`q#Nf8NE09=ePu4@yr*Dw;2xjiD$k@K>2-V_!~XfcjdZFGkW&t4&{QxGas@2TmGIU
zp8192Yh&zO@ysvB@O`suD;A2Mg8s(-{L6c>c;44yf9q6txp?khaXe1UxLQ2#ce&$v
zjef9J{K6#l|8xH;rmfz;ia4@Sd}I>;=e`Q(GyQ_Mif8*op*}6#cZh$C`&2xS9$sdb
z_}a*)Y|m5Q_KJ5we&l*&+L;65d&BehhA%oSp5N2pd}&bM<Ki12A8|d~v&L!h{Qd^}
zb70zY;`u#|Ahdt(TNlKiMSYkbeKuVY{~VtCb#=zZ8NC<kQ{L&ecz%zO`Lsixc=0Py
zAO7BP2@l0*M}KDdH=~}4uL95Z={w`4c;26h!SDUn`HlD<D4+e|bNTm1?~C$t{r+V1
zjL#!tzlr~W_GCV~wEUNN57eLS^KDS_*-6(U%tscef2X>s#4{i9`R>Y?Ry@}u2`InO
zgY@Egzt;)=+K!CkhvWBhzFKioR-<QsnAtX`(R2SZUy;1xneX_%&w~#I#Lq?jIUg8u
zyok{=zf@gNLOkO?=VNnvmoa+Q|8-S6@jS0#|KE|ivUui4_MZ`P)x;;wkALzV>vL&+
zP4PTWVSFw(s*ZS`kFY<ub*L|%=NFuBKPb}J=o8qVKQt3x3Hg-u|9GUO_zm!UzB%T!
z5q}b%^O>;j9mJ1B{^k8!i;A7ZzlLXik51M_d`ZMN#{Z`myNkDnXS}jm)l2+Pc;07-
z9o$De|Na8o=X2cw;<urE#@qav28-w4UkFEkX!Ky1_%w(QoL^nrF;YD9DaT9A$-d$n
zpnU$`nQi@yp8YMbsK59UD4*l~!H22hnZFp{Y99|Ydgjyf^Jj^7L46X@{-t`)70-Oc
z^Ot>97aBdwZ<czo_@w#k&-~v#)&KqbIBl#gEdKoSzqRbY`u{B+zS_FV==t}uD~(<&
z-X=-={Hf2e|F1rO{$9_Ye{LN%im#9U&-nR1&sOp7Ny`6IfA)W?=i9|QAYQROd+m)B
zp9SUH;raFm+$%mA{yq-tbHx3Ccw6{*ls~TYVeuPLAI{%0{5U3_?~gNnUWz#-{v*m~
z|6i~)#^{-kiVeIV{u#<={CQFPiuhab+|O)g8)x*^XwTIzZ;3yT^4b31_T3ZD`vd&F
zZ2}&OUx)t2__m?rQ}O)!N1Xq}lz1t=4Dus?@7J%d#ZQK3JdZf_PJ9A9%O4i<N&I1W
z*5A|XoA^c;?>z4~YX3|81bB|emuZsENxB}{3eWxR<~LJ{KLF4CJ7|NI_*?L7&+?<v
zi|2Zl`w#D%W)#o&J2>8_=FTdf`Iq+xGQZ3rz8d;J-}fA}KacqK@Ie?~X95d|ZvxNx
zXEFC8MjwarCzdH8p81!*H`CA3;+cP0|Fq}Ji%*(Q|Ku002Nx}?Wb}+D<-Mzk=Y2Vj
zuQqjR8a?MT4{Yj)&-j=2zZqXoJl9`r&-3ApjGp!BGNGCH&ZrOHZ`#+orFgEt*#0{T
zwK00Oe}?z%#fPFk+@I-tw4?aHt?zow>nxt@JLa#09^J(+Mtyj{XkwLK;+c=wpGT+a
zBcAu!{4l;&UF$EN_t{u}?{(hdc|VQcgRMSwn0Ve#vp{_&wH+y*_cu77sa?odd>r<l
z*+0v^9WTB=@-^dm>*z`1AHXwTj0&DA-WB;V0l(M2TcG%8_$c@?cC*Cu?-lZS6|k5q
zJ}2@Q^J#qS0`WcJV^E)(D;9|#0`CCd(|eitE$|#Kha6XlkAmm<!pn?n#ovVYKz-`p
z-yoj*;T$jhwr>%C5aqLdPEOb^p6hFtAJ`^Rd=<n8KHsN>_KN3xfcN+6zmF2n`2g4N
z%a2BjZ-n~Lf17(uJm(MAX#YbVr^Ivp&fhz!N{sk_>_6lEg^ejMi06EO>$O4GE{kWr
z_C@_Gt-CJX2kjFN-^u5ec%Bck|Fms#PdxK!0?Hqq<Dq!oCue)sdHzIvSJa>T$&2>B
z5YPO``^lvOUK@QP>i?$GJMmo4GG09>^+`PQBinPx_pjpr_I_*Cn4jX8qkUNZw<XEu
zCS8y4el_!5z<`uS&-<uPYFUZ*M}2tT(k54Wqi6qI@XS^`?_aV1yxyHfybtmt<J+An
zImBOp=lrKnhdkm-B0n<z%r9O*{Bn3cuV)_%i|5}Tq+fr$xcGx8pYsRH1*OGzN4~Jc
zeV)?2%ZpzE&wQG{Y9;ZT;937Msj7)T4bS!I>T5N`e}ZR!_FPw6d`k3B&X?SL>WME5
z&-s7;CXK}Ndri!D+j2A$UmxZ3@4u&e-a>p;c<xtt?rm-K%onq!w-?_K<%c02=I_)|
zd^>nP-|VG3i)Vb}e!|f2-He|3F-44r_ztKK`_IWGUgG&a1-~cbGN8ZFGyd<a<t^S7
z^<nuo8HO1><4NDUKH~X)EBEtzZW|+>?{B)}`38(1FMcxW&;HZOd6IbEpJ)4wC@@t#
z-+$r$WU99T;u-&W{<YxnO!2(09*o~xY|b2`XZ(E8V}a4LeYRCvWb~|m9m{3nx&OfS
z?0sdW_@winKj$63_4WQ$t;jY1)&JRFV*H%%zd=0v1LtFDTWt|P80%jLwExFE+r=-1
zXMGC3ju4*@`HuBjAGJq(EIjX1EeVPe9|q6*9CMEr-x&Fb<8e=!W8!<kC!&2e{WvLp
z61+9M_4%{n`8^-{lS^X7-$D5tkAVX&i|6}I%#TlNT^G;uQ|@=w&u~k8Zp0tXCzs#7
zE4~zbINHZE{DJuD@SN`jj(=kGoIkX3ej)xX+LQ6zr@(9R%oohRso%aedbUsOk&oh;
zFW8@p&-p5z`GWE1WsjfYZPA__?~N-Zo0oJw!hGS1=e0UTO7VX?Z}q&AMm+cHyixwq
zFl+J5FG28AhuezheR9U1Z4I-C=l2HLe}-nuA^vao$zz}77SH#O*q=-7&M%(#!x^vM
zOf4*a7M?HT!^@7v#V>;oL3`SiEG_<T_pvX3EhoM-%IEyE{F#d4x&Ea;w5Y0h<~yEG
zP3l)eJl`*-Z_=c;(R2R4I9omO9FMGjhsO=Y*T8y~_h}zQG!-8X&+)#}zlHcJf60%h
z+qD)y9-jR(p>TWg``{Vh;@`W9kArtde_L_XU3?wHXRfDy%<U$g-@9P>C3<;?Ux)G&
zP#?d_UgG)pkNmJ6UuW50JpaCfFUt44GDtlC{t@GU=`};e^ZbtSE&p&I@wG7?8Q&f@
z9Aor6pRJQ^ym-d{MEu@LPbP|Qh5B&3eBL!hJl`i`{ijY15YP96IR9zxI#WE~_u=2~
zwkbKs=vkkBU+0S-jNeON{!FNN?r(EF9=K?!c<yg=eblPoO7Yy^cEa=Wskufx&$~Ha
zN^QMCycd2i%RhU2v-m0S;i!+>mT;rz_dW8DixAKAYu5i^%RNTVcv~lbl=%LrKYfbC
zL*luA&ir0F`l$GUD4+4xZO%#Y-Qk(vi+G$B&;4+Ym&}!7#iv909KWkmTo%vo7cm}I
zj=v^856Wl0j^1`td?9#_ugv4_ivNK1Y!Ld}^_CCBXF~pEKAM^5iTFr(wolH4=i)OU
zKQeya*#AoWaQHaXze><s@rU3UPY%0%6#osL<MCPPui~wcPdOeN{P-chEj;6`eT>EY
zr0bEv@Q(Ps#}-?P_k;I?j~<Xl{C;@$|1l2M;<>-g`Nkk?Tk*jtpT5$a%;K}6KePYL
z+LB#-J$RmX=O35b=;P5oV_N1ndXC@g`3f67_j^6x6cgVX_2>PN&xcBh?*<=*`nL@(
zXY{<E{IFX^@m$|=J~p&MRq>oZSff5ElGhN=`2gF$>!n&o&-maLR@dmcpYwERL-Aa1
z^7+~{XevGz+Mnx}<yl&Y=X{3ytK}a%i|2fX@i{QEop`=4#^2j&imTD{_ulK^E`BzC
zFYljRFWyc3-_Bb-zw|VEzW+7rl&5&kuN=_d@`v^_dd9c*BL|7+e9Rl=S8Fg-JkO7q
zFN$UM5&r}Em-Df44@QgMf_%#FSzX;ePJChHFUHUL6DErHh39%|dh03Tufntbz6Ars
z+amsRzUTdRhIj{f#s|B@v&HlKSFU(oL9^$JpO5m{|DSaa70>Tq@&4z?ic7`w`&S95
z&z0mW#lJ><=uch>GkSjSB5?J3@%;M^?x;`mp_|2Xznah2ra`!P&R3c5E@z1l&-EAM
z;rB<o#WzFzVSf&c+;8-b_`Odj9}>^|OB}!VIvh26w$HE<C&e>f`Jp~%Kc5lrgx|~g
zeDPD~#aqJLq5Mf9m&Ega6z8j%`&<*x^&RU!sQOLuyiY~{+v={-2ciB)Z{8Qr^GCMN
z%Z-nXp6&B+%yaQc&ny3&Khm#rdL^FsljHC`v=n*YisyQh_c2bs`XHY9h55Je!7t)@
zKbiNVcFz1Ep7)cZ(Ec`EEfyqQkMMpnpV#v8mPXI>O|SH6#B)EK{WJP@I`P~OXZ{+q
z$ws^l@+s#7mq%w7UlyMI?Nih2;&=STx5$}Wd^+UQ9BBXa&-00&0AB<?+1^6p&%#^4
zyG|=6J{9s2>l5KxN<9Bwa6HOiU!t6N?hiA5UieZ${36uH3FVhLT}3?q{xADOfzayW
zAESKk|A+UfB|gPp;;mziy5bAMGk;Y|+fck6Jome1-E3m?Z2y-Voy509`OJ3@$2f~;
zzTopp=hRL-^F=hCSBku@;<+D~06+JYn|SUA`oZr%&{aJ516h9dnLUl(0_EFu^%T$h
zw|u_K%l8w{`0t4F%UcW*-xJS^<FW9CA>x@YxWDvt#R#M4^YR%yT6{3-!};Xpy5q$E
zEnh6mG|}k!eBVEqES~v-`SIn>>Ef9$tkM3N{bz{h`6=^Py7sfhk3{=$JsVqezW4?3
z+)pU|DMUQ)1F(NiJ+b7!`ak!tDrYPZZSkM~a;CMgDE*&*hu5wU&+oOe{o{v)iRXA{
zd^qa3Ui@&Ze;v{OPi!`ew?aM*g15T2O+3H<%y@o!>rU|j$d6o~z8$w){6l!IAGf#M
zFFqgg3(u#*@*NV-^)KT|%<CiKeNaB1SJ1%|;=|yh(VqUZ&WPvV|7HBy-1WS8t~V`E
zzJuK*@%K?5&bLqgzAB!7|A_r9@WKtFXMM)6xFfzP#v|LO{^0xKYr=EBn!4U&@mvpb
zK3P7~bMbB{pZh=WA0&upes@6o@7|dxp5xaKzOnxYqfdZe-R_HcXVjn1>vxeKM$h%j
ztdGCNbN;~g$$uin!ldgL&L7y{#w<u}^vrkZJkuF{2->GoH5>6<Z}NQVbLz}S&-)2e
z<Fbk8`jqRP>>F~4pULNizdwF!R6e8UdZb#jLPpQ}e9u)(JlC^~KZjnH6wmny<7e)u
zvf?>E;dtB>R6#uNJMnu>sXJE@&-n(&SIU~zjXntd=Yv%(@qC|->xIT~j^f`V|MI-4
z@45!!Ya#zKewOlSB0e6T`Eg<+C-F^?Px-utXLA-m2|fz#Q~haM@wef*Klw4zMSOPT
zBaW|UlikFBXZg4vb-R66@jRd9`m}$sp5pobFWa-sr{3cEJ}<}Dv=e>B^L<|KZ-*}!
zC_WqF1NW~SJ%@-d3h#jDb)nh_@%7;upFgJ_ZS)*pZR5roeLU*3ZT$rCTt6nl4;?jG
zJlBIfkBe<OT|C!=^j&k!5YP1;^Qp_rVDXHf><>@(&og?C_xeF0;(OtFar~z4yu|1e
z(4Gs+t`N`tNv@}g|5`1c_sKb4cAsBo^lYDd%QhK3*Ml_&Z8LiIXZyN4#WP><`Toeb
zTRhjNEdOQvKJn%7yu#7`54Rr_Ul2YT{`!O?;upd*zAbKZLi`wbca-0?@EP&z;rV>u
zygw(N^B=Znc<e>-od58?Q@>?b#k2m54@U>w5I+U^k<TkvtvllH!E?N<wZ1Rj9{Gs#
znO?UaiJuM6_416(&&2cZFYtLy@J$e(4f&Myw{}VtUm2d~gI;+)i09vH;Cwqc;j{RS
zDBl|WZBNv9@q6JJpPS71EuMdW!4>6ucTN$KbUnhqzrgm1DVy5p9Z-I^-)Y73e2~A_
z`FsZPyidsaw$HLm;yK^ocnKSnO+43w?4Ok#bBX7Ajr(KAZ1aid{DIG_!2N<oAA|O6
zyuGN=Gap@_P*QxGzr?G>ZOV%O$NT}`>-b!#g3+@*r@pT&z6a{V`LN$Hd-1%l6@>N~
zI?uuA8UIuCaum<+pD-VNuhKv~?>ljSATU)Eqi6gdf33NA-cR6o@mbf(=ovpR`?M9$
z?@_ZoD>ro!&-ESmC*5+oiRb;LIGjiCe%?jA8~Ovsd*gjQ#P@|yKz~>r&|5t3pR<3)
z^zLi)F(`k3m4V_pKjix5p5+kn{Ck3opH;667rz<#m-CHJt4E2?jC>k_`sW-vR(yYW
zwtxEi6U48B=X@+#=E>r1kiS^|#|P8I*Mw(0Z@n`}yeB;CV>>BW{9JfHv`_!G^Te-$
z=Xg9-I7Iy2zxc%Wi^ac!XZu7PTP~jW|CwKI&s!~?_eD8hvhTId=sCW+RoNuIB*vp7
z+A}fbHt~(&<KZK&?GWDqp83Ld-7cf&^Xlib&*<5I?3x@j`XJOlI>!<5j1MvJJD(jF
z&-l;ZyJ_!fqi21*1I~%({aE&&g`F;n|J!*%@zPg~p84qI_c-y)FKqwtnA`u#r&}6t
z^a*Hx&jF9b^Zjei|4Y|?X7<Q;`!ghn=lLw3Z}xj{#53Pnp#HbEy%*1X=Les{@3YZ!
zetXjSyZC+>kDPzH6#Olo=ef+k&cBj}CS8y4eQ*ct|JRI3C7$n_^L%se;<V!DBcD2<
zeRlQDAbux2$5)0LnZ#QoKgOW^<Y}{s9|q6)K*t+7#h-)ceS;Po@{0co&-rKFQ3b`f
zK|bRCYUQRy#gBvM`B8ArlH&ROE9SdB&&!C9L-|?Io}2gDiGK>u{j@XzmBpt-e|ALq
z9-ZvPSA^&KBD$1=_`2{Mzy9Cri0Aq=4)uvYTVFiSAG!Zib4g?ITn{oHS`26|p8L=2
zpT%pn6913&BhDjsr*A91C)$VOEA!nB;<=y9^QP-tI~hIala<DI5g&~DaJ(FC)k8eb
z@2v5>+7{?7eh$k2NBn==$LP7=JM{1Xqi6iDHfOMS?)S3%lRbuu=YB8G?+RBMC7$22
zibnf9O)=K!+5SFP{KWJA68lfhHU8q6kNCXK4xeW99FN5t1&QZ=EZ1wTvIUFh{!$Fu
zr}5Ld;)BqCqTsLZUMPNJ694D^Rk!=A<^I)<(8c1p|IB>-v)6L*%-4Lrn<}gpUmoYb
zjQ{5?)`>5L{OgF{`!05)_%_IQynmQ;#a8kBo(A{BZw%TYJ~Q%*1?m%8XP5X2@NCbI
zHv7c$dm8a5zjgcp@%)}f2>i(K!{Yfp4d%!Ge#gZhNBw!f#jf>f@ekpdABz+`C*C$m
z|NP&+w|4&X1@S51x&PMS$QAK+@Z7)hoE<0L8ujP+z1r)xc)qVnpI9+o{9e?D{n;<Y
zBk{4Q58LzB<)`AAAKlR(s)fBYdIxxq;cvt<KQjMDH+(OCIexD<%J<LqSv=Rv953-t
zzKLi4W&97@{YyOW&oJJeotk`6()9@QBlAVDYbx<v-|=}(Dv?$^^B42on6K%@Gk<Y?
zJ?u<I@w?FeQE2}Qi?WJe^cUZ)UrzD-z80UCt3zI+=lD%XU(o11Q2$%Ei-_m@)a(!a
zwv-TG62F)Aw;NYRJo_`}OCMU=89nnw$Fh};p8fOow`$_K-e>v0PuCRR5&4w;Cor^*
zcz!RM`FgZheeriuKKp+S`^Mr+AYU_oRkUg@ei=O5XYciv;%~t7`EFU)M*IPI#=`+V
z9mKard}jIc8+Q^v7Ty>A`EB+t;`hKaKIC}TUHmn8*57eYFY$c;h|jB5Kp*kUzg)kR
z={P`qL5wf<&%>n#i|6-1SRbcv!^BrW`SEDaxYHxW^S&APi!Lnk6<-PEv;UXr=O>=`
zX`@k}*|q$|bA8SEScLU7@!qHp$M5aif#QFlKd?PlY?&pV=b_vW{4sW}cz!Q}KB(nF
z@&DN0#{R&we2c~N`&XPlJW5<<^c;_AqF0IMemLic9>HtHmqq(?{_~;RM)5ok<@um<
zg{|V}qkP`yZ<2h6(X+qBU5XSRhVt2;E3e)wp819C88ZBU_-QEL3H^UsgTvx^UyJvd
zow6Pmp9SU9uYY_>Jm1%LM}4*)j}g!D%Xk$!_kwuN_pDL=v>sQ)d;Den+n_?6_~-Cp
zDBsiKw)la_zw8fPFWwXX2%h72-13Lwosb_n9@7qbD!vXp<JHgFFU2Rq2jTa=&G1Hi
zX~Z|K-yh$7C%!j4_Xp~3`y_r2JiqVMXZ$zuhv=<7@A~t;TgB}E_uuhWzl@&q;erK{
zFHX81NkI7=k698^ivJGJ`BGT4mC>{RSj<i@z68c2%m2_Vqxfp@)`<UmDr7Z!jz{0*
zImLURe8#s?SMrE=foFg7T3x{C!_hxOhZhmg?_D#$v};g8d`HxW`Pw&28S(G&e0l!T
z;7NJ$eNaC8&yvVW;<<mz`FXb~)x>i>%lapFsA=?U|A^vs#B=@2`S9(}^^D#L&nwO8
zM&h}j$@Z}eZ6==IJLP=-L!Xx7xnIP5<X@wWcz)k30rihh+d(|<%dvkt-0EobF(}_+
zb7%2fU$gu#zTL&o`b&RX;NDC8KknBder_(&M|?As&-PsMxxe`C$fq1HE+@RjyCXlc
ze`a4WO#FR#e(!Ew?~&qNknfnk%2n|dKL>sZo>!rien!v!-1O=s@x>TVaR2ja*i`X6
zFXrEKsW3cHyf@0{c<I=1miT?}ypQob>s;~tdr8b+w;wMM|Bv%xwCBoQi;SNA;m4F^
z;yGXC-&b{YStUL-`m-PE6H$Dv_-ybOihh^*#_i7=#21BU``Dk_BEB*_<N1$}?c#a9
z%=-yN`b3K7`j_Xk&#Lbg-wyR*|7no+fcPQsoWG^H6)nCOJlp@r#$)1#!LvRe#+(xG
z3D5rE?-V0`9=tpHLwueK;<+AS{0Vz?+35LvEe>86&-noRPw>oJW{>+()4JX>`Y8O~
zN97+HJ?8_%ES`$z{Uxs7?JvF%&+lC%qCTfqzBYR1)5O8=jNSp|`_=m-p7)&?&o^iO
zCZ6*X=9iRjei}X3N2d=ZTat7=!u$LjUlB7>iVr}3<b3$LyOsEQ@a%8p%A^;c9Ql#^
zd;7lIith{0@w@eG7V$^nS)WylbBIrm{N;$}+r3{N@zvq|;HTFtAfA6OiT!_Ux+3EF
z_wI|J{57|Vi|2Zle~+We=F;N1K4t$e;agsOTEsW*Z}>Y^GJ3|VCV8ug=X#U-s}8Sf
zh;M}Y#G`#;4%8N39iIKI#LRl)x&LW_@)No=GJ4Keo0M-Rp8KVok9q%YA)fbp*?%fu
zXf56cznAOlV=LN==l&=AL)74oM$hww9Q8UIJ<DI8sk`{Ts6XSs<wFng-2deM?T?*a
zM$h~e?cZNK_e)v-_8q*%^Lr_*|Hz`ljGpm-#YZ3US<yc3=$|1c#)#*BDf>^*g7M<{
zJ}mbeojoUs=lki*kMY%}ir<X-^Y0ggr3n<z^IW!%#f_OppMdr`wqcI=r1$;)+`sZW
zUtR8B^_adu{7Te68s!)2xJW$Phx6y(g_nt6fb}oq;na64#b1PH`)4|`Mto)DN9LCr
zb2f-S1<(1_x9(fSr$ByW{CrhmyZD0e)@aZB$s)zO!?QnMy|_pGG<c5R3ag^TN5Zo{
zGloQqe*n+%7+LR_c<wg_;rC|Dd`i3p`kODj{ll~3^ZmvD*cmIH=Vfe9SO3f6o1=Wr
zZ(Fy&F1{8#&&xI!y(QiWp5yDv$GhTd!?Qg@PCPJrj;|66pNMxy`FtNIkLL@cXMD?I
z|5|)2l+XHvrFkcw`=9L37B@bM?}qX@e>=9}t9b5zvOg3U{nO~#KYg1eTWVU5aQ|Ug
z?v&!WU&`lenUF?2_dnS_WumOb^E`s_Dk{j<=y|`|sdE<b+%M(tZBQ<U(X;>e|CQV5
zIUZwT^NZ*FmhBn6ys&tlzb7F6_<I)@&;4GOAMaRNJm;&NPj1XtUOeZA94|i;DvD=+
zW_{X4RTbX~>sfx^sX<^3@m=6~e(Kq&w)oxfUTDvQCF_YVi~P&}w&QC<@$=!i{#tvw
zsrc9MoS#$-Z6Q84@*T@B+NZVn#_&9!%2~a=_}TD`CwHtmia!X?_1(oA?&4p<TjG4P
z`^IkK`Mxm6@AT0g;?p7CvcElU<|Y0Y>f?(3P&apf@ug8d$IHc+gT&W>k3somqK1lZ
z3eWj=RFIF+bG@0P^BD22D4+RpecACw&-TCYbE0_e-}1b^+xaO*pMdr$vOGXM?;Eo{
za}1hk^c=soj&sCwf0+HhzwH9?YtWv|Umo{E#q)fY>(ij^OT~wv{BX37^Td_nIX`iL
zAK7M&c;08G_b$9aJnu7eKhxsFX7QU)e~w4@W8va?9_oksx0@ef^qen+_u3<V8S2CS
zHmqutc+MZ<QJ)K`qQ%etOZnZd9~IC1&i*iY$4T-0K8ZW(V>|Jzc<#@0{#?0rtoZH7
zkL(YD1ulz^h39^C^Tcc7t0LbqU!;w`DSj3_=Nk)V-4%ZZ-WKmif9m!?d`iTBj;~yH
zPsF!^XZ*SG`?>fr@QmlFF1`{U0Pl<EdwBU<@w?%f-}8EZ6#ovM^%>>(ReUn^XO1tc
zj6cQahv#_jb>CuH()CC=c(&)^?Uv#T!gIdVdSV*!b>P{ao7-56Zwb%#xl+jXUwM!B
znZ<WT`D~x)quIsteM#o`J@axKJ<HG1E5G;v)Q9`$VO0u?=lhtP4_KrsE}r|JQRvU^
z*Gd^Z-yca>TTVRR_hfts_o*nJ`>Wol&#)#{jh^SxOLEi@&-X)_AIm(iW%Qg+Chn~(
zekq=pJL<nTu%XejKDKU6#q<3&_Wu>7TZrfR4%Z`gKb*xU-S7SLJ|p|*hnRLopMc+c
zV417YGoQu}a2L<{B){iyqgglcj92WRUvhYe=lJ6KBF{5V@%;NlG5EdfcJ~v182L9G
z{`ZtY;`u%i$IHPEL&Xn4K4pG?S=>iF|DF-^#gI><#q;kOvH$lzF-|<cZ^?Moalu6K
zgOKm|er{y%DdLyFd!RixR1FZ%`&5i?)l<(D&+m2c`JTQ$TYO54cb0!(-F%~Gd*&P&
zDn1L!=lHtQWU2Uy@SL9y$hlH{U3l()c7GlwzA`-9=k4D0M$h$EWWZ+e-BCV&Z$r0m
zqyImY-E~k`!N31;?83qp0}B<quu!qEP)tO`7F+B_Ma9O#Zbb}CR1^ahYz4cpu?rQk
z#rR$CZ|)4Qr}w+eWrqJAv$JQ<?)$yFXV3Zgp+BT69U{Ih%4dA2@H5ot<4}G?)M2A{
zgm1O_nD`#358LO_z!OH#{*$)$8KY<aOqMy)=)F<@1rINZpM?7Jezgm}D&7;G^CfSe
zn?}$2Tei9*p8F@P|EfX{#E(RMIA1Lt|H$Zho^!_WXGYKa`)c7Uqi28H(&Mdo=0~nC
z22}na-aU!yU6k^(c%GMIzP5Y(O+3#VaDO;v*H7_0AI|eyO{Z9_O}ri%h<xgR{%O%F
zrT8uI-2aa&m{xo%c;?4O?=y)1=e!oyvo()p7T*#1n)A0F^RkH#foJ<K>Xu7<3_SPS
zN0zY`|C=7?rEC8wAfD&JxPGsAsj&Ea$k&X|2UpvQPlx`=c+$knPW&E}&+(P6c3JT}
zA7zRDb0u>{@qGTp{Mhet74h7U;`}FOdv)>rJto$_!NgkPOQU_FQ2)y<>WVKBkoNEE
zTNdg5>;Lb3p7(2hfrjGw{tNeG7kp?ezB<b1d^KN$v-te*9KVwmwiM6xEaQ2#Zf(UM
zK>LKFeHK-46JG_M{lPD}hxnAJKljgDUh5)08$8E*<G>!`zoI_OFM-2*i+>Hz_F2`i
zzxa#rjE9SI4ibMKp6yfg#Zd7P@Qgnpp(Dj_glB!4&l+p=?4LtAOfY)RH<H;+7SH`y
z)@Q+wsYcKBNTJA?M$h}zeAS%)=>ML-a$H#>{O@@FpWh!`G;zUy^#9xMFUPqo7T*Q!
z&-vtn+{?vV;XD=Fv(?L0;$N)N_`~^?!~S*Rry~Dy{`1v0P<%K%+w)D^E#ikD-!a}k
zD7szz7kI80)_mF}zA*9;<MZj0d&Rea=l4PvE)5mW{b$bintC1<zXj#<e9?`{$Hb?F
zcSQXBmGXpm{$4{Y{O22|#b-l*<NPrHrt{(*;Tb=7jJznG-@D-Wz2S6Kd@GdC`&A*=
zO{4e2^_F>cTRhJfaewm2!TaKQ9>W*qH=p%LJm*V%epIW&GqcC@{pBTJ89m#-(~ns3
zJkRNY`X4+WC!YJUyxv!<K8a6iy;*m_H}TvrW&f;R>!<j9=nsr<%QIQ5OS~T8d3DB<
znfFtO?~p|K&vv8{&*wEf4_|je2JwqgKJ)LD7MaBd!u#NUtuB;J{9bsjN9M%kG<x=*
zLdWxp=lYT3vEhOO;(7j@<Goh*!r~cExF7CW(N_FsTrcnM=p1(9XTvjpB|I)8p3j##
ze(&$BAl?c2HyHP8+4w5rtHbkoZk%&<@pF(***?zsYl*i)e&qi1+Bc5k$G~$vvhZ*N
z@sHrSzL++<vG{z*Uz`u@?C31MF+B58?b0p9kAP=?IG@l)Jb!<|8TZRJs=d*3|6%f~
zj^gj5K8&~b2Xqn7_nX-M0kwLF=l3@(QU7xpdyCJ5{_h6=;eJ2y{Jmp8_~tvk#9O0$
z#;dFohl;Nb&v-u2Wu*AV@Qgp_3XU~;p4U44VZ71v`}42DCy7t$JnEPQQ^oWA0PA0?
z`%LkCe~RsYq2e5)XME_CVuARMXixUH{MQy4J;!g3z-30y_l0W>UnQRTg6o|Cr*-1_
ze4p{{dyYWye4fbmKmBsE_%vvrSoHsWq1(iBe#m&0ar!Rt#ZkT`%CFLXuXuZS*8f!T
zQ1Ltu#`sh0`yuf=P(Ir;&$**U&;7Iq8;^@0hVob8dOe4q7SHn!oIkX!e_lM#KQsQv
zSX~s){b$DWs*kUTFMxc<c-3+D4e@>8qj9~VlWvQTfM@^7)at(Y638zxD1S|%N8+o(
zFN630@KpSKc*c`=5igCN`(ry6#EL(H^4XrXy2pu+g6Dj-M&(c9IezI&rub&`Y@hts
z62$X;XZnU4{)o?o{?Glfbi-4uPrQC<0MGcayg?fAd|#gXpPh1K5Z?~vGhZKkmPtJK
z+nv#W#_zWh-yY@1!f%|G)94wm0^IT%J?GD-iWd;ieErY*=zAgY7N|et+xWA^#4}$r
zUTs`fQhZjF&-L}{zGcKuhv$68vt|YH+`r{|^F#V7;(5NB`M3GqYT|jGf$O87Z4TnO
z{$l@0<?Se*=c}t>KjfEl1Ecptf18uPvG^dgC*yzqcg@7}{5Hq?qoXe3SD}3FuhyE^
z#^|}8THd9-c;<IYTyOVU9gW@res}sV;`#iV<7M6L?&32iu|6#w)Jr_~huu)0(9!+G
z^ZYZfH*;ez@jl3>jBizQ4;9bz&z%3;y&NIF2=Y-l>i;@)jQG0n%<on+#*6oYXaBF^
zHc5OCd=%=lq{LM5XW+U2Y4>A>cz*xc8|CLY=O_LX%IA2jyL`U*?eOextNShzUl`+y
z_qSV(W#YNN#PQxP{VMS;D4*ZI%5!(E_<HbRXrB?=Hi+kXf#W@u_h#{JP(JV1V&`q*
z`Ti-thuI<jE~DrDdi8dX(dWkXjybwtJm(vn|E!;TNId5o%%{t{95s6O&xmrz#q&IX
z1?qn!*=g~dKg7c4xN=TB_YXN9hpfLKp6|c2{A5F~i0AvKoZl|4e?$B<^dHWbI%L0X
z^sN7@r}xD3eRiG)&blu~d<E3U5AC^r>Qkd<ygk?MrFf2CmLFjoYxHrb&%Q73#ScXN
zIUZeZd=$^;S&aW)8@`I~jq-WDC5I-6&xicW@?X{cBfbVa<7af16ak6XBf;?OpXFjw
zi+=;p_2cwi>BV<LzGi#wnwUvEe_tsY-+$ZSVkJKD?<@U%Uhk1Q@V}qe$68rf{QaL~
zn^SxR<Ri|9>wd{2z7ss-ZTsW-#k=BqIsc!su#kBEo+I0*U)N&d>!Uu5&!5Yc6mJjD
zcsS`#Y4NGhKUts2SIdj93(xU*dwpf`Trcqad9tC^#Pd8G+p}an2k})<AI=BfS~-em
z{^k7S*^~O>nSa@TGKMq~&wR)HRmHcNc<zTYKQ3tNBA)q+`!h3(wGlr8?GuG~xcjrK
z_=WJi-p6O$#WR2LdaEz(EPgS{XMHa8=`OwyJm+J@s`V1j^F<!G-brcuiT`K)8xb$x
zM;&u}pm_G@RVY8>wjtuV{^fY_96Lfh&+BqN@VV(2@m!zseoeI=FP`g7?hiMK^)Y&u
zzcI|$=-D5t%$e~Yed2ijKj*I;z5M>8|9k$*6765E)_n1tzp?!t(kv3s=fA9f>6=T%
z@4)k4#-GrQE5-Bo5x5_<ZNysf$B|$7{AF#!4dQ>n^Ljhy*et#z@&(6B>t|cVw}WSY
zc(H${c<w)Qe<@(<9`W2y=Kf4Y*Zt!8yqNoG@x=~_|AG2*zO?_#5u@k*9eXB1Jo8Z)
z`scu<r^J^)d}F>_)AyXw^Zs_Ic0s%o%IEpIS81<^zl!$Z{JG)n>*BdT%zTt?YqZe^
zqkTNb-V@J!$Mtnt=NR!k|HJyv%J)<}_j|d&*W&F9@mbNH94{k}yb*5$&-qx5x$nhi
zgXetMzUxQvTz@fN9544(d{LCoc#`MO5ApoI4coKsrQhPyqWmb_-z#gAZ%Diz=?3oz
ze{OJU@jU;=^>4Ad>5ZP__f^(R;`zQ9<6F?9tm22F{(-3f`aL<sd%`pRcuvV9ejR)?
z%AeCFzj)?5w&&EMg~W6I7LM}Yrzj?#^EYSsQCCZd?~3|6z@J)MTKqTUQ{LZwUggDK
zfcHlEIUFmCKZNzH1$^a9)x?)aK4tq9xnEQKSCnsw@}F$4BYq3Y=lH$lU0-|w#AlAL
z-pw0{?*Pwu<(|Kp_^I$5FL~d#F#1?ruhr4k;*)xx=;|C-@o!NdeqZ`WCwK8N@QmlK
zWjl-K_pf|V|L4EEiRbxMuGdCh@)TbK{h#-@@7lgb&wO2G@Ia&Ie6pS65b@lPVmx`4
zWrTR<Q|9;kk4B4UJmK@oRC~OQp5x`*WFPT7@5Ff0p^dNjF=&7G|4Bt=h#vsYcrxbG
zY@=s?sC8<dc%EN!Mt@trc%gW{pT+o7ve#1ajJKRmwz6L-p3g5BPj;kUYxFGt_N@T%
zeBK(2>s`HNlX$LYdB0AL-YTB^Gt3u-n(P$M{O*VP6tLbSp6A;cPl8_WGkVS+t{gfj
z-VXhZ`@NTz9T7hqp8K(`y(7eX!*l-p$o`ag{+=M~lPdK&@qC|`=jT0cM2TOC{K)a*
z6L?vC3gkzQ_d3I`i}!$Myp60MEuO#Ez<gIc`#te|pSL{TM}G0-p?IEuW`C<6@<e=l
z<S*tUd*2u0{o%R3_HX+}JkL9EKlWYG_u?<2e8$73pX0^fhv#_Nbn1(Eo|k5RS+V$s
zc%GML|2gjYTYP%-e?EUdWS=}R@p_~xyanPz(=@5Yw}a<-t#r52iRXD~mY;k}Mx*EX
z-jbuUiXVacu)h^<l0!W6JNH}m<jEtR>t*KmjIZ;FXTIk1;?;+2jGp=B)U2Z7`{8<-
zAKP^-A)fOAuGgNGDlL8n%IE#s`Kz4Kv;C`IsATlH(cjLkt}34EeLlY^=2cTX&sQ_P
zy{l8l?89|GykX}0;yIsTKDzPHNqi-=C->_r1UD7W@0(eoeLnlNFnYHC!B(xsuS9)f
zQNBw#SMhwGj{RZi?+)UVnqQT<&`ErnB=TdcRo%q%_m7-W|1JGJ#h*d>Y#)o7eZ|`#
zpECY`N<UEi40x_D_TCvR{wh5C=di8A#q;|Z%)gh$juy}S%lCgzH1!rg9Qlj!YJXlI
z@l)VAzkTp}ig@m)@p~*+4^0=(=b`jJX3ZAQ_f<I_XLXz>zBu}S6#CEeQVYd5glGS+
z_j8HS^Zs6qS|Og_kK+9K{OUF0IiHWl`GJ`O1B{;6o2T|B@vgjH{N89#rmf<qz;pgn
z{oxLyXFgiIYq!y}f1aMS&*(W{de!ovcz@KN^XDCfj)>=ZC(h5)#fOXM`6c$xUlAvb
zp8c)U!n5MJKgspZ+a6Kk_u_i_JoHhe%i=j7h{1Tdo$|WTGrw24aZCIr)Q9u)?;G!m
zXa42)Esu<RD1JH0=XlA}=!tmdUyk3PTrb4)`8E6Vl^3tYbG^^?%aW7t#3%Lq`rX2K
z@yyrk|6_W55#JU0k@a6)@rU>c@RsNge#w4|KMT+L_*_Z0G4Xn&9P%T5hV`k$Z-i$)
zS~@tL_$%-{FMZ50qj>)Qf(Nd5x>Z*3{QW`BH}1q_7tegk{${^BxA@Y?zswh3eDaCE
z1kd(t-O5J%19;xworQ{u&x7&B`O?h~#l@F^=YC7C<E6xNeaiWd-NJI>xjyCiYTcuf
z(Q`exqf%AzjZuH*(^@HOis$oO_6PeLwZ(HiI~e_~)5dy6&;9d*Bb>x@{mcFHCQePo
zbAOxjvD-OYh-bbFNB#T0Xl3-gU*AL989nQNWJU+0Xa9WW*2(CdQU9Ql-Nf_vBN!i2
z{pcy4-$Qdl`RC5}5zqIVeBkG-93Y;*AHnbQOzJ;aJkNKreHuCp7ti-wxxX|t<7n|)
zF<v;oT7G|=cz*9X4%gdh=S1;*9_;`>b;1<!iTAhvp1<n)XoGzJszjIR;(6Y_D9ZOO
zH(NaOFXwOHzt0sv7SD4TpL3t}H+s$|9hWT;AB+6U`O>o9E5!5n7q~xJr0N>+JCIMA
zFRarBi0Aj8ebJtEZfz9b68VVn_V=bB@hjjNZ|9EMVe}l2?;GzHe*@*S{hQ_4XY|bP
z!(JT_zY^s$o~$?+CVneC+voVqaPep189!flI4S-)Jp1!lyR+g`CNbXY|BMvR_n{bn
zE=FE5daf6~th^>Z67^?%Xg%PT_#CJ|+h?r9UGd!CWBt=-d?=ppTXDU1^}%EDe7?!}
z|7FK>qv!lEe&TEK+&^J_d)(rk_`zr&&X<N3j2E9Cp7G(r`_JNi;5py(5C3lT;fN=1
z=l>GV^%U=K-tNgZC0>s({_}Z9y^5*CFF^en&r_#JC!X^|zJJvHnx%N2cVhe424)e@
z`5W73|M2YMIe+8)+^S)2@qE6({v41apV2d3o&Qi!Jog_Me+oww5zpu2Z2ukei;L&_
zm+^LWmr~;WkWZOk!poKue-obd5BXhDJkLvK!SmJ(7wyIKd(P}Xk*jNn=l7iX{>!m}
zwZ&IQ{N(lStyNDv_mkP4nKC(v=kr;%PrnCE#Pj(q*9)h2HW$z5vyA`mCbSaI=d<(^
zT-u4}^I6W9HWln3p6lh@h*!zuJdB?Eb#~!h#dE#P`Nq5XJ;ggAUNJs5?bb(pPk8Rf
zW~w+qe0zA-zhCmf;u#OU(LO(}4inGyY#6-jhEd}Cpgw$__<YznqxV4h^%_hR&v?u6
zQX|I{qh~xX^K6=U#%Hdl;`hxG-w)Rtjpqf;r_B|=6rSrZr}qBhxgX2tP3cQ45x*Se
zv%jtQwp={dn~rFIyK}3>bAH11e7AhP(er*y=(o}686WD^3=+@hHH^>6Gwd*W&aeFM
z28-wO8XvUJ!EGVpIX_{4ZaU+Dc+NK%PrTZPiC=^J%lP))He5XSlVec-eV<Q=KZtzF
z`M=|-Gvaxkiuc!Iain;DPm<5GN_bup&*!<!M|&$@6VLNh-niboDQ}6lL;mIcy>$JK
zc<w)Qe0>dkAU>)6=K>=hiw{P9IDa17@VR*AYpyT6a=aGL{M!@lQ}Ov*@mybU{yBI5
z2l3p0W`Ec}?X!4m^k>c|$F~12-VUDq=VtL=;<=y9cvA73#pcB8k(wx<`zOcGrWD^4
zJ__wwV0l{c%%|b-JNsIi{T@9(Gqgq)@yx%RFI`NZ-RN2WFL!c@?}+PV{Cu~~T6{lv
z-rt<w1;x*R=l#9oTtqz2S4X2g*W@oQeiq8-{?h5UcH)^I*`7y_mKD$Z$oP<VUPbZT
z&*b{os;j+teoveCt48@6M$hjL^h#D+Jl`kc`snzTy5f00f%&U-Ktu8Ty(i9pb`EVK
zekAT!Fz)Zr`pw1nh39#~EJa$0=l9b%9*@3jE1u(P8NNT(@Q9oE8`yv5{p#!IA$~FP
zuOF`Wlt)+bC9ywDpRaUJ@sr^>9=9a)7QYUj<GpuefAO#3dA%oA4iaA(`HuZ3wEr;i
z{QW^*@3xww#7{u^tWO%tapJeZbAI*X?ga7t{XsX}ucO;1i+_RgIX~IsJxzRe^k>Ga
zaV=(vPYuubc{TrB@!VhK{XPA5fq0%Dqjx>JSbP=Khx4~RbC-+n4$t|9RoB%<&-G^N
z^6SNO|BChh@h4C`*ZX|_8-IC=c&^{spC_;1E}rWJ?gu^?5-gt2uUUSLdLjQOUoqPO
z@m!B^KJ5PFu=s_zUtBM@4ml>C>vxXFvA!q7FGl&fF}`ZIJ0pG!d^FbM$!#OWb3M-X
zxBGHYJm(Kw|IRvd)#$k%+_Utic&^|1{!zU?cf|AefEXXvRC^%)pZN^VV|P#Y*y!1w
zM{hq9&+}azFMIaA63_RqnUB&>eJh^#m-B%#Z9j<T?-R8}zHU|Iv-l0jzwFOj;=hT{
zfP5E&{@LgFPx1WyU(P2>_*-mAydL52|1#fMcTXvv&ws;EpSu;(is$zynU7K=w-nFs
zPjY_P<!WZ}{Qe}@rv(DCiRbqx9Z>%#LvxAe_a_-o0_s_d&x-iK>#dlrp!k&V9AC$u
z6c+CY&+`BULTruR64yJ{*UsqK-)grjE8Ye5Vf(BoR#ALsc+MZ}zEm-K=A+i9s~bJX
zd()-0jGp&vXz#k>`F<kzPwcBT6wl|s?9cvbn~3Lm)HvL)S+||VbG~5#|2(Lrcs`$H
zz8g8Vt$5BiIKNuc)J^;_++W7G?$#bg&-qpSn=axxpXr0^%^TK3Jm(wi4_p0u8$IW5
z0iF7b55V<uKH0s@AfxAaiT^cJJf9bE{r>vmNbwP<56gF2JJ#sgKIsQf5Wg`|`G3z}
zrHs+vAFSGZviOih{_pp%!g0S++DsGA`4Z<RJ6_Ke?~Z)R`BjyJbHpFQdYR>i&sZS7
zH1e+>>hI&WSbR7<<JFcD%f%<ab3XIu>nid5ULxx=@9aA9-LW2I|Fm8fD1JM<C9d~j
zpDjku@jk4^cJW_OzB9`2kuF&LEBJrr!?*W}PlNszh4S-m4Hcggp7VivV-Jh34A1#$
z>So7`p673uSf3Ez8s&4mxW}Fr&-a@=aJ?<U&Ko`Rh0~mi;;W%PeEt>C>8g0{?=hY)
zDRWbN6O_;Xlkn%Zc<%49J_Rn_7e5u{vp<Yo`$&9pc%HvXKlqt=?msjBtZ;lKp6d&i
zZ<qD0(fi>3zIzmB^qf!T-1Euk8UHg)`6m9K{cx;*`?dKgp6gkjH#l9yA}H~C#0%~3
zhwCl;DTVld)|;qL-cxDBbN$HceXux#c)oAT`CdS;%;LG;<oG>rpG`c^Kl6UMr^zLr
z<BRRn=4oE>+&|}fAzMfR@vINe7bTxkSbTBhU&fy!t!%~H!}Ix9lR|dlx5Kml)QvAA
zz5?<o$NQr23gXAXb3fl^eiiXu;4RTV8+WZPJ~{GN7<|q0wZuEa^Li8hIEwEF&+C1E
zse$;V^cXMA)-@K-?<)qQ{tt&Zi|6mx^Z9=Nx-G?L!g%NPF3j3i{PiU2f9O$r@tILR
z-xu4vr=$2X@SMNhncPKuGkE5^er<Y)F9*-{VCN#e#W#m%{GauypV7zSe(gEwC7$0O
zX8aksc&K=;_qje=<2h11zgO>v`kc2PE1v6R_MiCF6U1}9%=!G}Ta(1ML3?sOymj+b
z@mybXe0hzYY4p5bzZ=gHKM(cc{MJ3s0`WZ0%>BIruNN6T=Nmf@Efdf6bqwxT?b)lu
zbA25LpWI`e(Q`fPUpmm}*?(MrZ5Ge{f8O7`7q=O`8|puD%`Wkr?^(b{kJ~H06Yj4!
z{F$bq;@iWszfH(}So{#?N0fi##ZmFq;A7#-gdP{42KkQl@tt;Bd{=n3e*@R^;?Kad
z{jb|z6rUCGpX=o=U#^H}KIQkm4xheZ^x<fqY)fv7UxNCueKz#EFMcCD>;K38k$8UZ
zk^N_0nrBAO{1tlZrTC2KZ=An1+7fH@%wJxk<HVOj`J6wTZ~V#V8BgZs`6iz0N7ld1
z>jd#!Kk|M#9r`1_De7;D{*Zolimi#)FZ9e`D>|kT&+{JKA2?nrgLs~g;{84JGn3IX
zUQM`QC7$b3w&$kRImI)+asFfPl~+9H4=n$5?E>OCf8hFhR_4M+&+)tGVKJlU{Tdlu
zQatA;{2ujHpEBY(KVkpx-l~Fl&Np~};|o<0pVWSS-uP-p&-Lts;|@m8`9r`$NAYVg
zUiiL1ubvIWbH0%q<13*`WATaS8-Mqo1NYm?@9F%??kt}30Y1O@{@g`;3DlqMvnIHW
z_{G>yjzRqg`?eSV4xaPp@hv)vzl(hBgYwtq?;?H#JfDY_e%oFAcI02iL${;7#HT|3
zVtst(_7m>{Umo=z-q}lhQFyKgSCt(qz8*Z|&%ECw#Pj(w$JdmLW5oNRe8#J6YsZT}
z2=9&S%`#+?c)p*@_U}<=s?kSd{XRSMOz}Rb58MC6LqG9F(Er&!jdsr$UzZ;5yQP`5
zNPJ89FtksPR?Eb5f1dR@T4<H{Rw$qSp+)>!@r>u(9~gIHgZM!x-w*ZQuyC`{bG}rm
z=Qi;TP(J5}wv~5@=Xo~vw>GKv8a?yl*c<!BbA8JFx>1`CiSLQ}^Zu?Fc~m^tvleJi
zyGF;w=R^5y|3kS>i%*;{{yu+X|H=9CoY8Z<WIA}k=vkj@Gp~qG>O5On_Z#Awzqmj1
z(eAc*u20#Yr~kYsp7TA{|3PGoc<%o@<9;>R`c!;T+%NXGQlnmqPilO%aEcZ0f_%sM
zRjnLx;+Mlmq5i*~eiWY!`H}shUC3AQqu{xoZS0#MJ_4TYAJp!T_zZ~WfvA7^qA9i|
zUXN6R=YCPqPpQTCgy;F3*i-4n^Y@b2p2HSp63^dDvPAta^|TV-3-#fAW?_|_;`w_?
zoWD&^l~+8!pTKza<VJq+KT#jH&%@1y#Fs?>XM9^ZvY2>2Z{_!9OEoGf{!tS3X_Kpr
z_{OLY^F^+g<;5qpA2sYiW$`>e%=!P?nbpK|{p*AN(7A(yc*aA<^LHg3#XIAAV^RKu
zAN9raeT~LA&p9fxk<l|gUt8HsJonrA{Bh|37x7&GdZ7MYYPS*3^J!d970KLQJmW3f
zf9rjB@ww5S?9X?1brzoip7WVX6T6FF3(x(-_!hmybAKrg?X$mNKk=Lou>X&Z8z?>;
z_2Ki=VG%>b?}g{{i2nW~#BYLU`zLfCBYsvQ|9AZxyr#N*|LQ`$@#6V>oaJ}0nk3#M
zQTc!8OB^r#?)!>AhxIJ;(UEO4#PjzD|5^Wz^Apef%l?0(>3s2vkx#?XA3UuWiN6fb
z{t)(hsd)bWAoJ1FLo1D*^MRVP){38uc+UGZz+;2>b?}TQ#Y=4#{~ey!>yofl{8V_(
zf3`*L6rUdbhtIRNtllG@`z?&0O9$*1UlrwB;QoGeIArvkpG?VkRJ;?)XMTBjKSF%F
zB>d)Gr;MKc=g)+5;<=vU{hjA>K|J^K8Gk|xUJ>65^=E$@7kAz0nO`zQM2ly<{b#<n
z;GTHqcdnPabdNE6{2p$biciIJeZ>CLEX7NsXMY}c?Tz@QXiw&&s)6stkAr9bOc?%A
z{Brm(^#Aq^zl!I1CzkJ$GeJDhFY$Rqwimy}^ZjDR^Fg7>w<lhY@O%;Hhmq4$i|2VK
z#-HMD>BSF6`}m@L-jv8Bp68?3-*$b^D&8OE^Las<8#%=D{GlJ}^L0ZW@x0y`_{qca
zi(i$*diGAeLgH`1bA437s+jmf$dB|L9+wb57M}U#+3wQfufg-Y+5O4o#eabBiT1H*
zU0Hlh<S*_ghZm|Qz92m3t05n1ik}Y8_?h{59r4HE*`6u<>x+L6&*xufx;GNf=f#ZA
z?JG4C&-pXQ?~4>J;tQbvGoFvS-rDFHZ_{ja6<-GBbG(-u;coP?=nq92b{21g@)>_-
z<mxWIHayE8_1sf@e|YxKwfp;ue~J6+hV^E-=>x@gM)`~<AKMQRpVWHLy2J>h|L1zY
zjTX=KV-(td&^d4Mb5MWoPxfBnWAx0w^ZNOU=krjmAKTQNA)fOq#;b7|{KRv=n(?I0
zy?I8@`R%3c3&rz!DC0wy@k_;Xe#Q7X&t;|2Gd{d1u-51~9_zmk5T6D2m;H0?u}$Lp
z!n6Ex^S6p04bOPH$ZMx~?&okmKha^2c<x_uew8M}e(^j{Wr_apf9IfhSL9#z&q+Z?
z#J{FT`6I?eh_8(N$n{0CCa1)2h3EKPocEmgTku?u<a-q*z7XOY%g=J~viRF5pU>}7
z&b%&uAj;=@r*wyC@%+9t-ydmP@}79UFU<V-^!r2c&rlzpZ>)3viTD)g&&-c2SG+KK
z&R2i-e<R)s<#T+ssrg=fA$a!ZaTz{}=l4b&&_C<k`y$>E<?}qo%I!bIGv6`ZmKy(C
zJfHuve@<_nd`IH-NLSQ{^>0=nwb8Raci*KG&-}>op5j<W@qC`kcz$MHR-@<rn%y;r
zc;?4o+%K03dBpR5UbfGuWckH&KY{0k(p<F>-vRB<@faCUR6O?wxV|estc1~f<9b8u
zmln_c0p{y$*~^RP^V1lVf9q)_qh~(qy|1eH8EBtClz(DsO{3@aPIs*%KB@hOT*d2)
zPrU#9cYk;l>SLLrk<qh1FTB!JJo^vh+v{~L#1BP&<a|EU;MU?J;T=)`WR9-liy|L!
z{Z%ZpyZG7g9w`6WgHGZ@;n|-pcXbob^(pgd<%yo+-I0&NP@fVmeZ`N4=kv|jf&<0#
z{4?j1G4BV9KY{WYuN=aMi{B5=_4wrlqs2dgXZw8X<}E%Rp5xcLf{%FqUc+FtXXa$S
z;`w_GoX=dlGF^OmjCTi=pRj(mc%HwFgKs}{o_L<W;(TLD{e|NBJ|^SUsBBBc^Ldju
z>NDu+3h}LRy}VzMA#22Qf0F&D_|yRLJy1U91EK9UiRb<#^Yu8}t>XE;#Bf~ituH%_
zp7rT{X193mXR`cK%l3)qekRWk9PV?_=-J<LRX-x0-%DiuGpCO*dd@%l-#ICs`=u=Z
z%+|BwxgO;BYCkT@=ot_9HoGjI>qpL4>*u>}^nU0MY2MxvzXbi0<1zBcU8Cpx?bGsy
z;%B0Kj<0cjo`~msmG8r@sro|v0OZqHT(4c4H{wsh|C8Tuz7t;t`H}k}w>QR%p9atP
zQ)T2A@q6G||IZD7h%bSB;eqRYnd7(ks_>kjjDDVMXX5q9P<XCqtL;xEel0x5OV?@X
zjGpnlX#0%f@1T6f!viI<ivI@B`qcTF-ROD0E}h9Op5OOi`CXRf6VLB;a6VtOuZ_`j
zJWi}$)aW^0?xrhY^o)m>ZkG~YKZ)_XaBDfE=X|WlxJu#&qkOjK-ey(BCzVe#=c{S-
z|Hi}GMjwswRqjYV@yyqZZ^!01iFd{I@;r}q=ceNS$-nqMcD8aYjGp~%!=F~-nXeho
z|6FP(zBlS`iT0Vdu7lCDKeQRrNj&pA$NQ7I-HblASi*jb|N5(#>;L}`v+@+r{a(&z
zRzB`y^t@lC_6{(5_O~LwgT*ty^Lh8gw!{CU|9k!_{J#GFVDn0&#q)VkEbiB%l-}Zb
z9+Knn@WqMZOCg`~e$`t&MZ6czYjHhWVZe0p*2s_S&&3>Oi{Ay$_?E|Vp7>nI7xb3*
z{KeOYXMC=_eTn#_zUMsOdxiK_D4+AgSm!n355Y73#N-PQe-57c&f)Dw@%;YtGW4IG
zM}owsLVV!!wGwl8h|dns^WnaocZ;tG&;IOOexLYa@Rq3mpg#x1GheekmtG1J&)<h)
zdv;tGF1`Wk!}`A&d{R93W9i4$Ju9B)!F+JN8LXm=p6zq#@g<|@{Q1P5YevuhJblV7
z@r}?v9FI@h+!fFK$o3yr^r85F@>jaAk}ocOdMuv#h|jZ1oqBHc>_0`8ycW;(CiBsY
zUhl*&Li@1%yY}(oxjyCnTASvJc;*W~^q(`gzKdUm`f$B)Y|Ah4v*B6)&@st&C0>sN
z!E?RPsA($ke7?_kRWolo@k5d*|Icenqi6j8b|#DXH7K9?G}n^s;@KbmIp5`(TYL@V
zU+%YjsgzIrF?!tJ*C}koS3y4I_13*sMEo{*_J{R>#l`b^F5^|FVWq^ENB%00_dO5R
zFDL#B>cjcNv+R|`k7N00p8-$o#m|E0{p}f2Lwpx_=DWBlwZ(sg=l(<Pw)Mo{g6H#&
zdqthZ^LZ=x|1W)NBEAm#Gwa{wRCDo3<!iqst;BPGnEPoHd$kka1@+<cz6Mo0h-ZFh
zyiJ?7llX2ZpZzD{R#)+D;o1L>ZRu(BjJMWf`iSRxljCJnlL6v+z9<&`IXdrP@qFIO
zd{HfSn0TH?V*8&wJW70Hv=8S4p|i({=l9u|-*<UT6z_)eIe(~AW{P;m+ZeP@?_blz
zbN$HnFLiO2(KB96Uo%%c*MknIPqRV(;`u%o@9*6@OT=?O)&k}C&$2>1&+qYi&%~@Y
zdd9<JyVn~%$BWD4jp8|f;Cgd+mmu-nPiFg6Dzig8*T3vPMScd0_e4IWw~7oAzY9JX
z?Voz(0r5GJzZ~I9_6rm52haN(Uo%|%0eGG#8I%5`cpKywet)L=oipOkp?t=-Z$Xjb
zJE45;7tI)ZN&GT+mjATrHSzp@BcG=@THi8y-rrSk?ubw7`R~cY55)8NFUMC~zsKT}
zA--{a-Pq%~_=51fUzTNF8$H|q&(F8w`F<<s52Y`D5YPDo=O+c%d=}65{iD$TcX@pm
zUl-TQd@;PvFY$c7%y_jjbF$#X>k)d!^RqE2jh^x6eQ;Xwe16UI4<VB*#ka=w^7&5Y
z)>*`Jzn%S|f8p%nx!=zIpAer*d{Xn1_9v{x&qw{){=SO}isybc*Mr$Ti-`9}`E1X?
zD#gWff4~F%t#ay8Mjr;>@n%`0XZyd|RMF^}?{<x{7ti?&&#TmFT*K%&-%gpQws@X@
zv&8i-|5DfJIiG2HvY~jM$K&{_v#^PHo@eI$UE005_yx$noNpYe&`SJwc;?@o$=Zo;
zjeHk__DOZcP5dEv?k{~`=OO+%Jl7*r2X_@;2l+7^^~q7Ur}+NxoS&r4+DH68c*fhF
zkNO*ZG`=4dzI%}P$0(oAM_x`ECjJ9F^H+n`qr_VvKJa=66dos@?+0<b{EVMq^qg<F
zotP}X8S2CSKXKtSqh~y6&~uh}ca$H8{*boHT=CpLWPK7+`itlOA>;G08;gye@x*%5
za`9Zh&~F>LT0GB}a=ct~S}&gGO9Rn9k-0V+J@du9ms`YdNuvD=9^5W|B|O`|(ad1+
z6X7|ZywxGZ=-D57+Z_<U8s$f!eM%)9Hu_lj!;!~~p5r&ysuSWle_(#BGvJKTbN*Si
zR;2i~NnG!ljF-e8foHsWfB&lZ_3*sEdw1S6dgd?3S$D)AL;2jF`P1Qnc-~*e!y+Xg
ziw|Xf#D1*Pw`bx{!*hOe^~@{rJb%Uc;ew@a#q;|c<<Z}!_WmILA@V8D&or$1S$tmP
z7moM!X}*hZ1kd(deCwxpet(1GF>JHN?!@bn1t_2K%6W83@kimge{0z|t$6+(F57ce
zZcC$Qd|vb_v-n)-pPZk>9n5C*>_1Ou<`SQP>vcna818N@K0WHg^=!&g1;tl|XMGkW
z6gK)S7%xSmY>l4rHuow!qi6qYFtDuAGe1_VRZ%?mlNo;&WwaMx9qq&SYl=RoE}rjS
zgyDX@+*wOJ-<Rb08a=VD(ertVL(7KZxgW^+TTh!NM$i0P;)ApJj%XjQUtA(uis$=2
zoIhvxZ!4brCp>R6sJokZ&VM-GD_8Om&;1Gu+^=sbx{BxbKsY~~alMCl&S&_1v*o7V
z;<^98@w;V2f1@vo`uA=)NW68T`}Ozy)#!)%`-6Rp4inGw3B2Bjk0Zq|PgMTj_nX-M
zw~mb!?}&WL`9|lt6U0}7=YCOv&XdL0LVjfZvzDDE{y042N%h||#s7lm{P6pQIpX>K
zD~`uPYZi!iMf~S@&*8OLJoB#~`oqTB%f<8iR~+wAnO2Ku{^fWHf3Qyc1=OGMKi{rE
z@o(T+|7Sj1#OFqT<NWHn%Xaa_;W=MjW)m#_GU~(m{HM6R;+;@F`)A9DQ1Q$!?4L0U
z4vXjWN6v?%yB`zZ9`#}SM^!vw^z08FDb9$miSp?WTstqG`H15^d*DT*XZ@pxUlq^&
zy%_ZW$_;OdpN9JL{&vlIM?CXaEXt32eqa0yl+XI)4t*rP6FmFpz3I=4p7p8b_DcLX
zl<$Z7|19xVJf9b^f4Y5-6VH6=jq+_GKZ)mlKJ&%s72m`&pK`sEw*OD@C2+lr56fy=
z>`A;HnFJq>`hUuh(&#PVWACLgdan1gAIu=0`vbhceWqs?&-d|JpJT4s#CJkIWq-(J
zn@jvj_$XYj*XO+A^CLg<ew95{K>SE}OMK7Ab#Y<wm*Ba6Y|+bBe0s!l_Rm^X?8NhZ
zCD#8}%Ch1uQ9jo%Vb?2&XTD~8I&Z8Zp5K4w{N&z<>f-smO7{O%4Qm-a*LS6J)-`$u
z^oOwL4aD>O68oofXk(-2dVkAwXQPineNwu$G<x3OvnAS!ub)JGDEhs<cs}3c_zF4K
zQG7#`?}Pf^Ti!)H&uj7iR_oWp=-J<v)$A>v>ycR0$1g*F@r<9$UoG!>iEo7K<@a8;
zZyze2>k;l(IE)`Dp3g)1yklAOvEmb-m;SpxD!<D1zrPP0Yh_{a_kUpF3IEamUGH#y
zZvSbLcs}1``?otjRXl$Wh3nt=#WTh8eR)gVugETQ#Phr*^ZUng3&ivHP#AyWk}Vd0
z8uyp&Kkmvh@i*XEp9}%3#PfU<uebNmb>a`Ae71jAmq4TEdFGY{wulcw`JCToc)Lyf
zDCAT2=cQr0#7Drh{g3+X6<-zk(E<B)k2{8np9IhGyS~(6@oVAPo@Ek_icgLFNIx_3
zxcIv8Vd&4}SDqH{4bS*_yZ?FdLGa8+eH|`}=l85)QJ+s4u8O~j@)@5G+`I9A^4quH
z7H@<87LEEijK42F8$7SqqQxWej_{nHmniVe=sCZQd;d~=C6v$pko{P!cz&OX^-nu5
zPW%tFKYdh}PvZH$665X3^54Y!p#I@#|5%HkM&A>@@s&T~xnIqAXc>@VZ{qa}&p)%j
zT^^c7{6FWPG2dQPKZDUPL;b_DWfsr<ZO-2gJhKwd{Q=I;8}H94p6hqEPvEq?;yGT}
zA1=2qVDurl-ucA~i!X=%!2WFWt(f?f@T^bcvn9oIJX)eYgO`>0Kl#diD~RX!;`~tl
zx9U~I^L#b?n@#%a;+e1cJf%mhgLsZd=Eo7Cj^g<~6zhL>Y6J0g@jfr}>6^BV#TP{W
z<^EgdqR!&?!n1uYesmGf_l0?$+4e*m@spFtzj+t77k>nv<Lh?!j^cA7ezHF&tJFn&
zJ@{bspOPthh#wEne3AcJFYzmr@H;m26VLfG`@_0nUgG(Cg51CTS%0X}Z^8AtWgjV?
z`Ir6S<<l|ZD<D32p!_WR#v487+v}!IGJ59so~~2HyP!TCFMhT&jXoCj&-c|&d_9zJ
z2|xPGeDPi3*`9-!Ei!uko^|;?%fvHYvHz5)zDj%>)QA2+x^?2`!n6Ie-`OCZ>v8sn
z!CN;QeHhwv)wpfqxqfH)-<s_b&;3b0PoI%*uXs;fuQ%!w9J^mU*ZXXr;YSV`eH6;C
zHutD_f7FNjU5h#&7ti%O=QD9-PmAaIL-x;*Kj*|xM}64;8(h91ehECwzrOB@c%DDx
z`29BShS76=65H&yc=k`;-@AG5iw{D6jKTe?^g2fT0eH^O;}1R+Ul#d}{UPVfm*Pjm
zbN##3Jy!f)c*c`nCF8_fBY$zfXy&(%;`#dye7-;a>{s!<Q9j4Z?PUq#!;|n;`u-9B
z7M|bRKUF<NNaFPffA5d|;Xt}H;xnK>4@Q5ObT_@x^LhifW)fcw<<m!vwGz+Y2XsJv
zJeuVc-vs6Rz#p*AE8Y#B{W<1Me(~JTWP1jN6%wC#KlAVYBz>Pb#l$Z{efT`3bmx-d
z8Lt=*+m<aOp6`2lpnZaWmlr<}_2GPY%caWV`F<tiTgr9S#IHd4JioMPu!Hys@LX^D
z)pZol?>R7jzRcRd=sEvv@VJq9u6Nj<)9!61p8FN-pQ)z0h@Xe+^~L=v(YB3v?k6yR
z`4(+2J|D_weBS=aUA!-RIO^kYs<Zfo@P6<XOS+5S4bS<&w_d%Bp69XKR_!M~Fj4vc
z+xM>`^LUA0n#lhhzkFY^{i`A3d4Jh|e(o6|z9rVb?4NE^#)!`a?}+xi+j6}4YslBE
z&)PzhjGpap8|N#2H}WsfZ#+LXLwq1S<HPNFe&VYk-v#4(J-f^oKMbDZ<#V}3;(7jx
z&lg%*EEE44<;S2tk1nq?dd?5itzRpi&x?If{_-Ikj6NFgL%G%6EIt?dGvoP(Y}<^U
z@h#8Oo#MIvVtgJEvPXOb+S3`=d&PIZ_=oTuFUwsIiGK&r{$^9`sQ6#-tbgOr5#l$&
zGrl>VJ|(^e+MoBg&ysWEIX~fkZ|U9_#5<sTo_C#5^@@1D&t-}Bf12io_~s~|-!pWK
zju!6$&-k1&=$?4K|Hb*zqA@YzIiKNvrd!je;yIt;_a3KOzchM|-z;z5h;N1K<@3h@
zhu@2@0w0d{KRf%Qc%HxFeqFf7SMhuwCk*BLmPs&r&L?Aj{T9#t3g!!ki^=yTUXLWT
zpWwAUwRpa-&G~T2ap}dge8zw0rkTV$AwM#I4bN+3^c;_8Ugi+L7UeUZOb*Q>{s=td
zNv7%f#dk$M<#<WnzL5B5@SJadu`MRv2JwyYD*x9K;yc2}puc53Q(F9Vc<x^fTv}fI
zMtJV8{_0&>d<?t;>hqy$HKS*~c$UV&=y{$zD7udLj2Q2+s86b(`r?@{7~e{dX(YZ3
z%IAC_tVuJY=lO)U)-K|iFBl*0y>4yvj91kTyNc)jKil){Y<Ka@FO0Ww9XpFpD!+u3
z?r!w#|Kopqis$|w^ToOgeZ_m@elfnCT|H2IF?jA*xOoi`KL?)iBww8o;<v%G|Hot=
zWArS4aE!Nje$SBehp1p5@e5ENj^7fKe2t#@D7MuM@#|2&8^)t|VL$P^;Q2h%@#8%4
z0r0HP<r52yp7CMPqNPU9{xGBGO7V+PAC_OZ{#x-oKW~ZlNt<PZc&?YZ-u(7plla=m
zcg)u=JGY7tf#-TH^Msw^?UKlME1K^SKLwucW1D}!_@nSVKiT5#LGfvkk2rtGc;txq
z*6<c+|73F_#1BrwFX?<r{C0T8^HycfiN6i+f%;_m6(yeU7l*^&xNuo~PV`Sl_@Aq<
zi|2V@*2m2&+UOZ?^VPX0z8mVp_Su~!#^^bpNgMOT=sBP18T>*#=l`sa$D}vn`8+5J
z?HSwZy?D;&nSZkv{wSW$6Z!llI{u5%bG}{q#1HYD|3{<#Cl~$}&;54B+ZjER?@zoQ
z;qyfH&!?4B8@(Uu<CrSFcs_sRd6mmIGK%MZKKt|8O<BeB`6K6taU*jWJ?AGOjq-@+
z`kL#Pd%5z9Uxx9*@wM)yjd(sUVEgwxSX6uv%4huiG_!>GRq(8juX|~u=k;bURbD*z
z=Xt-P6Dk=!_cPDktZMY^&uur=6wmj$ilTpRA5lmAKIBvO=M)X=i|2ka$8X2%jl`Em
zevCtX@;+@UekwfcvuSS&@ekm=QGRmY*5dOZe{sEF*Va{h4|tB3eMQ{G^Y@R~f3kk+
zB%Z&2#Pw12likGMMSU2b7ccS@&;9CEXrE%9eZ{B6cwxNFQ)Qrd?kC5h{Ge1rj6Mdw
z`px0u8=yX%PnO;^+UU8yC^pL5=)+K-r%pcN`Mhs1&g<UG<tx4&>d*MF?&WmxT<=(-
zK4%Zi7C!>zbG*3CoF|^oulc>NkPZvQGe5F@w%aW=dfu<J2`j|&c{k%p&&W06nNK+$
zyR8lo&wR@D?1zDy#513AJ(a!IR`KQ0{yw;0*DZG%J=-Vh{%-Nir;O(wJNJpdhWfC5
zVkaCF9}3U-9PDz$=pAsqjy4fS&;EZo?xgsws1Mt}Ys6Wj=k>bzM;SfiTm0b5M$hM8
z>m06&=lr}p-uEeO87+Pm@-O>;!FzYb$HTMz>u-A~-U0cM?SFCX6Y+iFd*c4iZTdp|
zWq3YMY?1ekcz*wi`_EfnzZ2gM`7R3eNqsn8{Cs%M_qxsgBA)q|<rnJsL;OyZ&-GW6
zQoqIXePLd2#-GVT6R$`3{Fm{(Z&WJr%)ge%N2gY$6VLBcd80iG4a_J$55^<=f0J5S
z#q)iC#<z_bbBM2s@_8Pw%7fhEnNPW%`o1%t_?{@A`*kxX+890OW5F&(jougS8DvvJ
ze0$W#4gPXmDe=tj9KVYr%8BRuJKP`Z;9p7nDAb4Z$$j0citk5{`ZugpQ#`+?VFAA`
zMIG_{-W2=4=k<C<&;Ae|=p>%s-{AGW9NttszrVr#ob3%;i0Ah=I35S*Y%P8z+LQe!
z>UlfyJg?67IThMLJkKLBzqFgtNj%rH^ucc3#1BLLIle}e^!$(h@A<2ct~LMr{q8*J
zEi6j?*T0QrU-3N8#{QG~_5kr5@0{;B2M!j`^Hj{&YljXOzm4awkl(-79W6c%`I_VR
zO;&I5zR0J%zgCYYioXxf@~`fmB0e4R7t8NFX}b90@SI<@YBgJYclcP0_nd|2iRb<^
z*W>Bp{l#<tneln~@g?G;P#;UwXO900@yx%ut@ZcaruJB4^lbkzl>)@uV!Uv_u2#xT
z;+d~GKd*2-NIdf?<5jm!JH*?uK4_o(BX)~t{$hS<*l?eC{+@+5%CD94pm^pluBR?M
z4-?P#Pw7AJ4;Rn;#r}VA`bnc_`8nLqis$#K!g0MBOGX(z<877im&DJ&{fa{Q-_KnW
z&wR@A+pV}Ieiq6vit_XHzbl^kj?XWGYCaVI&-WX{<K_1gQ&~O{&-E1N^XKk8H+t^B
zMeKMjp80ect~dXLcjEbcgz;oYi+J&TKEil4q~I6veBQzJRQdPc#q)Uw=Nq4o{W5yi
zr|{}z2NJJGHlROnzI3}^D)DR|j+dS_(urS*{K)YbmoB6DGfDVtx3h@Piu}m_upubB
z_>S<r-p-?Qi$4L+@>@5~XY^c8Ipwwy-x&FezQ)TU;)laCUza&hT>N@?3-o{YnWe;E
zgl9aN)S;aC1bEJGgGyEs&+k35{(ZmOi|6@Xj>qrkYKXT)e`b5mTv1zmBly8+pF;!c
z89n>+h?-7DABFP!W@sw@8rqZXU*=wO@ouO;`{#%4t;BP`*8%luKE9oJ?#FUJIctj!
z;(1<+-}_o$pp$q$f8_eE!uzh`2jY6!K68%sG<x2zSM&N9J>%z?t^>sLd>8xkjq-!V
z^LZ%umpqdVH+rsL7F-=Aeg)cx`R-uAxc`%HGHjywK`5W?xv~Bf@jRc#@z^)}bff2Z
zIrVgwcs~E-_?@|Lu6VA0S$>{r{^EI_jr&*kU6+XG^Bt}iZdO`h^xQw3lWdK6uE*Iw
zpI%-seh%^}>z{VrM)7CiS0O$m3<?ro2>FronKpHHh@Sz^d}L#_Tl_wF_BXGGA>uP3
ze)9RkkDUj^d!c;B&uJ6F#P>t_+<$n~B3wMrGxL6>D|k};dz8=q>G}SQ_}}ncZ+<=&
zDLx;@FYA+k{w49H;A7Dr#&o@A^uh4yD%=v!_j%*sJ(JxP&wR&t5^?2$(Q`ab4R|d6
zpXaBjPm^KK#dChn_@A!+Yw>;2o_xPMS@w70nNL~%siz;rFGczEQ$s$B=YA>2*Y2s`
z#dE)u{U@XAFY!Fj!}Y=y+hhk5uSfX)Z#3Hf`<ImBnO}H5v)!4r;<;bS`G50emf{)z
z!%&~BeY1$)f%a$l)vIS0&wRoD+%;Wp@xCbE8TILK$67qkC-eTc+E!5fZj|qU@^_3Y
zB0dnF{cWRjaq-;WpkJP^lz8^%DAcFZ+p^->pV^*=&Q%n@1@&)?=WBJB*^B4>;`?qE
zeQJpJK|W>w470B-{x&?Xw^8bP;<F=v(WklDQ2cUu?(g|;Y$E;%Jnz?`5zWOHKt7_+
z>C{SmA9$XBtDUo*_-XLmFIw^3P5feb*2jInhxonl%tw=^brpXcp7kHwzNdJ;f6Dtc
zuy`Nw*65#%x4*vj7yk$KVf-w1c98heD4+AOeanU!J=bev`i>Ic6y-CXtgk-K=(*nX
zOh3`=)9HTxoI8`ncR+nu|5sb5iFbzQdUMRUS>n0>9D{gO%XzMN?kDqkdX@bCM$h%#
zg13vs4?z9>P@h6amy2%+&-v2sxvRx@f%iuFBf6|Ndba<SavP1F<E4y6koeZ959j|M
zE^iml^R$d7dDaITJ=aqshJ=Xkkwkq4);l1c`>R}!RLB-4em=^NMf=Zra!fqmpXK?<
z{2?cd{$#NP+0V~0^^DOozufE^Y4q$r3(8#*&-=^%9P<0Bc>ewZ=L41(Z;IcaME>ou
z`i}U_$dBCrd_UlU_&)Hg|2T)o;v?W4aeuumpNr3c_|JT_<lZasJb%UUZoA{Hc>bOO
z=eN(jKZxh|H@H7gulZ-AXZ&1~|GRjemu7zd@%E>9o|k6(yB@VTlz2Uo7UPTgx5?a;
zM$i71u}fO<xllgyOW$&q;v2woynO$YS$tJ^=Jz9)vx#?tw?uy%zb=>2b3b#$5No67
z{kl@Opm^?gvHqvB77^bb^`|fP#8!MSc=rE1d+o$8gy;Tt(3G;`Ip5&*rfOSJJfC;7
z|C}poFMcuV<AeM4;Zt?-T(7bJw>n)*JlAVcC_n3xy5cvXK0Gg!u6IN6T(A9;@2WNt
z&-EJPPnmSh#rvT?yk7^STZ-Qb?}qCgAJkSn$73-3#xZW<`8=AwN>dM`=l=hxyj{g7
z{vOEx_Wi3rKYIK}|KGo_f%?Bb+gm)(53v9AUEE)MYUESS$HICH5?>KM7WEldX_)u|
z$d8OaX;O?5zXv`X<(IoQR{T$R_W$-9CWx<!{7c_-*ktj{zsxV`>rWHU?_cqG!HR6N
z#54bLetZ1M9P!MjjEAj578pIxhm7@IES~4DxPN}9-EyO6f9q9jwRq-J`iRf##NWsL
z;{4>*sX+0?5g*u}$1K?*-X5O)?MAQd;@c+jf5)%m@#6CPIHPI?|409K{4)MG$P^-;
z>k;<PLbpT3FGc$>AI;lwSbQpY#`Ef<kBRS-=z9OwpZ9BV;}hcf{yXPC5qZvtzmD?b
zFy8mQIxqeSJnwIl!xzOLfaiLA<Ls;ApTV>KeLZf9PaMzxwh!m?ol4&kza8bXKg|4f
z-{`p>oObDv`12^A>-Vf{pNU@!&+pHq8uUthb$Ir-b9LT|p90VQ)ec!ch!2Kmd~<#L
zN&E)*81$bpyT2Jd+vm>QpW<tw{D1m?CyT?0*CWf|neV2SPAR?)@+r%|mykyMOnA1x
zMPvr?f8cwfeP*x7EZz<Iv=98=e%ZtygOA4d59`#(C7$P>*&o(suolnr&laf9nY#tV
z4?%omdrsb3SUkUP$^C(?V{OGZLix<sshin}XTIiqwXAhn@m$ZcKC|9b5YK$d^M|_+
zR}pW^{)ziF(yzMsD)8ZG|0^D~#J7RxepHz<b;UcuN1^;LzZ;0>`$x|31uiuf-xK9C
z{_kAtEIuPVuebK#mg4#Ro&D{iV_TzVyy~3Q&FC$0y{#T~H2N_3N4vWiJ+C+2<R0Sr
zeBTD;UufOi=$TJD73nXY&+ECKa{c5bp3mzUZ+D*@YV@4X*IhhPd~@^%u4nstjup@I
z0GvN}v!5WoKgwtO+oqW;p6BtnUoq*{RPmirKHGo9=9xy%_8&NUj`)EnpY3_B@dEMQ
z@O*zi!FI8Do@a|je|z+CnRwQR`y16ytP;=s%k_na|2pyfUI*tV`ML*+XZ~gT46Cq3
zd~f7a#<u~<w~G&e=Y0O-<z3<v;2E!6*6$Vn5Z(gqKWa#*c&>k|;dy<(x`)O8vtJGG
zpY@n{u9sP#caM&Xzkqzr`;~LgY4LC1**-%jpBK;H*W-LLd7F#kbEE&qqCGnoxhkIP
zS@!2cA8!~v-{)$2^0s)ce|f!k7Tp)$5cTKtwSJzDj6Mq2d%DUqqi26El=_wU#Ov|@
zZGHOuW~|ZkdG5%~apJii_d)$vkNPCu745_L_Px<J@kza(awPXp@q9kW{*dR@AMsp&
z@%-V4gDJuiuV3gbalPwjr7?Qu$6xLl#QURtxF1!lRA%u!@8^vAyh^YV&-p_v{En!c
z;uoPle(>p5=M_I4p7|n~R{`<N*Yu}r7ZyJg<#Ybvn%P!7^BwokcRwsCzAMUi!1X>k
zQbs)UFV~N2{3?j&{4f~hyLYT2{uJKlWjr5mS6zH&tY;lj{>C2;;y1u^{&VuIqxhfj
zTrapRYao6o@*~&dnfo*r9|_O?mZF-o_#DVb;ke$fX<CYJ3D5SNeY=f#{$4Qa@3f`8
zc>Z26$8W&sj^ewaK0Hsmq;VJV{QfY{@7d<*A^tPUXFQ+$s+ah}=>J?VY(3b|=sAD8
zGSf?Z1(eVGyTpB{co%p}+}{s&BgJ#Pv;5`>W5jd3^Sp;s)Ohh6?~Lc`S4|S1)Op|v
z1E-4bj_YNAo>Ob4_#yB-Z<asP9HVD{81rDh_@vGor`xs2=s7>}oVd*BIUY;4TqS-U
zu9x?Bs?9p_JpUYp{?p{c2BYVAza6pJ=;Kg+75{DGdH$B=pX$EL=-Hm_D(w}&4(-G8
z^P~(F&+`Cm|DfxK#Pd8h%fAwMR6L*Wv;OBs95;I2-?^<%i{Fdu<^181&3W;hzcJsX
zin}1b9r9f)?ytwOE8>&-eFUGmH^di3zT^BPrps;deBX!luT=KF_@^kJ?OFVHjQDNv
z952=vpNemR{KEZ~QEOg`9}Ca<+ZwM}@tfiK{OEM;IPv@89dW-3XZ|GqI(#sE&WB&c
z$HVh_H|<IgpA7wz&!;X<{3E_BJfAoDw@h&)@p^=w`TCtr8u2_2?8EE*kY0Qp)Q971
zQ$!~5E#Nucy%t)D=lNa_)TeBZoJJpw{dw0)dBx{Iec1n7q%0tw=Z7s(pN!WFiT6VJ
zyuax;6%*eLp7C?Zh?3&x(&KwRwoYZlmw;#cPs&+AJiouq_PPJOveEPR=5B^o6VLO&
zEWg4G2k|@)%=LSOo1=KH_t~DUN;VMB_|Nv)@x77Jhoe6XIp56aIUloM=^~!%eLgSi
z)W3~*U)*2LKMOgu7e5M~-`g2)*-?DreEs+QMpWzne}3bCzJKK#+gUu<`#f(De5AX0
z&L^YLo=2wl5<d>>-`wyGT>FXt=l2TneWaAOUgBer-&y{mFGIu+M}A~~o^oo0_+9Xv
zZ`WTu#^`x}Q+SRSUkv$(zEqV-;=96g{r)laRPig}9nk)dZ_E&X5T5Jb+ME2upM__8
zt{6FA{4ID()aSU<BJo@=v;5Y%mWk(jnfujNFII}rhVjLGdNXvb(MO^F6=!S^&wR@D
z=@+-n;_IS5+<z`ma+`SOJH|t&?>oiUNBM53|IKrI#53Qqf38@uUwl&EQ}XYB$mrux
zpF=f|if6uKJfC2BTs-%yd0x@#!71^~N1Pw_+i^}j_is7BEj!_Y_$+9D{+`9G7FWbG
z{&T#KFK|OV-~VF$N4}31&-cGLf4g$*o_L<G=KR0nf*A2UuWNz(>)!3D_~mFH&Icw{
zcqzUWJl9iMlgEnZe$GG7f3Ln5zY68^{#MxV(dao|+$Vk&zYXQH{yADCh@Sz^`9Ssj
zf5cBkeq_A*9-I7V;`PWSc+SsThNTu?75S0zwt-)I@!U^l|4HGINj&$HIo{`$vJ(Fl
z^(l(}HYFj4_=?C!tpB#iJmR^Z%>G<+Retf@PiB1UKA@2JGpG;qud72bqi6hoZdp?N
zGn5~U_PKMfw0JA@H{P%0JIWh9>vMX1W%12XKI5~yOEvL4f5Q2|gaQuYx&O@d^__Qh
z#HT@hIG<m0tiE`zA31+6JHL^5e$SBc?P%9#;s>KXmbhQf%exr8GrU#uHb&3(@w)0N
zp6gl8PbzM37vBT*XZ&;@)>%CBJM+>0`rXCz`7-;%*zCQ;bNv{D_F4b5uhH}QNR7~e
zW{>iJPah(FJ=%x+Glkoa5YOko9A8a~j}f07<#RoL=c~7Po;RakbJj;Z*N<F(bzkml
z^vu6U`_2&0=gYBZ&&f6X#Pj(P^To)V^TqSL7USEBXA8x1J{*Gj90^$}ejxJcKl$Bv
zrT8uIj1TMDtQDUO`HuPPTj34j-QhVujE&zUelI+qk8eA^Rs1h_UT>O(JH?koKH~K*
z?7l~QPk7$n_Z9bx=lLtfhg>NRiRbs6+27J%J0hOvpBX=s2S$kJ`$vpFcEeAJ=lN&O
zCl56^Cq4n~!~2^v#|80u5FZ$S(m%Uw^gM6VYu|P8RZ%|YlXlah#q<0#<Lx2Wd*XTi
znZHLrp?Hk=_NWj0+nujZ#P@>d^PPTYUx@Dj&;E9L*&Czh{!-z-?~R`2@2UP#JlBtw
zh*w+Fe-%Fs^=E&+dgq6Dt{<aN{*rCK#dkvaY=3v}<i`@PNB(&~7vFQ9?3`LW=VQUB
z&x3sFjh^xU=G%<oIe+7LTyZq3c)tJp&;HNc9O60OV|%vllE>&7|8thl|9|p#EDDL|
zeh%jw_E(CE=lqTRZPl(4;yHf{!~JUEU0OWvFP~qmZ(3gb1?)ewJ-g+tEPfmEFXK<_
ztE%GbAm90+{-Y1p6h9W8{lD7GI^s{lb3XRft-g4Ef0FsPV97?}n;>8CJm<LYO~p@z
z=k?w?*FyXTc+MXpm$w$b2cGMN_`a^<`8{W6w0~#~ck%q5vj_Zx^qs|9B3|*lagDp(
z#Pj=C|C|Tg<|#fu%C|&)Y`y!6FAdNB)53Y6_?qzCFS5!%<p1P{z8fx{`Ht)N^G8OD
zcSe1<pLukSw|MS9Fdyyj>?5A<o3K5t%K3`t`;37&pP$}hhIp<QEO5VmUz#m`Hm;ZX
z#cusP@!X$`MfuZ)EELcENzTU}*Ig=}=gpWOH(9L|&*yz{sE_@VHR5@`i{tCZ-T?8F
z(LT(lvwSxhJ@?OBwA(6v1j=Xsc~ESp(KDWSec3IZ?~n8R!0*%hjNS+B>Av)!(X&7A
z?|sDR+25Kqj1bTHA@lnRt5f3Ho*cjKkI#yqgnY_)K7MzU_%L|xf2NysS^QUc&i~K0
zye_^A@+tQp+S){m4}#}-Y#eu2d{XDNYKA`)Ul#d}{kg~dC*s}d(SO=^eIb52yc@iA
zg*W0i!bid1wRkW7Dm?R1@+<M;Pr-A2>c9SrcngeQ=F@jWeuyss&-l}{-fyGld})(a
z^6<p#kuoTs^F#Y5sl+?LGhg)Hmri^$c+PKKeKQ(8+jBzOtm12<eD2rXDVjq(_vii4
zAM8Kp7SH_4{PN>eKJnb&WBEsy*of!*BaF9`dlwbYd>w}RKd4$lJkN(SUe!ojT0GBt
zvp!3r%ZX?HWq-2`swAHIm-`R<$5a*1{LAtCyje}7cSQTtwytCJ?9cYG^~Cf0u^f+I
z4m*kG^LIW^DLkjCc)pLr{y({M3-LTJ9gFMDRJOHv=6CiV``_)vmrXRj{<rU6rG3yr
z{OCmf@B4j>C-b&<63_V(pTE=^-A()!tbgfGI(dpOfPBjSb0BA5@lME(^xK~g5YOki
z%<onA4;Ihoxqi4`XQmAoUj+Gu`)Si%M~fc_&-~TM*4yYEP@h|0CW`0tU&fO^r>BU2
ziu!Q=HgD;4qvw2PfA87i`8<f@@j=yjM$h?qK-z`kZP1_DAAUzK5zl-SgZ3=9ZH4#>
zD4+4Lz}Pk79pSnEJho|oc<%r6{6Ik7P2%gJ{BYF&T5OPbo>$@h{c?DRc;+LnUtZ7N
zEuQ=TY)|XX`^5A4Eb~|GG6%)a$Mv#4HUET(=kr#^=gt?yjh^HE(3+Ftxqrg`@O;o&
z@l#QM-miL&QR0(&fA(sY%i{U`l<l+R(KYdm|6G5~+I`FHah|-z<h$ZIA7lKnYV%M$
z_e0p80Y#pO=l%xs%lVJb#dCjy-}7-l`P%5&9||mfC!YHujOSYi#~VHK(ZxDn#B=|j
z`+>zW{}8_s`P2gOA<x5K;;+DSKYz&1WD$wiBX-EY+}}GpK9zV^cuUl0M)P#ydH&fO
z-aCIr@oAC2m|t$a%_6=&Jo8tNBiY3dg6IAEI48IG3Gi(H7oGBn=XvHZT<_g7Hb(CQ
zf9-b>@jRa#18;Y+xcI_|SBwvZ*On5W8lLSxVNf~oUEmp?GdWfgUmu?R=VIon;#<RW
z{QAe#FnZ26TzA(NKL_ReqCN9Yt|y-BDPHfLR!-uFq5No+Z(q2ncs?)Ye(aC<=Hhw&
zhx=(qPqY#rjQWJ5K6w|l6Tcw|@8sD*{1SN1PXelR62B3i@!@=`ZsNJ#=ktQOH+zcb
zdY|L5_2xd}H={lrkB>(U5WfPR`EFC=!Q$E9EYSYR^9(n7_W#bWMu}(t<n<OlG)_F%
z`@G)gvnGmPgX`t}9ocb;_yzEcCs#{N7ti;bn2!?D%r<(?&kNj|E1u7zqtO2KHu;P9
zMn2{G+H=Gb@j>vsUo#r45T6D4l<~wn`x^11;n|*PpRO0r?^E%5f9~BV-V*ta`Sksi
zAn~s7oNwf6yF)zBQ*nQ9bJ5-6ccFa7w@aTw#PfSr%y%bF9x!^g|MbOS;`#k6&WCq-
zhKtXQ{?F$N!|YFr&j8Q*tW14Yd`b8i^ygByBE{!}=lz|w`I7h=@PR1*@u+J?&-^vC
z@h$O9P`(?=Uy=K+csF=&c>h-qjNTId(80&zc|Mly-*nb<@$RS(>%YnUwRo=ASpJ$)
z?~I=FlkPu1i064)#-F26pT%>1$N1l3^>^`|alKr>Y#sPZ{6Kit$E$X-<B8WJ^n8Bt
zJ5wt0+@E*A{hj+Tt$6N-@cTK_f-Q}n-|KVo$zt@3&o^6U7vBc$!~VRYP;T+e*PK82
z$6Fgc@9(?g1;ulJnEN@6))W!X`6~N!zk$WY_r~?|{?2tMC4OEK`LwxZIq~P=S)bc?
zD~hjxe9HWIVVk}90q|U36dhMX{C;@GTjyrA#Xp8;eJri(iLaSNevEwGP<#h??r(HF
z+(i5$cs^eao!wkK&r>m9Wb<fc^gN$dvvfQ04^bc1|Ibf1@%+6)`j1f_;(1=n5%I)&
zbyuU0h2J)?r+7Q`f6ku=)$Sv{F+Ar#k(mY<J>!Y(!$IPCzKikXaPTnkO;I1lb1R=w
z;(5M{{rPUIapJS0e9pJe+e{SC_f^@RXW}P|=lj}>4+V}-6VLS{<M~+sS>lVJ{#(!=
zYWJ8cp81RO)fJWe#dE)u_scHj67k$GW&b&JeYtq9Pr1I%xpB48GahCdx!&kGUivw0
z6wm!w_Maa)gT!<F%l;q#V!L?eQ~DMMf{mX2?ZJ!?@!bF6{SD}FKs@s==X)#d!;GHu
z?L#TU#q<3Lwr8emC&Z6OKD9xAz7TLm{7QJ1Uu<Zk_}a*KF)06O-Am%fz_UFAvtAQ_
z6`sG>5cTM$_>9Oe953O!?}%@l$p3v_?~yw2zklzhVlE4dzyE0#KM>z5k^lR=p6lhA
zu8+n0!}EF2ADidm|Ex@F@%Jy?fBpY0pW|`e=U3vhv3$HAu_yekcs|eK^YKmdKZu`$
z@>}A3Y@HsT#a~1G<oN1U>AQG~0KHz0-%=@miNAsJx&L3}hQ*1*>k-C7#;X?_Q;Hvg
z@_D~TjZ7<^?;mk~V((-rp6?&Af0oOY#ps#uX1~ZL-XHaMz<6{ykV`z*%dG#l8P?+Y
z{FMEtW`}~}xn9nV`UI9PBA)AC{(eeAg00cB{5R+A#2-d~W`2LLqOADrXiv^(y!uxZ
z&+lEZKd*GK7axl99nn5tENd7&`@_cvwZ!|Od^eQeY-e5ZE8*GyH%(|Lz6v~_|E_gu
zBL1KE$5Eezg3ZORM)|?;ALCkzpOnb|jpsj8{r`CWKi|KqalNg0o@cN``5gk>#B;vN
z{(otJhxp7mf5rKpYt63W%fK@~j!EBB{7&R+_P6zSdW)}ze9HaI??L^=uY_m$2gVE%
ze=rHZy~!}~Rv3?LpR{>LiT8kK{JipJtayH}(hv8y=%ESXXQF)O3+Gvr#n*-Be4vi|
zH1Rj+kxwt#%@Y3+J{sRkER`@vyiKD1|9Aetcs@OHfzfmR_GIN^@#RoH_uqyMST4Rc
zJmdLFht=Yn!?XSiGp;v!#<wC50>yK`Gz$Hp+0HHET~HtPpUe}t8$IVg{au2^bH9}5
zUCY^oi0_K}uzlLcg^C{pKOfg?9dTHEcX;l1jaqO_JlAW?kDGg(5YP1#<H?_jXT)<o
z#p~^oGE#gd)Svgu`r1YD+|RT``(z8eD!vTL=lp!o@SEcQdH%j9UVgv+PlG$+`TX4h
z^_iFBfp|WD=ku&K&mS2*+b37(v;ULdJpGmUWoRD{)Zen#Tk+fv;r#7ur4QoyzB#Yg
zI>l%4Wsx7bUp?yDH}M_exqdIZ{-^lk@ZA3_G{oX$;`Ip6ckz06IHnZ84*8Vxf%RF^
zioXCKj`r^wlR<ng<d-P;h~1gR^Sl=G^;4g0;(7kc2jxe%%q6}7>cjY8QOH{Sc6jb@
z&;L+B{B3x)r_J%g;=j`4yk$0jTcc<DZ0K$$p69jL{*e{SiZ6=s#qnD_MMa}$`BSb{
z5nm7GTjG9Y3#=}l=b4!=1`V$zp84x#u>^^SmHr=PcL9}Ev-W=+yRZ`#6T7er6<ZOz
zFtNK86BQd3JFpYGunQHtFcHN-u?rQu_5a*@?&JOYKIcEK_gRax)_cz9nRoW=Yv!7n
zJ$v6(D;hnYM|@0ORXp<@<E`PN8seGnxSx=Ax4Y5vd`qGU^^BhRy`)DY@!a2I`_Ibl
zA)fh^e*dQy;<^72jr&{cw5NDJA7uTLE@&_QZ|8rOcI#~P-2ePqrn`8)ugZ8hl&H7S
zv%lB9)ld9*#D5UlC*`Jr;<+B={J-q*q2igp_&pH++9SmGKz*1`r)3%~p8F46zx#e2
zCw@N4=YB%unTg`t!}EI)@fJ=IpAPwv<6+LOGsIVc=lx1kYL57J@ce#JSiJe-QzAcd
zJS=c+k@$)5>|c%7EECV~b@2I1jX?q89g$zyJ^|I&is$oU?zcFn-6+2EU&{A;yv67_
zpWm^2yZB&~?~49X#do*(3-FvT_3+p){x&@C*U8+6#J_;&{9*s6BjOVwo;jY^I(<TX
zdU($ND=#=BzB)YDgR#1u7yq~OTC>Vr7SHtvuQz+5tK#`SBYl>L>qgK0mZTdajGp;o
zsrOy+G0{HUPitTMp?K~mvp>Fdd}{Q}?_*v@iRb<R*B2=dMH@Y@H+1Sdqvv?;@A=8-
zIi4SN{w97k+LQTxx1HT_+w};?f3B~GU5X{1-(QMCe^0a`o_Ovj`@#1akVriDhZ%34
zm6IAh=L6YOr4-Np9*p{=eUL`H?S8UlKaKI0bZ2_;e1AC-<(Ha~Nj%U0vp%`nWE0Q!
z566C>TcModyCXkxd@J)KkNDN_93MWPD<D2G@}nKDxBlY7;>W;qzErhmaq$P?xxVOG
zuC#crXE~qApSYZOu4fs~jUrsd^Y{MP9|Jd45x*Gui1UGf;Wfnb`IIyEhZogx7k>uj
zbG~#eQ$6v2ThH!(*--pVl+S!u{ZLc!{JtgkPwc0+5T6s{72E%;r>D^eA>LXzw-@h#
z@;Sckw(BgO>o3OhuuI*Hp5t4E6}`msc`@fdo%{6@&-EJf(X7e?#k=u(v0o9KYN&Y5
z2N*wT9}E{?j^(5M`|lVfp5O1{cv5oQIPuKCAt?W3<B8&jqCSkD>^Y|xy${MC`C+<v
z?$5J6l~2wV&+}mHFQNYP#7{>38K3@L7K!J1FwW24mRe@?tpD=_0pfZ7f#<`A-B=@@
z`~RHZu3W!CJma6^!_T2xjGp=NW3BDt`MiMb(<<+7@iWl=E{F%8&-=vleMzpr`kXo_
z{ve*`vcG%!9})i?p6yeo(+Tlyk*_(wU0wW)_-pXIU-RRf7hjwC7wyw5?2`D^@Z8^a
zSQRFo=exL{kl5?Gc%JWK{X?omh_^l8_3Jzp>i;g)UGW2u?>Jw2{pf-CKzNQPkvpG=
zkAP?U#2+6eeh@s%pVc^8JlDVMzfE(#6aNk6v%ie|@KJm<^cSwzlAio3z7#xvPc78{
zr}!rDe7;<$ORN*N>z9u3JkKz>R6Ox~Uy1!CLxM!&Jy1U9lY_1&5zps|EfH_=)~689
z^H(hY?9enu&+>ECN^kUh{$4jjCh=Wyy&SKGMP(Jw^|&9dw|7tu@qE6?{@Zy<9`T$H
z*rWWTtqO>rhx)UBO(<AcJo7c%|Nf6+;uoNN`u-P6iJt<``o~)4V)R@uob2Oj^j!bG
za;;+YfoRX|$!mybe&_yb<$JZnFR{7a|MmT=)JN)yXa42<$8LH<@vINmgKjOGiuXr8
zW&8Ka*Ft;^<VVKy@h`2#S4O_$`{Ryh+KFEe&+Cnt-%0#Cc-CiC_io~AV>}PS{heK=
zmv~=z_V=KK{lxpjbG_hw!%O^Xc-H^ch9TmQ!E=6faoBM2{N8dDuJ==|QR4Y~!8{L;
zCF3~pF>K=5GJjzH4UF;?pA4SkgX;l5@de@8-xp1pZuD%=kF91KJ@dtcg7d_4eaHAo
z`*Wdqe$V+Bp66D$u+-=oKRuSM{6G0web$KQ^Emde>=ieNuYmTCM*L(+xkY>{_z?KY
z_qG{5*YDl8?Gn%Z8P5N|j@~Dp>k;PDLk$m#ACCI7eI92&BEAni$Nxd^jvGDWv+VKH
z;<?|;`Df9&=Zv2F?bAA463_ix-mm8+!o+j`mi;khyz55K^+KZXTjIyCJrO@e*G7ux
z{xIwRaqt82JfF|`K$gZ&#PfU_+jE0clz7&k_jlpjSK@t;Pa|=?2amiJzXYDwyKUx2
z@o|tJ89!ldzl!e(&+(@~;h*By!gD?H!Y<ZH+x18c<S*90#-+I8`8{XWC;sw;;^(0J
zV6<n4zDdLfz%w8DRZJm15}xt!BzYR6XZs|(=OF$E%4a+*+vX@fBl-*X+dW5T70>6V
zJWtZJVGg6`dSQF^JmR@tqrdq!zxd{;KgWmAW6t8a{tCzQo%VBziRb$=Y|ld-ONr-t
z$`0|9p@fUkGk!M2brsM3SjK<ZYn8?G{anWX&o$MJp7qH!xYqy4Kd(_&JlBJ)&lZP<
z;<+AVf2{DViFmFDIeuQ)*IYc;JKnfoo|9V}J=<qOi*`oO`qawb$>`a?l78<h-gZ6s
zzn-6#Jl9h^*Mp4DuZ#PN=Xo=>PxfA3;#Z(QI-x!5Rv03F4m|g}QYITNemnd;lpjCJ
zN4zgQ=X=xkjTO)Ntv$-$KG9da7xJkqe8Oga;?Ki#J=-q#bn(TJA345#_&iJeRQR>1
zPwG?t;vd8Fd~cZlLh+m7xqkfKd8zpN$VXi71eIJV-VdJl*C+lO@$2C^9^MLHFP^`5
z&;Gk;?Pl>j&+Lx&JT`cn_$R1OB)o6UUE;GNJ{kWH9QKK?2+#gC;MoE3#o#&q#NK~c
zd}Vm{myeT<8$J8Wgchfbp5uv6{&V8FK4SfEeY<G%yuW?UUlHF3*URtud|MnYzCFAT
z?r-*9x5V@N{K4=UD@2Ote!CCOCu~gmKs?tAY|qd;kHvHUocF7J;B%u7ME&3Tyb{m#
z5!b(C>c2I5KF__A^`p_V{3`Fh7(K7I^U)vTXXE~IzwYC#n5S&lBgx?z4-GrS70>;A
z7qn;E;t7rZU-2I&iFnRey%9glt|k}H^U~}uvsR}T&-2n;kF*`<VD!Ad=^8qU=lq}b
ziI**_ct_+@JG5uM*G}SV!t?o5o#5Q!55e<1Rka!U#pgtR<o!DD=`5c4n)^#r3KbLI
z59LSWdPn^%DLyXp5zoU{yiis=-?!!byx7tT;=NIROVnq2@5<u&dkt)#EUwkXUq$&G
zf4q~`68{jM`71oKj?uF|A%P9Vzxzx1xkoh-9}D9H_q+DgZ!X>$p8GA4SzC+e{wn8V
zE^pe3FM{%;aKA#1bQI71PsYRaSzX2R{3QEhmJU6Qp6&mjSYPpNQGbsA_Hn$7p4Zzs
zY_Rx$%?A>El=r9dul5$t`2e4nMGy25&;3%ir+f9W;s@Y*xj)=Lt*_BDe=U15+34*N
z58w7o6VLeuz2C%H;yK^o{`})+{^B|QbA41f??R(z{LG5AR6OS=-0yl7x<WkX1Du~H
zSiV|(I*bqOj|KXy7yk|8c>vmfY=zC@gHS%llWiHdiGK>ud|mD3PVt2iZ>-Pa1AE2u
z{oj_DZv;&~AU+oIDbJHsX?|Gz89ZNR{jcObE`AcqXMWH0@s#*XXn*F@cV|PycY$aB
zEkEy~_>yRU=A+}Cu841m@;ToaR5V=t3Y5?G84%}|_$YXe4<T3Xh~J2Kpnn^1Up&t*
zaX#QQ=&|^vD4*j=#v0GXAAo0kZgqGip5KS;gZ_2p$s6(cQGO)+(cK@!^ZSs@*SRNs
z5x*7XhoJoX9zVnf!}EE;#=J34+pb6We3|>_CBMWGe+1<-erBCXApURr+rbMHi{FXz
zd0wtwkL2Qy!E-+<UHR1F`F;)8Uu%;%7(Le`?ISXZuY~%rzt7&1#ppZW{_Y;(B>p7I
z=lsE^UT*PK;Mrg7v*Z`Q51!*mkJp97b3PM{`nNe;RQx8C&-tFm%#z~yJ~hV&_jYB)
zFGKl3s83|k3gZ8^U)>{CW%2Bf-YEZDXf^S+&yOtUuiD&Q8EpBUp!NG#tq-_~=YBQg
zIi7DF@f&cx?7s~fH4r}u-!tTRbv;`X@xhDqdw`rT<%(`5en0Xr<6-2XR^sa-|8jgD
zG`+3(0?2o4|013p#gB*Qet5QmUB!2UXZfjr^br3Fp6l^)=lh87h<wWNeEyOF;>W-*
zLcC4sHCQ~)KePTj%X^DIgz}?Me$}Kt;yEASd}&qW81V@apWL6By=8*Yhoe40BPWaJ
z_p#Yu-0Mvf&-n)X%dIT4#CJgbIUh^>cCOKL|D@~D1xC;D++*ev@zJ<nY=572E5!fp
zJYKS*tHpcadfn0fS7NOfKMS7w;q$I+GJ3{CaKKja<552IX+5u<M$hsitL_!g=ZW^X
z-m2*i7(Mfs-Q!@RXZ@$|J|>>;XEELy`JNK*kM`ksvZGmu(fi?g2j{&geiF)$f{*<r
zRD3;nj_2pjUK7vx60g^H!A<dgD1RR6ldk(6@x|d8582)Ci|71@`wx}UKNipZaNghC
zkDrO3j{N9>`q$h2(&#z=tT6tK_yx$Pe81yFqYvWuz;pa;;Pgd&LF7B0*G=*6yZ9sU
zTrXTb7UPWVdc+>%8^_NDbK;1v4$u5MwPOPDW#HL9JBue4UjUx_4_<MSi|6k_@Om$W
zr4rBgiFkiMuSzF=8|uUOeBqT*{9$+>#9L(5EaLfl5G~=?rF9Z-kN(B|u6d7gi7yS$
z@^kObC;lGl?}Yk{olr<T-w)#cLuAvUM$h^r&s$PF_a`|XhJ7g`p8J!WkDWSGUVKcn
z56|;NFQ_D*zh7yO_VMXnO?)<#&*vkz%DRbnh39;!hkYHR=l;W~TlI~e<$G*uES}&0
z<aqvMcr)>>QGfa>by^uc+dqEhw&LrfeD<$-uR4h5_t2PsTLyO#-|jEv@0s4i=z|as
zk!|{jZ;bL;pMb&x#B)B({q|xp2aD(Wo$*%S&M>3re0ayEk>c6kxt|v9Jw|*6<U7tE
z{M{#r9|O<)(lEnh@wec)-<~#Vs`#|XkG$R``(}z?1ke7`deU6+@8LN<jBCC?d{&IN
zQHY;M`Id<1_n%q+<zJSI=l7qvemQ++m3UXwhx6?N3)YE04$t}6sP3D@--l=YUCVA2
zpA7wl`~O`M?G(@Fx$KYmZ|xD!=d+B@pp8M|`Th&<ug~yc@tmJCo?UAnGkT7n7adO-
zJ@e`8muJQE{TGg(xq~klJ>%!ev{3PVaKD@p&$m3UiO&ts`0wF-Q#{8*#+!4DJK|@c
z{0^v3@TGf3-v@rribvwPpULqyvfneKXFLZ~ekq>cC*l6EU8*<YxqfH+AA9g#Jl9j~
z?^$+!7SHp#A!wfm<Gvd``-^Ln7-wzQBP^f(V$L|?hvEKmJvIAde4`IX{hdzPi|2Zr
z&x?KLB@@s7l?>mX$uu~X(R2N>ylOh}{Qf7$6OWV`#ZSfh*ALg5@?K`~g^^GBdy(C?
zW*7e&p5xUApIqVxB0utd$zApGiN9duE&KU?;lKCuqf*$}efZ~ZcCJF=9gttxA4k3~
zBEAtk`(w^)CB%2PsgLD6zbo1^*4#4U@4~bE0iNZ>2QSe5fA+^Ng(`{nME$w{(;-GR
z@kh{Kc)xrv))fB=J_^^HZh39-?2jCu*Y>S1{vOKb_ZhBKYHakJ?>VPzX7t=I&HbRI
z_}!=v`)|~aHsVjf^M2JB*FpSxc(#9d<1XSC!*hMzC1(%uJP*MAjZYtXi{Fp(xxW;2
zvcLGv@XRke<_$7>-mhC-hKc9zH~Apmu9O~W^vo9>5{?ni_eoiw88^p^=XoUduX-CM
z89n1aa@bVy&C#A*UqsZNDSj?I<E@zET%%|G+rFGH-WlaHzhpVMSUlff<NE!<)aBxP
zqI`~ruAZyJ^Zhc$+r>ib#Pj{K5X8^>gqy@KLVaA}ciadR&-b-?K5fAI9pXcg9~lq+
zL-rUw@9(P`LE;^eUpPMBPZunn`Iq}+y`CHuZ<~KD`HtgZyFDkxe?@&bU&`itR(w_D
zFDJBrO^*xW`@(a*vnqF}_>J&<U*p`TtK#`RNw!a((>KKP{UgrbCN8)wp5HfM{M_w&
zPkda&C-X&E=||!Z;(G0I-mh@NXX10BeC{V7zVSkQLwMfby&GPO=YAUVS8DI~M(>As
z=<EJjd^OaE=M9QGeizUEH$Lxp7iAY>yB^_sllgS)f!N~ty-MD%r_<t#=kr{SSBX9C
zjXn_Vv$#+)@mxQ$zqGYWC7$aGmVe-4TBGN9ReN~`@!kG%zasi(7SHvmJ+8M@rR+w}
zd|EhVE~Dr8dH8-_@m!xWJ{@-y6yF2a%XqjuwusTY;CkaXE+L-tZRW=gIm(FV`Ty7$
zA6k7VC!WuL*`6;>R209^=6WsbHM<Bsf7M}KRq-Qjyd}Tz`C#V3HO1SW@3MII-{}==
zi$96;R9s)wN>*QdIjomCA6|K<k@(NZ?`)s;TRg;%Kz?+`{cSR`rTA;`?7t)Gwh_<Y
z6Xg2{t21{HUjg}o<7cN=oyE6;XMg-~sJr-K@O*ypbXsrmyWn}f$=mcd`e3x@a_2$f
z`TZ;Q$J2Jh#K%B<hM@cd7e|Qael^F#QOie*&y4c99!cJBym)tbSJWp?rAgxdw!d9C
z<y52R{mpTIhIo!|QK-+;?Q_I)Kb++!A3I+>$1BF?@<xlr^Zg_4S9i>@Ts+4g`c@wT
zjGp6dvr}uu_rv|-dMdU5M)6JHxt?0pIZ!;$r?J1pD78bp7s`*u{hASfkI{2J(D?d(
z@!SvR^Js_lhm4;6rQ*<|;yFKI`EhEU6wmnv{pk#6#WTM%K66B!7tj35{`)lOvUtWb
z$DiR-uZrh>GV{ywRyV}+`3vj6pv-OY4u}U2#6z=$_r&vkw|Ve)!yk&zgZ#*RU25%9
z@zvoOZ_@|85FY~1_ZKo$e=R--@+s%@Nz=X;&wS1AGcS1bN&G34?}PR^vg@08e&3S&
z1Ea^=owHq!6heMv{H$*hTRfi^v;GNl#~1I9@>!pD9}|h+3D5fMJ&{y=Pk8Rf*7Q#)
zp81;XdA)O5@dXgi96uMA%3$;ypJ&9+Z1fzj8eh*QJ`3u@`Q+AhImOq8=lP1nL-UH~
zc_H?%#cl<~^E?mN`=8Sn5zq5H?C-Ci7dLvAzjc3U@!St&e_!WUPCU>5uzgCmswkf8
z7iaXxIR&bU=lIF_%#<HB#PfX|Z<OzN!Cm~{-Y>4Yw4Qi=Z-n!o1brGAJ@3~!R}b-g
zUzqz*d6Ksj&+~Qv+W)!hY4q$b!?(2;&;54Zuj`{bi|6+`nD4qa>~8cNPue>5HhQ*y
z>ks{mp853IrGesGqQ7(hu;<dD;`x08SH#<~UL(Z!M}Fja+Og$Fi$4I*c)po<y!bT8
zcl1ARO%z`rp7Yffo2H28_o6w!dgMJrJlDU>M@eeW5zq5iyuar&&KKVu`HT7SL)0Si
z6XCfZyYIj<@%;WX>%VzQfOwwQO^0|W-+Hb1Fw}?n?tH<G;$tE{IUc_MvBl_lf9qe^
zZuHTp|B$7-#WSCB{3+LGzxYC^Kiji-#Y5tme>wi-Nq$s3^Dpz!xVtCBJE1;o|4m!Z
zh-bdz^O3%z&x>z^^7*``Ys1UpN5BW7{f}qAD!wl~+b8S0>*BfJ&h{C8EJ8f@+u7eM
z&bcd|=Ux3!|2Ul<8odYhKj)NqYV_Pc%n|Q}_)cga-rrHzqQy6ZXa0&<^G-bX^SOQr
z8~jN;*UOv_6t4MA{CL!d_jihe-Fe&f2-nxnIPX;dSuF9~&*yqA_5OI`xgKYJ={q@*
zc&^9Y5f5`ZB^A&0IPcfQ5-G)VzQ^_%94D=Kz8}Q<yXZ=K@$3GQf8VamBtALvDf`Rz
z{@KJ2hG&28Upc4vOYpqj1u652=levg&yo8D#PfZkVBD`d+Y5{5`@D?j^<#>Q=li^D
z|H}<ai$90_$o|#Nshs#*@LcaSe&;Iw3p~$bY&}-R=sBKy&8Z<i7y2*z%i@mi;!D7X
zp#9sHs3$%Td^G&TxQ)bDhv)e4@M=@>W#Ii#{<<|S#PfXw#^<F$p5pmF5%)t**Jv-E
z=W{sU$l=ggJl7)}Pj)`-CZ6+uu8)%M>m~kQ-}k`xua-~hXY}k}g<A|1KNRiH`BI+z
zLyeyIYwx$=M$hMc!_SQp&;0?OAGp4FoOsTEI6f5bHPPtVUp|+gV)Wcko|troc)ow+
zf_ScZXSR5rm*9Ekih=Wtp79xH)FSabPssb#w*E5l+^=By2eJl;=l(GF-|GBWBcA&Y
zT)!kZw?X`9#HT&l^V7mD;@csga=fkAeY^OL@Qk-)Wp|4&jQq&{TQuQ*@x$P!qyC4k
z9~6Hap6!!)!x8bBkYDI;3^^gb3p~fqm~LmpbN`v^<<{xXi{F9r`ToNAXP3lZhG+dZ
z?+X)u7oPn$!Q|`W`F#e)PsbJ!;vErh>@SD&-4&l7J_Pr7+_wkf%fd4s-3@sn-VL7R
z_gx$%z8ri@)F(!-Xz_f$Oy8>fJELcNj!W{%=ot^g?|c>C0`+G+Bo6#3p6d(FH@f=7
zx?sD0X@&AR-}_uIp3yVEPt2M~JfDx#KYX3U=oxPjM^cFQME%*Gmu99BKOCO%_Pu?2
z@qc@so}*YM@l#Pg^W)Rl*~D`_<&OBQ8kR#m^AYDK30CJ3&wRvqC_J!$c;+LHCwZzD
z7SH`~-rpB#i;L&?DtX?Z=95z5IiC#2@1Z2#>muHEerP#=wP<M>`TkY91+L;b-(!CK
z(W#1f_7|@2HWsNNegMu>v3<J4a2KBz`Iq}Gxh~Ze?~MEyh4|UNtfBaw@T^b&K260(
z!!v%0xV8|_?_IDyACh^B_d@=%NBy5gwiCY<p8IL*13QW5?;njt`DI3R6MyM1<rl2q
zOT0b$JLf+Wv-UH3j^__wdx<ZN@;U!pcVvk88t~kok27ny(R2QDy8S4lcR_o;E;>#;
z&jT}_pT?djz9#C=^LuVr{ls%U%XsLyYP$GZD4*?f+H1D><nUat9j-P{Jo7Khf0|~I
zc<%49KW=)wR6O%3pQo4Gvr_yd)SvxpzV8~N55fJ-(`<uy=2Pb17kRdb_d|V>VZZd@
zmu*JR^+Lt7yTtQ68~aO~Mf=1v|N7y2&-Xkip6A&Zp9fryi0AWbmcKLc3GqqLKD=M+
zB2J6vc{7$@dh<E)+z;n|UEz_J#Lq!}qR~FB>xCKpJopCruZw4YVf|Nqxh38o_2GDX
z`gElDmB^<oKg;|F;<v$b{kyTt6Y&nnkDQNnFBK)8zmLHF>lr^<d=Sd#__O=kTk#*^
zL(u*y*M1c5gnVZYUt!2s@x$RcUVW+lQ@kHMuQyw|SQl;ABW>Y1o{xAES3G|&iT8K)
zo`m9KBYv3g&if`2pAw$e+qzi_@rB_zzkQh}jd-3%;(TDl7YCzfepz+K(dd0}f4eTs
zYV?8dpS$M}&;3cR7aF_d5zqA++kdNl0i$O;dqp^l=kqMqfAOYb;+elVKP)h!lz5(x
z3PSs|uID12>p|`p)z0iHp6k0Pl%G7hviJ;$H|C?B!PUjjfamyDct$Pp%rE>NLbJAY
z#jim5yxws|8j9!hR>tR$m`%kqAF+R}3T-Z)`GxuD+{)JCSEK%sX#W`l+KK1$R>o)J
zs-48oNBOM(!_?ixbH2p$QC^RF8a?yHg2R2qbH2p<^?JIOc%FaYcw4j05b<k~PuahE
z6dEo*44&(Y{6Brf^ZSsTe?C7yR{UJ#M~=65miUV2^IyhiXfHqUeE!S+IIH}0@uiXP
z_`G0zlG)<<{Fm$TG<W>PFGKlk|Abo>is$oR=DSWKml{3C+YfbDis$p+X!NfJS=NY8
zfd0bs($%8Z8$J8Wir~%S)1iFkuhY}FiLVOJ_@CN#m-t5T0l40sh4+c)`hw$0)tCpx
zbA92C@)Lv}7SH{?aQO2pj~jgy{LBHT#q<4|mhdmDoD<LUJRE;&roLqKykAKkT`~H9
zjsH8t#WNpq{@H5$E%7}6!}0t@lSuK*FN_C=+z*VN?UVS^W25JIviQ_<@yuVm-Z}GM
ziC>F&w#WU=(e16#GoGK8`6!<Gj_p%5(O0AAc#`1O5Ai(j$9OouG3F)P^~e-lFY9yI
zJFa-<Q$Ms%gJucEv%fpR-^-IkJoj@rK6m_>Tzog=Q`X1#L~8N;{uSS+aQAl*pA`9&
z_37TxQT!lyJ6!L_Vp+v^h39&wVVoS|(<9$;ew#8ZxA+e5d|uOgRetgP;n|*Nyqv{v
zhUfn0!K%f?AAslihtX+Di4TEiz8m_utoYCHY|k>gD~OMR=ktytzLmxE_Yv4WZ<<yY
zZ;$@P@qAmZTH^V>C*Rko^r?>cd?=sscKK8T@txo~p0u0a#OUo2&j-6UH~L`s(Pdg2
zJ@cto!gk`Bf1OeOiklt9|1JL(+1OP)*I%4}PWA37p81i_mowGwYxJC-Y<Bb#&-ESW
z+vQ&lHu`jEpO}Zdjh^M_ndW2k91r(;juqbn@y7l>!r50m$A9kMR*K<g^sN8oOVh-2
zKZNm9aK$X~+z;XU=wLs8qwj<Ecc{EjJo72%Cn-`bHG0<n@~ai%xj)1E_2J-Z@qAuD
z?=W?}_~FRELAc&4EjNqj?<27Or}A$T&-2e5-?Dt$DW2=!5Y#7S$X@aMJq3>cOBWsx
zp8@&81?8XYepq}Bc#fY<U5<;N2_KE}-Rw_`4}@oazi}(X=sACgx#^<#2$WwB?^Dbi
zenmX<DX({5?Qrp5Q9kcinoPHhp82Bu%RAy7F#i1OdJo+fpBtX*k=D~5i?0SBh5OZ{
z&2zKQ@l}4`*3J2q(KBD%uzM@MH0s0gD(0mR;yEASd}-$LFGkPx#iV{e#4}&>`)rRY
z#k_309--&;u1^_PJo7uptGEvm7(L^y;Eu#b&;7SIW0M;_$G19-Q;Q#u`^ElpJBNdK
z&IefjiVqpZ^Le5l;<L!fEaI7e84n-)oy0SrvcELwlH2Gxo~J3D-{`$j{~HOM#dCel
z>n(h}sCef0V3gl_eaZi?x17Inub4~DU)fDAD}EpDFZ0W8j|$>>e|f$0ohpm(i1Sx0
zztP)j;?p2s^ZvRYa}!?(>r=*C_nCFX?|^qld**A`K>S2_wtvGSO~mv3703USF`J9$
z`Ku7rC+_7|;%6ZraXvYBMO*Rb;kkd3Z$L-!%y-O3qbqkcdiJlOsd|dvj{2~Du0H4^
zp6gTkPCEyP=lYcOnL2K;c%H{*f6Uax+vvG|8Jg2ayd(M-?^mx6V~n2pvB=2@;`5_?
z`l<et#W#cJd@NI!Y2w}C+5Xi^%@WV^(k?h(v_7G~(R05m=8Xm7IsS0|nRopX@vTsQ
zJ`deDbcOhO@VvhxYONOkujlEw-WwU#i|6xk##_v&P2zd}nfG^Q&{pxx7aUI}P1z})
z>o4|~N3Hf6J@+5h7d#-I`>Wm<-+KKF7SHGJ^k*&{6VLP2jL)3QP8mI~_gSA1qYp&=
zhgQ5Op3iqUelE#)MLf@Mvpyf5UlY&$oFLSv_WqmVw;-Q}<NWrjNq58_gm*#t-<sVQ
zpA-3!{jpJ=$KprAGhYXOekMK~p7GH8^h@#CkYC24{$J<45zpTn;{5zj*AL?V^*zZ9
zA7y<svh)}6{Cy(s7Y$1IL;N1ppW{Qf8!<v{*CP+%8UHia#}OY6&v@H6G=cay7!NuB
z8Br^-`0Vi9PfL<9x%i6kT(5PDN+rG+Johud1f?^2wtu!M8O2vd`JAtAYn8?5nNJ56
zbP~_;JPPr7`A06J_kb^WA)k0Y@3x1Zw6u_T?x)$o*XdJKJjZj+&r?(^DW2mw<GEMz
zvf??ObG-d=x4d|sKj(Ngbz3Fz9B<kFnZ{HzdS36gMs7yW`Am7II^y{~Va}H>zppQz
z-;?3_?Yzeui|2fa^&dZ{nRuR`q_5Mtm3Z6rxMjWBBX+>A^`_<baV&qI%e56hAN`B*
z;BMbhd?g!iDL**m_j>lYot@plxOR41Z+8(t&}Mx5_5RV`oKl~6!9B#UwDFejIY%P?
zhfV7vz8*ZE_xUy(Aifa3|IGdKM7aiwKfO?Ye<uX>Iq`m&csH!CnIE&A7%4tC^1D6C
zuQ+>*_)YN47lqqT5FZ53@x-I(Wbr+b-`OAc#-1krK0MDOxrWXZ9|QM`>#wsb=88Xw
z@|jO3_gf&o1<GgrA6Hr;eic01KWWMp;`x3t$HUP3tHg8t%lvzC`#SMSZ2Ffa{yATo
zJa&`#81Q_*<9Xw);tRqvJ}c+gY4jZ5y1m~cp6Acm9}Arb5?=xJ;rw&b++gusKZc;c
zH0*LrJlBux?*mJo63_J`&x@{%A0j?J>d*FHc>RKSt_Ruv)7FKG=lMEUT<`v&*TnOC
zENsvFZa2j@LH&JD{+bMT#Pj?B`^$yr_r&x4HGc0sZ_p$0E~pRl-7CLm;`u!m&R4g$
zdMTdyo$JBsh2Dtg_gI*Zmi~Azp6@SkylsEsvv|HQ;D`2avh=%ne$RyGXCC#Aam98$
z!ry0Mf81L)j(8umKd-l}V*>H~K3h2I|K^#!cu(X<es3+!zGUKKAb+vHET5Q4{6%=~
zuYPZqPJABZ7mjZS@?;c08a^7=>-{;i_!;ob*Dj~Ciw}Y4^P^%5a*2<J{Kfe9=$cP_
zC3udXX-gLppA$X`*V{iqQSnpYIi7UBUPAn7c#hB0)|C;@^)mZ!=Aq@qbG^**WSCne
z@mw!+eR?f@HStBzU$|d!=2=an=XumZ2WpGwdYt#Gp<jLR+|T6oR%_W<{ByKF*Y8*J
zHxu6g*US1W_})@H&#O2ge)67gWAt3V?_1JAJm0@ahw|NecQJbQ#~T%T7(LI|bxYRA
z=vkjHk^PN681-+mb&%0Bzdsr^%;?#F*Ebj`p5s6BSMTg&jNT9RFZyo0_`l_goW~{^
zJ@>b>&z)-YjL$6{XNu?dqu4$POUxCY5%JIV35~ZvJkLvTKjGrT#p3yX8S_`>?aRe;
zeB*eVWb`WW{gHp!K0oTM6JHeh)C2c7YnDyo`MpYxhnrpniqFh^hx0<Q5A6^?0iN@L
z{L}V`=le=7sDBpEAn|!I9&&wJqfoGTp4Z}d)#v9?@dHpk$CLIKPKxLGF7~g<OV5hu
z`7VwRjrv{?&+}UJm0d%{^LaGav)7Ve6VLCB@P2i^cSC%7^e?_Y(sb)>@%%m*<JoQ0
zJ)`IRd3F6q;%lHj%oj_uJrmFKNcM=gFK=FmXMg8><IvI9;(30F`<dHjy%*2#8*uzd
z+v&4-KF{KO@^Z27;(1<(*E=^(j4<2v2;Z;a`1vL*ws`JOGN0~R9bY`p^8};)hYqqA
zzYzDA@w1|OGVy#q%kg<Zx>VwsPhC-;v(M6sUxNBD-X`zMAfEZl59PZ}%53y3e|7Wh
z;u-&3AC<_LOZ-gKpY{3jHLuZg{K*zl(C8Ttj}{dXZ`;2t`_Imce(yg!B($^3_s`$b
z(Iv$5eQlP%wRRctV{pCfzxf=>i*JDa=WyJwZI3I8ABub(1;2b(Rq=ty*Bo!>jISxa
zIPxj`<HRPl#czOT`$XobFP^_wI2QGf|DloiSjdm;zo(9Si0AJabwK$}b6biZit?F%
zYjtWPp1)_r`m8C@LHse4&v=d%uZwv8UIX{XJg;>Z{~G0U{rGB4Z}E1BPmXW*2lW@9
z6y6E#xu(V-@tNS+-<LWJ6VLrUjz9UHjxc)W>-~F2i_e1k@Oeb7N#n)ye3Uz`H))GW
zM$i4U?)jz~J>%!(*BRpLu>Sa-^Q*IS#B)EK^V^Y&=8Nxv^11((wC7^+w$BqS&m%aV
zgqB-w^d4x>vq@GNJ?GDdZm$(T9Q9}W@7}UeJonopQJ-Nxf#R9pyTB)^ze7BqzjME?
zWVSuxJEH!~r}^IOH+p;2C-ad*;>)0X*604rqvH9zp8a=C`;+2lqkP75tYT-yPk@g`
z{l6u<Abu!3?{CA%%i_8J!~MhZo3DzWkNn8?Y&ZOd`1<f6sDIYlx5e}QBeu_wjQ7Oz
z_ZL`xkEn;@w<G^DpSB5lDxTlp;Cd~K-wW}jkYAV|Q?-08p5NbKd-loyUOd0Q!To`=
z-#&@w_c!=`+7{=&iRbSxus&lJ+g-I?k8uCf5BK*@&)DK`qkRJ5L(9b%p9t~H`I3JU
zd+}WVGC#JslT>_ll+XNFcS}m~93QxTOzD%>=-Gc)*2^HCzrVotDVjC2(KEkzzR4z@
z->YPOG9Srl^ejK+%)H_`f0&2+TcLeH@ti+I!FMiNM7%HVmmPe**d@d>zjHso;g!<j
zxxQw+rCn7{Jf9b|M19tHRTR(lHRH2nwW{K||IhwgC~ZxnXZe#KyBj_0|9E#j@jPG0
z@nM5+Bk|1dA!whK%{;{Od>zlX`{!vXp6BbFQGSarp5mFWIiJ~mroH%ah&P^}thcVS
z(YvEQp#!^%=lqK6k>*u<i{FOzEaQ1Zs{Z2JBmXkr^?NW-{6~1^m($yaif@g4>WAxn
zKX!!pN$^~6dN&*`p68=Do_INp7yq~OPR?&9ig!mo;&^iU_!RNZ@Z7KPnKeT^*S~x|
zxTgIa@!3&6`&X=D^Toe`k3#!@jI~&NGQ=~-w+UC4iO&qr{CGbgKs?{C;e2V0*IJ|J
zcvZ66M)AxSA-LYJX#&M_J;?Ui|7g3>b3HY3_ipigzRY+?>bqaOH`<f=bg9Q7@x9^M
z{_XP|HG0lZ4t+jh^c+v>o;f4F9qL1WXTf>#Twid!UD^Gz(X)Mimc459jGv?SH^lS#
zDcf^GM1*+$9wPJ6{Y`hp^LZuLr-?>96yNMG?YXedQ}KL$!S?se{6ak6cV>T?@G9Eq
zJ<z|l2fq`~^Vpm}B%Sd|JfC;4f0b<eO+5Eoc)b@Z*j=+-k8u9R@!Tm%Z1Mbl7th0#
zzZp+_1oAJ(lTI5FiC>I-%KVjeXj1Woksmoe52=|_d|i0PTPcUM;+ao5pK0?nz4!vi
zFTB4&dozjW?;mmg5I8ZL`0*&8{VSkZPVsZ#84soM<rRMfp6%1(O9AoU;aUFfGlj*k
zhUfe<<-+3P6QjSgJy&)wEuQBkxS#N|Y&r2fU&`@tntes1=l$A!tBQE8e|<1Mq})`)
z=-D3=jc^yw^)Kt+y>316oX>Or>S(4$;<^6idE?Blnu<@3`xSueO&i=oJfHt^eCt2m
zQ~ck?&sc5Si|2Zl<8!{koyBwf<oGioMt7sP=k;FhC7%1+>@P`I_7l(N(VQQK_8(~U
zoDUSLGE_YGw^^S<sYZzB`itXX-G`&Zb3M-SKjp4*M$h@!%JCD8p82|H(<$P)zUJ?t
z=gKw1=-I!Xf1GXf+%KweWuEw@=r4?)SSuHa=lq2CD`&rD;yWRqGJeuj3=n?^p7FCh
z*;?_rkWbnE1tK?yUko3N{t~rii}=Uzd_Th5XS?{q$S=%~5%qVA?*Y&C{=6*vjh^l4
z7kyBCQIya4e-eB|Jm3Ef$NSnfW}Xnw_kTG*FWL5t_;;ue@9(U_=f!75d~!bUD#m5;
z&hU(f?U%#ESAb_et-SKOc&<+w|0VlJi068f?O&+MU8A>0d^Sz>P(1fDnJ*qccp|<5
zu9xjIXlImoj<@uo<D!k8&$HS$d1v%|e%B`VC-EH5{m?#jKYlfO&S$Eh`YGN4?Zf$D
z?|HGpZPzc;;Mre(c8MqcU+YtRuj6RxMB-<le766Dgh`E_^}l~3g?QWZLYC*<+|RtZ
zA&q#RuVa3>Ff6@z=8GuYuUYPy#B)Bz`ZsmVCZ6k4&Id-m$RVEdA1Bmj(7`<7IX_|l
zS~|6W_=Pt2%X0q8&rQ!?CGK5VJmZ<|)23W;@tl7;BYr9;C@uaB*1!Dyogdd+#K%GY
zWxO?B<0?KA^5aE(uW$6=D&kkdbN!y6dJXX};F+(_rF9q2?^QbCe082Db;UP9KJr66
zJlNGxd`)<smkt=;RJ;eg3(7Cnw1s${PiFs`p374_f4_kJH_NAXM$dR2cB+&3TsHA+
z86OyLuJgMYJ=b?dyY>=a0_C?v`%Ej{PdwlEw1>}}aG-d;@5%E&TW$;y&+{sbhyELe
z8+`}VXW_6>M$h?=r~5eZTwim1dzEpbcz$2P1NEu(!cRQk59Rv0#-Zs(&wSl|>TL0Y
zaesYKpINQviBAE~_L*F0k$9e;VZ1&5xm5f-l+W?-&c&7Dx&P1k-qK}j#7{=~j8Ff*
z8^rT@0mqXTm9~gqkMh%@Ju|1=E}r>?&$EWz-(~b1A1dtFC!XtBu1^<^Jt&^fi@D$O
zvC$Fnd|u4;#j6}A#PfVI=MU~N&xoIi_N2GJd`>*~uNV)7mR}NI9r={yKkFSPz6m`0
z<G>2n#q)bvT%UGJ8X>+i@+t4v;oFhor@(VO+`0LI_`UFq&vhf7h);q1$ow9sZj|`)
z@F9r*W0|7GcY}|DulMq;_#yD_m_I}w{3!lk&x=uhpJ`vk^ZOXgcXn-lis$zsT~K~*
z=UCTm*CX^Szn)z@qi6f4x|C47Bl-)+w}9nI#FvHV`rW^83h@QuneTE{N@MgKAL^z^
zFP_h%BhjAK?>icO0Q|M>S;cdH&heq>*c{@yKg{-@)+mqByQ4l0a}*HI{bc6rE$^Mh
z^LZTeQKA#Y#B=|_74?bbUrIdJQ*0m4&MxBp5Dy$b_m^}P&;1JCukG=xi2ql9MExsY
zuP%Nn>cjX6T~|vy^CS0{3JtAm^c?>WxivI;&VR;aXeyrhm*eM#=gq}4|3+bbm*_xi
z@qf#Yr~KQA=lN>J!-USA#MegqN8^4CD$z~+a^zE9?}9kJ#PfY3mft+AuXuiclKWi_
ztGvWdMSf)Ys|E}ae;S_iv5r-Si;s=`#eCtHYLxgo@O<9k^I)v_iSWE%gLnFhUjxta
ze9>4x@mJtEz8z~cT|D=z*<XBf%od*+@x%9R1K<0LF9*-}l?I$xD4zSzV-cSV=Pngr
z2jz48KiX-fc<v`No+p%CBi@tcZ+j!(3%wt2gLsb5yxv6No5gdy<@4@^YqyE#c*}h4
zIb@gk#i)NE+B3V`KBMROoHqSI@zYVh9m*f{{IGbgFF2le-+x?uAj;=_`|IS>;<<ij
zeGaueCw?W$=X`HWflEg3!|VNiMf_Zp&-p{|^Wowr!ZZGVF1aOs7d-28w0ETV1@OVB
z|MLnDjGpxwmh6dm{@$N6%I|;ox%dsJ51;2=*!s%oxj#8;^jq<KzQFa}s|Fv%^L=XO
z3->}_#q;@sAFg-l_aEZ9e-Z`nc`oJ++w};4f6yL&*P^)MBayF}zixC-C_V%7qdUq!
zS2l_G0q~5s!--OezX{Ll9d$Fccz&OX*Sl_mgZN^|cYdh<qG68Wd&6_SH@#L?@qhb1
zRaAx?;`gC^?$4)+$}RpeJnJ7GlwbS@c+Su5rZ|gFh5p6yGk2?E;^V<{zOko3De*br
zIX=|*QC56qcyHXVKIbbKJ;&!_ODh|FILiOjySn(cs80~QuWK#wjo>-|d62BG`0DVy
z-i`Mfi065;NYv-z)+XY)zs>Rd<EZB1W1v2qKTl}TT0GC+dZ0eFvbPh@=at+azWKJJ
z(epfc_hVhfb3dHp$)dSEjh^$X;EsKbp6mCK#l6JGMtkyp4T?KNe0O-}$9UJg#jk;P
zLi^jT^%2kgb6#(Y!DEe{_xE`XU-8^;XZ@=?_=)FvW1i=^_H>%jbAA}-<Sg-=Z!ll9
zoa-;1&m;PvJ;!!hD4xIP%l^Bv*i!MWkbgOz=Z&>ed=L0Q)aTjd)#CFbpN7DDtynL9
zD?G=;82vVjkAmm(g;tfei7$bC#P;8tVwZRyc<yK3y|-8VH28G5-YeS<h+py-|84YP
z@j>vck4MAf;-A9*D?d7&7SDWI3j5*7-i3%ygZ}P<>s@y2qIkZ)%=zu9*;m9DNBQiJ
z(H+9YSApmL%#-4`#Pj>H+)qdrH&Q&`mvP1Q*1U0Fd}Gvy@!5C%WAQvM#QD$cA<xD0
zd)<DxUv1rAi9e2b;Pb&|j&H>mK>b;tyU#y}=lqlNjUM~Ii0_N~us`OS^h10c)Q9;l
zs71`1w(Aj||Ka#nJzre$S5Q8$xAxBj;!nb}{LUeX#b1SIyoD@DE<PRnJjC1SKB>ir
z!!uu`E$<*c2%h6ZvZRjUf8c(xKJ6p2i2sc8dB0w6bP~_=Y3%RYhUXTaYsH`6FR+}y
zvO7`w*Y7V_zkgM*ZGQ26ZM@}t3)fRQi#Us~2_J&?kNv%<_(?c_#pj6=&Xg2i6rS~|
zG{3C)3CO=KQJ<JyD~Rup{AdS1w@hX6PvJQ~-x<HUcqhaI>k|>~CjJ)6=lP=b8|sMX
zc+vs&KR2|2_zkEJ=eJYbnut#X&+C1fzPb4R@Z3KSc-l(*W_ZqTL-w{6e*m7}cX~Im
zqxeebU)*2X)4Z$rHt^if_s-W-{NLuo0bl!wXMW`T$1Y@m_ztKK@9(iigT?cEfUJL(
zp5EfQ-^KaxgK|FNIsVYEO)^&eEYzR*?&9qU;<?^r{M&7vES}GoS)Z1priuUC_cwAh
zoFzUR>d)~uU3P!*h2f*nABVhKApQp8nd7J3(Iw(J|8zn5xo52qe-7o_!;fvhT0Hkp
zI37k8T`%7D`GqCF%<DZ%e%~jb{buoeUd;LVqZ?br^LYn-o7FqT^E^y6uJ`+pz2f=)
zBk%8nY6rwKp8ZgM*))g6hoSx1o&!G|6MqEp<Ad_w9XTcb7(DC0Wk!hj*~q8-9&G=1
z7sW3@KIMESuk#i0sgS=opV?;@ZuE?2w@Ww0UqSgCPcALJBcAUIJEJ{k^u90tD$3{c
zzP%M5i|2VNj^~4uJ{Qm58w$t!M9c2H6n_-)!})gCt#8Ehyc5TN51$X>9T7jQPsaLR
z#GgQYSbnmsKg7GBeEN!SW8AV`kI-}cbUqSCd~=k~d=We|f%r$LKj)Jf+b0&^66Le~
z1B)d$dOpv+5-YWM?jLf!vnVW``0S_;^WF4S8O3vb$M%f!$|Alf%IEqwRW&E^oG%5T
zfAvX|TRit0L*VTm=M&HUK;GZkdkTqPg!*&67UWyh=(+!pu31U(d|tr)y|sDDisyMJ
z-me~C%8MU``g6SccBYciGd`UbRuew}<ue{K_HZ+L58SURE_KB7{4o31fFupX4@7;~
zp7SCai=Pe8`p@3dOgz8m#{KpKlUs?Oi}Kn2uFcwt=lx~=_0Qc={5RxZ=8OFwyNKuS
z{joh$oa`Y!F7nqr>~|%c*GD{m?~n71B3%ZEKf&@54|_`t7QY^z`;ArOdW$~=&;Am2
zb)@+27|%JLd|y3AJkKZlq5iK2P7uEq<#Ya4zs6+oobR#xwP~k`e~a=tzAbt@Q~W7-
zzVG~L_gwKQ5YKF%Am0VzE5Nh<>6$GO&+}UU>Mwa#h_8t9*<ZSRUM0RBJm(K>&a4y9
z^IEKr)51;Sd7hT};z{?d;(5M{=YIyf>=fS~^|wd7U9sOQzR6$ww_8C*&-rlhreN`W
zpNsX$IO3T2F{lr(*RlR7@f^>`;(A>&hln4C@;Uy5yt*L%D&n8>^Xb8%;<?`E^XM!y
zt{FY^op;-t;(0!t-?y|ca>wX7zPZG{FP`%^-rxM8kBpxCX+bNWiBE&}=lGUxz)SJ$
zFKnM=Ro@sr#~-&GAH*+2eZmnx-(P<g&-eAB;r9f87vBN-m-p-Dv=|Y#>k%ice>pyM
z_KYK*zkkGdn^Z7?cz!RM^KG{u_TsxCKe9a&o=+zJC_MYuoW-fc|A1%w9O#)&d};K@
zV6?wO`HbSnz(>J*CCMUwIXv6*((UZx`TIv4ua0ldCH@e~=lUyZL_YE7;aUG0bqk6A
z*Y73adi!K9D&7I{&;64w(Iv#^hG%{}7F<SrHF!VNCu(|m@p<7H58iDni7yR59p&2>
zsV2TDJnOS4rkl~Tee#FaHhOo|r_sv#M$i4m!2XTJcS8Lc4|l6J6aTN@hsy9#&YxdQ
z)k-|~+u1((AGQ&n4E16Db=uWIJkMWoJ>oOIi+HY&*uQQy=^>u)BQsww%hg9b&r5Uu
z_U&VT@$+!K%%|^84HD1uRLpl{=MNLl^VN)pRNY33=kp-0$E&)GF?xH%XR$;RjGpoK
z>E<NyeBMN#WA9Y)K4?!qzZ)=qrg%Ot;P~U;c&_+i$fw*NYmsw-_~Y=b|K@j##TWQX
z{<?g0x%lz$foT5|vsQ^e4A1+Ut;0I;d5|x-ey>?<llaE)A*fH^*jvSSfM<W1e`SaG
z8SpJp{^5W<;<v!F{!a%4i9ZO>`AqVv!Qy$|iQl6rmHL?YFDRe;3Ev)`6rT(6%=_!K
z>#X<^@NAza<1dJ3{$)N&)-+W7-|}ydT-U@ipK`tY?c)vc%%}5ke?3m!7SH^}@$kvK
zdq&TA7~J)dc;-9a-}q&o8NDCsKQH0S|C7&s^R;;9Q|6<w8{Qi|=l?alKN~&c-^KmA
z(erwXImWncyB=Zvc|P#ii`e2<Af8>(o>>mY7e5}}9^QMZz4$rsjEC^n$&8-kTWsf4
z;sa1V&kvunODBFiJmWw5Vg~X2UKYpC9m_L|=X#vwSLv5s{Cw2s#+Qg+^F8bNtA>qo
ziRb#7@o*=5KJh&7!TM)>QBZsptbaM5PZU(d=vjXI$tA?wAwLEnesZ-eBYq$}$Df7;
z%8S1M?~d}XeyJ#)-@jr!w>?u;{6v(``QF3@HN_7^KI(${Jnddv{5JR?_*G@<i@yl(
z10RyGvG}?0+)r+K(?fg)#Aj?gFNoUEQatk!<I~%_jnQ+y6yV;$=$U`JICc?V1NC=7
z`y6}GT|Dz6<E_!b-bT;)t@qUaM$hqofaf5i=lUzQ^Dyzur%&+xf&6wO#WzFyaDOBE
z;%K7}L3`F;F<$&2l+X6R)pwH7vpr*1nkv2=%4dE#m13s&A@I!a!T0Bg=lIY5Rd2_9
z@f`m-pWHZhv3Nd@;CRxf@p7Z*`-Yctt}=R-pa0`pqv!p7eR8At;%HCiU-x-|;;X<%
zA%2o~-66gtJfFWWFTF=R=g+Kv;e<g(&-HBU$A^rb>x+#$j*92|eO%AR9(z)JHLPcO
z{_1Umv*M@2N25JQX1gGszkkH{udlwoEZ!6Oj_qIa=vDCx=<&VH*0XMikBNN5{#CQ>
zZSj2mYme(KSNNXz+9;p?T#QHJdESrnx5Jm7is$e7a{fPV#S8JFs1M_FNWa(O?GXRm
z-wvzvUOb-{Ge34r`B^;AKQNvT-~T4Q5bDGFXWU_T$96qJ&;7tEV`GaikMeoH;x~>j
zzBar!<|iRJ?8Wmul{ez&-TS2CTci9S_&q05is$p_TgbmP{L_l>h4Oj70y<|9&;2yM
zA5pASX7LSCKHty%6hFK8zwHM$x}MYMIsQCYmsflT)Q9s8`=JHJ_lM_v;G$a*qi26?
zlc9uoo^R*)<`h+0JlEIUZ}AB#XY}kZ$);2^dajRLT30oCuD?1ItoeWP!9U!^cR~9z
ze#Ty?C!X^?_ODdS8W}z3Gv&NJjGpu1{Iyz&?~M9Kq5n3@&_;X*<WuIOHBZ}%UkcCp
z=g&Qz#UFrYJWTTKF1`)&DaVHq9=*l$_W^mm<#YEJ&-}~vSGUgt#TP{W@<V&(I5kv!
zS9s>HhyEkP^L#$zXI+=k;(7j=`TA0+@#6XZ9l!rvAi*T@uTg*A-^SOch);@m<NnFR
zbu+|gg6DeNYv>&DJpat`u#4OL|C9feezDPWJokOROgzt5Fy7pQ0*s#J5Aa)S^x-%U
zU#itc@h#AvjL%aA0>yJZ$oI9Qzi$`c1LeCQ{&$?;ZS-uP!Atjx=lYS)XXE!dB%bR>
zj)x(xN5%7e8vEC~WG9WD>&LNo&xmh__F+8N*mhn#pC|Hu1&qEdp7Q~gZ`bgu(Q|y8
zp8baSf9;oI{Sx&yLOkaW+%I}??5^1#*6+)?&Uq+)8QPQmJ$9$3;yFLze4tH<7vg83
z{1C)*;}oyObN`?1S>^6K@xFg4zf0gJ@w5JtA19CeCO!h5?US~yU8L=Lqy+M*6RtOD
zme}H#z;nJj_hmfsPv}wpq=SjXhrly`4WF7+d>iB=?zi-9ol?9XJm)iA3#Apm7oOwW
z`yc7W^L-i4-^N|YWb};BO-r+hPl@>9_*t$`PNV03OGnqd;tQjEu1^mqD`@nLw~TiS
zi?56Fc|P;**5cy1-sJcke{^Z_JyAZ#|9K6{89m4IciAe6_eS|#@9cS7#pqii{!<;R
zA)e=Lxc|^+w!8Qds1L_0yN>n5^ZlS8)Mt9}M&kK?kSlznxE@B&`0>8l!st1Ex~}mQ
zKMmK*{uO(0d-0p#`F!D2jn3kkU%1}%bLcLf`GW7u*MHVaJo5$n%iw+ejGpljfAT=_
z-Eh4e4?|iE70>;Aj_2?4jS$cISTN#Y?6*-y&+$CfxpCsxqW+O6zvB9d;(7j=@s@w^
z6!AQt&+`CJs?8A3-}B}5_D?fM{C?zLes7`Zqj}<8k?%NvYqE2Z_(|}*Un9mX6Mr0@
z`K4du0PzKo@Ay1uL5{WJYr%7ToAQ2x_(AaYxW7A(ZxKHSp67+C&fPAazyC|$v(s+z
zktm=0U8hUzH~MhY|8?9$;<>(Nf82TPi1@^af3BCSu00_>A3WnH&fqiRxxV&8{R`JT
zZ}iN+%^WU^=krsRKk8|i_=2cE<0tvP>*BedWxfcT6d|7DA;<rYE$*5<_RkOJdnmpY
z>d*W;?%NZi=lH)dBuYHj*PL(kT^w!n|C;~wd?$Vw>hFViXj%S~c<#@;z(*zdCZ6kY
zt}klb`DyfQpNfI8?%J+jSU%hTl21IN=lmgm{Y2uqKfv;XvL-cp)_>HS6yj~a2lDIp
z6S4jsax{(6bAA#wE4_HWZ_EB$xI-rKO>E-f*Y6M3&L!W!DpEO{c)lOUc>9_vr+Dt4
z^La#%+j+z%MLuOdYO}e3_&qqU#eALCyRdkE|C#ZBwN`QQ)&G)D&txbqp5Jrk{d)7<
zMSLaXBj)Qz`(4HNf{#Lf9Ozd?JlDTme-&?8Lp;~N_9*{&es`m1`@i{KSNwa_pYd7q
zTtlPh{&U~OO~s!<`JA7}=+#0zzZb#s^OW}#&-ZgVKI~1>-so9=>N}mpd)o9z%lHtD
z_P@TRo6)m>b@k~bp5r;6N6e_#PduNuGM^sKHqhvKe;>XcBK}|FVFG>MXWfzE;yJ!W
zqJ2uw8fEl+pK(t6apG;q!(ZR`L;0_ZP884a&=3A;>?z{;eF^4^s$tW`bN#~k;qq0p
z#q)U|`)|jA^ThN0V)oy|)fSmOo=5CWyG%UapJMr`pR5!=0rAiFxxQzOc%Elqe~B@1
zgLuAg#qsuYvn}Gezr_8ts65-nb3cdUgTvQd;(OzIkKw$;z-#-&bAP5K;;qf9gW~@-
zo{SxEM0^G0-zbznxXKCfq44bQ3sasEUl#e4_qWCUbK*P0b3RaK`z7%_|IGb|fn&nN
zCq%vo#PwclbX`2Z|IGEsk!%s-+oOE0HygZ-6wmjexc{^1=mYV8`##?CSx=1K4%b__
zLzH-a|C#HNDaE42r$Ib3zwC_t&gi*bNFMf4d=8Y)=hvlIeHC9Bp8fH=*H7^c;JLm&
zTrJi;+w}<73mo4Z)5a6u9_4d>c=vHa@ytg&f0AHN67kGO+%KB%n?k$?>cjo30?pHi
z9|#|W_<4~hz0q?#srkiGJo6F9=T&F2is$op#&g$&Im9y``Jw&=dgKw$e8lo6x)c!4
z{KE0=p?%^1llO`!X7r5DIGam}=ljBp|I;H}jGp^fQ|h`JJ;(o@nX8EB^Ayf!Hbqw#
z&-}>tFL$_>cs}poeqF~Ib;a|%AM<IBo(+wj_cygmQ}K)kj-SgCwGclZ`IPx6|IOCo
zFT(SFjalDLe0t<l_Q%RYJBjZA&;An2t(*7*@IL5YQyqGV{{+wdglA9tiZ6<M%IjUf
z*Gv3x_-NE8?xZ2&xn5?z{@iT1_>(BV9`+9#=N%=U-{;}{A=9_9;$vaFWxl9*)>k~g
zXO#@+Hx@7S6TctzXZs)TK3#lv)Q9z-=rUV;5qMX$|8V<x;(30UzGB2e@yze`D1Y&$
zrQ(^dIbO{fu~IzqHRqED>Z}pZ^(o`iA@c_D%<nF!|GHP3#dH10@vwC8Ht}Q7{v5Bq
zPv2$q+)p^%cAwFEp#Dz_9~95|1Ltq4V;vFC{Lb;DT<CG}|H{|sk1+yHi*Jec;rKRV
zz&Y_8&v}2dR=p&i>qqWCZ%rL$^t`|89)*i%K4t#8wCk49bA2&qLZtZmXdk{$_qyo=
z@yyrkUpsR@5zq5-yxx0pqQo;_GoI&%z7o&#_8hMot#~Wm0r`~eQ>E`m@%;WI;~`eX
zui}d!-*LX3FZoaL^WhnvV<KbTw_T6$`_J5OtP~hm{2P?d`&Ggxp?E(3<$C-}y(Ho%
zAiqRmeAt&Ih4>xtoZq^=PHpt8Prt(s;`w_wEI;N<N2BL?gZFK-is$#G8E<=w<S_aW
zw9nm`dBo>Oe`I_14b3k;Gd%bIV+1&hF9&ar`s5i<%;?!4$5kn1^lYEusa?eL`7iHR
z--i{%^Z75!FTSg?_&T^=jz7o8R~OIcr;LY*O>2qgemmpSA$MJ)XFPa)Y9OBb^SocB
zPd71ouCM3JZ!VtmCDx}|x7Ol0U*h*y9m}>8&-oJb*N{Y=#B+ax<6DATUBz>MgY(;t
z8+(f9{&_Is|Gjr#qv!ZJuC|wW&VLv`cO8cqJ>#?7OK+oRyu~==BcA&$T%Vp<G*&#n
zFU|fnzPqn@zK_rQ8&Sqj{7*d3^+Wr2NHAS|&A;Sp-|$)DSHLrVhOPA%&-2o}-gtu-
zieHR;%KP=T`cm;{;MpHvrd=sM74jqJC-)w&7Viqrcuu%yz4#vRoUaz~-7J1SJmWv7
z$2Rf1|Ke-s-X)&ji{^eviqCt+$HaIZh4?9b`ha-8|I7JX+xdsZ^E@`=Cr7vA;(5NB
z_jhNR)8gx*{*0fhiOz|y1Rsv)am#OBG<rVIDzWK`(X;>N@D3Nx^#c3vq&m06CqVrf
zKUEzg#q)VF?^lAC_r-rhym7sG=g4F6qfj4y58?gP=i+VG<CgO?E#n6K_xF81rm(ZS
z+vSyb_7|Q{Xj1g8_-&{U_e;Zmeh}Xs;|bfd@Wn6Uqu4&^FNc@?5Pt^s;r>#_zA+!z
zu1B80yQBP3mE(%P3D10eJw-zC&)^wvi|;2E&-~7KXuBi1_+XUJ@&CZs)Z(|pbNsB`
z*g^bi8*ho9kY{@SYIZ3{@jGq2<$MD7qkQ9M6~6+W<6+y&PU6EB{rNq_|8@Rh=d#@5
zAHWCU{@VA+FMbB{uQT>%>|CA2=RiD%p!}vui-{ir&-kx(r=)oP{sPC_L|e*=kA?oi
z{M&hC1@VR8eNg}Abt{YK?<Fzb(r2zNehA9v{k<RUCZ6B-U_QEhsE&B9m$_f@Wm*IA
zlTaV_-xr=u#M>c0?a@BNotum2d1lUMD#d6mz81>o`f>54wnoo*`@FoP`0{@#|3JU4
z;%mdR{H>LGis$~M3)-h*%D&>cp5=V$()|JAxt`_uuJ1bri|2aQ1NC`5)>}N!>vDf!
zXJa4n4bVQkU)yqx70>xVAJiwwrwQV@-dqd6<kV!N=XgHFf13CVs6VgwY3Er+ABp-5
zDdjJI2FnlD_h%C%SSX(FH*x=`_>Cn-&-`+H{R*S!_?C6pYVlkTa(sSRYrS}$A7+2?
z%D7oP-?!rWI?ju&;`#nN``5~lokq{`r^)=i;#=W<alRDM`GEK!tbciaqj<@~;wvJb
zwnY4R#62!P44&(k2Vtkg7eqc~K3cgdMEqQM=9l(f7sW@ybH073>J{-BkY5-NBT|Qp
zZvr2M_DS;SrudHV_VAr{-VwhHp5^Bqf8Xdi|2)|AvG~s@pU<Q3<$Nxl^Z6*8C%pRM
zrT74p&;DEF<Qwt!h-c>aDgGbCmxgCNICl9Wz6Lzw?Ov%L;+w+T;eM4%5c8q!dW4?u
zi=De3N4y)#XFh7TA%S?l55@84&9KBqAC3B_u9aMTa@1!me7Ov%jh^ijBPyMEj)%Oz
zGlDXT=li6bKQx|_Mf@bxpY?gz%E{>caJ^mybBq7md?U`!d`8dw81qsgqh~zlU0&4a
z15y8deM^c@i}qo>rKwa_d~tZT|LPPKjGp6v%=?wZS3&t~|5n?p89n>&i!pBE8`_j_
zS^q|#$o6ahq;@JhJImjv4t2!aJ}<W2Zy9W7XJ`2vf24tU+w&y<%fCt0M7)bl{<Zk<
zvMGMmC*D70TmFKMHWS}wsIHfJJ}2GmR^lhGP|yAOeO=m$AGJ|E%g<lF<Nw!N>hI%{
z^H=???b9hmSMe=2X!(pc*C##1e_f}Z<HL}kKH?v)RnO~9F>QeOL2Lea+xum0|5lv`
zi|@VqkGJesFkh!C?kzrIm3sC^*SJ37SFThaj{X}GHb(rY0QEdS^J(=2@lD`4A2>g3
zveEN=^=r3j;xnTBKB)iG470=+!S!<eGC6v#cu#mf?@MuLf%sxJ-uC`l<8#oACE}Z*
zzi|FsyVDBs+u*rhdb03p@m=9LUS*HDUVI6g@yZf!A!yGGp_|0FM)?;pA4?gqReVo)
zca(o^z)tb?ZM>yDUA*&1e-Eg>SA20BZ>hfr$}i<`KzwfaX!v)JgT-G$`|y6v*ndns
z&nL70o|t+{d??Ci`v)`&5pVlGj-`E${bzsP8gFieE{gZEnGajMUHc5b+S8hkihmCk
zf8C}&7VkXTNqlg~HSxClZx-*-v7C6HMK{HFLiz4Xf8SqgeUkOOBR&v5&?mXXL(Pi!
z#h-__KEJTGPsNIl#Yfn9OZ+^$b4Px!!S7|7$F}or+vjn%?H|j|&d&0;Vqbdk1!w;m
zKP{g1$yj)%_>AK$nZeF3!9RZ%Ukvg8z-Ny5G4SCPYX)2Xee3nk>@iRMqPUj-`M>37
z+2asw`M<68cUZew{KO#ji+2C^mVd|cPs+{7p4qm~?P}_M(&r4eIP33Uq|BUB{D@_7
zEdTR=>vQaUn&4mm#ee?eTK9EE@3gSYFK;d1bCUfF+xnc0qxG@&7pu?tGKu(iHMKs$
zo;iP&AN9|(FUy}_-@8W7`VUF`K>UZzTD~<NtmS{a@LYU{Z?S*1gf$-4_DlAwKA)2P
zGnf45@9DL;(YDu{sG62<KVRD?M_7FEg9dB)_Mwiy%K!EM^q>ETc_pFITkGGz-p<bQ
z7rHUlTif~+`mW{sY|Htpd~5s9z8_co_DAr0)W7|a$mj=zY5m(*OfEi69Bm)gzs-hp
z;@jWS`ZPME^XE9@vx;B0RXyADX}#Ryw{%e-7`F6R`&iraa_hq4JEl`_jc2?6{Bt&K
z(Ra4(AAQ@>v;Xuj>-AdWt-8~l_qP5-CH0Kw3Pm1^|8g^?l;0!vpXbGv{~u2?J~Mi2
z{jKqEtiuoS_c#10-!eYWs~suhbDHWgKG@bj`uHDj89(ikX9@mQ!T<b6?EA6AKOC+;
zcyWba-ddlY13!PVEq|E5`jCeDeDik0Z{p7%P|x;k?eWv-?Hn@xs*iPiKH7NZXWRNr
zLi=0W(>gv}KKkaXtxs*!o|g6rxmRAU_fE<8;-5Fw`rE^=SpCuHdA$u2gnhTI&(l#_
zzTd8#zv^R&oe%%~wK{rDe2FdUS^kz5kw(w>teNk=_}Z8Mly8YQpS&7xjat3>VO#%{
z%l>#vd$zf|Qrh!*$v5IJAs#qBIGlYa-lMaYKd)MLDgSGeXEBDj+x_>S6lhOZ+^@?S
zUx;73M$2b=u5*kw`aN;Af7MMfCZ=tDzMa(aIX)k*azD1MkFi|6&zH<{y}8;y6hAhe
z`uIoch;QWc*yua>{+>@-`&aU-PsJB=(emeY&iku;>-gEV-O)I<_4o2p@0$E~zP8?=
zA5JI4*Z52OryFuXd_+SnpW}Ip&zHm}?W5j0J{0O;XJ`2vx;u4T+xow&_{Uq~-wyE~
zb>enBTVE&dAOFAN|K{mP@lj7={Avp8e8zWQ&R^|m9dB10y=U~+`djZ;!I%%l$IPnr
zamD!DH1~~!w)OY)R39~5$A7noTjEE~R?qr4uDJ96^_KRm)aduWZ;hXk8CNB?t<RHP
zC?E6Tgk{%?Z+cBV<Dpo>Ek>U%c7U}1k$hp|qn>N|PZsEWGBjbh_)|yJvwfy7ydl1N
zfAt(c+f=)l%(i`A`2F#g_6)#$Aa%x2@f&yi@s{{xeF}XKGx{iupEu5*O=(*n|4=PI
z=$4NEZ*QL$Uo%?0>yh8{2WvcpG@72;wtRYy&v~CO5TE3dmOo(kxL^0zTE6>{#YWHm
zayjmaG`98WjrmWiTRMLTyLw9e`t4dDpP0Y%g|)vIsCQO;!`A8_yvy;c{;p~5>@0ti
z?wu2#Xoz~}Jiqg!)%&f!DE{M0^=k{LUo$IId|-(B>6=SSeOd-w6~E!7dTW2Q)~DH}
z>*9+fvW#SZ=I6l?zvIX1&pSkjPn2DKhyTQ<)lcakDZXGy^^H<!dtSeLU;N|h>LaJ+
z47SwITK?SDkHrsd^2h(m7vrA(nx9*J{YTHl_iFdYTl(Xkk4{ql#$hkTAMK%jfZgx-
zvHZ7|zfCFMh;QNb+y7oAmHKbJt@YW{<+r!~-@SY5zyJUH_hJpzfA5yJ{(IJZ#_?rF
z(0i$0khfk>y7|B3ui!tiZTWj$<cs*0W7IF&_j|u=@;}#Z`8%58hxj(W>aFo--480~
z5Hqc9e~unx_RZeJ5ubjb*{6$0DBi1&dX8ViGA0w>ytmnR@10KkHJkYRHNGQXPMY8-
zerahf-|o=w{m_4!^4C8}FJu$HHHLa?ds?60<SU(9yzf)(|33d&4_MoO<?sUH4_{E9
z%6~wxr6N|JZFF7nPCM0G>tpo`YBmsGZn1i6d|KmYSo}8PGxh%8-qH$|zq<Y(jXtPC
z&ftI8fB$I}ds;f%c)MOg%jbH)@%nV}(R*~hXsy4sKHawDa<DDG<e2~Mt?S{7$%4gC
z->p8&x8M2LnxEDM92OsI^dD~-?_AUWKCfo=VX=>j|J>k@x5Q_SYB_@~jbruWRv#1J
zV48ZD+rRUH)#q4wLj3JV>OETg-v6>*@1<A!GTOFJ>r&eO)_h|vzxKof;x{3`((iB#
zHhSLQ+NZWT+SaG;Qmv0Qo-Okg%lg0dnw{dE{<5AtUUrZ8)rjYG`G1eMmhvs{GYr~s
zP`um3|6L!;J+u7t&M8WKsX+CCSWliD`BMDq|IGjYn=de4-D@^JlWqGnPNwBs+uyo=
zJGM4cW?Nsqw0gV#zt^AE`@3%bF7eCuYW!qb`Fnn2^`i^y5q|;wtHzI9!IpNh`g61Q
zil5p@%MZqUx^~I^;ulX>&;5}%t_Q@AK>XM6(e>M>cU!aBwoeMgziZ60QvWv-c8Fhz
z^*rlSBFk>0uM*n-SNYcc+*QlnvfI|@<wCt**742iM^~*a{^nry*8XD6M|Pv?ia(c6
zJ@ap_stv_YcT;aI|G)Kl*;u^q2(v#P*j)VNk!GKFiKqCIE6jfU&ko{;&oKLE8M=vo
zgZjU7%PIG(Y35$yw|D;E<y+hTM!f#w3!%RUdFb<l)K><H_o=7l^Lg9cRzsa^<0poz
z`bIUhKR#HxF^8?69#j3Ee(FaJ-YmYzQSFbxm&!|j8CoaM=&kW=&DU$YZxjFEr<TwD
z6?|rgc(*EA|57V{k5|_5e8b57;?Ls#2448RpKkY`fBJQ-lGC<*>ilJY`PGkV;-^*B
z`mlc`+u)VUw)}@b{#>tR{;=_sK5y<kZcT1mzwPE9Z<#-Ee`ICZb>hD-Q@>+?j{h-U
zt~dJsSK6I`)wI5U1K+01lre-%iK5I?DD#jGGE+*0(xj3igeW9a2$?g75Rqw{LkJ;+
z5K1BQ%-gfqzU}qBf9!Mo->$3ENuTb0uV+2;T5Ct=i~4hiXR+WHKE(LsX})2Xy52;d
ze~c-XkNIP)Kg~zRfcN)6Pvafs)9C4Dt=?LFz310{N9EW?@_hD3YT}FX@3mgkOzGOL
zm~S-xxC^}JF^&J-`r?pB!r%FsiQxZX*KdOJaQrQ~Wldvw{*|_2KD<8MoW34>Yj(YX
z*Uun}81The|HkKUq1RfP$@5VLV?JYN;(qtC>p#rpzV2A`{QNd8y`qWS*RGD<Sbct}
zJ`Cu%N~@>wi~L}-)!<E7`?4;E*E3r7UEExrkGBry)12iqc3UL)nyh~qYip_$^^Nk0
z)mg69r+$;Je^CE9B60=z93RXl=3sqQe5(I9Q({`k^MA|6Q(hn1{n!HDiS2)dtTOr)
zU(BEV6}!RL^uv6p{PPc4_3>@ZDe$*vqUYmX%@yxj%JYB9t~c=eKZe9aw37RgZ?M1W
zyVgi45~1=h;<^xgdOUiEyVzg3eqIDVdK!A(UUbeb0sr6t`e0}2dJ^Sh7ZcW2p8u{Q
zSU!r&*gs4xI}dzY8}tF?aDMw}!hEfs*N3h(XSSE;WBV`bLF4pU;KSJUE#q<Zq5Q{e
z2-E7R{!o1`;k*ibh4Xm4JpY)Ob>M@aYrN?H*X<OwLF)g-YxJ718GNI48ZRGz2j_3N
zh|g+^4LZon$BeBXd3~rlCmy_CTZ~WRDYf@&|Mcl7kMH*$>yO2E>>s9`cmjTyZ2v?Y
zZ<fI$)&4BiH{(}RE#>j!WcwT9cuTSRX<!o!evvKaL+6X)N6(%P-mIa<i+u7r<Ms8}
zLNmd4b=P>+_^ZC(k;*6JeF*rpWc2F_;CgWL;lR%F<Go;{DSwfV@p+t&wdxcEzO<{x
zi+rr@jFqDP(D7C|Jyolx@}c@Xx9aS!@_eo@#Q2dvH1k_AKk4@_41D{;=&64Y@kRd}
z@nxY_PxVb4gZLOz!mpb=pATsm-;%Z8n^*k78}s=ITaS0J3Iy*n5aaXqd+GUP@QcQy
z=j(-qOUiVY=WopRKY4o$eCXLz?rX62s~myncbfTl@cOL%4q@|wL(_b<dVc@JWqp6}
zlUaSE^F{T4Xs6=6<oS2z`w4u1N$F}W_ZjT^Yi^MkrKkr~pHrWW1MgWM%U|J!^O@xO
zo?1QCf69NxT5s?_M_~LON9(Kdq4u(8*_1x={8zB`J};lSe!<}XZ9c#BVJP?vHXr8q
z4>fe13*KWo=FjW%(DTvYorh_>=zqSj{p3DTF8|1nSErN4i~h%uU4J!B90UGrG4y=C
zUHg`+R?pkZkS6ZntG37Zy#Buqa_le9|0CN^OSUjlonNYN&YhjX=WNFKygYroj?wC)
z4@vRq`r0>}ec%nwVSMW!byfM0AKLo>_$~J(FZO#Biq;A%^>sV?x~9WHm8ahi?ks(;
z;`#rfeP8nddP?zc<bJ$B=M{>19Z|PS@jBu&VEbXnE1dOn)XvB+4?hOJ#3_s)HCM`q
zyxr0h;Ip5gr+P$w<)PEyZx#|QTsmG+uN8Hr>%!!peL4qzt%1hN$9eKYhg<~zp$U3(
z^?l&v3mv))KD9IYwApyPm787zAKp*nMgF6o<f`UP6#sDi4e&!pYP`r_*%Ra6?{OQv
zu^W1Re!D+R2k-2Qp0|Sv@fqN6Op-iZ&!)WT>);=fr|;Vreh9z+r{7y$MsoCf{(AU(
zRKIzCd80ESe&BRG9;&a@9=!Kwf$z&aA2%yi`T{;Z1mp95?4`>RTY0}^!|Dh3NykhE
z$o-Yq*dF-t*4#U6pxmGBj-J{N^?Uu6jsU+wfu8U4ly<cTZ+}8F?-liRhzVYo{5H`6
z{QWN)uWD~>p77=8DDW;FF`q8Sa9q|a84BJ%2t6;KDjxH|Uyeb)u!6LYMB{$(3X8xu
z9EzTg``vE81>gT4^t}E|njSt#e!g}TK+oryTL;%0Ecb8NJ~@xC*nSlJ{cu+P>U9n6
zqv{kGG(;Xhcm#U>T+O<UgTWVXivAnB?iMj<2>4^A&|99xeTLHqhk`d_*R}b5lOAEi
z!7o3I@p*lCI;-z+`SDg``+mIsZ&%oYf5GNyrUU9L#rQ+*D>rzcR?qVZp5tpL&*veV
zXHtJ9>Ze$jjdt?~zv~FrA0B`2=}B6>Jid61OXq^YpSz9m$<w|>pjSNjftS(q>jF!w
zTHDKy*MhCH(m&%mdbFJl_`Aj!|J!qYDE}h^`huVO1nUEDUri$VgMUy4<L9#Lwl9x$
zca-NJXN{iMpV{`kzz^p0cDB#3s!$)Tp5NEeKB|+mJfAvj9-HBU>q_I<UBL%k#Qdp$
z6LngA`1<tF>RaEH?i-={>5=Q^BG2d2Qx>1~|0`B|fqz;M$5R6b>AoouU+gp7o#6-m
z@<xnL^;3B9dGMn@c!S{@FUBuJ1Kfvs`_*EMJpa|~IyJw~A!A-g@T=H9Ij;{1l{#tl
zk#@MwUAe23n>?TSD>V6w@$_I0_Me7}+JZlI5<Q=9?C@)^)i-C)J)UrD<{{4~^Z~}_
z<uhw;OYq6x(DVMv^jsUQUU6C4C#U+hvZf<=lX6&pl*gt1nd(DXr7QTkb<k7&`E}pR
zsEgolC1L)&JZCR<@|2g)K1cL4-=Oj0)viX~avz|Neh3>+v!l(xSGk4#TReNN%rmr!
zR?pje&4gy)ZS*i7g+10!mt<pKdH$aL(ewIm=w|}H&|LI<KC{fM@gKctzZ=F$=a0_s
z+Qx$>$n*KW6XWyxHo<-<_}y1DUc@(!llnmsU-UmsuR3V;3L~5kpPOCBU!G6=LyVun
zo&)bV%n1CRc#RkBo$iyS`g8HRG5E_P(JP{jl;Q};rwp$VD9@+EB=iC7IhkuUYk@b}
zgr4dT#b1z9=Z{{L=gGI&-?ltbB}kr6!WoR8X^qc;IGi>B|A6fm@cLu=w5C?i+i!{a
z`@nztj``5>QhgiHz0(wV{&(1XiC<?Ns@Dtr*I<mVu)zBU18Z7?4`A0Bzp?%;q=*gp
zjn}Y$h#7+IH>g2{Y4ZHH6~=s$`%C>No!`yjmB63xik|L^AU`!rU#sWyv5kS%z#nGw
z!yvX^=#Z^DL!ST1^_Wi=Hb3{jS|0q~3+So;r}a@{cJW#A_;N4mvoZ(kbKQHTz?XaW
z`}m^Q5}$#O%WC!S)YrwRzFlbD8vH>vU*i4Sr2AIj_f*62j@O^=%esKybOQ6I`cL^E
zXcPm!PdM{zzBi$xd#JoT6WMkANOs+4Nf(_kx$oWp<MZ|4;E-Zky=6SEFZxd{0sbai
zFYxkAoBMOFJf8yWzS*s}r1=TefBT#Q^W@&C59Y66<MjZW!dg9VFPpM;z}v9?oX!{3
zAB%g&^X2)>W7pC6@z#1_0$%qj%inm3GQS$D=Gx*lX6|XK)fd*SqVlwU9CTq6_!+Fd
z@aw99x?jN;oQC;?_cl_+r}7VR_zpg>g~p5ao5c37$~yl9zc3H`Pd>i1+E^e$UY;A+
z{H=m|f0p(e&n}JxA22|Zj~L%Af7DgwPyT%FGVm8VqBm|U9WQx<uTkLRK1=!2b%aj&
zd-}rC*S6LxRi1voZ$IgKh5Cc`Sx3y0#wBt;TC9TCDP0TmGVNDSbsXY##OIdntHE2y
z)?wnfmFnvP<o6F<2i|-U#*eX-+A;Z2Z8n1M&+ezAeNgh{+HVHm_c6vls9radpJ=}g
z{1W!Oj>1|RC&`~$9SeRe>vySLCgqoNiTqP^`|WP<Pt38OrsoML{+eO?z#r|T@uFTg
zbd|0nkbijX0QfX^-NAC0blrq}^?`}tSKDjii}RH^8Oz@)`zUxPSM=fU>q33lHRA;M
zR3G%wdD6aux*94x>zn~Ugk5)_yy@$<iIS)9Pffw!r|S;%bNX6041e$YT>L$154@jD
zQJjbTim~emG_RocGriR%@ZqyH$FG`KIKNk22cr5hWdCdMZD(n`I3HA>#J`HquRf*=
z<o(hVb$L<#l#hsCJiq=G_MZd(OD47l9^Y~3S@3VaN&Sq7FY=F^Car_?@;e^!>9!>K
zk6z?Y`v#@+lb={Df3I`QW$^vkb%&>66XWw=N<qG;X$tt2J20P4<?~eKN&ZCbYvAo<
z<G#p0)7fe~#UHMtQ24o}f`27@-a+{IN8Q1%&btZTQFgzv@Ea0rzz^7c8~ke7JXUzc
zmqEXdSL9PPIvu>H?EXpNyG_LW5AJvX-u@My-)Qx?>6RZ`e11)T1U^Uh{IG~WU`wW|
zJjtIhd<y;{+gG7|0P?GXv%xQ5&ktw)oTU`yPxbS5PA>SA9-@|Ou5(j;rufBQ<bmJ8
zp5NqtTAz2|dpco!MRjQ(Rn#9*{wH>R1pmkmea!g!N|7J=?4n=6mtoHv^L%XX`~Y9^
z5A9cs>*8~YOTmTm_C9frCLeLW3|plCs{bN?!;(7SJ278DHxBA&&Y9xiUoX<cm-jzZ
z{>igSgEv`@zWEJlo=o1Viyrut725rv!WF@PT&3O5zMv2O#cJ*T<st*{32QZ8lxIxi
zZcv`z#u$SCwoc<k`3xu?qs%`|s<tJLIWOK0eAx}?dHEPxJA!Y^uG4d0YJxNPeX{l|
z^5MSD)-m8W>uJyD+$%Tm%j%)$^|@SsPw+Xd(bM=6lwU^TbIj%O;E(h~Px~rVf2?~<
z06%Q7#*6b6tB?1imZ|s={Cr1^7v&S&-bk6B#;<*|<-NXuzr^;LDSujbOsw%8{80A(
z6y(LLiqEjY3l_=S@6uD)Kflw*=ZRLoRW6o$gG9}Er)rOE-QE6BfhF2}G4=C1RQ_Wv
z3TgFpe#yVcDGa{aY|Q82i&@J2!~9kMFCNwbzdZ$g)NrZ)r1N_=uNe4kRj_=hJjn<8
zmIVLC2|drhOH_UEYuWvc+?&sC2!8H4?ePbjH3Gktt<!n@p{LEjTQA1=0c~ch%9G09
z#NG;gyMKFspM_n(yFbAA)V{<y6CZQN<e_Kp&l13%&%L$r4fu&QFh0G%HnkU@CGWtS
zq+@-c`2+d1Js-fY*1`CEexA^~Or*U2zh%$&x$hsO6vs*BIm=!bygS=xp!!C>b8<QG
zZWh|}S@<FgydQhsmdAgV`5gQcwtoJke!m;a=km#1@F&@IoK*Gtiu#|e2Wl^smrr;0
zd}x$<pMmy~y7U?e-cfeni|B7FM2N_m=iR2dIf9QXp}l;vd%J=UyoB|^S^azs<#V;g
zIPi&I(ewJSAUYBJ%RAbAv(4p}$;;;kd!CD*ukpbZz~}E1smg=aUzuN}^(~z*MQTOx
zmB*v!{X^=~%HSJrV7{u6QoJCwmw7c_fH%5`p7s~Wm;L_ok6xVLZ)SL%%WQof`16Y~
zK9vvEw=H3Bz?VITp6|2m+8451UjALnVf~@<5yvb(x|;2elKUF0{!>1a^R4*ou<8K#
z6c@~g*PnNnO0JN{-_iy><wNJUN2}7{s|TSU!0Lm}+%n(~+n}fC#VGzuQ(f>u%g|Fk
zqHM%R=(wlgC$Q&zvKF*e3P<%}f1fPyHP2%F;OTnc`{!hX9~pt3_Two2KPPj*hsf6Z
zVm`yK)5T=H0RN&i)(6WpX?;Qa%y)0Zt&*RwxBt>V<Zd*Gmiu8xF@Mvg()%q?`4_XT
zq197;BcJ@DCitzP7@v>7;mdn~-*N^$onML{7PuXJAAX;Jag6GGk)LW33qEJP_V`_Q
z?*xC)3q5ZyX+180Z?cVf9n5E3`DF0d)ce@ffAaFoC~_HmF?OG%A_A}bjQa5qd;)vF
z0zThpULzCy`T|(r%-MDJ;IB`>?`7kcQvLqgqK%1<xw={4_p$oP&+p5FdEh^@=OegZ
z+3ziQ9X9{u=j;CH%B$t|KbBp$;^pr#t_t|J-dH~0-r;_3{GMvy{TiY-9O$PM<wEtd
zT94Y`P1*C^8LU2kE>sWv$Y_ku^FO?_KKPD-=y`eeEYTkPs3`On>i7Galz$B3bI8?>
z;1?*-*Bw(`na_S*M_Ye;2>AMZe#q8$$94|~e_|=dr{fj#C2=2%LG~!{n`QGi(ccE`
zlJ2_`If;)GDS_Z?@#n=@KHU<JfIn=2`FNKfq7-rI{CYJx27YuV_7A-L<K7(yZzJ39
z{oVRk+50m1cC7uzbu@x}O0`G<|GYQmPyGYsU)|{%_|Fy5^Y-=hc`EorL(o%v8oyjp
zcdU`O$Fzm$dHm@&My!?l&b84;tFKd2{@1SCfqxc*<<I9Q-v*5Y@5$z?ebx1!;+Gla
z2;TH9#!o5UR#pBq9~k}O9{39EzA`?4u(inmKat&+LiL~GpBVKBd?EJ!Fns)Nuk>3d
zFV9`|usnJBzh3$s`~<dNVKEx}x9G1wz!yuy@^S7w5bEdkIK_H-K0DW-r}jeiC;7r=
z@Q#JF=U=1RUht`GJf-ra^XvFwANVcoxdY0F{Ksbd!Cx4s$zQB5GV9>;+Ew1%+8{sP
zW^DaJ@#*|_SbiJ)Y_=ZZ??0PZ{4V$m2TeYrKWWYG13$k%9en&s^nAYRc;r6#H80Wg
z`m?s%_>J=8y~W0NDu239wR->cF>+tHIiBCxNjP79JE!d?xqofM@?rC_7026Y^;G_J
ze%Gg1fd5$#<D0+6{gyJu9l$T|f!;#>yfdx$H=Y>|e(qk47xl+J8uuTDey{_7rV^G9
zFMr>LW5Lg5`%&~<1LbqCj2rl}#kI%p^K>`(&Ka8gRpS>c|HgOrfVX1Ltx$cS@;Axd
z2j2P~#*bFNpB1&2Q-!XBufocQ_qSKfZ-7rPkH=f;fi&Nv_=~FF0zdaQ=EK+fXKZhS
zufg~CSo!#!b=WMg&*6XQ|EYZDS~!8XVDn*JJE^~={eeP1+`u<!gvZP4&*1W2;N4mI
z@b<Fmi#Pb4ud#ge8^l2WfA*&j_(d<!^ZH<Tdjt4cvg_CK`bP8BpDvrg|MM^Ny~bmY
zf$ziS8+`uIJV6P*3EPk5<r(<;B={q&KJfB%eS8ai@g{h_xF6B)4tRwVdS0G)!qdUe
ztBan;PssTK-jmHIdHns;zJp)H_n+B(yHG#lE%N%mqYdW6<Bv3I2;P!CSH*o)V^i=B
z*;wEB@wR&33;ak{-?%>>*a!S`_M9EB58rz^f)D(c^1tfu1pZ=oRz9pei|=v)|Dcq1
zzbbe&_&FWW^W)vRH5>fCf2p5O_vC=@#qLYw<zvz72YCDa+Rs-pm!IG_v-Ou^jkJG4
z{pXTK1-8oTTQGY+E1u7@g+}1pw8iq_{lk=OWAJYC(DV8E=V8sk_vwV5*JsxU?ZB5c
z*Y20)wFmFS){p#n?`3xZpZpNZU&*fD?P<{sd_o1xhu5Fd-FkqJ_<-^G@pefZ2tJtY
z&kV6Ng7Ky0;342|?8SU|eEaUh!GHAoy{GY|Nhy2q#w&jBslF{eKM(w?J?MG)Y~C6H
ze&#jwiphiFc<+4N1pWx?Z<XrzXQTY}_ihDWVkO4694*ba73z=rO)i0V8-U)=+(eZR
z&6jG;xdOgB>ra$BjleHheHFYy_Wqw@eCO{s7@2V$d`%<FM-hnSllc8L_`xI5`?2}h
zvF-1`Ph5hYx0h!ZT5OZ|CzILun7jzrFYi-ZfuG>U;<J288@C0&yB2z0e|!e@24B+-
zJ+J@eKJ@_~J)e0tzQi^h1HLqWKfNous`E?hyQMXkZ<m+PVYa^G{bASMW;^8mP6+EC
zSU$b=lfYj#K_7ew>zi(w^WbYfQ>Z>@e?Ei#eWRNh=-*#J&-Z^W7r6-W^(tdNN#pUk
z=BS;?;1@-r=g&?2ymcA;?ti%+z2jAxSb2HgVD&%c<^-iUBI>X1uG9m6l=p9}{Fe;Z
z2hZ!jQoVmp@psm$3f^=a);D_pTk`wE48RBWM9=H<#tsd^uUf6$FY4O}{1f&*0KC1g
zFc<~CL<Gj??Qv*_iQtnQ(ewUly<;Hwa@ElDd@2}*fWP|~>yIV7Kcr2m+2A{|^_};|
zp->+ZN`-;<Vt=2E=cALc9DEp?-}3XdY}*R(heqM?Ms=6+q4Dd+g;n6sv-v+SfAgg0
z;Hyl;_}p7<c>#Xge)P28PWJ<RT=f}zJ+}Vh@yqWmuv6Y1vn(+_dC?}tN1tnjz+Wkg
zo|k9y>qWqS$i@0V@u_{y=v55-1GYaC%igaz>39k7E!h1$Jbrtp(%^kUwC7(qr6Txy
zaoYXxm-^ss|M2(T=y>1!s1AO~CX7${Q+<1I-Vl7y!QXp|Kjn5)@QRJ-`T07tvjzC)
zC(xT8Fj9(oK>KxNrwsz%FG%CX{$cC+xPREV=}_=x*!4c%evj=M2|k{U?+W(ZT)!Hl
zz*q3l<Rjmoq4N2lbOv9s4|*zp@<nQl0e{(FyYD&39ehzXzm0l|`?uS=dx39q3FGtg
zHSFGW@Vcyj;Q3o!2mycLU&fa^(?h{Kg|d9u_-pqw6a4qJ=-r>=`u9N9XW)18`oQL&
z`=@1t|K0=R^YZb&^#QyIYwwxWrR&9Xe&e@)2ETrv_V~kFD|X5I&nFYmQ~8TFBR&ou
zD+qqUqThSU=UlHM;G27)=j;8c-;09(xC}inpKtd{fVXAW)6E<BD@ERv&x;m%;Nvne
z{($|s-uXJL0{CbAIcs))U4~T#AC!*qsXQs4F*{7a|9JI#PyOeZ*^R;PI*mU5kyIaO
z{di^9De#A7{hR1d;zzbql@EE{%4fklvH4-zG9&PZ8zq6SToCgKPQd$Zo_SmVf4DyS
z|0$nu$>8TYpg&#IP?e8D{b9Y~3izo@(I-dZ`Z41CP4M;D^P=HwzGQgqHuw})e|Z1j
zqGcBN6^Ae%UY`@zKL=ka1%0s)sXVDZq_lehK98?AS^XT9_Xd3FqZpr;f1%s&!GC$8
z-Ip``2EP3{?Y>c!pWr_}LeI;mTSVdA^8V@&J71~O@%s4MVMW0&XY(0;zLI0AgKv2R
z^GVOe`*m-3Hw0gvwRaxBd4mSv+bzWS&L^bj;;DbwdC3HPO*TIA_~jQh2ES`2#^>dk
zR^AG{!xrtn%Bjxa_ptNJuip)~7y({yI>zVq&9?0+@ST`Xog$rIs{gOU&VXOh9^>=!
zNr<=%e!(a0^Labh6!2GSVf@tjI3IADat*xa7mROdisQ?{YpLM-@%+{8m-c_Q4xS$;
zum6^Tm=8bRp2{8Ihq3FqyguY^+6n$mD(276*SZ0_!N;-tMR`8O!V<ujzlrhn*?e-X
z{~_@F{RJq0st-01hrvh5o<~;ApV@rxZGmIpr?Kl1igI{=S}mV*;M=qLQZSo8>}_@d
zJpX(1ls~oiQ74kYKlH@&OV{7Y*ME=>{%Sb$UU+|z_r3?<oBd0FQvKcbJ@Wdd>x=Pu
z{)Ml_f*)_I-FMI01>Q}z|0dR7&)NH8ZPq&ueur#5B|QIo3f^ufz)$O_$w&ARBk=yB
z&T~(JpI=Plf4BZB{_+g?m*(i3>q+~!biSqzN&=ra7CqmejH`DM{9ZO6=IwE4;mhDn
zS^v!azLHnL=RC!Hc>7(oGaY<b5ovu)`@M1Zr2FmZczb0$0KcvVdY;dzmyf{Dxr_O5
zUpe~;_{bONdHu{Qoeh3;Va$j7hMPZtUsRKM)}L%SFlev5y<|3Lp3TSlL@Wj0awp~=
z!0w;y{$@G&kHgUO^Oa__9(*HqJyExvk!t=-=PRr9M(}CvFg`E;Gu=0V|E`Cgm#4x0
zE#Mck>tEcDys!`a@i`cu@}d5}--ZL=ZP@-2FCW()O7KdyKH~Y@i#rKEi#`7s&g#Es
zt25vayI}tOdR*TN$>5hQM$hx#dgu!HO>Dkefvpz|`(FcZ%GU4vcq8lH0H3@K^P%#m
z`r}YC4gCG9=z09Z-=Bbwd5xZ5&&vAv61-JeY+pQ|ql;(nlefn&OE5mqC$H%o@S)Dy
z{rJK2z&o+~*(g4(Pd{~y0AK4J&VTrRh~cb-;6K!5`LO<{)`Jz`ceY`k^*@W&uL9qT
zT|c7y>HNOTT@8LBo3B#&Q+qUvUI)G=t8e5fzQ5mI@SE89Meln|esA!8@U?jV&&sFQ
zn1kSFY}8&p<}=5~%j?fc)}J`5|Nb)N)Bd9`_!$u_KFg;<rvUIy?D{^h54tlafv+?g
z<MZc#f4m9;KgSL|?@!7#m;pYUoiA#Sbi8jbg@7-^_S<><I;G}=@5%a;Vux@)xkb(b
z@OoD;f8|PCf6dvx7<|$i^gN&buMdLnlZc+4zo7lGX<H71KgZ@{QQhjR##8cDOCJN@
z#2VxC_42ZnO7KnD{S1~TrTBFHVo(u>{qp*mBpZ*!{5I>G^m@XJ_l^I)a1?l7wjayO
zXPo{x@J@9wfBO47l+S)!5Ab98{kN?CAAR;5eB0_6pZ7m^H~j#Aq9l6WpEx=y4#>-=
zdouR7Jib-cg5dA1M$hBtRxS#DEqflEx0k?C#lfeu^5p(VNJ;SL%j5C#^A$L}Ciq>l
z_0I3sFVSYTz}p94d^%q0&pQX#0Uz2LJ<q2{6?^apW--skqsLPnz*lDNk;;e0(}_Vd
zz=yE)6rEqXe|u_3wFG&6cr-+lk7zH>wePFm&xhLY+|+pR1#f8TgYY5j?`I9MIRL(e
zD|+SGdk|k4l>pwXy~d04rDT7<RoUPW_>Gg%8?x)mffWve@5-JhqVf^5DDhdYX`h4g
z@+r_rQ$8Xest;8Dj<cp5l6#+q=qWyx|0&aH;D7pK{@m{#9SlB!Jr6?rA#}dVRNS2?
z&u7|HjL-Y?ZMu8Fk7M_HM6&yfmR#Hm{^S;nPx(_mFHXgSpUTQVy#5lUC`;-;E4nxw
zmFK^;rlveaeT!A!FGc-%rAMQ{_Z+G5s`k$M+ipY0{Lzc}N$UGMDW5_L5AgRwHSvX4
zl*0FasOGpGd{NnYO8BSj?~hyGiv@4R?pFzS!s}D6Wp;x<SXGnH?~b>_^gZC0viVi(
zgVKIG)&HfRJ0Fvme*)j{V&ysEeZ%8&pTzR#{o%zfuHZfNS^lg)Y;HXcd=T3&rTRwm
zG5ag-;JdHI`q{eX8dZIx{`~Y_Pw?B=_?WByy94Aqz4Qj(k*`P8`IAqX=L^0eo6nSD
z>(e6NCxGuX6w4=By}qXS0g(aVA5TW#+yIYv-_Xh6S8PSEVENqaF%|rEc0De)I>x^=
zVmkOGZ#3~m{deD)tm^;i{i&8O4FP|(jAlJ6e3!ZC10IBeZ*PQtYKe~!Kc?+G@Fs20
zpN_%zZ&YrJ06&er-<or-bi9;*MWe;wQ`q~hC2zz0OT{e(A1ix*MRB~k-CjWc$z4`}
z&-TFlldFCJKkZR8_=*1L7oU3qe(m&i;P*~JZ@%p*_}(pIz^BhdKP)GDwdl_Wl~O2*
zl*xbJ%Iq!Rx3KqDT-fcaD*oyG-^t0ZDqC0Y03WTs|48hwit@31*XP&!e-6%n|G<tz
zc7v}kdp}0uGbX31;*0m66mLygrouk(UXhsp)3;duGp`*0Uq$x*jUs;5>ntdru}c!c
z_h#?kNb?7(KgS0h10NuJ|3(pi-A1gRwgxA`4`c7&7_I($<rIJTlQZC-ufgNBPsR9=
zJI{mfBzylxkx!*6HowY0HoyEk1Y80?a6QI%X77*s*y<|yI<ohB6!G2d$L|yMN1QJa
z|9hDm;7e}A_=}ZTKdsZ#!0(cIF+Ltqzuy;?PqS_5;A_Tc;tQ|uV5AiJkgqr)1N=;x
zSLJ^j%kyHVOz>4UY2phX;)usvQ!fjAh|G(8oIAFKd^%<1fKO*$aiqS=Q+Y1k^$L9b
z&6rQT8|MFF%3JV#WL`DjP>**Mf7QT`;G>v-cM<bRG58ApAoJ0uXTkAaef0zUGuiQq
z@(g12A@68GrF?!;aEs=6f0w`YN*(YQW%-Es1#`Wi{(IS#0RNqN=YrVZ+FF$Xzlr6q
zVEOMWR}Oq9S^gp)-5%KgY<yS|{0~+?Lvl3l&n((kznxXU>&fyF<-_}{h#A%Y=tVvm
z$FV(r>{$!^E?IoxqwZjRdsMj|_%bs8yYuzny)pQfto-@;QtmeeA13o6zG-V|JwomM
z!Ax`TUs!qS*L(*3|JH%c!GD#-7su;U^d<PN4O)Zm#?G&S1NILNAKHPhE%U$2f5^Fx
z;B#0$MkBBP8Xv{`A)i^*8N9hHzR3TZ9loD-$1&Z(*JFMedw=gjt$Txi#PU(F_v<z(
z_7C_zEPm~#m``Y0fAGA$DA@Zym)|-F{6H38mwC5|!?gMy!Pp+{yW4}Gz~ZMRVSD*n
zbrksZ%pbdqUhkO;_;}_cM`QcCdcYODGxOeWF#jfD9^h}t{O|gQ#Y4w~e=qZ*{*;i-
zA4Gj?Z8ib?E#?h;@OVvs27o`#ylG3Ezg4>&1ilILi&_8EHaZx*H}iF!u{;}$3(@L_
zu>SmwMHqNqo_Xr^CiOobb;H4D$@1a-p(xL*PZxl{AoHU9Yq0mv581Z_{3zywS$)Wu
zxg7jS)_y+)WBJVLvkJT=iyy?|@2tKSe0S#KnD3gm0ep$AIKK10dzGEO8GL2tjaNwX
zE84&6x^p}D43-a{FD(e%1wLLjUWoIh+@YEOi1Rh6`(E%1WnP@G*bkcVTKEE$4uCHz
z8y|(|`Sg8!2>dwaV}0;^t&KYh{yg`euz#pN<plVz%)7Js@K)<H;CHb4<HqJo3WM|D
zZ^^tU&*r`G?-BUFNe2I1=6_fJ%brOAUx}UH)Xi8vix;PYU(e!Ovif;tcp7+T=6QWS
z)-WCX5$3nb=AWWIME-mL-ks&2G+nb^6FxlUG59si-(mIb=!R$D8!(@jjq``59y#E9
zGGCYV|9#rN0$-E)b;mX9caeW`xwqgqGOr9kf9c5w@GqHfcn0$~jQ;}Of%(+$n!mRq
z^3k951N;wmzLJ74pHc%0o{+CcYOwe(ciWE7UvB>Tdl~2I=xFr?+4(yBwm5h`A9I^I
z^w;`D<ZpPkG<bWKPkJc_m>=Ga)B``B`D3O|5Z`Z1MeuEzce~&LzIm%E;C-1d*8t-e
zDOnwSOXeLe;Q1YL+YtOe%rAW38}hN<Ru}wRc76w(!~S_|pfPxPdCKQYV!bTN-=eoE
zcs~DceJ2IV-@KYRcs?J_`{xdL+vm-|4`9c;_`_&8-tvj9z<V$s#^w*V=C;%7gD*Hk
z{1rYO!Ov&$9oX^K?bI230P~mG`MOo6JNQp*JeBVsit=A}zZdun=6{sL{Ig?izz=5Q
z-D$^vp#6@Y+#h^2^FPig!Pn_A2t424@Nee{<@vbsF!1kKe4AXXpLetDz>j0~Sy{;u
z@;Q6J5&S&nTOaEjC-1M0g}Q)`Vg9KN_MiQSx`MyJeAMT=P@g*)dw@T~d_Z?RUmHGq
zgXiOQL>TrbjnDgm|H<NK7R!P1(O(__{u%RQAL95MGdc)-QC6RwzdJ$vO>Kg~H)B3^
zj}w$nixMH=tz};HKb9M$>wVP!^t}}dzPZec`O?WxSUz!E=YcQ8{F-6@zxHoM`zjT<
z0K6yj$r)Ha<9jawKZtqfel~Et->NPLZ^yhJYcEHhuLR$p`P1V^LHx|bHQ@Pr<j(A_
zaK6&#Z2-^b55<hJJgw|EgXjG%KfguHwu2wb@*i;++q><zo#6TU_sucPKjiWr@cmeP
zhxeN6FXH?Lt=$iPF7v0CV1KyI^APx<%*Ri_`N>$zqu_0r_bZ9*@ssWe@S)6)W#zx<
z@oDh9zGZyIzc*KXUlMp;-}Kpj+LMrE@KsqpBZgyp(HoQkp3j%MvHpC$Q7U-8e&P8<
zlu83{!Sd0W(GBXe-krPP`Tlm@_gLSYw>|*R*R$`o;e6)Vgva3Tvhi1W+aJce7M-7g
z@6X0NML5=<q2+SGZ)ZNWeIGd9fQ*;mA2VO@jtk^dDDDk-E7t!j*!(AI`UmjCm_Nz-
z!%8+^zy~wGQnsHj+M|EXAK*iox3I?k)9qD(lk)Y*1LmFY;`tqVtO)pX%o{hx{%wCm
zaqy|kcXP)6w!K|x@H(u1DxYHgS#PEXz9aMRp5ysF^P>WI-v3(`k^YW3jgRkB^uhD~
zpYNwtSZe_OfA*hQ{}bb72);eb-_iu<S8c57g6I8Db2sd7jdhK|^ZnkwY<(2=&;&f+
zuj9v?xyKB=56i#*oG#G5o`f_5Ka6<`HeMGW&<gw*=GU?F)ue7a@O*u3Ulse4&+j{c
z@5SQBPjZI&K>X=W;DeY~e8BbNlx5w(^ZA=4^QFi10?*4cgUwe9w6Xzj#q#kq!S=YQ
zXn*j0zQN~9^KTCXKaj=GW#e`F=Al~s))JkeK5PrL)9RhAdO?31)x!~dB+KXYF6`eL
zRdoT+=QA5v{kO{<3w|bxZ`cX@lgvbS@Gdeh=G(1HmQ!87ruUz(@X;H5W0@E8?NMxf
z{ql?t_~Fc3vi+a-c7EXJtKa{d?w|QG3dgS_js3wl)tCMvG<m)rH~A+3eCx~T`Tko#
z;w128CKeIPMFqtl#p>r5hbiC}70e&hWS-Aw&a?{#pW}_*lI<@=wVMgv|046OJg?f%
z2A^6%{FPZv{`zb@(p@zN{D}VOdH+y5FC6^25cGWhbEE%4@b`A3*T0AJ)!6e(z)!la
z@uGg}r|2rh@z8kp`Jd(B+q~6yQ9loi#{JCE_f~@cP%8hAR_A}v`BjWTzszq9_*J#h
zd$RTN;EEf-JGDS>IT_ny$>W>ApYMu(5bJNRx^DyTW{aNhKTI*)2|m&uy>lQQ@2#{r
z@WaNUzj+P&=SB<T!SD1&zmCnv+SnWf?;-wZxUBpOp27LsJl!MUS5HO%l9kWX)Z^gq
z&qUA5r}T<b;Gcz}=jV6R$aCN)&C~8D8D9kdGXlNMM;w3m=3NHAe-Zl8t8u(=IC2gA
z(<SKn{AXg=P4Hcoq38W)NdG(FPc27(b~om;rPh7$^;V!yy^rVD=;cH3S68B6$i^4H
z!%x63T7}+d@dO-y=VpWN7meQhIL=o?hrR&cel_}T3vfU1rqOHgrPiS5`=4%~-hp4l
zypqi)U!VO1zUW$ve=Q5kUw7#@@XeS{(Z~I(R2Ri5`FhHe`3tQ5CbcLGzUDg2XY@cU
zpZVpAfiJ{-=59xruj*!$1izh~F9oX)X1mIQufpn^A{6(FDo!pBz5=Uniu7JE-*fI!
z8T=OJE$`s`T&Z6T{2o?6*OkHRQ)Qpl03XYaH-@bjmc`fB>Thm!hx)&Nh7tG!tUkYa
ziPxKU+BO8=j@3{7QzPMgjWlcwK9_kuUewHM0=^}yZ<!;rp!_=@Zvp-p^Y7UB)p9`_
z@U>Ze<MS~mhxXtnGw=Kr`>RAVEAR)H=ljny3v>lPkNLFeIR5%y?E(G<^O4K?!ujpE
z(Hi`G=AD<KZ{^n)d=m4#{U%xs06&WP?d9<L%Z&0vzz<|zziLl7zr`O72VZwR_9ww#
zaenBscO>}A%<Ee>g8JEDrW5%7%-6kv?fr%A81UZA^Xrv0jK+Z<z<k(c><^!P^aSt3
ze3=ZaZ=28gfbY({H|x)TEb|A?>vPZ~tZ(*XCxK68=WBK+ygs$F#Z>T(SU#z&{gy5|
z1AK4h`TD)Uty$ntFn^~6=JR>W9PpvcD_Q<W1LlK|XFmN%Hq_7Ry%vGr!hAOu9Dlo3
zT?&34^ReuDWs&Dm;QKLOcPyT-mPew&d&#_5A6YDtp0B6-!Q5A^1HYa5VD;Z0r{_I8
zhQ@$zBJ*NBWzFWF32nE6Ph;atTXz49i%u-~2TQTN#~#J`SV-z_@P=%BDaPhw0Wtf)
zAD4|6qI?X7N$<Bw>&M1E3E=fv{pa)H;hhhIw`G2zBi4t6^2foK=jEA>{o6lJPlDHB
zzAszP#wDE9>iKxrYW4;2$t?fYY(6|_z-935n19Lk|7#ds1Am42Qfb(~`M<vbe!A><
z#revtQco$?hjhL?&)x>l`@^d2`hMeO_rTAP#TWJY7%Tr_V;+JZEc2@U2lewcluu&o
zC*ar1yok@Q-`SST2Jg>&F*d)wb2}IOFqs$m(DM$eeDd$nu{@Xueg`Z6GTsw^UGEmZ
z^K<e$@OHBJBLCnO_Nw`YUjDX9P}TguL2La9{4>_x-499kg9$G_s~UU*-#`|h=l?Z-
zYpX-fPw=H>UgRUcKk!?=Z<JW*w0!;I$9&!KdB5fZ!oQwd6nr}KG2^8BMMc>NUwuSL
z@SQhcf0Y@l*$)xESEI7vr!gPK;+OeR4txpb<?9O(f5oLr;8R%s^6^yovumn?-^Bdc
zRL%TH_+wr*z`tTXQ+EH7@I5=$27jIT_$@tD<EcqCg+hGVRxkp8mU(5Be^m92eB~z%
zz`tew<qYZiDfxEsjllE%hwk?yzdWP~`1`EAI1HBR5BVClEx;SIeE9W|MlITauf}{3
zd)}mB(e~iCG9NQ~4a`r{u33Vw&Dx{9K8W@ey|D{;U)g$7w8x;cZB+d&wcq-_J-{Di
z@f*wbTY~d9QSWrL249ek*OT68)|<kwDBBl&DDw`o{Z-)`KePp3O*X!Z{-KAgy$k<j
z*I@8>nU~N1g}*p?IQX*6%lil6-}W8}{yy^uyfyua@G}jZz-O`gmbYDVKb7#0UyKI-
zk@;&)HT{q9j)`tsy|R~7pXvNwobL&q&j)V$NY}f`n>qM^zs2gOvwA<1yseo(_$tgF
zNs*q1BH#UIAoxw}cxiuzyyulE;D0b*Nxh##e$?9O;7wRQbbl}T+FrB3_hg>OKWsGz
z{1WDmY?Jn9D1PN~^TF?7p4u<@9gi1+ugQF*nN%Ohd&NhBZ_ND5Vbb+?@@64X;H{Zo
zsGjeUA3PvhtFNoRAC-JUy>;LNS^Qx2{D=I+_Zz|U^_s$UxN3YSzwFc&@RL~l4E6n2
z<mW8e0lq2oi^HV#JNf!!c7xAk-e|it-jVOtVjp-tHolLjB0X<Q{$`N`@GV(<x}S~w
znp=tBvzYfRCEagEzTuW*;B{C&DTiJ`c~18~34Rfa&-35e{Ve#q%tyLoeH*WT0eo|o
z5AFX`{+F^YfiKQ{aNK}j^HuRXI=NTDe`EPXvGd#X=ne2W%+vLK%ExQ=ZSW5waeg>L
zeSM1jp1$|MH(`GCSgg+@4IYADz^>OstM5;y_<`A(;9s-rHM3cJG(C_7-j?m3TdMC*
zqxidL=7P6j`{A9`^F8wC`{sck&Gy6n9!cv#@_lQ*1K)+sPiVbEzSPT);O*G_q`7)L
zqWRm-lV8EVW<E*1z9!#4{3m#SHa`ir!uer>eW5e*^~h8fKc>BOe+b3bF)a$-l+7RR
zKg9X%g>NOm>oQ+S{k#mt4?154{8HwpzL4G@fV|$Sa$3EOdOwPMlxrpMYuWf4tG*we
ze4RE`!4GD>N1Ys1|3m(9u^QlWm|wRZ%O~JYE$}T^`&I6j_V*}$u^sim^ZnlDlcoK0
z@?(P<famjni*Zu_M*fp^Bk&7YJ~0iY@tXXR>P^7EV#iDOhmh~_qPbQ-VumHGzr2pN
z2G7^mN_Bro@tZ|hfamii<xO0#y&7Q&p3j%~dT?QrF5ow?^6^ve_fkFv1$uy2GQUuL
z{~LL)E4{%VV&zHC2a!Lw<{$8VSo}}w`+La`_qGKe#ymgX9LvGrA2M(80L!zy-f-}I
z|9Ox?8s90OvXAY-uVnG<*GltG^5gc60)LQsdcKc*^I4<8^Xn;L>hX?zTNgL*jx2sW
z%l~LoPw+?C`O0X8?J>515BSHj@j|Qzm7B4BIbE3mz8CAC>3$5#fB3pU@W!nFFU9(k
zXI@jlFJL~b9-iM8?WcqHWj;XBMfJQA<zrWR7WlfXKMz`k{ZDp!7<gS)p8R-Iw}*p&
z!s1)FNY^7MpKp^Ef)8Zz>3Kl%rhOv8Ut`{Uvvhr#{D~S-;PaT*|A0R3#VYWRnXeEr
z491sMN7jPx%)Cu9#*do65j?+s8st9_;t#gl0$$#qi2W94rSyC~y?<k#*$(ivS$m=T
z*{FQJ6y6P<@84E9jK_QZ@?P-r{REMZqKbiP|A+GVxcUJ2>#RPctM>ybpD3S1@cjB_
zfA#aW<ik511Am7d?`ZY&mE^6<odmyyov#6F$3yvdd3*+ZI~IST`u+-vzit0{@Uxgt
z4jlpeljb3pz{~gNMgL>ns~hBFJn$;`2$sK_`u<GHXMoWS@cjBwW?AX_J9)3SY2f+w
zqaJVUA)jJr)4?BO`6$%SgH!w^OEbVHvhwNi-2vtswl10ATQMJ7AN%KhEwjMOuLp_p
zG+^;N>g0mw>)D`1IR6=Q^A&i$KBedT=y+4My#;@q<sWd>AIkGn;79QHn6Ld4%cpXW
zuiz&#uUiu9kB|OO@JpFjsISjb{>45NJS$(1JYaqR%ikkO2mEE`72R<BJ-xgHcwIJr
z>CQuca7-ES(QNz;X5*t*i*n%KGjG}z`)B*YmB5>`d=yIQ`Ye@C?Hg6V|76~K4fdbA
zVyc6m!1}|c={UaoOsEBZEc3fwV|)DGr5^ab%=^V+{&Olc0KbWOB|BgJo|=Ns;9h<I
zA(hXB{pR4?u>L`Z%~zvBnuCAD;>RaR&+AeAJlodb`SoSq9)s&zfZxONv1H?K$#)&W
ze`S6^SLuEd%BRqo&frV%`mcU}E%N5ex`XHU|0LeP`tWXaZ}6>U@x}NX+*40A{!;w%
zE&c(|_qP=_F#cT~Tk!Jh*P{O{#`^zKw+DfbljS2kJx@gWq-+}oo?pK<KPlb6L4IMN
zJ^0=%eseaTH|#YE{4I9A(yQX}maQ@xJRcw1vh~jOY*($Go`0wOO%8d0pTzR-TMhGh
z9yVU9k2c5teCF^8;IFgzVNTNZGRkL5!$9z5*#0N4Z)?8>fe&Kw>G@WQ|Mg-p_#4bW
zXXDGaH6h@Wm^Wbi35Pwy!1L=zeEvVVLpXST{peU_od0wzyAV8|e-2PTKTgN%{cs8R
zg)INEY(Fh(&vNiHWnQ%3yeWA9)%OLfz*m=f(Y|>6dJb#BS7N?3TVEG4*$6(1jgNHy
z4;^pH_s!r3F+XgRAIxVSCT$1*o{f*E<D~nyDgKS9UEl{YpBy@Rog)8(e50{@!SnTI
zUUh6=b6Ot&ugCfa9X4OhE}jV9jrqunIDdF@_b7P2o~8ToDF5hfC&1gV_-Uz_zr&<6
z;P0^UQP~6ghrC|r!5?Jtv*yHXmzSrn{w46y%=7c5o0|fj-!J6;c_YM6PD}+qj@8d}
zwm%jbo(7)p57YA+RGxM1(!p0`@wXnq^Ob3u0sc8V-eJL5-*kUG27ixvdLEPValiZw
zJf9ClHyH)%!EbAFz&~K|W7&M{o!2YyFPYC^^TRn-Z^4&h<>RS-KN-ruWZ944<@d{p
z{>rjJ9i_bfG<)y`d=$%vo)@F|OX7Zj=ktMhR-a!57d$6lkMQ-ifw6Qwh~oF{uLHh4
zJKlvius-<KDgoY&`5Nl`RVaR|H>JVz{o7>L|3sbA`=b}-nbfx)lxNMw6~Vi+eCYiL
zD4&0vtAMv+zMu}y|KnR$2hYcAzMq^{q!xGw7T<I)u6I6OuM7S%s}FViU_PNS#^AfK
z_)pn<&vv3I_z%p}{kK#;54xFa_4K?X`L6YvgFnLJTUvNR`%Qk^3Oqkw!RqHtDE{G-
z?ZAIv<LSY8?EiN!?g+j%8z1@l@v=i_@KMYkQ9tiP`P4J-4xV3699<am>0h8Xcz-q?
z4S9_7&)ZjQz+YjWU!QVb+aG)hR)6UEFUmj9a}fBJ%!k?Bf%!>@<uLHU%+Gbk{Cn!z
zgTKvu+Ewg-dSyC-pTRu6{~qOUzQ;wY-x`kl!$YRKg6I3I?k#cu<Z)jQ@O=E@zDw=#
z;Q9LZU<$Th@3(&7yR!BY%;xjMPXvH3$^0F5{WoV(5cmvMo_xOA+bJ0QVisRF46jF&
zZ62c4TV_b_2Sw+rS)nlSLs)$KOE|tH-<SuUuV;gIV*7f#X#w~XEPjPp^m!APfamvL
zm0E|_?|i#12hYblzMtl&zY2UBD}Q>Pn#w0SYYq4_EPv}Fcz<vGgB!pXWuEUpR1Vz?
zzB%)W>i6rQd?pUr4*sdki}80zKOBFr8}9=DUgpL6i{3Ab;;;I$2mE2?PqO{D!RPmb
zzrcKe^(5%8UadL=p076*>i5r~d>*(R1^-DFUmS0;J|3^H#R>4dKA&d$72`^u0nhiV
z?Mq_+aPD3b_*_{&qCDySh$w&K!^z<J{&VD!K2Sb!b5g+b{r^tt_rsz1?S`g;&tT&(
zACF9o)4=<&@idI>-`4qj7yKpWJE`yIq<p$1JpkXCjgLm^`y0vYL_G$t&paRRUb{R4
zAHlqZ`u#&Feo%`X@aLIN*2nc`Op#aM=dk{vhWh>DDE{rVH{ee*PtQw||Gwn|_(#ku
z*?Pxt;ur8MnIFyeXX3j5(CY87{q0iv1(W3Kkpiqf^Y;7kNfE7{uh(o36bG-%;vX}>
z{(o9%Y49hRkGh8KC1kiB_^ZtO#N&Kst#L*0o0&K0j`bnsi#~Yy^<vT9d3!XyXaIg2
zi+_@hk2xz1!FOif_#9qe+dZx>cz*v$?s4p|d@YQ@Ph;`B<l^|AR>l-O-#>I_`%6pi
znSu9V@s<1Wd?my-1JCd8TF0M%nc50Gf4<4`Ip*(c(+)hpzIk>&?$5WX*%ADDmj4m;
z^Fh>p6|Xyi=hqAP`YZH!H}D%-{9){VfNG0+f#>s|yj#-qN|etQ2OIFb{`33m);8%6
zemTo0jjea03k?E)jd@EpKa9FD6#N0^GuU{V7h?y0B=hwC4|Kfo6CA<w`yrFuaQ}8^
ze;4q4J)X?^Lyy|7;G3{~`1<1NJ9qGh+4xJ(3sC-*mEPd_el_nuuSNKQpTXjPVb6ax
zv=0FPgpJpx>i3(Xd={7ofe&Qk<3YB+SLx?8@TZvP`$cUo&jfGDyn<bSuNxf-z84$s
z_<F&>V;=au%*R%d-fw}9cS?r^;J-1?>sw5jCE)pbEtc&+Y<jp1{AL#4o%Np!cdrD0
zoq4`qcsykd_<79VX)L`zJRNUb-woh1WnRpm>3(wZV`^*$A1bT=!pBSrRPFDH=R;lc
zpSRldb{qI-viM?ryx?fFj`mlT`OiOkp4kbW-_IGv{GIuGz-P1g+nHZBVn6r^|Kb~)
z9RlB!T~FN0;-4#U6nw(Jc)iO?@cj7>o_|=(Y4G(~{1}VtzwR#*<=NLi3H$|_7w1bk
z!$@_$#Q7CIy=yXf8`=34=Zl^{66beW{_~Pn`YGV;WM0I#E@r5TFV3;}$hz?jd=&G!
z?D}9t@u>6i`KOi4i+suzd!bq%HLjfh>|_4tre%Q_<bHEZ{zESLANf^LA@UhpN&0(0
z<lBY?fv<ER|Df_eq~B_-=&X)QUrV@7QF;3P0iM$Ls$a_g5511!Y6qqGH*$6AOoP|?
z@JRE%i6XC3<)wA1cpdTSkvbiG$*NLb6u*M{J_zzRc87p3JpnznWAdHjLcx2=-ZxQI
zFYawr<xjrLwYlK4%4^D1oCjx1={%6%RVo5}m3|s8;#2vMzvi+C{CU~?CJN8<kG>rV
z{*wBA6Qy^rl+GK)7GLLGTB`E&ZywjA@5MP1AAkD20crSq?{DMp(fOdiTTSQt>zXLY
zulzMUe!m;lm8ut3|7UF3bKvjhqNn)z%}(`q?HwzBx+t&b20EJOsziCk*qW;1)BBth
zvsj!g_g3w&e!SC{?rWu-nyrllKhz)VYs@jcFE`}Ht4s3uk1uN8M^xl9M9)x_55+Ik
z;tlu}Mi`&YH{EC3chDEDe#oF|s`yks6XV}pmgm!Q8OFCRs;~0>^Z%}~_}tts{EFOH
z+kyF0`G3+?D8%QroAbdNv%d?hoMWVlPvvhmWdZny#v)Tqe-YkCDo^sS?k)r$u@Akj
zg^^PHKIOmc<YMrjZCL*7@4UxfUkYB?1<QxZU(`bJ+4a^+@T*_`-cvrg)z^bhGr;;r
z@yQP?wHbUR7N7s!`IFywfsfsY`Fwk~QJJ5%s;!8UTOUw2MSgxSPD0P)4=pnLn%vJ^
zh2^PK_m6bG=AQ`#f3FmJsz2n9E}Wy)J3N%~C;u^J`VDzLy*Fcg=Yv>(a_fhH-`YoW
zyrREOF)JX7M?vlD>9D*%dR2d-r>j)`g8Dy8Dt`gr@{lIJs=W`F`ZqIYg+hGpyi?_-
zJpb9n(3iT7{o&wCd%<sLg2&6t=gX3*Y4Z5thq1lz@^4vb2KY+d(f5ePzZ*EGXTV)~
zeD0g8`!_mYt|uph-`p4Dw>~KS-4-g-x>Ii7lgH<t`cFDvy5qCJcPoJLd3}EV^rcqc
z`mR*pDE?2Mci>|W<^M7F{0|!M0@Qz(oR0TUuFrjW{x6rJ&$Gq)Ibiw(@RfqlM<*I7
z#p_Z0jEfV&e`$=K+9UPPbIN)=l;=~gFM2-D9I)F9eE;d_{T$mtK98(@w0i2_D4+UY
z$7IU$$=jrfFWTdP{u!!yEFG_ZmK*r!WQ`Z?>!1!BPcuEVddi2+uhHfEPvrU3%EI`(
z{#YG&4E`IdZ#;fre705}+1m)pbAy-jGkHGBTunZrd`ws0gYpR;HU|8z3mX5s@|pXO
zn^sT#gJ?zK^ZmN-;CDRL#25MG8a#r0rq;B7F3-Q`d5stO@c!z`E(h@5KIr2uv3$C<
zbJFUm{Hgx*dNbsOJf9jXFn&f`j6eS7aPZ?!qUZC~@Kg3${g8^%ctQ0ouHa4ZTkm6h
zUf+&xNe3VM1w9=v#gA?I2)xT0^mKk{JZkdnHTbQQm}m2)!O!Nrl$WQ4DSFC>+I!M5
z+dR2n`%xNissA+h$NsQ=#6a*?iRcY}px-=fuvSmUOZDOXn4#dWvV8bD-PptCtvr9T
z4tTshx?%nKR<IxVqm$9|`oDICtya(LL!;Bm_wsypuE+QbqosUAefW_7Ib`)I@X@S2
z^7tWrlmE)!^tb|km#qI3{e#~-?63AL?fpTX|A=_Zf87I|Z~XMP0iSjbJ<mVOvLE=B
z<I&S|i`2jMIQJO*&AI4#{KOACKFRa%!QzLr{=C71uAk+;K|PEg&gQq*^m}OaTN~9;
zD)K+5K7Z2f1-{KAY%e_jz>Xci$@4KOt;t86uOXlDeBBSX0>7b`#;f}Co6`Oc<x}`o
zXRSVVrqmybV-O!fq20h&VeN(5FZFMZKMsGF=Ra#Z=EILSO>rFjj%(<tzoPgKrf0Q!
znqSf1J$YWR#1DBs-=1T9p3m-48^AZ2hTc0Ep9?7Rtldv}{0q&{Q$AGwGoG~vU+ERr
zhfi!@vCXcI;E(M^&&Rv=+pWM~c#K{-puSR^SIQ@DWy^w-ti``bAGI4`{sF$y-?=7V
zxMmyh&&Hys`tYm$CbZM)!`1IoNAd5PHz^{|XW$}?pEMrxaVgdu{DuVdJfBOiT59$B
zrc(Q*`gYiK5BR$`SbR4Ac3pl5e5E(&t<~!<ieJp?2>7$h(DV88%E1@F`@5o7&ec<j
zGfDe<(f7OS$jh_DAoQQ!)CJ$ZQZMjfHPO@fNb%Pewg$iLo>bqYUBT9hF8O<!!qV3(
zk$qI2e!t2}>3fm0_@H^mr)hW`xyCl|It`0qUNP!@X7M`WvrSlE@S)w&XBLT3iq|9G
ztiCPy;%r?-{Sf(r9|wXTum|JExl8++<OjVT0)BBC`i1Iw6Zs{@M}RN;89nX8k*{kt
z5`21j(E>H)N&OJ{LK{YbKhO~U5mr9E_qc%X&(=LH)%)rc-!XYCc*jqg{KYty=bEcp
zmyj>^eH{2FWicPxhbRA~mlyaMM(8agq;^c+ev1$ICT-Ejbu?0n@*?kF(I31)FUd>0
zJ5s$SE50_gnW*ygZ!!I)??p`U@u%NgZ->7($pL?l+JnU-Y2TRIjoz|A$j^2N9uHl2
zA)iuX3ivwC=nwYxRjLwI|EF;GFW{eepy&PSG4~}!<^4=VP4v`$Xx$MXZBk6`w;j{e
z4>51aeT4It7AG2kpJs?YgN>V3`^>=CyU)f!wl5lSs|k2>*}O~S!}tAW)jkb=X>ZJj
zuT#o6*cF!_Z_`=m`8*_U#0T(OS~9N_qdH%-PAr@lQ9>Sn`D;909=}}yqmpueXb$=q
zw(ibpT_61Mq3BQN)K}$0<9Lq=#^Beg_i?E{(>OwYR<VZQmj+{eXAg`&tcWT2XPM}!
zzR@_l>vTeC`SDh4hvg~vVqG?Scp~^OY~PQU=h#w5wR+`oDSyf*s@N&;IvX(`YG2eQ
zJ9*VABhNqk40=9q9Gz7M{1Hd=y!`*EVg!DrK6?G{IPbOeG6r9|J$gQGd18?Wz9id6
z;^o=?((|(N<6XhZ$CAw(t6VeClY6^<n2+)b&Ktwt)BtbD<`W9GPoAh-ORML{yV1K2
z_#dpk(fJj<r1)$%=m7Y(6EJ^XK87w+%gc{<E<3-<^|(%-FjBvQ+z+gb@o9cQ?QzPy
zs(<B+PBZ{t;U>06p8xE(yDG}_X<ZQWQJlc`V%K>O_{~=6dHmZ62ef*5dlzl;lKv6!
z9ofEtLxPkKm5*Wla+T%zpB{?&@b*<RyaM>l&gl7dhbNCKY4v<O^7N|$ey$hB&tT(e
zgQPN5<@wiKhu)m+lU(1c2fjGlr!s#aU6-NpJ#cT)>hk#9JFx2}nMX^2f02p#@O5s|
ziPBm<Kfk>bHiO^#4dYXLr2e*N-Zt<F6>&a8UeukB`JaXd<G=^($N0`ae3T+Kjn`}1
zwy7a6pZ=^rr~Iir^^^q-<$fjWADZ{V{%v}0Ver-1x}LZ9QYJ;U`cLY=FGKy+*iFU3
z>)7M*R`AC5VyE-7wmkpH#po5j(!LY5uWOkF>d1ZH<LIgUDW99kg|&L?!ZE7y7w1ci
z?{x~SttXEkk&f}H{EhPG_TsZ~b`1Ehvh|FZADVx!tBOzlMwP9<^|UVTs*X!vO-^oC
zdHQ{;bJF*s&WI11H}Slx71;r=GvO8<N0zR1{f+8r^}@Tr-;nJGi{s$qSZIem;0G1a
zv;(n@^B*g%<0$WqZb!gp|6v_K>yl~JmEb=#!T5&Hr1<2Ao16l_`K9J~MLuQJ>q^S!
zN&B<l172&qINsKmq<TmG#+dWqO^a*t5k6eKzd}AWHW|E~A$qFUl>f29Dd68UN3Z-S
z)g$t4eXfHq+YS8@U1^<5{$ch_@TmhNPwP+0o4yV;O;dULzGxHad#ToG)~)n&`kK-X
ze{Wld-~S%vMPG+rl^lKF>c)Tjy~X$O_X<74-%GksL6vfpbbFb?;kxvF7xjU}u<x_j
z_ok`nz182V!zlvT&yTR5pH_dLAx(P}F*l`naq8C}a7+5$UHx+^-@o}<K;f+Tng21#
zqh4sKmTRlt`cZLWvg4$CS^b9O_h<^m@Nq6ao-Xc<$2q#Y`v!XW+Wk#%wJoTAjnDI!
z@2IihjG0}@W5bsQBut`EX1;;Gel8wn?yjT6r>A>kUoZOEfBj0Yks3U1&*|QE!WWs;
z+WSxT_d)dg>@}SJ4=<sh*LeSKT;YOUvR1Zl^1N)x2WwpZ^cp56fB!1<8uRvMSGw-s
zbLg>|Q7e3|Bn1EAH75AEy8Hg^tI%sqY2GYgUCR%h>|2I^S$L|B0e_8AuAcel!!y4I
z&`<vRS9*;xP5YV#c>mnoD*dRF!_ulJC;~ellm7M?L>zjJ1B2f$tElto_5Mb)T5U|S
z3;n}uIQay6`+5E43(;##efsfLLWkzt%Y5iwcBWfy@E=}dtfP<fL`NT&k?t;I9GwFH
z+l$d_ywbm8J~Lsw|N5fAbKCXHO!~uX<ewI27oYzYnnL_4tIcC9-gJ1q-Q@N6n3h}f
zj879_=fl-$f@_o3o`3fubR2`$Y$?&Kd&nBsobZS@3n$(D^J`4_>vl-5G5PzgtF;p?
z5*r(R_<T8iUL=1Fe-}?@FCXes#(TJqbn$d@cKJ`QN3U^izTWVI+nn8Y)_7UG{oXkp
z_-lyv;X9W8_3ysYYjj9BRc1icZu>^j6~|V7U8NdDq4R;q;q3c24W3>jtbpO}NGFe(
zR<o^-Eq9z!pTCB>-*t2Jcl_%%La*_v$hr9oJ`S-v^V4~M-<Ofu+FrxU$K|go7QM#V
z!#;k6T0ArMtpDun*CRFq|L_`)K7M}{UKNI3W4iN;$!+H?7*@M<!HHpu>*e3=EPc@V
zP?wdXr?ZcjtMf>o37&qg9{=%h=rwk{eOUQp^zx7WzfX4R((TYC{u-iQP4spg={v#O
z+uha4(bJE_zkj9I==m+DNTPvr-Qr0eMNQ6}u0+2{$01(B!#lr0xca(!dD2h++gExG
zliM5bnNJxp$8X$`9tM%$57BR%`HJX{&ZC^^U;gf^Wj=TJa&mMZ>*f0whYl|yVl->q
zys>$sF|8e2n>(8S8l{10{YJ#_cJUeAxLM;SO-HIvxz^wK-yez?jy@j#t=#|jXaDtI
z#5`MkTIPRR_3z`~%CN7Gmy?UHua}RZkBh&dxuJ1>{08|y{r8Vjis~vP){K_<pYr-3
zj#c%;zxa=c;p5`u<@0|$*W#r_j7EPw;}gHB`LN9YUo&54r~L8POm)tj9sL|NKmJeu
zCt@`E+h1alMU4OJm_VUK3_2D+4{tM7S0fH8|C<&)ZF)BENAk~K#gf25{bTwnzFk*V
z`o~ZKWFLi!N^1$(KmF(bwak}Jfllr&zW@1G{s$Jx{}-y`PTmv#=jVU(58}`)^FMvP
zM*E4$*x&rF+!oCL#xnoY&&Scp#oNpEZ~9?*9P#vrh~wew(a622{3n0+|Dud6^FK%V
MxHyjc|H$Y60h@i7fB*mh

diff --git a/perfprofd/tests/perfprofd_test.cc b/perfprofd/tests/perfprofd_test.cc
deleted file mode 100644
index 311ab6a0..00000000
--- a/perfprofd/tests/perfprofd_test.cc
+++ /dev/null
@@ -1,1743 +0,0 @@
-/*
- * Copyright (C) 2015 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <algorithm>
-#include <cctype>
-#include <functional>
-#include <iterator>
-#include <memory>
-#include <mutex>
-#include <regex>
-#include <string>
-#include <unordered_set>
-
-#include <fcntl.h>
-#include <stdio.h>
-#include <libgen.h>
-#include <sys/types.h>
-#include <sys/stat.h>
-
-#include <android-base/file.h>
-#include <android-base/logging.h>
-#include <android-base/macros.h>
-#include <android-base/stringprintf.h>
-#include <android-base/strings.h>
-#include <android-base/thread_annotations.h>
-#include <gtest/gtest.h>
-#include <zlib.h>
-
-#include "config.h"
-#include "configreader.h"
-#include "map_utils.h"
-#include "perfprofdcore.h"
-#include "perfprofd_cmdline.h"
-#include "perfprofd_perf.h"
-#include "perfprofd_threaded_handler.h"
-#include "quipper_helper.h"
-#include "symbolizer.h"
-
-#include "perfprofd_record.pb.h"
-
-using namespace android::perfprofd::quipper;
-
-static_assert(android::base::kEnableDChecks, "Expected DCHECKs to be enabled");
-
-//
-// Set to argv[0] on startup
-//
-static std::string gExecutableRealpath;
-
-namespace {
-
-using android::base::LogId;
-using android::base::LogSeverity;
-
-class TestLogHelper {
- public:
-  void Install() {
-    using namespace std::placeholders;
-    android::base::SetLogger(
-        std::bind(&TestLogHelper::TestLogFunction, this, _1, _2, _3, _4, _5, _6));
-  }
-
-  std::string JoinTestLog(const char* delimiter) {
-    std::unique_lock<std::mutex> ul(lock_);
-    return android::base::Join(test_log_messages_, delimiter);
-  }
-  template <typename Predicate>
-  std::string JoinTestLog(const char* delimiter, Predicate pred) {
-    std::unique_lock<std::mutex> ul(lock_);
-    std::vector<std::string> tmp;
-    std::copy_if(test_log_messages_.begin(),
-                 test_log_messages_.end(),
-                 std::back_inserter(tmp),
-                 pred);
-    return android::base::Join(tmp, delimiter);
-  }
-
- private:
-  void TestLogFunction(LogId log_id,
-                       LogSeverity severity,
-                       const char* tag,
-                       const char* file,
-                       unsigned int line,
-                       const char* message) {
-    std::unique_lock<std::mutex> ul(lock_);
-    constexpr char log_characters[] = "VDIWEFF";
-    char severity_char = log_characters[severity];
-    test_log_messages_.push_back(android::base::StringPrintf("%c: %s", severity_char, message));
-
-    if (severity >= LogSeverity::FATAL_WITHOUT_ABORT) {
-      android::base::StderrLogger(log_id, severity, tag, file, line, message);
-    }
-  }
-
- private:
-  std::mutex lock_;
-
-  std::vector<std::string> test_log_messages_;
-};
-
-}  // namespace
-
-// Path to perf executable on device
-#define PERFPATH "/system/bin/perf"
-
-// Temporary config file that we will emit for the daemon to read
-#define CONFIGFILE "perfprofd.conf"
-
-static bool bothWhiteSpace(char lhs, char rhs)
-{
-  return (std::isspace(lhs) && std::isspace(rhs));
-}
-
-#ifdef __ANDROID__
-
-static bool IsPerfSupported() {
-  auto check_perf_supported = []() {
-#if defined(__i386__) || defined(__x86_64__)
-    // Cloud devices may suppress perf. Check for arch_perfmon.
-    std::string cpuinfo;
-    if (!android::base::ReadFileToString("/proc/cpuinfo", &cpuinfo)) {
-      // This is pretty unexpected. Return true to see if we can run tests anyways.
-      return true;
-    }
-    return cpuinfo.find("arch_perfmon") != std::string::npos;
-#else
-    // Expect other architectures to have perf support.
-    return true;
-#endif
-  };
-  static bool perf_supported = check_perf_supported();
-  return perf_supported;
-}
-
-#endif
-
-//
-// Squeeze out repeated whitespace from expected/actual logs.
-//
-static std::string squeezeWhite(const std::string &str,
-                                const char *tag,
-                                bool dump=false)
-{
-  if (dump) { fprintf(stderr, "raw %s is %s\n", tag, str.c_str()); }
-  std::string result(str);
-  std::replace(result.begin(), result.end(), '\n', ' ');
-  auto new_end = std::unique(result.begin(), result.end(), bothWhiteSpace);
-  result.erase(new_end, result.end());
-  while (result.begin() != result.end() && std::isspace(*result.rbegin())) {
-    result.pop_back();
-  }
-  if (dump) { fprintf(stderr, "squeezed %s is %s\n", tag, result.c_str()); }
-  return result;
-}
-
-//
-// Replace all occurrences of a string with another string.
-//
-static std::string replaceAll(const std::string &str,
-                              const std::string &from,
-                              const std::string &to)
-{
-  std::string ret = "";
-  size_t pos = 0;
-  while (pos < str.size()) {
-    size_t found = str.find(from, pos);
-    if (found == std::string::npos) {
-      ret += str.substr(pos);
-      break;
-    }
-    ret += str.substr(pos, found - pos) + to;
-    pos = found + from.size();
-  }
-  return ret;
-}
-
-//
-// Replace occurrences of special variables in the string.
-//
-#ifdef __ANDROID__
-static std::string expandVars(const std::string &str) {
-#ifdef __LP64__
-  return replaceAll(str, "$NATIVE_TESTS", "/data/nativetest64");
-#else
-  return replaceAll(str, "$NATIVE_TESTS", "/data/nativetest");
-#endif
-}
-#endif
-
-class PerfProfdTest : public testing::Test {
- protected:
-  virtual void SetUp() {
-    test_logger.Install();
-    create_dirs();
-  }
-
-  virtual void TearDown() {
-    android::base::SetLogger(android::base::StderrLogger);
-
-    // TODO: proper management of test files. For now, use old system() code.
-    for (const auto dir : { &dest_dir, &conf_dir }) {
-      std::string cmd("rm -rf ");
-      cmd += *dir;
-      int ret = system(cmd.c_str());
-      CHECK_EQ(0, ret);
-    }
-  }
-
- protected:
-  //
-  // Check to see if the log messages emitted by the daemon
-  // match the expected result. By default we use a partial
-  // match, e.g. if we see the expected excerpt anywhere in the
-  // result, it's a match (for exact match, set exact to true)
-  //
-  ::testing::AssertionResult CompareLogMessages(const std::string& expected,
-                                                bool exactMatch = false) {
-     std::string sqexp = squeezeWhite(expected, "expected");
-
-     // Strip out JIT errors.
-     std::regex jit_regex("E: Failed to open ELF file: [^ ]*dalvik-jit-code-cache.*");
-     auto strip_jit = [&](const std::string& str) {
-       std::smatch jit_match;
-       return !std::regex_match(str, jit_match, jit_regex);
-     };
-     std::string sqact = squeezeWhite(test_logger.JoinTestLog(" ", strip_jit), "actual");
-
-     if (exactMatch) {
-       if (sqexp == sqact) {
-         return ::testing::AssertionSuccess() << sqexp << " is equal to " << sqact;
-       }
-       return ::testing::AssertionFailure() << "Expected:" << std::endl << sqexp << std::endl
-                                            << "Received:" << std::endl << sqact;
-     } else {
-       if (sqact.find(sqexp) == std::string::npos) {
-         return ::testing::AssertionFailure()
-             << "Expected to find:" << std::endl << sqexp << std::endl
-             << "in:" << std::endl << sqact;
-       }
-       return ::testing::AssertionSuccess() << sqexp << " was found in " << sqact;
-     }
-  }
-
-  // test_dir is the directory containing the test executable and
-  // any files associated with the test (will be created by the harness).
-  std::string test_dir;
-
-  // dest_dir is a temporary directory that we're using as the destination directory.
-  // It is backed by temp_dir1.
-  std::string dest_dir;
-
-  // conf_dir is a temporary directory that we're using as the configuration directory.
-  // It is backed by temp_dir2.
-  std::string conf_dir;
-
-  TestLogHelper test_logger;
-
- private:
-  void create_dirs() {
-    temp_dir1.reset(new TemporaryDir());
-    temp_dir2.reset(new TemporaryDir());
-    dest_dir = temp_dir1->path;
-    conf_dir = temp_dir2->path;
-    test_dir = android::base::Dirname(gExecutableRealpath);
-  }
-
-  std::unique_ptr<TemporaryDir> temp_dir1;
-  std::unique_ptr<TemporaryDir> temp_dir2;
-};
-
-///
-/// Helper class to kick off a run of the perfprofd daemon with a specific
-/// config file.
-///
-class PerfProfdRunner {
- public:
-  explicit PerfProfdRunner(const std::string& config_dir)
-      : config_dir_(config_dir)
-  {
-    config_path_ = config_dir + "/" CONFIGFILE;
-  }
-
-  ~PerfProfdRunner()
-  {
-    remove_processed_file();
-  }
-
-  void addToConfig(const std::string &line)
-  {
-    config_text_ += line;
-    config_text_ += "\n";
-  }
-
-  void remove_semaphore_file()
-  {
-    std::string semaphore(config_dir_);
-    semaphore += "/" SEMAPHORE_FILENAME;
-    unlink(semaphore.c_str());
-  }
-
-  void create_semaphore_file()
-  {
-    std::string semaphore(config_dir_);
-    semaphore += "/" SEMAPHORE_FILENAME;
-    close(open(semaphore.c_str(), O_WRONLY|O_CREAT, 0600));
-  }
-
-  void write_processed_file(int start_seq, int end_seq)
-  {
-    std::string processed = config_dir_ + "/" PROCESSED_FILENAME;
-    FILE *fp = fopen(processed.c_str(), "w");
-    for (int i = start_seq; i < end_seq; i++) {
-      fprintf(fp, "%d\n", i);
-    }
-    fclose(fp);
-  }
-
-  void remove_processed_file()
-  {
-    std::string processed = config_dir_ + "/" PROCESSED_FILENAME;
-    unlink(processed.c_str());
-  }
-
-  struct LoggingConfig : public Config {
-    void Sleep(size_t seconds) override {
-      // Log sleep calls but don't sleep.
-      LOG(INFO) << "sleep " << seconds << " seconds";
-    }
-
-    bool IsProfilingEnabled() const override {
-      //
-      // Check for existence of semaphore file in config directory
-      //
-      if (access(config_directory.c_str(), F_OK) == -1) {
-        PLOG(WARNING) << "unable to open config directory " << config_directory;
-        return false;
-      }
-
-      // Check for existence of semaphore file
-      std::string semaphore_filepath = config_directory
-          + "/" + SEMAPHORE_FILENAME;
-      if (access(semaphore_filepath.c_str(), F_OK) == -1) {
-        return false;
-      }
-
-      return true;
-    }
-  };
-
-  int invoke()
-  {
-    static const char *argv[3] = { "perfprofd", "-c", "" };
-    argv[2] = config_path_.c_str();
-
-    writeConfigFile(config_path_, config_text_);
-
-    // execute daemon main
-    LoggingConfig config;
-    return perfprofd_main(3, (char **) argv, &config);
-  }
-
- private:
-  std::string config_dir_;
-  std::string config_path_;
-  std::string config_text_;
-
-  void writeConfigFile(const std::string &config_path,
-                       const std::string &config_text)
-  {
-    FILE *fp = fopen(config_path.c_str(), "w");
-    ASSERT_TRUE(fp != nullptr);
-    fprintf(fp, "%s\n", config_text.c_str());
-    fclose(fp);
-  }
-};
-
-//......................................................................
-
-static std::string encoded_file_path(const std::string& dest_dir,
-                                     int seq) {
-  return android::base::StringPrintf("%s/perf.data.encoded.%d",
-                                     dest_dir.c_str(), seq);
-}
-
-static void readEncodedProfile(const std::string& dest_dir,
-                               bool compressed,
-                               android::perfprofd::PerfprofdRecord& encodedProfile)
-{
-  struct stat statb;
-  int perf_data_stat_result = stat(encoded_file_path(dest_dir, 0).c_str(), &statb);
-  ASSERT_NE(-1, perf_data_stat_result);
-
-  // read
-  std::string encoded;
-  encoded.resize(statb.st_size);
-  FILE *ifp = fopen(encoded_file_path(dest_dir, 0).c_str(), "r");
-  ASSERT_NE(nullptr, ifp);
-  size_t items_read = fread((void*) encoded.data(), statb.st_size, 1, ifp);
-  ASSERT_EQ(1, items_read);
-  fclose(ifp);
-
-  // uncompress
-  if (compressed && !encoded.empty()) {
-    z_stream stream;
-    stream.zalloc = Z_NULL;
-    stream.zfree = Z_NULL;
-    stream.opaque = Z_NULL;
-
-    {
-      constexpr int kWindowBits = 15;
-      constexpr int kGzipEncoding = 16;
-      int init_result = inflateInit2(&stream, kWindowBits | kGzipEncoding);
-      if (init_result != Z_OK) {
-        LOG(ERROR) << "Could not initialize libz stream " << init_result;
-        return;
-      }
-    }
-
-    std::string buf;
-    buf.reserve(2 * encoded.size());
-    stream.avail_in = encoded.size();
-    stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(encoded.data()));
-
-    int result;
-    do {
-      uint8_t chunk[1024];
-      stream.next_out = static_cast<Bytef*>(chunk);
-      stream.avail_out = arraysize(chunk);
-
-      result = inflate(&stream, 0);
-      const size_t amount = arraysize(chunk) - stream.avail_out;
-      if (amount > 0) {
-        if (buf.capacity() - buf.size() < amount) {
-          buf.reserve(buf.capacity() + 64u * 1024u);
-          CHECK_LE(amount, buf.capacity() - buf.size());
-        }
-        size_t index = buf.size();
-        buf.resize(buf.size() + amount);
-        memcpy(reinterpret_cast<uint8_t*>(const_cast<char*>(buf.data())) + index, chunk, amount);
-      }
-    } while (result == Z_OK);
-    inflateEnd(&stream);
-    if (result != Z_STREAM_END) {
-      LOG(ERROR) << "Finished with not-Z_STREAM_END " << result;
-      return;
-    }
-    encoded = buf;
-  }
-
-  // decode
-  encodedProfile.ParseFromString(encoded);
-}
-
-#define RAW_RESULT(x) #x
-
-TEST_F(PerfProfdTest, TestUtil)
-{
-  EXPECT_EQ("", replaceAll("", "", ""));
-  EXPECT_EQ("zzbc", replaceAll("abc", "a", "zz"));
-  EXPECT_EQ("azzc", replaceAll("abc", "b", "zz"));
-  EXPECT_EQ("abzz", replaceAll("abc", "c", "zz"));
-  EXPECT_EQ("xxyyzz", replaceAll("abc", "abc", "xxyyzz"));
-}
-
-TEST_F(PerfProfdTest, MissingGMS)
-{
-  //
-  // AWP requires cooperation between the daemon and the GMS core
-  // piece. If we're running on a device that has an old or damaged
-  // version of GMS core, then the config directory we're interested in
-  // may not be there. This test insures that the daemon does the
-  // right thing in this case.
-  //
-  PerfProfdRunner runner(conf_dir);
-  runner.addToConfig("only_debug_build=0");
-  runner.addToConfig("trace_config_read=0");
-  runner.addToConfig("config_directory=/does/not/exist");
-  runner.addToConfig("main_loop_iterations=1");
-  runner.addToConfig("use_fixed_seed=1");
-  runner.addToConfig("collection_interval=100");
-
-  // Kick off daemon
-  int daemon_main_return_code = runner.invoke();
-
-  // Check return code from daemon
-  EXPECT_EQ(0, daemon_main_return_code);
-
-  // Verify log contents
-  const std::string expected = RAW_RESULT(
-      I: sleep 90 seconds
-      W: unable to open config directory /does/not/exist: No such file or directory
-      I: profile collection skipped (missing config directory)
-                                          );
-
-  // check to make sure entire log matches
-  EXPECT_TRUE(CompareLogMessages(expected));
-}
-
-
-TEST_F(PerfProfdTest, MissingOptInSemaphoreFile)
-{
-  //
-  // Android device owners must opt in to "collect and report usage
-  // data" in order for us to be able to collect profiles. The opt-in
-  // check is performed in the GMS core component; if the check
-  // passes, then it creates a semaphore file for the daemon to pick
-  // up on.
-  //
-  PerfProfdRunner runner(conf_dir);
-  runner.addToConfig("only_debug_build=0");
-  std::string cfparam("config_directory="); cfparam += conf_dir;
-  runner.addToConfig(cfparam);
-  std::string ddparam("destination_directory="); ddparam += dest_dir;
-  runner.addToConfig(ddparam);
-  runner.addToConfig("main_loop_iterations=1");
-  runner.addToConfig("use_fixed_seed=1");
-  runner.addToConfig("collection_interval=100");
-
-  runner.remove_semaphore_file();
-
-  // Kick off daemon
-  int daemon_main_return_code = runner.invoke();
-
-  // Check return code from daemon
-  EXPECT_EQ(0, daemon_main_return_code);
-
-  // Verify log contents
-  const std::string expected = RAW_RESULT(
-      I: profile collection skipped (missing config directory)
-                                          );
-  // check to make sure log excerpt matches
-  EXPECT_TRUE(CompareLogMessages(expected));
-}
-
-TEST_F(PerfProfdTest, MissingPerfExecutable)
-{
-  //
-  // Perfprofd uses the 'simpleperf' tool to collect profiles
-  // (although this may conceivably change in the future). This test
-  // checks to make sure that if 'simpleperf' is not present we bail out
-  // from collecting profiles.
-  //
-  PerfProfdRunner runner(conf_dir);
-  runner.addToConfig("only_debug_build=0");
-  runner.addToConfig("trace_config_read=1");
-  std::string cfparam("config_directory="); cfparam += conf_dir;
-  runner.addToConfig(cfparam);
-  std::string ddparam("destination_directory="); ddparam += dest_dir;
-  runner.addToConfig(ddparam);
-  runner.addToConfig("main_loop_iterations=1");
-  runner.addToConfig("use_fixed_seed=1");
-  runner.addToConfig("collection_interval=100");
-  runner.addToConfig("perf_path=/does/not/exist");
-
-  // Create semaphore file
-  runner.create_semaphore_file();
-
-  // Kick off daemon
-  int daemon_main_return_code = runner.invoke();
-
-  // Check return code from daemon
-  EXPECT_EQ(0, daemon_main_return_code);
-
-  // expected log contents
-  const std::string expected = RAW_RESULT(
-      I: profile collection skipped (missing 'perf' executable)
-                                          );
-  // check to make sure log excerpt matches
-  EXPECT_TRUE(CompareLogMessages(expected));
-}
-
-TEST_F(PerfProfdTest, BadPerfRun)
-{
-  //
-  // Perf tools tend to be tightly coupled with a specific kernel
-  // version -- if things are out of sync perf could fail or
-  // crash. This test makes sure that we detect such a case and log
-  // the error.
-  //
-  PerfProfdRunner runner(conf_dir);
-  runner.addToConfig("only_debug_build=0");
-  std::string cfparam("config_directory="); cfparam += conf_dir;
-  runner.addToConfig(cfparam);
-  std::string ddparam("destination_directory="); ddparam += dest_dir;
-  runner.addToConfig(ddparam);
-  runner.addToConfig("main_loop_iterations=1");
-  runner.addToConfig("use_fixed_seed=1");
-  runner.addToConfig("collection_interval=100");
-#ifdef __ANDROID__
-  runner.addToConfig("perf_path=/system/bin/false");
-#else
-  runner.addToConfig("perf_path=/bin/false");
-#endif
-
-  // Create semaphore file
-  runner.create_semaphore_file();
-
-  // Kick off daemon
-  int daemon_main_return_code = runner.invoke();
-
-  // Check return code from daemon
-  EXPECT_EQ(0, daemon_main_return_code);
-
-  // Verify log contents. Because of perferr logging containing pids and test paths,
-  // it is easier to have three expected parts.
-  const std::string expected1 = "W: perf bad exit status 1";
-  const std::string expected2 = "bin/false record";
-  const std::string expected3 = "W: profile collection failed";
-
-  // check to make sure log excerpt matches
-  EXPECT_TRUE(CompareLogMessages(expected1));
-  EXPECT_TRUE(CompareLogMessages(expected2));
-  EXPECT_TRUE(CompareLogMessages(expected3));
-}
-
-TEST_F(PerfProfdTest, ConfigFileParsing)
-{
-  //
-  // Gracefully handly malformed items in the config file
-  //
-  PerfProfdRunner runner(conf_dir);
-  runner.addToConfig("only_debug_build=0");
-  runner.addToConfig("main_loop_iterations=1");
-  runner.addToConfig("collection_interval=100");
-  runner.addToConfig("use_fixed_seed=1");
-  runner.addToConfig("destination_directory=/does/not/exist");
-
-  // assorted bad syntax
-  runner.addToConfig("collection_interval=-1");
-  runner.addToConfig("collection_interval=18446744073709551615");
-  runner.addToConfig("nonexistent_key=something");
-  runner.addToConfig("no_equals_stmt");
-
-  // Kick off daemon
-  int daemon_main_return_code = runner.invoke();
-
-  // Check return code from daemon
-  EXPECT_EQ(0, daemon_main_return_code);
-
-  // Verify log contents
-  const std::string expected = RAW_RESULT(
-      W: line 6: value -1 cannot be parsed
-      W: line 7: specified value 18446744073709551615 for 'collection_interval' outside permitted range [0 4294967295]
-      W: line 8: unknown option 'nonexistent_key'
-      W: line 9: line malformed (no '=' found)
-                                          );
-
-  // check to make sure log excerpt matches
-  EXPECT_TRUE(CompareLogMessages(expected));
-}
-
-TEST_F(PerfProfdTest, ConfigFileParsing_Events) {
-  auto check_event_config = [](const Config& config,
-                               size_t index,
-                               const std::vector<std::string>& names,
-                               bool group,
-                               uint32_t period) {
-    if (config.event_config.size() <= index) {
-      return ::testing::AssertionFailure() << "Not enough entries " << config.event_config.size()
-                                                                    << " " << index;
-    }
-    const auto& elem = config.event_config[index];
-
-    if (elem.group != group) {
-      return ::testing::AssertionFailure() << "Type wrong " << elem.group << " " << group;
-    }
-
-    if (elem.sampling_period != period) {
-      return ::testing::AssertionFailure() << "Period wrong " << elem.sampling_period << " "
-                                                              << period;
-    }
-
-    auto strvec = [](const std::vector<std::string>& v) {
-      return "[" + android::base::Join(v, ',') + "]";
-    };
-    if (elem.events.size() != names.size()) {
-      return ::testing::AssertionFailure() << "Names wrong " << strvec(elem.events) << " "
-                                                             << strvec(names);
-    }
-    for (size_t i = 0; i != elem.events.size(); ++i) {
-      if (elem.events[i] != names[i]) {
-        return ::testing::AssertionFailure() << "Names wrong at " << i << ": "
-                                             << strvec(elem.events) << " "
-                                             << strvec(names);
-      }
-    }
-    return ::testing::AssertionSuccess();
-  };
-
-  {
-    std::string data = "-e_hello,world=1\n"
-                       "-g_foo,bar=2\n"
-                       "-e_abc,xyz=3\n"
-                       "-g_ftrace:test,ftrace:test2=4";
-
-    ConfigReader reader;
-    std::string error_msg;
-    ASSERT_TRUE(reader.Read(data, true, &error_msg)) << error_msg;
-
-    PerfProfdRunner::LoggingConfig config;
-    reader.FillConfig(&config);
-
-    EXPECT_TRUE(check_event_config(config, 0, { "hello", "world" }, false, 1));
-    EXPECT_TRUE(check_event_config(config, 1, { "foo", "bar" }, true, 2));
-    EXPECT_TRUE(check_event_config(config, 2, { "abc", "xyz" }, false, 3));
-    EXPECT_TRUE(check_event_config(config, 3, { "ftrace:test", "ftrace:test2" }, true, 4));
-  }
-
-  {
-    std::string data = "-e_hello,world=dummy";
-
-    ConfigReader reader;
-    std::string error_msg;
-    EXPECT_FALSE(reader.Read(data, true, &error_msg));
-  }
-
-  {
-    std::string data = "-g_hello,world=dummy";
-
-    ConfigReader reader;
-    std::string error_msg;
-    EXPECT_FALSE(reader.Read(data, true, &error_msg));
-  }
-}
-
-
-TEST_F(PerfProfdTest, ConfigDump) {
-  constexpr const char* kConfigElems[] = {
-      "collection_interval=14400",
-      "use_fixed_seed=1",
-      "main_loop_iterations=2",
-      "destination_directory=/does/not/exist",
-      "config_directory=a",
-      "perf_path=/system/xbin/simpleperf2",
-      "sampling_period=3",
-      "sampling_frequency=4",
-      "sample_duration=5",
-      "only_debug_build=1",
-      "hardwire_cpus=1",
-      "hardwire_cpus_max_duration=6",
-      "max_unprocessed_profiles=7",
-      "stack_profile=1",
-      "trace_config_read=1",
-      "collect_cpu_utilization=1",
-      "collect_charging_state=1",
-      "collect_booting=1",
-      "collect_camera_active=1",
-      "process=8",
-      "use_elf_symbolizer=1",
-      "symbolize_everything=1",
-      "compress=1",
-      "dropbox=1",
-      "fail_on_unsupported_events=1",
-      "-e_hello,world=1",
-      "-g_foo,bar=2",
-      "-e_abc,xyz=3",
-      "-g_ftrace:test,ftrace:test2=4",
-  };
-
-  std::string input;
-  for (const char* elem : kConfigElems) {
-    input.append(elem);
-    input.append("\n");
-  }
-
-  ConfigReader reader;
-  std::string error_msg;
-  ASSERT_TRUE(reader.Read(input, false, &error_msg)) << error_msg;
-
-  PerfProfdRunner::LoggingConfig config;
-  reader.FillConfig(&config);
-
-  std::string output = ConfigReader::ConfigToString(config);
-  for (const char* elem : kConfigElems) {
-    EXPECT_TRUE(output.find(elem) != std::string::npos) << elem << " not in " << output;
-  }
-}
-
-TEST_F(PerfProfdTest, ProfileCollectionAnnotations)
-{
-  unsigned util1 = collect_cpu_utilization();
-  EXPECT_LE(util1, 100);
-  EXPECT_GE(util1, 0);
-
-  // NB: expectation is that when we run this test, the device will be
-  // completed booted, will be on charger, and will not have the camera
-  // active.
-  EXPECT_FALSE(get_booting());
-#ifdef __ANDROID__
-  EXPECT_TRUE(get_charging());
-#endif
-  EXPECT_FALSE(get_camera_active());
-}
-
-namespace {
-
-template <typename Iterator>
-size_t CountEvents(const quipper::PerfDataProto& proto) {
-  size_t count = 0;
-  for (Iterator it(proto); it != it.end(); ++it) {
-    count++;
-  }
-  return count;
-}
-
-size_t CountCommEvents(const quipper::PerfDataProto& proto) {
-  return CountEvents<CommEventIterator>(proto);
-}
-size_t CountMmapEvents(const quipper::PerfDataProto& proto) {
-  return CountEvents<MmapEventIterator>(proto);
-}
-size_t CountSampleEvents(const quipper::PerfDataProto& proto) {
-  return CountEvents<SampleEventIterator>(proto);
-}
-size_t CountForkEvents(const quipper::PerfDataProto& proto) {
-  return CountEvents<ForkEventIterator>(proto);
-}
-size_t CountExitEvents(const quipper::PerfDataProto& proto) {
-  return CountEvents<ExitEventIterator>(proto);
-}
-
-std::string CreateStats(const quipper::PerfDataProto& proto) {
-  std::ostringstream oss;
-  oss << "Mmap events: "   << CountMmapEvents(proto) << std::endl;
-  oss << "Sample events: " << CountSampleEvents(proto) << std::endl;
-  oss << "Comm events: "   << CountCommEvents(proto) << std::endl;
-  oss << "Fork events: "   << CountForkEvents(proto) << std::endl;
-  oss << "Exit events: "   << CountExitEvents(proto) << std::endl;
-  return oss.str();
-}
-
-std::string FormatSampleEvent(const quipper::PerfDataProto_SampleEvent& sample) {
-  std::ostringstream oss;
-  if (sample.has_pid()) {
-    oss << "pid=" << sample.pid();
-  }
-  if (sample.has_tid()) {
-    oss << " tid=" << sample.tid();
-  }
-  if (sample.has_ip()) {
-      oss << " ip=" << sample.ip();
-    }
-  if (sample.has_addr()) {
-    oss << " addr=" << sample.addr();
-  }
-  if (sample.callchain_size() > 0) {
-    oss << " callchain=";
-    for (uint64_t cc : sample.callchain()) {
-      oss << "->" << cc;
-    }
-  }
-  return oss.str();
-}
-
-}
-
-struct BasicRunWithCannedPerf : PerfProfdTest {
-  void VerifyBasicCannedProfile(const android::perfprofd::PerfprofdRecord& encodedProfile) {
-    const quipper::PerfDataProto& perf_data = encodedProfile;
-
-    // Expect 21108 events.
-    EXPECT_EQ(21108, perf_data.events_size()) << CreateStats(perf_data);
-
-    EXPECT_EQ(48,    CountMmapEvents(perf_data)) << CreateStats(perf_data);
-    EXPECT_EQ(19986, CountSampleEvents(perf_data)) << CreateStats(perf_data);
-    EXPECT_EQ(1033,  CountCommEvents(perf_data)) << CreateStats(perf_data);
-    EXPECT_EQ(15,    CountForkEvents(perf_data)) << CreateStats(perf_data);
-    EXPECT_EQ(26,    CountExitEvents(perf_data)) << CreateStats(perf_data);
-
-    if (HasNonfatalFailure()) {
-      FAIL();
-    }
-
-    {
-      MmapEventIterator mmap(perf_data);
-      constexpr std::pair<const char*, uint64_t> kMmapEvents[] = {
-          std::make_pair("[kernel.kallsyms]_text", 0),
-          std::make_pair("/system/lib/libc.so", 3067412480u),
-          std::make_pair("/system/vendor/lib/libdsutils.so", 3069911040u),
-          std::make_pair("/system/lib/libc.so", 3067191296u),
-          std::make_pair("/system/lib/libc++.so", 3069210624u),
-          std::make_pair("/data/dalvik-cache/arm/system@framework@boot.oat", 1900048384u),
-          std::make_pair("/system/lib/libjavacore.so", 2957135872u),
-          std::make_pair("/system/vendor/lib/libqmi_encdec.so", 3006644224u),
-          std::make_pair("/data/dalvik-cache/arm/system@framework@wifi-service.jar@classes.dex",
-                         3010351104u),
-                         std::make_pair("/system/lib/libart.so", 3024150528u),
-                         std::make_pair("/system/lib/libz.so", 3056410624u),
-                         std::make_pair("/system/lib/libicui18n.so", 3057610752u),
-      };
-      for (auto& pair : kMmapEvents) {
-        EXPECT_STREQ(pair.first, mmap->mmap_event().filename().c_str());
-        EXPECT_EQ(pair.second, mmap->mmap_event().start()) << pair.first;
-        ++mmap;
-      }
-    }
-
-    {
-      CommEventIterator comm(perf_data);
-      constexpr const char* kCommEvents[] = {
-          "init", "kthreadd", "ksoftirqd/0", "kworker/u:0H", "migration/0", "khelper",
-          "netns", "modem_notifier", "smd_channel_clo", "smsm_cb_wq", "rpm-smd", "kworker/u:1H",
-      };
-      for (auto str : kCommEvents) {
-        EXPECT_STREQ(str, comm->comm_event().comm().c_str());
-        ++comm;
-      }
-    }
-
-    {
-      SampleEventIterator samples(perf_data);
-      constexpr const char* kSampleEvents[] = {
-          "pid=0 tid=0 ip=3222720196",
-          "pid=0 tid=0 ip=3222910876",
-          "pid=0 tid=0 ip=3222910876",
-          "pid=0 tid=0 ip=3222910876",
-          "pid=0 tid=0 ip=3222910876",
-          "pid=0 tid=0 ip=3222910876",
-          "pid=0 tid=0 ip=3222910876",
-          "pid=3 tid=3 ip=3231975108",
-          "pid=5926 tid=5926 ip=3231964952",
-          "pid=5926 tid=5926 ip=3225342428",
-          "pid=5926 tid=5926 ip=3223841448",
-          "pid=5926 tid=5926 ip=3069807920",
-      };
-      for (auto str : kSampleEvents) {
-        EXPECT_STREQ(str, FormatSampleEvent(samples->sample_event()).c_str());
-        ++samples;
-      }
-
-      // Skip some samples.
-      for (size_t i = 0; i != 5000; ++i) {
-        ++samples;
-      }
-      constexpr const char* kSampleEvents2[] = {
-          "pid=5938 tid=5938 ip=3069630992",
-          "pid=5938 tid=5938 ip=3069626616",
-          "pid=5938 tid=5938 ip=3069626636",
-          "pid=5938 tid=5938 ip=3069637212",
-          "pid=5938 tid=5938 ip=3069637208",
-          "pid=5938 tid=5938 ip=3069637252",
-          "pid=5938 tid=5938 ip=3069346040",
-          "pid=5938 tid=5938 ip=3069637128",
-          "pid=5938 tid=5938 ip=3069626616",
-      };
-      for (auto str : kSampleEvents2) {
-        EXPECT_STREQ(str, FormatSampleEvent(samples->sample_event()).c_str());
-        ++samples;
-      }
-
-      // Skip some samples.
-      for (size_t i = 0; i != 5000; ++i) {
-        ++samples;
-      }
-      constexpr const char* kSampleEvents3[] = {
-          "pid=5938 tid=5938 ip=3069912036",
-          "pid=5938 tid=5938 ip=3069637260",
-          "pid=5938 tid=5938 ip=3069631024",
-          "pid=5938 tid=5938 ip=3069346064",
-          "pid=5938 tid=5938 ip=3069637356",
-          "pid=5938 tid=5938 ip=3069637144",
-          "pid=5938 tid=5938 ip=3069912036",
-          "pid=5938 tid=5938 ip=3069912036",
-          "pid=5938 tid=5938 ip=3069631244",
-      };
-      for (auto str : kSampleEvents3) {
-        EXPECT_STREQ(str, FormatSampleEvent(samples->sample_event()).c_str());
-        ++samples;
-      }
-    }
-  }
-};
-
-TEST_F(BasicRunWithCannedPerf, Basic)
-{
-  //
-  // Verify the portion of the daemon that reads and encodes
-  // perf.data files. Here we run the encoder on a canned perf.data
-  // file and verify that the resulting protobuf contains what
-  // we think it should contain.
-  //
-  std::string input_perf_data(test_dir);
-  input_perf_data += "/canned.perf.data";
-
-  // Set up config to avoid these annotations (they are tested elsewhere)
-  ConfigReader config_reader;
-  config_reader.overrideUnsignedEntry("collect_cpu_utilization", 0);
-  config_reader.overrideUnsignedEntry("collect_charging_state", 0);
-  config_reader.overrideUnsignedEntry("collect_camera_active", 0);
-
-  // Disable compression.
-  config_reader.overrideUnsignedEntry("compress", 0);
-
-  PerfProfdRunner::LoggingConfig config;
-  config_reader.FillConfig(&config);
-
-  // Kick off encoder and check return code
-  PROFILE_RESULT result =
-      encode_to_proto(input_perf_data, encoded_file_path(dest_dir, 0).c_str(), config, 0, nullptr);
-  ASSERT_EQ(OK_PROFILE_COLLECTION, result) << test_logger.JoinTestLog(" ");
-
-  // Read and decode the resulting perf.data.encoded file
-  android::perfprofd::PerfprofdRecord encodedProfile;
-  readEncodedProfile(dest_dir, false, encodedProfile);
-
-  VerifyBasicCannedProfile(encodedProfile);
-}
-
-TEST_F(BasicRunWithCannedPerf, Compressed)
-{
-  //
-  // Verify the portion of the daemon that reads and encodes
-  // perf.data files. Here we run the encoder on a canned perf.data
-  // file and verify that the resulting protobuf contains what
-  // we think it should contain.
-  //
-  std::string input_perf_data(test_dir);
-  input_perf_data += "/canned.perf.data";
-
-  // Set up config to avoid these annotations (they are tested elsewhere)
-  ConfigReader config_reader;
-  config_reader.overrideUnsignedEntry("collect_cpu_utilization", 0);
-  config_reader.overrideUnsignedEntry("collect_charging_state", 0);
-  config_reader.overrideUnsignedEntry("collect_camera_active", 0);
-
-  // Enable compression.
-  config_reader.overrideUnsignedEntry("compress", 1);
-
-  PerfProfdRunner::LoggingConfig config;
-  config_reader.FillConfig(&config);
-
-  // Kick off encoder and check return code
-  PROFILE_RESULT result =
-      encode_to_proto(input_perf_data, encoded_file_path(dest_dir, 0).c_str(), config, 0, nullptr);
-  ASSERT_EQ(OK_PROFILE_COLLECTION, result) << test_logger.JoinTestLog(" ");
-
-  // Read and decode the resulting perf.data.encoded file
-  android::perfprofd::PerfprofdRecord encodedProfile;
-  readEncodedProfile(dest_dir, true, encodedProfile);
-
-  VerifyBasicCannedProfile(encodedProfile);
-}
-
-class BasicRunWithCannedPerfWithSymbolizer : public BasicRunWithCannedPerf {
- protected:
-  std::vector<::testing::AssertionResult> Run(bool symbolize_everything, size_t expected_count) {
-    //
-    // Verify the portion of the daemon that reads and encodes
-    // perf.data files. Here we run the encoder on a canned perf.data
-    // file and verify that the resulting protobuf contains what
-    // we think it should contain.
-    //
-    std::string input_perf_data(test_dir);
-    input_perf_data += "/canned.perf.data";
-
-    // Set up config to avoid these annotations (they are tested elsewhere)
-    ConfigReader config_reader;
-    config_reader.overrideUnsignedEntry("collect_cpu_utilization", 0);
-    config_reader.overrideUnsignedEntry("collect_charging_state", 0);
-    config_reader.overrideUnsignedEntry("collect_camera_active", 0);
-
-    // Disable compression.
-    config_reader.overrideUnsignedEntry("compress", 0);
-
-    if (symbolize_everything) {
-      config_reader.overrideUnsignedEntry("symbolize_everything", 1);
-    }
-
-    PerfProfdRunner::LoggingConfig config;
-    config_reader.FillConfig(&config);
-
-    // Kick off encoder and check return code
-    struct TestSymbolizer : public perfprofd::Symbolizer {
-      std::string Decode(const std::string& dso, uint64_t address) override {
-        return dso + "@" + std::to_string(address);
-      }
-      bool GetMinExecutableVAddr(const std::string& dso, uint64_t* addr) override {
-        *addr = 4096;
-        return true;
-      }
-    };
-    TestSymbolizer test_symbolizer;
-    PROFILE_RESULT result =
-        encode_to_proto(input_perf_data,
-                        encoded_file_path(dest_dir, 0).c_str(),
-                        config,
-                        0,
-                        &test_symbolizer);
-    if (result != OK_PROFILE_COLLECTION) {
-      return { ::testing::AssertionFailure() << "Profile collection failed: " << result };
-    }
-
-    std::vector<::testing::AssertionResult> ret;
-
-    // Read and decode the resulting perf.data.encoded file
-    android::perfprofd::PerfprofdRecord encodedProfile;
-    readEncodedProfile(dest_dir, false, encodedProfile);
-
-    VerifyBasicCannedProfile(encodedProfile);
-
-    auto find_symbol = [&](const std::string& filename) -> const quipper::SymbolInfo* {
-      const size_t size = encodedProfile.ExtensionSize(quipper::symbol_info);
-      for (size_t i = 0; i != size; ++i) {
-        auto& symbol_info = encodedProfile.GetExtension(quipper::symbol_info, i);
-        if (symbol_info.filename() == filename) {
-          return &symbol_info;
-        }
-      }
-      return nullptr;
-    };
-    auto all_filenames = [&]() {
-      std::ostringstream oss;
-      const size_t size = encodedProfile.ExtensionSize(quipper::symbol_info);
-      for (size_t i = 0; i != size; ++i) {
-        auto& symbol_info = encodedProfile.GetExtension(quipper::symbol_info, i);
-        oss << " " << symbol_info.filename();
-      }
-      return oss.str();
-    };
-
-    auto check_dsos = [&](const char* const* dsos, const size_t len) {
-      bool failed = false;
-      for (size_t i = 0; i != len; ++i) {
-        if (find_symbol(dsos[i]) == nullptr) {
-          failed = true;
-          ret.push_back(::testing::AssertionFailure() << "Did not find " << dsos[i]);
-        }
-      }
-      return failed;
-    };
-
-    bool failed = false;
-
-    constexpr const char* kDSOs[] = {
-        "/data/app/com.google.android.apps.plus-1/lib/arm/libcronet.so",
-        "/data/dalvik-cache/arm/system@framework@wifi-service.jar@classes.dex",
-        "/data/dalvik-cache/arm/data@app@com.google.android.gms-2@base.apk@classes.dex",
-        "/data/dalvik-cache/arm/system@framework@boot.oat",
-    };
-    failed |= check_dsos(kDSOs, arraysize(kDSOs));
-
-    if (symbolize_everything) {
-      constexpr const char* kDSOsWithBuildIDs[] = {
-          "/system/lib/libz.so", "/system/lib/libutils.so",
-      };
-      failed |= check_dsos(kDSOsWithBuildIDs, arraysize(kDSOsWithBuildIDs));
-    }
-
-    if (failed) {
-      ret.push_back(::testing::AssertionFailure() << "Found: " << all_filenames());
-    }
-
-    if (encodedProfile.ExtensionSize(quipper::symbol_info) != expected_count) {
-      ret.push_back(
-          ::testing::AssertionFailure() << "Expected " << expected_count
-                                        << " symbolized libraries, found "
-                                        << encodedProfile.ExtensionSize(quipper::symbol_info));
-    }
-
-    return ret;
-  }
-};
-
-TEST_F(BasicRunWithCannedPerfWithSymbolizer, Default) {
-  auto result = Run(false, 5);
-  for (const auto& result_component : result) {
-    EXPECT_TRUE(result_component);
-  }
-}
-
-TEST_F(BasicRunWithCannedPerfWithSymbolizer, Everything) {
-  auto result = Run(true, 26);
-  for (const auto& result_component : result) {
-    EXPECT_TRUE(result_component);
-  }
-}
-
-TEST_F(PerfProfdTest, CallchainRunWithCannedPerf)
-{
-  // This test makes sure that the perf.data converter
-  // can handle call chains.
-  //
-  std::string input_perf_data(test_dir);
-  input_perf_data += "/callchain.canned.perf.data";
-
-  // Set up config to avoid these annotations (they are tested elsewhere)
-  ConfigReader config_reader;
-  config_reader.overrideUnsignedEntry("collect_cpu_utilization", 0);
-  config_reader.overrideUnsignedEntry("collect_charging_state", 0);
-  config_reader.overrideUnsignedEntry("collect_camera_active", 0);
-
-  // Disable compression.
-  config_reader.overrideUnsignedEntry("compress", 0);
-
-  PerfProfdRunner::LoggingConfig config;
-  config_reader.FillConfig(&config);
-
-  // Kick off encoder and check return code
-  PROFILE_RESULT result =
-      encode_to_proto(input_perf_data, encoded_file_path(dest_dir, 0).c_str(), config, 0, nullptr);
-  ASSERT_EQ(OK_PROFILE_COLLECTION, result);
-
-  // Read and decode the resulting perf.data.encoded file
-  android::perfprofd::PerfprofdRecord encodedProfile;
-  readEncodedProfile(dest_dir, false, encodedProfile);
-
-  const quipper::PerfDataProto& perf_data = encodedProfile;
-
-  // Expect 21108 events.
-  EXPECT_EQ(2224, perf_data.events_size()) << CreateStats(perf_data);
-
-  {
-      SampleEventIterator samples(perf_data);
-      constexpr const char* kSampleEvents[] = {
-          "0: pid=6225 tid=6225 ip=18446743798834668032 callchain=->18446744073709551488->"
-              "18446743798834668032->18446743798834782596->18446743798834784624->"
-              "18446743798835055136->18446743798834788016->18446743798834789192->"
-              "18446743798834789512->18446743798834790216->18446743798833756776",
-          "1: pid=6225 tid=6225 ip=18446743798835685700 callchain=->18446744073709551488->"
-              "18446743798835685700->18446743798835688704->18446743798835650964->"
-              "18446743798834612104->18446743798834612276->18446743798835055528->"
-              "18446743798834788016->18446743798834789192->18446743798834789512->"
-              "18446743798834790216->18446743798833756776",
-          "2: pid=6225 tid=6225 ip=18446743798835055804 callchain=->18446744073709551488->"
-              "18446743798835055804->18446743798834788016->18446743798834789192->"
-              "18446743798834789512->18446743798834790216->18446743798833756776",
-          "3: pid=6225 tid=6225 ip=18446743798835991212 callchain=->18446744073709551488->"
-              "18446743798835991212->18446743798834491060->18446743798834675572->"
-              "18446743798834676516->18446743798834612172->18446743798834612276->"
-              "18446743798835056664->18446743798834788016->18446743798834789192->"
-              "18446743798834789512->18446743798834790216->18446743798833756776",
-          "4: pid=6225 tid=6225 ip=18446743798844881108 callchain=->18446744073709551488->"
-              "18446743798844881108->18446743798834836140->18446743798834846384->"
-              "18446743798834491100->18446743798834675572->18446743798834676516->"
-              "18446743798834612172->18446743798834612276->18446743798835056784->"
-              "18446743798834788016->18446743798834789192->18446743798834789512->"
-              "18446743798834790216->18446743798833756776",
-      };
-      size_t cmp_index = 0;
-      for (size_t index = 0; samples != samples.end(); ++samples, ++index) {
-        if (samples->sample_event().callchain_size() > 0) {
-          std::ostringstream oss;
-          oss << index << ": " << FormatSampleEvent(samples->sample_event());
-          EXPECT_STREQ(kSampleEvents[cmp_index], oss.str().c_str());
-          cmp_index++;
-          if (cmp_index == arraysize(kSampleEvents)) {
-            break;
-          }
-        }
-      }
-  }
-}
-
-#ifdef __ANDROID__
-
-TEST_F(PerfProfdTest, GetSupportedPerfCounters)
-{
-  if (!IsPerfSupported()) {
-    std::cerr << "Test not supported!" << std::endl;
-    return;
-  }
-  // Check basic perf counters.
-  {
-    struct DummyConfig : public Config {
-      void Sleep(size_t seconds) override {}
-      bool IsProfilingEnabled() const override { return false; }
-    };
-    DummyConfig config;
-    ASSERT_TRUE(android::perfprofd::FindSupportedPerfCounters(config.perf_path));
-  }
-  const std::unordered_set<std::string>& counters = android::perfprofd::GetSupportedPerfCounters();
-  EXPECT_TRUE(std::find(counters.begin(), counters.end(), std::string("cpu-cycles"))
-                  != counters.end()) << android::base::Join(counters, ',');
-  EXPECT_TRUE(std::find(counters.begin(), counters.end(), std::string("page-faults"))
-                  != counters.end()) << android::base::Join(counters, ',');
-}
-
-TEST_F(PerfProfdTest, BasicRunWithLivePerf)
-{
-  if (!IsPerfSupported()) {
-    std::cerr << "Test not supported!" << std::endl;
-    return;
-  }
-  //
-  // Basic test to exercise the main loop of the daemon. It includes
-  // a live 'perf' run
-  //
-  PerfProfdRunner runner(conf_dir);
-  runner.addToConfig("only_debug_build=0");
-  std::string ddparam("destination_directory="); ddparam += dest_dir;
-  runner.addToConfig(ddparam);
-  std::string cfparam("config_directory="); cfparam += conf_dir;
-  runner.addToConfig(cfparam);
-  runner.addToConfig("main_loop_iterations=1");
-  runner.addToConfig("use_fixed_seed=12345678");
-  runner.addToConfig("max_unprocessed_profiles=100");
-  runner.addToConfig("collection_interval=9999");
-  runner.addToConfig("sample_duration=2");
-  // Avoid the symbolizer for spurious messages.
-  runner.addToConfig("use_elf_symbolizer=0");
-
-  // Disable compression.
-  runner.addToConfig("compress=0");
-
-  // Create semaphore file
-  runner.create_semaphore_file();
-
-  // Kick off daemon
-  int daemon_main_return_code = runner.invoke();
-
-  // Check return code from daemon
-  ASSERT_EQ(0, daemon_main_return_code);
-
-  // Read and decode the resulting perf.data.encoded file
-  android::perfprofd::PerfprofdRecord encodedProfile;
-  readEncodedProfile(dest_dir, false, encodedProfile);
-
-  // Examine what we get back. Since it's a live profile, we can't
-  // really do much in terms of verifying the contents.
-  EXPECT_LT(0, encodedProfile.events_size());
-
-  // Verify log contents
-  const std::string expected = std::string(
-      "I: starting Android Wide Profiling daemon ") +
-      "I: config file path set to " + conf_dir + "/perfprofd.conf " +
-      RAW_RESULT(
-      I: random seed set to 12345678
-      I: sleep 674 seconds
-      I: initiating profile collection
-      I: sleep 2 seconds
-      I: profile collection complete
-      I: sleep 9325 seconds
-      I: finishing Android Wide Profiling daemon
-                                          );
-  // check to make sure log excerpt matches
-  EXPECT_TRUE(CompareLogMessages(expandVars(expected), true));
-}
-
-class PerfProfdLiveEventsTest : public PerfProfdTest {
- protected:
-  ::testing::AssertionResult SetupAndInvoke(
-      const std::string& event_config,
-      const std::vector<std::string>& extra_config,
-      bool expect_success,
-      std::string expected_log,
-      bool log_match_exact) {
-    //
-    // Basic test to check that the event set functionality works.
-    //
-    // Note: this is brittle, as we do not really know which events the hardware
-    //       supports. Use "cpu-cycles" and "page-faults" as something likely.
-    //
-    PerfProfdRunner runner(conf_dir);
-    runner.addToConfig("only_debug_build=0");
-    std::string ddparam("destination_directory="); ddparam += dest_dir;
-    runner.addToConfig(ddparam);
-    std::string cfparam("config_directory="); cfparam += conf_dir;
-    runner.addToConfig(cfparam);
-    runner.addToConfig("main_loop_iterations=1");
-    runner.addToConfig("use_fixed_seed=12345678");
-    runner.addToConfig("max_unprocessed_profiles=100");
-    runner.addToConfig("collection_interval=9999");
-    runner.addToConfig("sample_duration=2");
-    // Avoid the symbolizer for spurious messages.
-    runner.addToConfig("use_elf_symbolizer=0");
-
-    // Disable compression.
-    runner.addToConfig("compress=0");
-
-    // Set event set.
-    runner.addToConfig(event_config);
-
-    for (const std::string& str : extra_config) {
-      runner.addToConfig(str);
-    }
-
-    // Create semaphore file
-    runner.create_semaphore_file();
-
-    // Kick off daemon
-    int daemon_main_return_code = runner.invoke();
-
-    // Check return code from daemon
-    if (0 != daemon_main_return_code) {
-      return ::testing::AssertionFailure() << "Daemon exited with " << daemon_main_return_code;
-    }
-
-    if (expect_success) {
-      // Read and decode the resulting perf.data.encoded file
-      android::perfprofd::PerfprofdRecord encodedProfile;
-      readEncodedProfile(dest_dir, false, encodedProfile);
-
-      // Examine what we get back. Since it's a live profile, we can't
-      // really do much in terms of verifying the contents.
-      if (0 == encodedProfile.events_size()) {
-        return ::testing::AssertionFailure() << "Empty encoded profile.";
-      }
-    }
-
-    // Verify log contents
-    return CompareLogMessages(expandVars(expected_log), log_match_exact);
-  }
-};
-
-TEST_F(PerfProfdLiveEventsTest, BasicRunWithLivePerf_Events)
-{
-  if (!IsPerfSupported()) {
-    std::cerr << "Test not supported!" << std::endl;
-    return;
-  }
-  const std::string expected = std::string(
-        "I: starting Android Wide Profiling daemon ") +
-        "I: config file path set to " + conf_dir + "/perfprofd.conf " +
-        RAW_RESULT(
-        I: random seed set to 12345678
-        I: sleep 674 seconds
-        I: initiating profile collection
-        I: sleep 2 seconds
-        I: profile collection complete
-        I: sleep 9325 seconds
-        I: finishing Android Wide Profiling daemon
-                                            );
-  ASSERT_TRUE(SetupAndInvoke("-e_cpu-cycles,page-faults=100000", {}, true, expected, true));
-}
-
-TEST_F(PerfProfdLiveEventsTest, BasicRunWithLivePerf_Events_Strip)
-{
-  if (!IsPerfSupported()) {
-    std::cerr << "Test not supported!" << std::endl;
-    return;
-  }
-  const std::string expected = std::string(
-        "I: starting Android Wide Profiling daemon ") +
-        "I: config file path set to " + conf_dir + "/perfprofd.conf " +
-        RAW_RESULT(
-        I: random seed set to 12345678
-        I: sleep 674 seconds
-        I: initiating profile collection
-        W: Event does:not:exist is unsupported.
-        I: sleep 2 seconds
-        I: profile collection complete
-        I: sleep 9325 seconds
-        I: finishing Android Wide Profiling daemon
-                                            );
-  ASSERT_TRUE(SetupAndInvoke("-e_cpu-cycles,page-faults,does:not:exist=100000",
-                             { "fail_on_unsupported_events=0" },
-                             true,
-                             expected,
-                             true));
-}
-
-TEST_F(PerfProfdLiveEventsTest, BasicRunWithLivePerf_Events_NoStrip)
-{
-  if (!IsPerfSupported()) {
-    std::cerr << "Test not supported!" << std::endl;
-    return;
-  }
-  const std::string expected =
-      RAW_RESULT(
-      W: Event does:not:exist is unsupported.
-      W: profile collection failed
-                                          );
-  ASSERT_TRUE(SetupAndInvoke("-e_cpu-cycles,page-faults,does:not:exist=100000",
-                             { "fail_on_unsupported_events=1" },
-                             false,
-                             expected,
-                             false));
-}
-
-TEST_F(PerfProfdLiveEventsTest, BasicRunWithLivePerf_EventsGroup)
-{
-  if (!IsPerfSupported()) {
-    std::cerr << "Test not supported!" << std::endl;
-    return;
-  }
-  const std::string expected = std::string(
-        "I: starting Android Wide Profiling daemon ") +
-        "I: config file path set to " + conf_dir + "/perfprofd.conf " +
-        RAW_RESULT(
-        I: random seed set to 12345678
-        I: sleep 674 seconds
-        I: initiating profile collection
-        I: sleep 2 seconds
-        I: profile collection complete
-        I: sleep 9325 seconds
-        I: finishing Android Wide Profiling daemon
-                                            );
-  ASSERT_TRUE(SetupAndInvoke("-g_cpu-cycles,page-faults=100000", {}, true, expected, true));
-}
-
-TEST_F(PerfProfdTest, MultipleRunWithLivePerf)
-{
-  if (!IsPerfSupported()) {
-    std::cerr << "Test not supported!" << std::endl;
-    return;
-  }
-  //
-  // Basic test to exercise the main loop of the daemon. It includes
-  // a live 'perf' run
-  //
-  PerfProfdRunner runner(conf_dir);
-  runner.addToConfig("only_debug_build=0");
-  std::string ddparam("destination_directory="); ddparam += dest_dir;
-  runner.addToConfig(ddparam);
-  std::string cfparam("config_directory="); cfparam += conf_dir;
-  runner.addToConfig(cfparam);
-  runner.addToConfig("main_loop_iterations=3");
-  runner.addToConfig("use_fixed_seed=12345678");
-  runner.addToConfig("collection_interval=9999");
-  runner.addToConfig("sample_duration=2");
-  // Avoid the symbolizer for spurious messages.
-  runner.addToConfig("use_elf_symbolizer=0");
-
-  // Disable compression.
-  runner.addToConfig("compress=0");
-
-  runner.write_processed_file(1, 2);
-
-  // Create semaphore file
-  runner.create_semaphore_file();
-
-  // Kick off daemon
-  int daemon_main_return_code = runner.invoke();
-
-  // Check return code from daemon
-  ASSERT_EQ(0, daemon_main_return_code);
-
-  // Read and decode the resulting perf.data.encoded file
-  android::perfprofd::PerfprofdRecord encodedProfile;
-  readEncodedProfile(dest_dir, false, encodedProfile);
-
-  // Examine what we get back. Since it's a live profile, we can't
-  // really do much in terms of verifying the contents.
-  EXPECT_LT(0, encodedProfile.events_size());
-
-  // Examine that encoded.1 file is removed while encoded.{0|2} exists.
-  EXPECT_EQ(0, access(encoded_file_path(dest_dir, 0).c_str(), F_OK));
-  EXPECT_NE(0, access(encoded_file_path(dest_dir, 1).c_str(), F_OK));
-  EXPECT_EQ(0, access(encoded_file_path(dest_dir, 2).c_str(), F_OK));
-
-  // Verify log contents
-  const std::string expected = std::string(
-      "I: starting Android Wide Profiling daemon ") +
-      "I: config file path set to " + conf_dir + "/perfprofd.conf " +
-      RAW_RESULT(
-      I: random seed set to 12345678
-      I: sleep 674 seconds
-      I: initiating profile collection
-      I: sleep 2 seconds
-      I: profile collection complete
-      I: sleep 9325 seconds
-      I: sleep 4974 seconds
-      I: initiating profile collection
-      I: sleep 2 seconds
-      I: profile collection complete
-      I: sleep 5025 seconds
-      I: sleep 501 seconds
-      I: initiating profile collection
-      I: sleep 2 seconds
-      I: profile collection complete
-      I: sleep 9498 seconds
-      I: finishing Android Wide Profiling daemon
-                                          );
-  // check to make sure log excerpt matches
-  EXPECT_TRUE(CompareLogMessages(expandVars(expected), true));
-}
-
-TEST_F(PerfProfdTest, CallChainRunWithLivePerf)
-{
-  if (!IsPerfSupported()) {
-    std::cerr << "Test not supported!" << std::endl;
-    return;
-  }
-  //
-  // Collect a callchain profile, so as to exercise the code in
-  // perf_data post-processing that digests callchains.
-  //
-  PerfProfdRunner runner(conf_dir);
-  std::string ddparam("destination_directory="); ddparam += dest_dir;
-  runner.addToConfig(ddparam);
-  std::string cfparam("config_directory="); cfparam += conf_dir;
-  runner.addToConfig(cfparam);
-  runner.addToConfig("main_loop_iterations=1");
-  runner.addToConfig("use_fixed_seed=12345678");
-  runner.addToConfig("max_unprocessed_profiles=100");
-  runner.addToConfig("collection_interval=9999");
-  runner.addToConfig("stack_profile=1");
-  runner.addToConfig("sample_duration=2");
-  // Avoid the symbolizer for spurious messages.
-  runner.addToConfig("use_elf_symbolizer=0");
-
-  // Disable compression.
-  runner.addToConfig("compress=0");
-
-  // Create semaphore file
-  runner.create_semaphore_file();
-
-  // Kick off daemon
-  int daemon_main_return_code = runner.invoke();
-
-  // Check return code from daemon
-  ASSERT_EQ(0, daemon_main_return_code);
-
-  // Read and decode the resulting perf.data.encoded file
-  android::perfprofd::PerfprofdRecord encodedProfile;
-  readEncodedProfile(dest_dir, false, encodedProfile);
-
-  // Examine what we get back. Since it's a live profile, we can't
-  // really do much in terms of verifying the contents.
-  EXPECT_LT(0, encodedProfile.events_size());
-
-  // Verify log contents
-  const std::string expected = std::string(
-      "I: starting Android Wide Profiling daemon ") +
-      "I: config file path set to " + conf_dir + "/perfprofd.conf " +
-      RAW_RESULT(
-      I: random seed set to 12345678
-      I: sleep 674 seconds
-      I: initiating profile collection
-      I: sleep 2 seconds
-      I: profile collection complete
-      I: sleep 9325 seconds
-      I: finishing Android Wide Profiling daemon
-                                          );
-  // check to make sure log excerpt matches
-  EXPECT_TRUE(CompareLogMessages(expandVars(expected), true));
-
-  // Check that we have at least one SampleEvent with a callchain.
-  SampleEventIterator samples(encodedProfile);
-  bool found_callchain = false;
-  while (!found_callchain && samples != samples.end()) {
-    found_callchain = samples->sample_event().callchain_size() > 0;
-  }
-  EXPECT_TRUE(found_callchain) << CreateStats(encodedProfile);
-}
-
-#endif
-
-class RangeMapTest : public testing::Test {
-};
-
-TEST_F(RangeMapTest, TestRangeMap) {
-  using namespace android::perfprofd;
-
-  RangeMap<std::string, uint64_t> map;
-  auto print = [&]() {
-    std::ostringstream oss;
-    for (auto& aggr_sym : map) {
-      oss << aggr_sym.first << "#" << aggr_sym.second.symbol;
-      oss << "[";
-      for (auto& x : aggr_sym.second.offsets) {
-        oss << x << ",";
-      }
-      oss << "]";
-    }
-    return oss.str();
-  };
-
-  EXPECT_STREQ("", print().c_str());
-
-  map.Insert("a", 10);
-  EXPECT_STREQ("10#a[10,]", print().c_str());
-  map.Insert("a", 100);
-  EXPECT_STREQ("10#a[10,100,]", print().c_str());
-  map.Insert("a", 1);
-  EXPECT_STREQ("1#a[1,10,100,]", print().c_str());
-  map.Insert("a", 1);
-  EXPECT_STREQ("1#a[1,10,100,]", print().c_str());
-  map.Insert("a", 2);
-  EXPECT_STREQ("1#a[1,2,10,100,]", print().c_str());
-
-  map.Insert("b", 200);
-  EXPECT_STREQ("1#a[1,2,10,100,]200#b[200,]", print().c_str());
-  map.Insert("b", 199);
-  EXPECT_STREQ("1#a[1,2,10,100,]199#b[199,200,]", print().c_str());
-
-  map.Insert("c", 50);
-  EXPECT_STREQ("1#a[1,2,10,]50#c[50,]100#a[100,]199#b[199,200,]", print().c_str());
-}
-
-class ThreadedHandlerTest : public PerfProfdTest {
- public:
-  void SetUp() override {
-    PerfProfdTest::SetUp();
-    threaded_handler_.reset(new android::perfprofd::ThreadedHandler());
-  }
-
-  void TearDown() override {
-    threaded_handler_.reset();
-    PerfProfdTest::TearDown();
-  }
-
- protected:
-  std::unique_ptr<android::perfprofd::ThreadedHandler> threaded_handler_;
-};
-
-TEST_F(ThreadedHandlerTest, Basic) {
-  std::string error_msg;
-  EXPECT_FALSE(threaded_handler_->StopProfiling(&error_msg));
-}
-
-#ifdef __ANDROID__
-#define ThreadedHandlerTestName(x) x
-#else
-#define ThreadedHandlerTestName(x) DISABLED_ ## x
-#endif
-
-TEST_F(ThreadedHandlerTest, ThreadedHandlerTestName(Live)) {
-  auto config_fn = [](android::perfprofd::ThreadedConfig& config) {
-    // Use some values that make it likely that things don't fail quickly.
-    config.main_loop_iterations = 0;
-    config.collection_interval_in_s = 1000000;
-  };
-  std::string error_msg;
-  ASSERT_TRUE(threaded_handler_->StartProfiling(config_fn, &error_msg)) << error_msg;
-  EXPECT_TRUE(threaded_handler_->StopProfiling(&error_msg)) << error_msg;
-}
-
-int main(int argc, char **argv) {
-  // Always log to cerr, so that device failures are visible.
-  android::base::SetLogger(android::base::StderrLogger);
-
-  CHECK(android::base::Realpath(argv[0], &gExecutableRealpath));
-
-  // switch to / before starting testing (perfprofd
-  // should be location-independent)
-  chdir("/");
-  testing::InitGoogleTest(&argc, argv);
-  return RUN_ALL_TESTS();
-}
diff --git a/perfprofd/tests/perfprofdmockutils.cc b/perfprofd/tests/perfprofdmockutils.cc
deleted file mode 100644
index f8858090..00000000
--- a/perfprofd/tests/perfprofdmockutils.cc
+++ /dev/null
@@ -1,101 +0,0 @@
-/*
-**
-** Copyright 2015, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-#define LOG_TAG "perfprofd"
-
-#include <stdarg.h>
-#include <unistd.h>
-#include <vector>
-#include <string>
-#include <assert.h>
-
-#include <utils/Log.h>
-
-#include "perfprofdutils.h"
-
-static std::vector<std::string> *mock_log;
-
-static void append_to_log(const std::string &s)
-{
-  assert(mock_log);
-  mock_log->push_back(s);
-}
-
-void mock_perfprofdutils_init()
-{
-  assert(!mock_log);
-  mock_log = new std::vector<std::string>;
-}
-
-void mock_perfprofdutils_finish()
-{
-  assert(mock_log);
-  delete mock_log;
-}
-
-std::string mock_perfprofdutils_getlogged()
-{
-  std::string result;
-  assert(mock_log);
-  for (const std::string &s : (*mock_log)) {
-    result += s;
-  }
-  mock_log->clear();
-  return result;
-}
-
-extern "C" {
-
-#define LMAX 8192
-
-void perfprofd_mocklog(const char *tag, const char *fmt, va_list ap)
-{
-    char buffer[LMAX];
-    strcpy(buffer, tag);
-    vsnprintf(buffer+strlen(tag), LMAX, fmt, ap);
-    std::string b(buffer); b += "\012";
-    append_to_log(b);
-}
-
-void perfprofd_log_error(const char *fmt, ...)
-{
-    va_list ap;
-    va_start(ap, fmt);
-    vfprintf(stderr, fmt, ap); fprintf(stderr, "\n");
-    perfprofd_mocklog("E: ", fmt, ap);
-    va_end(ap);
-}
-
-void perfprofd_log_warning(const char *fmt, ...)
-{
-    va_list ap;
-    va_start(ap, fmt);
-    vfprintf(stderr, fmt, ap); fprintf(stderr, "\n");
-    perfprofd_mocklog("W: ", fmt, ap);
-    va_end(ap);
-}
-
-void perfprofd_log_info(const char *fmt, ...)
-{
-    va_list ap;
-    va_start(ap, fmt);
-    vfprintf(stderr, fmt, ap); fprintf(stderr, "\n");
-    perfprofd_mocklog("I: ", fmt, ap);
-    va_end(ap);
-}
-
-}
diff --git a/perfprofd/tests/perfprofdmockutils.h b/perfprofd/tests/perfprofdmockutils.h
deleted file mode 100644
index 12caabb7..00000000
--- a/perfprofd/tests/perfprofdmockutils.h
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
-**
-** Copyright 2015, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
-
-///
-/// Set up mock utilities layer prior to unit test execution
-///
-extern void mock_perfprofdutils_init();
-
-///
-/// Set up mock utilities layer prior to unit test execution
-///
-extern void mock_perfprofdutils_finish();
-
-///
-/// Return string containing things logged to logd, plus sleep instances
-///
-extern std::string mock_perfprofdutils_getlogged();
diff --git a/simpleperf/Android.bp b/simpleperf/Android.bp
index be134209..0d3f35a8 100644
--- a/simpleperf/Android.bp
+++ b/simpleperf/Android.bp
@@ -336,8 +336,16 @@ cc_binary {
     static_libs: ["libsimpleperf"],
     target: {
         android: {
-            shared_libs: [
-                "libLLVM_android",
+    //FIXME: llvm workaround
+    //        shared_libs: [
+    //        ],
+            static_libs: [
+                "libLLVMObject",
+                "libLLVMBitReader",
+                "libLLVMMC",
+                "libLLVMMCParser",
+                "libLLVMCore",
+                "libLLVMSupport",
             ],
         },
     },
diff --git a/simpleperf/perf_regs.cpp b/simpleperf/perf_regs.cpp
index c238f075..9ccaa679 100644
--- a/simpleperf/perf_regs.cpp
+++ b/simpleperf/perf_regs.cpp
@@ -46,6 +46,8 @@ ArchType GetArchType(const std::string& arch) {
       }
     }
     return ARCH_ARM;
+  } else if (arch == "riscv64") {
+    return ARCH_RISCV64;
   }
   LOG(ERROR) << "unsupported arch: " << arch;
   return ARCH_UNSUPPORTED;
@@ -73,6 +75,8 @@ std::string GetArchString(ArchType arch) {
       return "arm64";
     case ARCH_ARM:
       return "arm";
+    case ARCH_RISCV64:
+      return "riscv64";
     default:
       break;
   }
@@ -91,6 +95,8 @@ uint64_t GetSupportedRegMask(ArchType arch) {
       return ((1ULL << PERF_REG_ARM_MAX) - 1);
     case ARCH_ARM64:
       return ((1ULL << PERF_REG_ARM64_MAX) - 1);
+    case ARCH_RISCV64:
+      return ((1ULL << PERF_REG_RISCV_MAX) - 1);
     default:
       return 0;
   }
@@ -115,6 +121,10 @@ static std::unordered_map<size_t, std::string> arm64_reg_map = {
     {PERF_REG_ARM64_LR, "lr"}, {PERF_REG_ARM64_SP, "sp"}, {PERF_REG_ARM64_PC, "pc"},
 };
 
+static std::unordered_map<size_t, std::string> riscv64_reg_map = {
+    {PERF_REG_RISCV_PC, "pc"}, {PERF_REG_RISCV_RA, "ra"}, {PERF_REG_RISCV_SP, "sp"},
+};
+
 std::string GetRegName(size_t regno, ArchType arch) {
   // Cast regno to int type to avoid -Werror=type-limits.
   int reg = static_cast<int>(regno);
@@ -146,6 +156,14 @@ std::string GetRegName(size_t regno, ArchType arch) {
       CHECK(it != arm64_reg_map.end()) << "unknown reg " << reg;
       return it->second;
     }
+    case ARCH_RISCV64: {
+      if (reg >= PERF_REG_RISCV_GP && reg <= PERF_REG_RISCV_T6) {
+        return android::base::StringPrintf("r%d", reg - PERF_REG_ARM64_X0);
+      }
+      auto it = riscv64_reg_map.find(reg);
+      CHECK(it != riscv64_reg_map.end()) << "unknown reg " << reg;
+      return it->second;
+    }
     default:
       return "unknown";
   }
@@ -191,6 +209,9 @@ bool RegSet::GetSpRegValue(uint64_t* value) const {
     case ARCH_ARM64:
       regno = PERF_REG_ARM64_SP;
       break;
+    case ARCH_RISCV64:
+      regno = PERF_REG_RISCV_SP;
+      break;
     default:
       return false;
   }
@@ -210,6 +231,9 @@ bool RegSet::GetIpRegValue(uint64_t* value) const {
     case ARCH_ARM64:
       regno = PERF_REG_ARM64_PC;
       break;
+    case ARCH_RISCV64:
+      regno = PERF_REG_RISCV_PC;
+      break;
     default:
       return false;
   }
diff --git a/simpleperf/perf_regs.h b/simpleperf/perf_regs.h
index 86a12d0c..033895ea 100644
--- a/simpleperf/perf_regs.h
+++ b/simpleperf/perf_regs.h
@@ -22,11 +22,13 @@
 #include <uapi/asm-arm/asm/perf_regs.h>
 #define perf_event_arm_regs perf_event_arm64_regs
 #include <uapi/asm-arm64/asm/perf_regs.h>
+#include <uapi/asm-riscv/asm/perf_regs.h>
 #else
 #include <asm-x86/asm/perf_regs.h>
 #include <asm-arm/asm/perf_regs.h>
 #define perf_event_arm_regs perf_event_arm64_regs
 #include <asm-arm64/asm/perf_regs.h>
+#include <asm-riscv/asm/perf_regs.h>
 #endif
 
 #include <stdint.h>
@@ -40,6 +42,7 @@ enum ArchType {
   ARCH_X86_64,
   ARCH_ARM,
   ARCH_ARM64,
+  ARCH_RISCV64,
   ARCH_UNSUPPORTED,
 };
 
@@ -52,6 +55,8 @@ constexpr ArchType GetBuildArch() {
   return ARCH_ARM64;
 #elif defined(__arm__)
   return ARCH_ARM;
+#elif defined(__riscv) && __riscv_xlen == 64
+  return ARCH_RISCV64;
 #else
   return ARCH_UNSUPPORTED;
 #endif
diff --git a/simpleperf/runtest/Android.bp b/simpleperf/runtest/Android.bp
deleted file mode 100644
index 73bfa56c..00000000
--- a/simpleperf/runtest/Android.bp
+++ /dev/null
@@ -1,90 +0,0 @@
-//
-// Copyright (C) 2019 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-//
-
-cc_defaults {
-    name: "simpleperf_runtest_defaults",
-    host_supported: true,
-    cflags: [
-        "-Wall",
-        "-Wextra",
-        "-Werror",
-        "-Wunused",
-        "-O0",
-    ],
-    compile_multilib: "both",
-    multilib: {
-        lib64: {
-            suffix: "64",
-        },
-        lib32: {
-            suffix: "32",
-        },
-    },
-    shared_libs: ["libsimpleperf_inplace_sampler"],
-    target: {
-        darwin: {
-            enabled: false,
-        },
-    },
-}
-
-cc_binary {
-    name: "simpleperf_runtest_one_function",
-    defaults: ["simpleperf_runtest_defaults"],
-    srcs: ["one_function.cpp"],
-}
-
-cc_binary {
-    name: "simpleperf_runtest_two_functions",
-    defaults: ["simpleperf_runtest_defaults"],
-    srcs: ["two_functions.cpp"],
-}
-
-cc_binary {
-    name: "simpleperf_runtest_function_fork",
-    defaults: ["simpleperf_runtest_defaults"],
-    srcs: ["function_fork.cpp"],
-}
-
-cc_binary {
-    name: "simpleperf_runtest_function_pthread",
-    defaults: ["simpleperf_runtest_defaults"],
-    srcs: ["function_pthread.cpp"],
-}
-
-cc_binary {
-    name: "simpleperf_runtest_comm_change",
-    defaults: ["simpleperf_runtest_defaults"],
-    srcs: ["comm_change.cpp"],
-}
-
-cc_binary {
-    name: "simpleperf_runtest_function_recursive",
-    defaults: ["simpleperf_runtest_defaults"],
-    srcs: ["function_recursive.cpp"],
-}
-
-cc_binary {
-    name: "simpleperf_runtest_function_indirect_recursive",
-    defaults: ["simpleperf_runtest_defaults"],
-    srcs: ["function_indirect_recursive.cpp"],
-}
-
-cc_binary {
-    name: "simpleperf_runtest_run_and_sleep",
-    defaults: ["simpleperf_runtest_defaults"],
-    srcs: ["run_and_sleep.cpp"],
-}
diff --git a/simpleperf/scripts/inferno/Android.bp b/simpleperf/scripts/inferno/Android.bp
deleted file mode 100644
index f49dadd3..00000000
--- a/simpleperf/scripts/inferno/Android.bp
+++ /dev/null
@@ -1,32 +0,0 @@
-// Copyright (C) 2018 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-python_library_host {
-    name: "simpleperf-inferno",
-    srcs: [
-        "data_types.py",
-        "inferno.py",
-        "svg_renderer.py",
-    ],
-    data: [
-        "inferno.b64",
-        "script.js",
-    ],
-    version: {
-        py2: {
-            enabled: true,
-        },
-    },
-}
-
diff --git a/simpleperf/simpleperf_app_runner/Android.bp b/simpleperf/simpleperf_app_runner/Android.bp
deleted file mode 100644
index 389421b6..00000000
--- a/simpleperf/simpleperf_app_runner/Android.bp
+++ /dev/null
@@ -1,28 +0,0 @@
-//
-// Copyright (C) 2018 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-//
-
-cc_binary {
-    name: "simpleperf_app_runner",
-    srcs: [
-        "simpleperf_app_runner.cpp",
-    ],
-    shared_libs: [
-        "libbase",
-        "libselinux",
-        "libpackagelistparser",
-        "libminijail",
-    ],
-}
-- 
2.18.4

